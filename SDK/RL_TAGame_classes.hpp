#pragma once

// Rocket League (1.31) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

namespace SDK
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class TAGame._AITypes_TA
// 0x0000 (0x0060 - 0x0060)
class U_AITypes_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame._AITypes_TA");
		return ptr;
	}

};


// Class TAGame._ShopTypes_TA
// 0x0000 (0x0060 - 0x0060)
class U_ShopTypes_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame._ShopTypes_TA");
		return ptr;
	}

};


// Class TAGame._Types_TA
// 0x0048 (0x00A8 - 0x0060)
class U_Types_TA : public UObject
{
public:
	struct FScriptDelegate                             __AssetLoadedDelegate__Delegate;                          // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __ProductThumbnailRenderedDelegate__Delegate;             // 0x0078(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __MapImageLoadedDelegate__Delegate;                       // 0x0090(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0090(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame._Types_TA");
		return ptr;
	}


	int STATIC_GetTotalStatValue(const struct FStatValue& Stat);
	TEnumAsByte<EWordFilterUsage> STATIC_GetChatUsage(TEnumAsByte<EChatChannel> Channel);
	struct FLinearColor STATIC_GammaCorrectColor(const struct FLinearColor& InColor, float Gamma);
	struct FLoadoutTeamPaint STATIC_GetLoadoutPaint(const struct U_Types_TA_FLoadoutData& InLoadoutData);
	int STATIC_GetRandomColorID(class UCarColorSet_TA* Set);
	void STATIC_InitColorSet(class UCarColorSet_TA* Set, TArray<struct FGFxTeamColor>* OutColors);
	struct FString STATIC_ProductQualityToString(TEnumAsByte<EProductQuality> Quality);
	bool STATIC_TeamPaintsAreDifferent(struct U_Types_TA_FLoadoutData* A, struct U_Types_TA_FLoadoutData* B);
	bool STATIC_OnlineProductsAreDifferent();
	bool STATIC_ProductsAreDifferent(TArray<int>* A, TArray<int>* B);
	bool STATIC_LoadoutsAreDifferent(struct U_Types_TA_FLoadoutData* A, struct U_Types_TA_FLoadoutData* B);
	float STATIC_UpdateInputValue(const struct FInputRate& Rate, float DesiredValue, float OldValue, float DeltaTime);
	struct FClientLoadoutData STATIC_ConvertToClientLoadout(struct U_Types_TA_FLoadoutData* FromData);
	void MapImageLoadedDelegate(const struct FMapImageLoadResult& Result);
	void ProductThumbnailRenderedDelegate(const struct FProductThumbnailResult& Result);
	void AssetLoadedDelegate(const struct FAssetLoadResult& Result);
	struct FRandomWeight STATIC_PickWeightedRandom(TArray<struct FRandomWeight> Arr, int* Index);
	bool STATIC_VehicleInputHasChangedForKick(struct FVehicleInputs* NewInput, struct FVehicleInputs* OldInput);
};


// Class TAGame.AIController_TA
// 0x0250 (0x06F0 - 0x04A0)
class AAIController_TA : public AAIController
{
public:
	class ACar_TA*                                     Car;                                                      // 0x04A0(0x0008) (Transient)
	class AVehicle_TA*                                 Vehicle;                                                  // 0x04A8(0x0008) (Transient)
	class UBTComponent*                                BT;                                                       // 0x04B0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UBTProxyType*                                SelfProxyType;                                            // 0x04B8(0x0008) (Edit)
	class UBTProxyType*                                NoneProxyType;                                            // 0x04C0(0x0008) (Edit)
	class UBTProxyType*                                DebugProxyType;                                           // 0x04C8(0x0008) (Edit)
	class UBTProxyType*                                TeamCarsProxyType;                                        // 0x04D0(0x0008) (Edit)
	class UBTProxyType*                                EnemyCarsProxyType;                                       // 0x04D8(0x0008) (Edit)
	class UBTProxyType*                                OtherCarsProxyType;                                       // 0x04E0(0x0008) (Edit)
	class UBTProxyType*                                BoostPillsProxyType;                                      // 0x04E8(0x0008) (Edit)
	class UBTProxyType*                                SelectedProxyType;                                        // 0x04F0(0x0008) (Edit)
	class UBTTarget*                                   SelfTarget;                                               // 0x04F8(0x0008) (Edit)
	class UBTTarget*                                   NoneTarget;                                               // 0x0500(0x0008) (Edit)
	class UBTTarget*                                   IteratorTarget;                                           // 0x0508(0x0008) (Edit)
	class UBTTarget*                                   TeamCarsTarget;                                           // 0x0510(0x0008) (Edit)
	class UBTTarget*                                   SelectedTarget;                                           // 0x0518(0x0008) (Edit)
	class UBTTarget*                                   ContextTarget;                                            // 0x0520(0x0008) (Transient)
	class UBTNode*                                     DebugBTNode;                                              // 0x0528(0x0008) (Edit)
	class UBTLockCollection*                           Locks;                                                    // 0x0530(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FSkillRange                                 SkillSteerError;                                          // 0x0538(0x000C) (Edit)
	struct FSkillRange                                 SkillSteerSpeed;                                          // 0x0544(0x000C) (Edit)
	struct FSkillRange                                 SkillThrottleSpeed;                                       // 0x0550(0x000C) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x055C(0x0004) MISSED OFFSET
	class AGameEvent_TA*                               GameEvent;                                                // 0x0560(0x0008) (Transient)
	class AAIManager_TA*                               AIManager;                                                // 0x0568(0x0008) (Transient)
	struct FVehicleInputs                              Input;                                                    // 0x0570(0x0020) (Transient)
	struct FVector                                     ForwardDir;                                               // 0x0590(0x000C) (Transient)
	struct FRotator                                    ForwardRotation;                                          // 0x059C(0x000C) (Transient)
	struct FVector                                     GroundNormal;                                             // 0x05A8(0x000C) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x05B4(0x0004) MISSED OFFSET
	TArray<struct FCachedProxyData>                    CachedProxyDatas;                                         // 0x05B8(0x0010) (Transient, NeedCtorLink)
	TArray<struct FCachedTargetData>                   CachedTargetDatas;                                        // 0x05C8(0x0010) (Transient, NeedCtorLink)
	struct FMap_Mirror                                 TargetFilterMap;                                          // 0x05D8(0x0050) (Native, Transient)
	TArray<class UBTNode*>                             CachedTargetFilters;                                      // 0x0628(0x0010) (Transient, NeedCtorLink)
	struct FVector                                     DebugDriveDestination;                                    // 0x0638(0x000C) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0644(0x0004) MISSED OFFSET
	struct FCachedObstaclesData                        CachedObstacles;                                          // 0x0648(0x0028) (Native, Transient)
	TArray<class ACar_TA*>                             TeamCars;                                                 // 0x0670(0x0010) (Transient, NeedCtorLink)
	TArray<class ACar_TA*>                             EnemyCars;                                                // 0x0680(0x0010) (Transient, NeedCtorLink)
	TArray<class ACar_TA*>                             OtherCars;                                                // 0x0690(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bForceUpdateConditions : 1;                               // 0x06A0(0x0004) (Const, Transient)
	unsigned long                                      bCanUseBoost : 1;                                         // 0x06A0(0x0004) (Transient)
	unsigned long                                      bBeingReplaced : 1;                                       // 0x06A0(0x0004) (Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x06A4(0x0004) MISSED OFFSET
	class UGameShare_TA*                               GameShare;                                                // 0x06A8(0x0008) (Transient)
	class AActor*                                      SelectedActor;                                            // 0x06B0(0x0008) (Const, Transient)
	float                                              FieldScalar;                                              // 0x06B8(0x0004) (Transient)
	unsigned char                                      ForcedTeam;                                               // 0x06BC(0x0001)
	unsigned char                                      UnknownData04[0x3];                                       // 0x06BD(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __EventNamedEvent__Delegate;                              // 0x06C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x06BD(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSkillChanged__Delegate;                            // 0x06D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x06D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AIController_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void ActivatePickup();
	void SetSelectedActor(class AActor* NewActor);
	void AllTargets(class UBTTarget* Target, struct FAIProxyData* OutData);
	bool GetObstacleInRadius(const struct FVector& Destination, float Radius, struct FVector* HitLocation);
	bool GetObstacle(const struct FVector& Destination, struct FVector* HitLocation);
	bool GetProxyDataInternal(class UBTProxyType* Type, int Index, struct FAIProxyData* OutData);
	bool GetIndexedProxyData(class UBTProxyType* Type, int Index, struct FAIProxyData* OutData);
	bool GetProxyData(class UBTProxyType* Type, struct FAIProxyData* OutData);
	bool GetIndexedTargetData(class UBTTarget* Target, int Index, struct FAIProxyData* OutData);
	bool GetTargetData(class UBTTarget* Target, struct FAIProxyData* OutData);
	struct FAIProxyData CreateVehicleProxyData(class AVehicle_TA* InVehicle);
	struct FAIProxyData CreateProxyData(class AActor* A, float Radius);
	float GetDriveTime(float Distance);
	float GetDriveDistance(const struct FAIProxyData& Proxy);
	struct FVector FlattenOffset(const struct FVector& Offset, float* Height);
	struct FVector FlattenDestination(const struct FVector& Destination);
	struct FAIProxyData FlattenPhysics(struct FAIProxyData* ProxyData);
	float GetClosestTime2D(float MaxTime, struct FAIProxyData* A, struct FAIProxyData* B);
	bool WillImpact2D(struct FAIProxyData* A, struct FAIProxyData* B, float* CollideTime);
	void AdvancePhysics(float Time, struct FAIProxyData* PhysicsData);
	void PredictPhysics(float Time, float GroundZ, struct FAIProxyData* PhysicsData);
	void PredictLanding(float GroundZ, struct FAIProxyData* Data, float* Time);
	struct FVector AdvanceLocation(float Time, struct FVector* Loc, struct FVector* Vel, struct FVector* Accel);
	void DebugDriveTo(const struct FVector& Destination);
	void DoNothing();
	void AbortBT();
	void Destroyed();
	void OnCarSetup(class ACar_TA* InCar);
	void SetCar();
	void UnPossess();
	void Possess(class APawn* inPawn);
	void SetSkill(float NewSkill, float CanUseBoostThreshold);
	void ReInitBT();
	void HandleOtherCarDestroyed(class APawn_X* InCar);
	void HandleOtherCarDemolished(class ACar_TA* Victim, const struct FDemolishData& Data);
	void HandleOtherCarTeamChanged(class ACar_TA* InCar);
	void HandleCarSpawned(class AGameEvent_TA* InGameEvent, class ACar_TA* InCar);
	void Init(class AGameEvent_TA* InGameEvent);
	void PreBeginPlay();
	void EventSkillChanged(class AAIController_TA* AI);
	void EventNamedEvent(class AAIController_TA* AI, const struct FName& EventName, class AActor* Sender);
};


// Class TAGame.AIController_Soccar_TA
// 0x00B8 (0x07A8 - 0x06F0)
class AAIController_Soccar_TA : public AAIController_TA
{
public:
	class UBTProxyType*                                BallProxyType;                                            // 0x06F0(0x0008) (Edit)
	class UBTProxyType*                                BallLandingProxyType;                                     // 0x06F8(0x0008) (Edit)
	class UBTProxyType*                                BallTeamGoalLineProxyType;                                // 0x0700(0x0008) (Edit)
	class UBTProxyType*                                BallEnemyGoalLineProxyType;                               // 0x0708(0x0008) (Edit)
	class UBTProxyType*                                BallProjectedProxyType;                                   // 0x0710(0x0008) (Edit)
	class UBTProxyType*                                TeamGoalProxyType;                                        // 0x0718(0x0008) (Edit)
	class UBTProxyType*                                EnemyGoalProxyType;                                       // 0x0720(0x0008) (Edit)
	class UBTProxyType*                                MidFieldProxyType;                                        // 0x0728(0x0008) (Edit)
	class UBTTarget*                                   BallTarget;                                               // 0x0730(0x0008) (Edit)
	class UBTTarget*                                   TeamGoalTarget;                                           // 0x0738(0x0008) (Edit)
	class UBTTarget*                                   EnemyGoalTarget;                                          // 0x0740(0x0008) (Edit)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                               // 0x0748(0x0008) (Transient)
	class ABall_TA*                                    Ball;                                                     // 0x0750(0x0008) (Transient)
	struct FAICachedGoalInfo                           TeamGoalInfo;                                             // 0x0758(0x0018) (Transient, Component)
	struct FAICachedGoalInfo                           EnemyGoalInfo;                                            // 0x0770(0x0018) (Transient, Component)
	float                                              LastBallHitTime;                                          // 0x0788(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x078C(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventBallChanged__Delegate;                             // 0x0790(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x078C(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AIController_Soccar_TA");
		return ptr;
	}


	void DisablePickupAutoActivate();
	bool GetProxyDataInternal(class UBTProxyType* Type, int Index, struct FAIProxyData* OutData);
	void GetGoalProxy(class UBTProxyType* Type, const struct FAICachedGoalInfo& GoalInfo, struct FAIProxyData* OutData);
	void GetBallProxy(struct FAIProxyData* OutData);
	void SetBall(class ABall_TA* InBall);
	void HandleNewPickup(class ACar_TA* InCar, class ASpecialPickup_TA* NewPickup);
	void HandleHitBall(class ACar_TA* InCar, class ABall_TA* HitBall, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnCarSetup(class ACar_TA* InCar);
	void UpdateBall();
	void HandleActiveRoundChanged(class AGameEvent_Soccar_TA* G);
	void HandleBallsChanged(class AGameEvent_Soccar_TA* G, class ABall_TA* B);
	struct FAICachedGoalInfo GetCachedGoalInfo(int TeamNum);
	void Init(class AGameEvent_TA* InGameEvent);
	void EventBallChanged(class AAIController_Soccar_TA* SoccarAI);
};


// Class TAGame.AIManager_TA
// 0x0040 (0x02A8 - 0x0268)
class AAIManager_TA : public AActor
{
public:
	unsigned long                                      bFlushAILogEachLine : 1;                                  // 0x0268(0x0004) (Edit, Const, Config)
	unsigned long                                      bOutputLogToWindow : 1;                                   // 0x0268(0x0004) (Edit, Const, Config)
	unsigned long                                      bPauseForDirtyTrees : 1;                                  // 0x0268(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x026C(0x0004) MISSED OFFSET
	class UBTLockCollection*                           Locks;                                                    // 0x0270(0x0008) (Edit, Const, ExportObject, Component, EditInline)
	class AGameEvent_TA*                               GameEvent;                                                // 0x0278(0x0008) (Transient)
	TArray<class AAIController_TA*>                    Bots;                                                     // 0x0280(0x0010) (Transient, NeedCtorLink)
	TArray<struct FCachedNavMeshLocation>              CachedNavMeshLocations;                                   // 0x0290(0x0010) (Transient, NeedCtorLink)
	class AFileLog*                                    AILogFile;                                                // 0x02A0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AIManager_TA");
		return ptr;
	}


	void Destroyed();
	void RemoveBot(class AAIController_TA* Bot);
	void AddBot(class AAIController_TA* Bot);
	void Init(class AGameEvent_TA* InGameEvent);
	void AILog(class UObject* Sender, const struct FString& Message, bool bVerbose);
};


// Class TAGame.AnimNodeBlend_TA
// 0x000F (0x0154 - 0x0145)
class UAnimNodeBlend_TA : public UAnimNodeBlendBase
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x0145(0x0003) MISSED OFFSET
	float                                              BlendSpeed;                                               // 0x0148(0x0004) (Edit)
	float                                              Position;                                                 // 0x014C(0x0004) (Transient)
	float                                              DesiredPosition;                                          // 0x0150(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AnimNodeBlend_TA");
		return ptr;
	}

};


// Class TAGame.AnimNodeBlendBoost_TA
// 0x0004 (0x015C - 0x0158)
class UAnimNodeBlendBoost_TA : public UAnimNodeBlend
{
public:
	float                                              BlendTime;                                                // 0x0158(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AnimNodeBlendBoost_TA");
		return ptr;
	}

};


// Class TAGame.AnimNodeBlendSpeed_TA
// 0x000C (0x01B0 - 0x01A4)
class UAnimNodeBlendSpeed_TA : public UAnimNodeAimOffset
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x01A4(0x0004) MISSED OFFSET
	float                                              BlendRate;                                                // 0x01A8(0x0004) (Edit)
	float                                              MaxSpeed;                                                 // 0x01AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AnimNodeBlendSpeed_TA");
		return ptr;
	}

};


// Class TAGame.ArenaReflectionsManager_TA
// 0x0064 (0x00C4 - 0x0060)
class UArenaReflectionsManager_TA : public UObject
{
public:
	class AGameEvent_TA*                               SoccarGame;                                               // 0x0060(0x0008)
	TArray<struct FSlapbackActorSetup>                 SlapbackSetups;                                           // 0x0068(0x0010) (Edit, NeedCtorLink)
	TArray<struct FSlapbackActorSetup>                 ArenaReverbSetups;                                        // 0x0078(0x0010) (Edit, NeedCtorLink)
	TArray<class AAkBusActor*>                         SlapBackActors;                                           // 0x0088(0x0010) (NeedCtorLink)
	TArray<class AAkBusActor*>                         ArenaReverbEmitters;                                      // 0x0098(0x0010) (NeedCtorLink)
	struct FName                                       ImpactIntensityKey;                                       // 0x00A8(0x0008)
	struct FName                                       SlapbackDistanceKey;                                      // 0x00B0(0x0008)
	struct FName                                       ReverbBalanceKey;                                         // 0x00B8(0x0008)
	float                                              BallListenerOffset;                                       // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ArenaReflectionsManager_TA");
		return ptr;
	}


	struct FVector GetPrimaryPlayerPosition();
	void SetReverbBalance(float ReverbBalance);
	void SetArenaReverbSettings(const struct FName& ArenaReverbShareset);
	void SpawnBusActors(struct FVector* FieldSize);
	float GetSlapbackDistance(struct FVector* ListenerLocation, struct FVector* ImpactLocation, struct FVector* BusActorLocation);
	void UpdateActorParams(float ImpactIntensity, struct FVector* ImpactLocation);
};


// Class TAGame.ArenaSoundSettings_TA
// 0x0100 (0x0160 - 0x0060)
class UArenaSoundSettings_TA : public UObject
{
public:
	class UAkSoundCue*                                 InGameMusicCue;                                           // 0x0060(0x0008) (Edit)
	unsigned long                                      bDynamicMusic : 1;                                        // 0x0068(0x0004) (Edit)
	unsigned long                                      UpdateStatSounds : 1;                                     // 0x0068(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	class UAkSoundCue*                                 GoalScoreSound;                                           // 0x0070(0x0008) (Edit)
	class UAkSoundCue*                                 GameStartStinger;                                         // 0x0078(0x0008) (Edit)
	class UAkSoundCue*                                 GoalScoreStinger;                                         // 0x0080(0x0008) (Edit)
	class UAkSoundCue*                                 EpicSaveStinger;                                          // 0x0088(0x0008) (Edit)
	class UAkSoundCue*                                 OvertimeStinger;                                          // 0x0090(0x0008) (Edit)
	class UAkSoundCue*                                 WinStinger;                                               // 0x0098(0x0008) (Edit)
	class UAkSoundCue*                                 LoseStinger;                                              // 0x00A0(0x0008) (Edit)
	float                                              GoalScoreStingerDelay;                                    // 0x00A8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	class UAkSoundCue*                                 Win;                                                      // 0x00B0(0x0008) (Edit)
	class UAkSoundCue*                                 Lose;                                                     // 0x00B8(0x0008) (Edit)
	class UAkSoundCue*                                 CountdownStart;                                           // 0x00C0(0x0008) (Edit)
	class UAkSoundCue*                                 CountdownEnd;                                             // 0x00C8(0x0008) (Edit)
	class UAkSoundCue*                                 OneMinRemaining;                                          // 0x00D0(0x0008) (Edit)
	class UAkSoundCue*                                 ThirtySecondsRemaining;                                   // 0x00D8(0x0008) (Edit)
	class UAkSoundCue*                                 OvertimeStart;                                            // 0x00E0(0x0008) (Edit)
	TArray<struct FArenaStatSound>                     StatSounds;                                               // 0x00E8(0x0010) (Edit, EditFixedSize, NeedCtorLink)
	TArray<class UAkSoundCue*>                         CountDownSoundList;                                       // 0x00F8(0x0010) (Edit, NeedCtorLink)
	TArray<class UAkSoundCue*>                         RoundCountDownSoundList;                                  // 0x0108(0x0010) (Edit, NeedCtorLink)
	struct FAkEnvironment                              GoalStingerEnvironment;                                   // 0x0118(0x0020) (Edit, NeedCtorLink)
	struct FAkEnvironment                              LevelDefaultEnvironment;                                  // 0x0138(0x0020) (Edit, NeedCtorLink)
	struct FName                                       ArenaReverbShareset;                                      // 0x0158(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ArenaSoundSettings_TA");
		return ptr;
	}

};


// Class TAGame.AttachmentBehavior_TA
// 0x0014 (0x0074 - 0x0060)
class UAttachmentBehavior_TA : public UObject
{
public:
	class UProductAsset_TA*                            Asset;                                                    // 0x0060(0x0008) (Transient)
	class UActorComponent*                             Component;                                                // 0x0068(0x0008) (ExportObject, Transient, Component, EditInline)
	unsigned long                                      bPreview : 1;                                             // 0x0070(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AttachmentBehavior_TA");
		return ptr;
	}


	class UCarMeshComponent_TA* GetMesh();
	void StopBehavior();
	void SetPreviewing(bool bPreviewing);
	void OnInit();
	void Init(class UProductAsset_TA* InAsset, class UActorComponent* InComponent);
};


// Class TAGame.AttachmentBehavior_Steering_TA
// 0x0044 (0x00B8 - 0x0074)
class UAttachmentBehavior_Steering_TA : public UAttachmentBehavior_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	struct FName                                       BoneControlName;                                          // 0x0078(0x0008) (Edit)
	class UAnimTree*                                   AnimTree;                                                 // 0x0080(0x0008) (Edit)
	struct FInterpCurveFloat                           SteeringToDegreesCurve;                                   // 0x0088(0x0018) (Edit, NeedCtorLink)
	class USkeletalMeshComponent*                      SkelMeshComponent;                                        // 0x00A0(0x0008) (ExportObject, Transient, Component, EditInline)
	class USkelControlSingleBone*                      BoneController;                                           // 0x00A8(0x0008) (Transient)
	class AVehicle_TA*                                 Vehicle;                                                  // 0x00B0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AttachmentBehavior_Steering_TA");
		return ptr;
	}


	void HandleAttached(class UCarMeshComponent_TA* Mesh);
	void OnInit();
};


// Class TAGame.RimSpinner_TA
// 0x0050 (0x00C4 - 0x0074)
class URimSpinner_TA : public UAttachmentBehavior_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	float                                              AccelRate;                                                // 0x0078(0x0004) (Edit)
	float                                              DecelRate;                                                // 0x007C(0x0004) (Edit)
	float                                              MaxSpeed;                                                 // 0x0080(0x0004) (Edit)
	struct FName                                       BoneControlName;                                          // 0x0084(0x0008) (Edit)
	float                                              SpinScale;                                                // 0x008C(0x0004) (Transient)
	int                                                WheelIndex;                                               // 0x0090(0x0004) (Transient)
	float                                              CurrentSpeed;                                             // 0x0094(0x0004) (Transient)
	int                                                CurrentRotation;                                          // 0x0098(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	class USkeletalMeshComponent*                      SkelMeshComponent;                                        // 0x00A0(0x0008) (ExportObject, Transient, Component, EditInline)
	class USkelControlSingleBone*                      SpinBoneController;                                       // 0x00A8(0x0008) (Transient)
	class USkelControlSingleBone*                      WheelBoneController;                                      // 0x00B0(0x0008) (Transient)
	class UWheel_TA*                                   Wheel;                                                    // 0x00B8(0x0008) (ExportObject, Transient, Component, EditInline)
	unsigned long                                      bIsMainMenu : 1;                                          // 0x00C0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RimSpinner_TA");
		return ptr;
	}


	void StopBehavior();
	void HandleAttached(class UCarMeshComponent_TA* Mesh);
	void OnInit();
};


// Class TAGame.WheelShimmy_TA
// 0x0044 (0x00B8 - 0x0074)
class UWheelShimmy_TA : public UAttachmentBehavior_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	float                                              AccumDistance;                                            // 0x0078(0x0004) (Edit)
	float                                              Wave1Freq;                                                // 0x007C(0x0004) (Edit)
	float                                              Wave2Freq;                                                // 0x0080(0x0004) (Edit)
	float                                              OnOffBias;                                                // 0x0084(0x0004) (Edit)
	float                                              HighFreq;                                                 // 0x0088(0x0004) (Edit)
	float                                              ShimmyMag;                                                // 0x008C(0x0004) (Edit, EditInline)
	TArray<int>                                        AffectedWheels;                                           // 0x0090(0x0010) (Edit, NeedCtorLink)
	class USkeletalMeshComponent*                      SkelMeshComponent;                                        // 0x00A0(0x0008) (ExportObject, Transient, Component, EditInline)
	class UWheel_TA*                                   Wheel;                                                    // 0x00A8(0x0008) (ExportObject, Transient, Component, EditInline)
	class USkelControlSingleBone*                      RollControl;                                              // 0x00B0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.WheelShimmy_TA");
		return ptr;
	}


	void OnInit();
};


// Class TAGame.PlayerControllerBase_TA
// 0x00E8 (0x0948 - 0x0860)
class APlayerControllerBase_TA : public APlayerController_X
{
public:
	float                                              SpectatorCameraAccel;                                     // 0x0860(0x0004) (Edit)
	struct FVector                                     SpectatorVelXY;                                           // 0x0864(0x000C) (Transient)
	float                                              SpectatorVelZ;                                            // 0x0870(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0874(0x0004) MISSED OFFSET
	class UPostProcessManager_TA*                      PostProcessManagerArchetype;                              // 0x0878(0x0008) (Edit)
	class UPostProcessManager_TA*                      PostProcessManager;                                       // 0x0880(0x0008) (Transient)
	int                                                SpectatorPitchDir;                                        // 0x0888(0x0004) (Transient)
	int                                                SwivelPitchDir;                                           // 0x088C(0x0004) (Transient)
	class ASpectatorVolume_TA*                         SpectatorVolume;                                          // 0x0890(0x0008) (Transient)
	float                                              FullRotationScalar;                                       // 0x0898(0x0004) (Const)
	float                                              FullRotationMax;                                          // 0x089C(0x0004) (Const)
	class UVanitySetManager_TA*                        VanityMgr;                                                // 0x08A0(0x0008)
	class UPlayerBanner_TA*                            PlayerBanner;                                             // 0x08A8(0x0008) (ExportObject, Component, EditInline)
	class UPlayerAvatar_TA*                            PlayerAvatar;                                             // 0x08B0(0x0008) (ExportObject, Component, EditInline)
	class UPlayerAvatarBorder_TA*                      PlayerBorder;                                             // 0x08B8(0x0008) (ExportObject, Component, EditInline)
	class UAudioSpectatorMixComponent_TA*              AudioSpectatorMixComponent;                               // 0x08C0(0x0008) (ExportObject, Component, EditInline)
	class UAudioFieldSideComponent_TA*                 AudioFieldSideComponent;                                  // 0x08C8(0x0008) (ExportObject, Component, EditInline)
	struct FScriptDelegate                             __EventLoadingUnfairMatch__Delegate;                      // 0x08D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x08D0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRemoveSSPlayer__Delegate;                          // 0x08E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x08E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventReceivedCurrencyDrop__Delegate;                    // 0x0900(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0900(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __PlayerBanner__ChangeNotify;                             // 0x0918(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0918(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __PlayerBorder__ChangeNotify;                             // 0x0930(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0930(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerControllerBase_TA");
		return ptr;
	}


	void ResetView();
	void QueryCrosshair();
	class AAIController_TA* GetLockedDebugAI();
	struct FVector GetAimLocation();
	void ContextualDebugAction();
	void __PlayerBorder__ChangeNotifyFunc();
	void __PlayerBanner__ChangeNotifyFunc();
	struct FVector UpdateSpectatorLocation(const struct FVector& CurrentLocation, float DeltaTime);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void ReceiveCurrencyDrop(const struct FCurrency& Drop);
	bool FindSpectatorVolumeLocation(const struct FVector& CurrentLocation, const struct FVector& NextLocation, struct FVector* NewLocation);
	struct FVector ClampSpectatorLocation(const struct FVector& NewLocation);
	void SetWorldSelectionUpdate(bool bAllowUpdate);
	void SetWorldSelectionAllowed(bool bAllowSelection);
	void SetPlayerInput(class UClass* NewInputClass);
	void StartLanMatch(struct U_Types_X_FCustomMatchSettings* Settings);
	struct FString STATIC_BuildMatchOptionsLan(struct U_Types_X_FCustomMatchSettings* Settings, TArray<struct FString>* ArrayInitializer_DDD84EBD4D646B4108E64AB979460CBB);
	void StartSplitscreenMatch(struct U_Types_X_FCustomMatchSettings* Settings, TArray<struct FString>* ArrayInitializer_29D3D6AF4CEA1D6C35C5439F74E9A999);
	void StartMatch(const struct FName& PlaylistName, const struct FString& URL);
	struct FString STATIC_BuildMatchOptions(class UGameSettingPlaylist_X* Playlist, TArray<struct FString> Options, struct U_Types_X_FCustomMatchSettings* Settings, struct FString* ReduceLocal_38717BC4474EF49200DCC3A723B5A5D2);
	struct FString STATIC_JoinOption(const struct FString& FullString, const struct FString& Value);
	struct FName STATIC_GetValidMapName(const struct FName& InName, int GameMode);
	void ClientRemoveSSPlayer(const struct FString& Reason, const struct FString& Title);
	void RemoveSSPlayer(const struct FString& Reason, const struct FString& Title);
	void OnGameInviteAccepted(const struct FString& ErrorString, struct FOnlineGameSearchResult* InviteResult);
	void UpdateSpectatorViewRotation(float DeltaTime);
	struct FRotator GetSpectatorViewRotationDeltaRotation(float DeltaTime);
	void EraseChatByType(TEnumAsByte<EChatChannel> ChatChannel, const struct FUniqueNetId& PersonaId);
	bool PartyLobbyMessage_TA(const struct FUniqueNetId& InSenderId, const struct FString& PlayerName, const struct FString& Message, bool bIsLocalPlayer);
	void Say_TA(const struct FString& Message, TEnumAsByte<EChatChannel> ChatChannel, const struct FUniqueNetId& Recipient, bool bPreset);
	void ServerSay_TA(const struct FString& Message, TEnumAsByte<EChatChannel> ChatChannel, bool bPreset);
	void RepopulateChatHistory(TEnumAsByte<EChatChannel> ChatChannel, const struct FUniqueNetId& PersonaId);
	bool InviteHasEnoughSpace(class UOnlineGameSettings* InviteSettings);
	void HandleReadBorder(TArray<struct FUniqueNetId> PlayerIDs);
	void HandleReadAvatar(TArray<struct FUniqueNetId> PlayerIDs);
	void HandleReadBanner(TArray<struct FUniqueNetId> PlayerIDs);
	void UpdateVanities(TArray<struct FUniqueNetId>* ArrayInitializer_2F97FE2B46EE0CE946679DBE3A1DCEF9);
	void InitVanityUI(class UProfile_TA* Profile, class UGFxShell_X* Shell, TArray<struct FUniqueNetId>* ArrayInitializer_9B25716447A12A02EF3823978DF7C723);
	void InitFromProfile(class UProfile_TA* Profile);
	void HandleLoginStatusChanged(class UOnlinePlayer_X* InPlayer);
	class UObject* GetProfileObject(class UClass* saveClass);
	class UObject* GetSaveObject(class UClass* saveClass);
	void OnExternalUIChanged(bool bIsOpening);
	class USaveData_TA* GetSaveData();
	class UProfile_TA* GetProfile();
	class ULocalPlayer_TA* GetLocalPlayer();
	void UpdateForceFeedback();
	void HandleForceFeedback(class UForceFeedbackManager* _);
	void HandleProfileControlsSave(class UProfileControlsSave_TA* ControlsSave);
	void UpdateAAType();
	void HandlePostProcessManager(class UPostProcessManager_TA* PPM);
	void HandleVideoSettingsSavePC(class UVideoSettingsSavePC_TA* VideoSavePC);
	void UpdateCameraShake();
	void HandleCamera(class ACamera_X* Camera);
	void HandleCameraSave(class UProfileCameraSave_TA* CameraSettings);
	void OnReceivedPlayerAndPRI();
	void Destroyed();
	void ReceivedPlayer();
	void PostBeginPlay();
	void EventReceivedCurrencyDrop(class APlayerControllerBase_TA* PC, const struct FCurrency& Drop);
	void EventRemoveSSPlayer(class APlayerControllerBase_TA* PC, const struct FString& Reason);
	void EventLoadingUnfairMatch(class APlayerControllerBase_TA* PlayerControllerBase);
};


// Class TAGame._TourTypes_TA
// 0x0020 (0x0080 - 0x0060)
class U_TourTypes_TA : public UObject
{
public:
	TArray<struct FName>                               DisabledMutatorCategories;                                // 0x0060(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               DisabledMutatorSettings;                                  // 0x0070(0x0010) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame._TourTypes_TA");
		return ptr;
	}


	TArray<struct FName> STATIC____TourTypes_TA__StripDisabledGameTags_8C0B763C4B9FD86D1F2AFB993E44A546(class UGameSettingCategory_X* GSC, TArray<struct FName>* MapLocal_11DC88F14EA9D34E96AFD09D67F40F1F);
	struct FName STATIC____TourTypes_TA__StripDisabledGameTags_3116DF214E9F6A8685DD47B1A0174819(class UGameSetting_X* GS);
	bool STATIC____TourTypes_TA__StripDisabledGameTags_15A3DB604E0D0FE95E1C68A29462EDAA(class UGameSettingCategory_X* GSC);
	struct FName STATIC____TourTypes_TA__StripDisabledGameTags_5F5DE7614C6AA5E08586A6B28BEAEA5E(const struct FString& SettingName);
	struct FString STATIC_StripDisabledGameTags(const struct FString& GameTags, TArray<class UGameSettingCategory_X*>* GameSettingCategories, TArray<struct FString>* ArrayResultLocal_AC6C609F4A6038FA68A9C68898C7AD85, TArray<struct FName>* MapLocal_B291770A4D6E1A1ACFD0C888442CAD63, TArray<class UGameSettingCategory_X*>* FilterLocal_C1991551412680062F270284381CFB1A, TArray<struct FName>* MapManyLocal_5E30D56E4CDC2EA5CF39EFB260A4B561, TArray<struct FName>* ConcatLocal_3B4048A0421BB548DA1E80A45D747F7E, TArray<struct FName>* DifferenceLocal_E846F34F4C411092F0EE3E823ACC787D);
};


// Class TAGame.PlayerController_TA
// 0x02E0 (0x0C28 - 0x0948)
class APlayerController_TA : public APlayerControllerBase_TA
{
public:
	class ACar_TA*                                     Car;                                                      // 0x0948(0x0008) (Transient)
	class APRI_TA*                                     PRI;                                                      // 0x0950(0x0008) (Transient)
	struct FVehicleInputs                              VehicleInput;                                             // 0x0958(0x0020) (Transient)
	unsigned long                                      bReceivedServerShutdownMessage : 1;                       // 0x0978(0x0004) (Transient)
	unsigned long                                      bUseDebugInputs : 1;                                      // 0x0978(0x0004)
	unsigned long                                      bJumpPressed : 1;                                         // 0x0978(0x0004)
	unsigned long                                      bBoostPressed : 1;                                        // 0x0978(0x0004)
	unsigned long                                      bHandbrakePressed : 1;                                    // 0x0978(0x0004)
	unsigned long                                      bHasPitchedBack : 1;                                      // 0x0978(0x0004)
	unsigned long                                      bAllowAsymmetricalMute : 1;                               // 0x0978(0x0004) (Config)
	unsigned long                                      bResetCamera : 1;                                         // 0x0978(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x097C(0x0004) MISSED OFFSET
	struct FString                                     LoginURL;                                                 // 0x0980(0x0010) (Transient, NeedCtorLink)
	TEnumAsByte<EVoiceFilter>                          VoiceFilter;                                              // 0x0990(0x0001) (Transient)
	TEnumAsByte<EVoiceFilter>                          ChatFilter;                                               // 0x0991(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0992(0x0002) MISSED OFFSET
	struct FChatSpamData                               ChatSpam;                                                 // 0x0994(0x0018) (Edit)
	struct FChatSpamData                               ChatSpamHarsh;                                            // 0x09AC(0x0018)
	unsigned char                                      UnknownData02[0x4];                                       // 0x09C4(0x0004) MISSED OFFSET
	class ULightBarComponent_TA*                       LightBar;                                                 // 0x09C8(0x0008) (ExportObject, Component, EditInline)
	class UGameMusicComponent_TA*                      MusicComponent;                                           // 0x09D0(0x0008) (ExportObject, Component, EditInline)
	class UAudioPriorityComponent_TA*                  AudioPriorityComponent;                                   // 0x09D8(0x0008) (ExportObject, Component, EditInline)
	class UAudioMixStateComponent_TA*                  AudioMixStateComponent;                                   // 0x09E0(0x0008) (ExportObject, Component, EditInline)
	class APRI_TA*                                     FollowTarget;                                             // 0x09E8(0x0008) (Transient)
	class ACamera*                                     SpectatorCameraArchetype;                                 // 0x09F0(0x0008) (Edit)
	class AHUD*                                        SpectatorHUDArchetype;                                    // 0x09F8(0x0008) (Edit)
	class UClass*                                      SpectatorInputClass;                                      // 0x0A00(0x0008) (Edit)
	class ACamera*                                     EditorCameraArchetype;                                    // 0x0A08(0x0008) (Edit)
	class AHUD*                                        EditorHUDArchetype;                                       // 0x0A10(0x0008) (Edit)
	class UClass*                                      EditorInputClass;                                         // 0x0A18(0x0008) (Edit)
	TScriptInterface<class UInterface_GameEditor_TA>   MoveActor;                                                // 0x0A20(0x0010)
	struct FVector                                     MoveActorGrabOffset;                                      // 0x0A30(0x000C)
	float                                              MoveActorGrabIncrement;                                   // 0x0A3C(0x0004)
	float                                              MinMoveActorGrabDistance;                                 // 0x0A40(0x0004)
	float                                              MouseIncrementSpeed;                                      // 0x0A44(0x0004)
	float                                              BallVelocityIncrementAmount;                              // 0x0A48(0x0004)
	int                                                BallVelocityIncrementFireCount;                           // 0x0A4C(0x0004)
	float                                              BallVelocityIncrementFireCountMax;                        // 0x0A50(0x0004)
	float                                              BallVelocityIncrementSpeedDefault;                        // 0x0A54(0x0004)
	float                                              BallVelocityIncrementSpeedMax;                            // 0x0A58(0x0004)
	float                                              CrosshairTraceDistance;                                   // 0x0A5C(0x0004)
	class AActor*                                      TracedCrosshairActor;                                     // 0x0A60(0x0008)
	TArray<struct FCrosshairExtentInfo>                CrosshairTraceExtents;                                    // 0x0A68(0x0010) (NeedCtorLink)
	TScriptInterface<class UInterface_GameEditor_TA>   RotatedActor;                                             // 0x0A78(0x0010)
	struct FVector                                     RotateActorCameraLocationOffset;                          // 0x0A88(0x000C)
	struct FVector                                     RotateActorCameraRotationOffset;                          // 0x0A94(0x000C)
	int                                                RotateActorCameraSide;                                    // 0x0AA0(0x0004)
	float                                              DesiredCameraSide;                                        // 0x0AA4(0x0004)
	float                                              PawnTypeChangedTime;                                      // 0x0AA8(0x0004)
	int                                                SelectedSpawnArchetype;                                   // 0x0AAC(0x0004)
	struct FVehicleInputs                              DebugInputs;                                              // 0x0AB0(0x0020) (Transient)
	int                                                MinClientInputRate;                                       // 0x0AD0(0x0004) (Edit, Config)
	int                                                MedianClientInputRate;                                    // 0x0AD4(0x0004) (Edit, Config)
	int                                                MaxClientInputRate;                                       // 0x0AD8(0x0004) (Edit, Config)
	int                                                ConfiguredClientInputRate;                                // 0x0ADC(0x0004) (Edit, Config)
	float                                              TimeSinceLastMovePacket;                                  // 0x0AE0(0x0004) (Transient)
	float                                              TimeLastReplicatedMovePacket;                             // 0x0AE4(0x0004) (Transient)
	class UPlatformMetrics_TA*                         PlatformMetrics;                                          // 0x0AE8(0x0008) (ExportObject, Transient, Component, EditInline)
	float                                              MouseXDeadZone;                                           // 0x0AF0(0x0004)
	float                                              MouseYDeadZone;                                           // 0x0AF4(0x0004)
	float                                              MouseXDeadZoneAir;                                        // 0x0AF8(0x0004)
	float                                              MouseYDeadZoneAir;                                        // 0x0AFC(0x0004)
	struct FVehicleInputs                              LastInputs;                                               // 0x0B00(0x0020)
	class APRI_TA*                                     PendingViewPRI;                                           // 0x0B20(0x0008) (Transient)
	class UClientConnectionTracker_TA*                 ConnectionTracker;                                        // 0x0B28(0x0008) (ExportObject, Transient, Component, EditInline)
	class UProfileCameraSave_TA*                       CameraSave;                                               // 0x0B30(0x0008) (Transient)
	float                                              LastInputPitchUp;                                         // 0x0B38(0x0004) (Transient)
	float                                              LastInputPitchDown;                                       // 0x0B3C(0x0004) (Transient)
	float                                              LastInputYawLeft;                                         // 0x0B40(0x0004) (Transient)
	float                                              LastInputYawRight;                                        // 0x0B44(0x0004) (Transient)
	float                                              LastInputPitch;                                           // 0x0B48(0x0004) (Transient)
	float                                              LastInputYaw;                                             // 0x0B4C(0x0004) (Transient)
	float                                              MouseInputMax;                                            // 0x0B50(0x0004) (Const)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0B54(0x0004) MISSED OFFSET
	class AControllerEventInfo_TA*                     ControllerEventInfoArchetype;                             // 0x0B58(0x0008) (Edit)
	class AControllerEventInfo_TA*                     ControllerEventInfo;                                      // 0x0B60(0x0008) (Edit)
	class UEngineShare_TA*                             EngineShare;                                              // 0x0B68(0x0008)
	class UProfileAimAssistSave_TA*                    AimAssistSave;                                            // 0x0B70(0x0008)
	class ANetworkInputBuffer_TA*                      InputBuffer;                                              // 0x0B78(0x0008) (Net)
	struct FScriptDelegate                             __EventLaunchAccountPicker__Delegate;                     // 0x0B80(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0B80(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventLaunchControllerApplet__Delegate;                  // 0x0B98(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0B98(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventMuteChanged__Delegate;                             // 0x0BB0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0BB0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTrainingEditorActorModified__Delegate;             // 0x0BC8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0BC8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSelectBallCamTarget__Delegate;                     // 0x0BE0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0BE0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventConnectionTrackerAttached__Delegate;               // 0x0BF8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0BF8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventChatMessage__Delegate;                             // 0x0C10(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0C10(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerController_TA");
		return ptr;
	}


	void HandleCarSet(class APRI_TA* InPRI);
	void SpawnSelectedArchetype();
	bool RemoveActor();
	void ToggleGrabActor();
	void ToggleRotateActor();
	void EditorReleaseActor();
	void EditorCycleActor();
	void DuplicateShot();
	void StopEditing();
	void EditorIncreasePower();
	void EditorDecreasePower();
	void EditorIncreasePowerToggleInterim();
	void EditorDecreasePowerToggleInterim();
	void EditorIncreasePowerToggle(bool bToggle);
	void EditorDecreasePowerToggle(bool bToggle);
	void ModifyEditorPower(int Direction);
	void ToggleCameraPosition();
	void EditorUndo();
	void EditorRedo();
	void EditorIncreaseRoundTime();
	void EditorDecreaseRoundTime();
	void EditorNextRound();
	void EditorPrevRound();
	void UpdateCrosshair();
	void __PlayerController_TA__PostBeginPlay_7FB7747C47621114303C76804365394D(class UObject* Obj);
	void __PlayerController_TA__ReceivedPlayer_FA690C414AA39B414E8B67831AF26F3B(class UBanSync_TA* BanSync);
	int __PlayerController_TA__ClientNotifyServerShutdown_EB9A97B344CEB1A3E97B83B7A6D9EA22(class ATeam_Soccar_TA* T);
	void NetClientInputRate(int Rate);
	void ClientStayAsPartyVoteBegin();
	void ServerUpdateCustomMatchSettings(const struct U_Types_X_FCustomMatchSettings& Settings);
	void ClientUpdateTournamentMatch(const struct FTourMatch& Match, int GameNum, const struct FTourMatchGame& GameData);
	void ServerCreateMatchBroadcast(class AGameEvent_Soccar_TA* GameEvent);
	void ClampMoveActorGrabOffset();
	void RevertToDefaultCameraHUDInput();
	void SetCameraHUDInput(class ACamera* InCameraArchetype, class AHUD* InHUDArchetype, class UClass* InPlayerInputClass);
	void SwitchToEditPawn();
	void ToggleEditorRound();
	void ToggleBetweenCarAndEditPawn();
	void Interact();
	void StopMovement(bool bOnlyIfNoAccel);
	struct FVector GetRotateActorCameraOffset(float DeltaTime, bool bSnap);
	void RestoreEditorPawnOrientation();
	void BackupEditorPawnOrientation();
	bool EditorPawnDeSerialize(class UJsonObject* Data);
	struct FString EditorPawnSerialize();
	void UpdateRotatedActorOrientation(float DeltaTime);
	void OnOpenPauseMenu();
	void ResetMouseCenter();
	float CalculateMouseAxis(float Center, float CurrentLocation, float Deadzone, float MaxDist);
	struct FVector CalculateMouseAccelInput(float XDeadZone, float YDeadZone, float XMaxDist, float YMaxDist, struct FVector* CurrentLocation);
	void ShowControllerApplet();
	void ShowAccountPicker();
	void QueSaveReplay();
	void SetFollowTarget(class APRI_TA* InTarget);
	void FollowPlayer(class APRI_TA* InPlayer);
	void ClientSkillUpdated(const struct FPlayerSkillRating& Rating, int Playlist);
	void ServerReportPlayer(unsigned char ReasonID, const struct FUniqueNetId& PlayerID, const struct FString& PlayerName, struct FReportedPlayerInfo* StructInitializer_BDCAC9004BDF655C14327CA6E9E39235, struct FReportPlayerData* StructInitializer_4FFCB8324220A67344867894FD376598, struct FReportPlayerData* StructInitializer_469480694071A98CBE0F309FCD1994DD);
	void HandleLocalStatEvent(class APRI_TA* InPRI, class UStatEvent_TA* StatEvent, int Count);
	void ClientSplitscreenJoinResponse(const struct FUniqueNetId& PlayerID, bool bAllow, const struct FString& Error);
	void ServerRequestSplitscreenJoin(const struct FUniqueNetId& PlayerID, const struct FString& PlayerName);
	bool PreClientTravel(const struct FString& PendingURL, TEnumAsByte<ETravelType> TravelType, bool bIsSeamlessTravel);
	void NotifyGoalScored(int ScoredOnTeam);
	void Destroyed();
	void SetGameHUDArchetype(class AHUD* InArchetype);
	bool ShouldBeMuted(class APlayerController_TA* Other);
	bool IsCommunicationFiltered(TEnumAsByte<EVoiceFilter> Filter, class APlayerController_TA* Other, bool bPreset);
	void RefreshMutedPlayers(bool bForceRefresh);
	void ServerUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ServerMutePlayer(const struct FUniqueNetId& PlayerNetId);
	void GameplayUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void GameplayMutePlayer(const struct FUniqueNetId& PlayerNetId);
	struct FString GetDebugMutePlayerName(const struct FUniqueNetId& PlayerNetId);
	void ServerSetChatFilter(TEnumAsByte<EVoiceFilter> InVoiceFilter);
	void ServerSetVoiceFilter(TEnumAsByte<EVoiceFilter> InVoiceFilter);
	bool IsExplictlyMuted(const struct FUniqueNetId& PlayerNetId);
	void DebugAI();
	void SendPendingRPCs();
	bool ApplyChatBanFilter(bool bQuickChatMessage);
	bool ApplyChatSpamFilter(struct FChatSpamData* OutChatSpam);
	bool CanSendMessage(bool bQuickChatMessage);
	void ClientNotifyChatBannedPermanently();
	void ClientNotifyChatBanned();
	void ClientNotifyChatDisabled(float Time);
	void ChatMessage_TA(class APlayerReplicationInfo* InPRI, const struct FString& Message, TEnumAsByte<EChatChannel> ChatChannel, bool bPreset);
	void ServerSayInternal_TA(const struct FString& Message, TEnumAsByte<EChatChannel> ChatChannel, bool bPreset);
	void ServerSay_TA(const struct FString& Message, TEnumAsByte<EChatChannel> ChatChannel, bool bPreset);
	void Say_TA(const struct FString& Message, TEnumAsByte<EChatChannel> ChatChannel, const struct FUniqueNetId& Recipient, bool bPreset);
	bool CanChatWith(class APlayerController_TA* Other, bool bPreset);
	bool AllowTextMessage(const struct FString& msg);
	void PushToTalkEnd();
	void PushToTalk();
	void HandleJoinGameMigrationCompleted(bool bSuccess, const struct FString& FailReason);
	void ClientNotifyServerShutdown(TArray<class ATeam_Soccar_TA*>* OfTypeLocal_8E2CE81D465CF6262FAB32AC610CA01C, TArray<int>* MapLocal_514247164D2692F8342CCC98D2CC185C, struct FServerReservationData* StructInitializer_22AFE5DB48974FEAD85A32A51EC6DB48, struct FServerReservationData* StructInitializer_93B7BAFB4912E6114AA076B62793E7C6);
	void ClientUnmutePlayer(const struct FUniqueNetId& PlayerNetId);
	void ClientMutePlayer(const struct FUniqueNetId& PlayerNetId, bool bAddToMuteList);
	void GetOnlineStatus(struct FString* PresenceString, struct FString* GameDataString);
	void ClientSetOnlineStatus();
	void HandleGameDataSelected(int PlaylistId, int MutatorIndex);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	class AGameEvent_TA* GetGameEvent();
	void ClientArbitratedMatchEnded();
	void HandleDisconnected(class UPsyNetConnection_X* Connection);
	void BannedKick();
	void NoReservationKick();
	void IdleKick();
	void ServerReportServer();
	void ReportServer();
	void ClientUseItem(const struct FVector& UseLocation, const struct FRotator& UseRotation);
	void ServerTeleportCar(const struct FVector& SpawnLocation, const struct FRotator& NewRotation);
	void TeleportCar(const struct FVector& SpawnLocation, const struct FRotator& NewRotation);
	void ReceiveMessage(const struct FMessagePacket& Packet);
	void ServerUsePickupReleased();
	void UsePickupReleased();
	void ServerUsePickup(class ARBActor_TA* Target);
	void UsePickup();
	void ToggleHandbrake(bool bHandbrake);
	void ToggleBoost(bool bBoost);
	void ToggleJump(bool bJump);
	void TargetSelectLeft();
	void TargetSelectRight();
	void ReleaseRearCamera();
	void PressRearCamera();
	void ReleaseSecondaryCamera();
	void PressSecondaryCamera();
	void SetResetCamera(bool bReset);
	void ReleaseResetCamera();
	void PressResetCamera();
	void SetHoldMouseCamera(bool bToggle);
	void ReleaseMouseCameraToggle();
	void PressMouseCameraToggle();
	void ReadyUp();
	void Spectate();
	void ChangeTeam(int TeamNum);
	void SwitchTeam();
	void SetDefaultCameraMode();
	void ResetCameraMode();
	struct FName GetCameraMode();
	void SetCameraMode(const struct FName& NewCamMode);
	void ProcessMove_TA(struct FVehicleInputs* NewInput);
	void ZeroMoveInput();
	void AddMouseMovementVal(float PositiveInputVal, float NegativeInputVal, float InputDirVal, bool bUsingMouseForPositiveAxis, bool bUsingMouseForNegativeAxis, float* VehicleInputVal, float* CarAirAccelVal);
	void AddInputVal(float InputVal, bool bAddInputCondition, float* VehicleInputVal);
	void ModifiedAirRotationByMouseInput(class UPlayerInput_TA* InputTA, float DeadZoneX, float DeadZoneY);
	bool UpdateMouseGroundSteer(class UPlayerInput_TA* InputTA, float DeltaTime, float Deadzone, float MaxDist, float BrakingSpeed);
	bool UpdateMouseGroundThrottle(class UPlayerInput_TA* InputTA, float DeltaTime, float Deadzone, float MaxDist);
	void PlayerMove(float DeltaTime);
	void IgnoreMoveInput(bool bNewMoveInput);
	void SendClientAdjustment();
	class APlayerController_TA* GetPrimaryPlayerController();
	void HandleAddBoostComponent(class ACarComponent_Boost_TA* Boost);
	void OnPawnChange(class APawn* OldPawn, class APawn* NewPawn);
	void HandleSetProfile(class ULocalPlayer_TA* LocalPlayer);
	class UProductMetrics_TA* GetProductMetrics();
	void ReplicateLoadout();
	void CalculateMouseInput(float* Input);
	bool UsingMouseOnly(const struct FName& Key);
	bool UsingMouseOnlyTwoAxis(const struct FName& PosKey, const struct FName& NegKey);
	void CalculateFinalInput(const struct FName& SwivelPosKey, const struct FName& SwivelNegKey, float* Input, float* LastInput, float* InputPos, float* LastInputPos, float* InputNeg, float* LastInputNeg);
	void ResetLastInputs();
	bool AllowMouseInputs();
	void ReplicateCameraRotation();
	void HandleSecondaryCameraChanged(class ACameraSettingsActor_TA* Actor);
	void SetUsingFreecam(bool bFreecam);
	void SetUsingBehindView(bool bBehindView);
	void SetUsingSecondaryCamera(bool bSecondaryCamera);
	void ReplicateCameraSettings();
	void HandleControllerLayoutChanged(class APRI_TA* InPRI);
	void HandlePawnTypeChanged(class APRI_TA* InPRI);
	void HandlePendingViewCarSet(class APRI_TA* InPRI);
	void HandleReplaceBot(class APRI_TA* InPRI);
	void HandleTeamChanged(class APRI_X* InPRI);
	void HandleMatchEnded(class AGameEvent_Soccar_TA* GameEvent);
	void HandleStartNewRound(class AGameEvent_Soccar_TA* GameEvent);
	void HandleGameEventChanged(class APRI_TA* InPRI);
	void HandlePRICameraChanged(class APRI_TA* InPRI);
	void SetupLightBar();
	void HandlePersistentCameraSet(class APRI_TA* InPRI);
	void OnReceivedPlayerAndPRI();
	void HandleProfileGamepadSave(class UProfileGamepadSave_TA* GamepadSave);
	void HandleProfilePCSave(class UProfilePCSave_TA* ProfilePCSave);
	void UpdateVoiceFilter();
	void HandleSoundSettingsSave(class USoundSettingsSave_TA* SoundSettings);
	void HandleGameplaySettingsSave(class UGameplaySettingsSave_TA* GameplaySettings);
	void HandleCameraSave(class UProfileCameraSave_TA* CameraSettings);
	void ClientSetLevelSessionID(const struct FGuid& Id);
	void ReplicateLevelSessionID();
	void SetInputBuffer(class ANetworkInputBuffer_TA* InBuffer);
	class UClass* GetInputBufferClass(TEnumAsByte<ENetworkInputBuffer> Type);
	void ServerInitInputBuffer(TEnumAsByte<ENetworkInputBuffer> Type);
	void NetworkInputBufferChanged(class UNetworkSave_TA* NetworkSave);
	void InitNetworkSave(class UNetworkSave_TA* NetworkSave);
	void ServerUpgradeNetworkNext(const struct FString& SessionTag);
	void ReceivedPlayer();
	void InitFromGRI(class AGRI_X* GRI);
	void HandleGRISpawned(class AGRI_X* GRI);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& EventName);
	void EventChatMessage(class APlayerController_TA* PC, const struct FString& Message, bool bPreset);
	void EventConnectionTrackerAttached(class APlayerController_TA* PC, class UClientConnectionTracker_TA* Tracker);
	void EventSelectBallCamTarget(class APlayerController_TA* PC, int Direction);
	void EventTrainingEditorActorModified();
	void EventMuteChanged(class APlayerController_TA* PC, const struct FUniqueNetId& PlayerID, bool bMuted);
	void EventLaunchControllerApplet();
	void EventLaunchAccountPicker(int ControllerId);
};


// Class TAGame.AudioPriorityComponent_TA
// 0x006C (0x0110 - 0x00A4)
class UAudioPriorityComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           CarDistanceCurve;                                         // 0x00A8(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           BallDistanceCurve;                                        // 0x00C0(0x0018) (Edit, NeedCtorLink)
	float                                              DrivingAtListenerDotThreshold;                            // 0x00D8(0x0004) (Edit)
	int                                                DrivingAtPlayerBonus;                                     // 0x00DC(0x0004) (Edit)
	int                                                BoostingAtPlayerBonus;                                    // 0x00E0(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	TArray<struct FColor>                              DebugColors;                                              // 0x00E8(0x0010) (Edit, NeedCtorLink)
	TArray<struct FPriorityCandidate>                  PriorityArray;                                            // 0x00F8(0x0010) (Transient, NeedCtorLink)
	class ABall_TA*                                    Ball;                                                     // 0x0108(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AudioPriorityComponent_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	struct FPriorityCandidate CreateCandidate(class AVehicle_TA* Vehicle, const struct FVector& CenterLocation);
	void Tick(float DeltaTime);
	void UpdateBallReference(class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* InBall);
	void Detached();
	void Attached();
};


// Class TAGame.BallLocationComponent_TA
// 0x000B (0x00A8 - 0x009D)
class UBallLocationComponent_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	class UMaterialInstanceConstant*                   MaterialToApplyBallLocationTo;                            // 0x00A0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallLocationComponent_TA");
		return ptr;
	}

};


// Class TAGame.BallRadiusVolume_TA
// 0x0020 (0x0288 - 0x0268)
class ABallRadiusVolume_TA : public AActor
{
public:
	float                                              Radius;                                                   // 0x0268(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x026C(0x0004) MISSED OFFSET
	class UDrawSphereComponent*                        PreviewRadius;                                            // 0x0270(0x0008) (Const, ExportObject, Component, EditInline)
	TArray<class ABall_TA*>                            InRadius;                                                 // 0x0278(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallRadiusVolume_TA");
		return ptr;
	}


	void RemoveBall(class ABall_TA* Ball);
	void AddBall(class ABall_TA* Ball);
	void Tick(float DeltaTime);
};


// Class TAGame.RBActor_TA
// 0x0240 (0x0798 - 0x0558)
class ARBActor_TA : public APawn_X
{
public:
	struct FPointer                                    VfTable_IITickNotify_TA;                                  // 0x0558(0x0008) (Const, Native, NoExport)
	float                                              MaxLinearSpeed;                                           // 0x0560(0x0004) (Edit, Const, Net)
	float                                              MaxAngularSpeed;                                          // 0x0564(0x0004) (Edit, Const, Net)
	unsigned long                                      bDisableSleeping : 1;                                     // 0x0568(0x0004) (Edit, Const)
	unsigned long                                      bReplayActor : 1;                                         // 0x0568(0x0004) (Const, Net, Transient)
	unsigned long                                      bFrozen : 1;                                              // 0x0568(0x0004) (Net, Transient)
	unsigned long                                      bAutoInitFXEffects : 1;                                   // 0x0568(0x0004) (Const)
	unsigned long                                      bIgnoreSyncing : 1;                                       // 0x0568(0x0004) (Net, Transient)
	unsigned long                                      bPhysInitialized : 1;                                     // 0x0568(0x0004) (Transient)
	struct FNetworkSyncSettingsData                    NetworkSyncSettings;                                      // 0x056C(0x0020) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x058C(0x0004) MISSED OFFSET
	struct FReplicatedRBState                          OldRBState;                                               // 0x0590(0x0040) (Const, Transient)
	struct FReplicatedRBState                          RBState;                                                  // 0x05D0(0x0040) (Const, Transient)
	struct FReplicatedRBState                          ReplicatedRBState;                                        // 0x0610(0x0040) (Const, Net, Transient)
	struct FReplicatedRBState                          ClientCorrectionRBState;                                  // 0x0650(0x0040) (Const, Transient)
	struct FWorldContactData                           WorldContact;                                             // 0x0690(0x0028) (Const, Transient)
	struct FVector                                     SyncErrorLocation;                                        // 0x06B8(0x000C) (Const, Transient)
	float                                              SyncErrorAngle;                                           // 0x06C4(0x0004) (Const, Transient)
	struct FVector                                     SyncErrorAxis;                                            // 0x06C8(0x000C) (Const, Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x06D4(0x0004) MISSED OFFSET
	class UAkParamGroup*                               Ak;                                                       // 0x06D8(0x0008) (ExportObject, Component, EditInline)
	class AFXActor_X*                                  FXActorArchetype;                                         // 0x06E0(0x0008) (Edit)
	class AFXActor_X*                                  FXActor;                                                  // 0x06E8(0x0008) (Transient)
	class UImpactEffectsComponent_TA*                  ImpactEffectsComponent;                                   // 0x06F0(0x0008) (Edit, ExportObject, Component, EditInline)
	TArray<struct FAccumulatedRigidBodyCollision>      RBCollisions;                                             // 0x06F8(0x0010) (Const, Transient, Component, NeedCtorLink)
	class UClass*                                      RBHistoryClass;                                           // 0x0708(0x0008) (Edit)
	class URBHistory_TA*                               RBHistory;                                                // 0x0710(0x0008) (Const, ExportObject, Transient, Component, EditInline)
	int                                                LastRBCollisionsFrame;                                    // 0x0718(0x0004) (Const, Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x071C(0x0004) MISSED OFFSET
	class UReplayComponent_TA*                         Replay;                                                   // 0x0720(0x0008) (ExportObject, Component, EditInline)
	struct FWeldingInfo                                WeldedInfo;                                               // 0x0728(0x0028) (Net, Transient)
	class ARBActor_TA*                                 WeldedActor;                                              // 0x0750(0x0008) (Transient)
	class ARBActor_TA*                                 WeldedTo;                                                 // 0x0758(0x0008) (Transient)
	float                                              PreWeldMass;                                              // 0x0760(0x0004) (Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0764(0x0004) MISSED OFFSET
	struct FPointer                                    Constraint2D;                                             // 0x0768(0x0008) (Native, Transient)
	struct FPointer                                    BulletRigidBody;                                          // 0x0770(0x0008) (Native, Transient)
	class UPhysicsConfig_TA*                           PhysicsConfig;                                            // 0x0778(0x0008)
	struct FScriptDelegate                             __EventRigidBodyCollision__Delegate;                      // 0x0780(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0780(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RBActor_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void SetMass(float NewMass);
	void SetConstrained3D(const struct FVector& LinearLower, const struct FVector& LinearUpper, const struct FVector& AngularLower, const struct FVector& AngularUpper);
	void SetConstrained2D(bool bConstrain2D);
	void InitCCD();
	void SetPhysicsState(const struct FReplicatedRBState& NewState);
	void SetFrozen(bool bEnabled);
	void SetDyingPhysics();
	void SetMaxAngularSpeed(float NewMaxSpeed);
	void SetMaxLinearSpeed(float NewMaxSpeed);
	void OnRigidBodyCollision(const struct FAccumulatedRigidBodyCollision& Collision);
	void AddTorque(const struct FVector& Torque, TEnumAsByte<EForceMode> ForceMode, const struct FString& DebugSource);
	void AddForce(const struct FVector& Force, TEnumAsByte<EForceMode> ForceMode, const struct FString& DebugSource);
	void PreAsyncTick(float DeltaTime);
	void SetWelding(const struct FWeldingInfo& Welding);
	void UnWeldRBActor(class ARBActor_TA* Other);
	void WeldRBActor(class ARBActor_TA* Other, const struct FVector& WeldOffset, const struct FRotator& WeldRotation);
	void OnRBPhysInit();
	void ReInitRBPhys();
	void TerminateRBPhys();
	void SetCurrentRBState(struct FReplicatedRBState* NewRBState);
	struct FVector GetCurrentRBLocation();
	struct FReplicatedRBState GetCurrentRBState();
	int GetPhysicsFrame();
	float GetPhysicsTime();
	void PopFXState(class UFXActorEvent_X* Event);
	void PushFXState(class UFXActorEvent_X* Event);
	void InitFX();
	void InitAk();
	void PostBeginPlay();
	void PreBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventRigidBodyCollision(class ARBActor_TA* RBActor, const struct FAccumulatedRigidBodyCollision& Collision);
};


// Class TAGame.Ball_TA
// 0x0268 (0x0A00 - 0x0798)
class ABall_TA : public ARBActor_TA
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                               // 0x0798(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FCarBallInteractionSettings                 CarInteraction;                                           // 0x07A0(0x0038) (Edit, NeedCtorLink)
	class AFXActor_X*                                  EndOfGameFXArchetype;                                     // 0x07D8(0x0008) (Edit)
	class AExplosion_X*                                ExplosionArchetype;                                       // 0x07E0(0x0008) (Edit)
	class AExplosion_X*                                NoGoalExplosionArchetype;                                 // 0x07E8(0x0008) (Edit)
	unsigned long                                      bAllowPlayerExplosionOverride : 1;                        // 0x07F0(0x0004) (Edit)
	unsigned long                                      bNotifyGroundHit : 1;                                     // 0x07F0(0x0004) (Transient)
	unsigned long                                      bEndOfGameHidden : 1;                                     // 0x07F0(0x0004) (Net, Transient)
	unsigned long                                      bFadeIn : 1;                                              // 0x07F0(0x0004)
	unsigned long                                      bFadeOut : 1;                                             // 0x07F0(0x0004)
	unsigned long                                      bPredictionOnGround : 1;                                  // 0x07F0(0x0004) (Const, Transient)
	unsigned long                                      bCanBeAttached : 1;                                       // 0x07F0(0x0004) (Transient)
	unsigned long                                      bItemFreeze : 1;                                          // 0x07F0(0x0004) (Transient)
	struct FVector                                     MagnusCoefficient;                                        // 0x07F4(0x000C) (Edit, Net)
	class UBallCamTarget_TA*                           BallCamTarget;                                            // 0x0800(0x0008) (ExportObject, Component, EditInline)
	float                                              Radius;                                                   // 0x0808(0x0004) (Transient)
	float                                              VisualRadius;                                             // 0x080C(0x0004)
	TArray<struct FBallHitInfo>                        Touches;                                                  // 0x0810(0x0010) (Transient, NeedCtorLink)
	float                                              LastCalculateCarHit;                                      // 0x0820(0x0004) (Transient)
	struct FVector                                     InitialLocation;                                          // 0x0824(0x000C) (Transient)
	struct FRotator                                    InitialRotation;                                          // 0x0830(0x000C) (Transient)
	float                                              LastHitWorldTime;                                         // 0x083C(0x0004) (Transient)
	float                                              ReplicatedBallScale;                                      // 0x0840(0x0004) (Net)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0844(0x0004) MISSED OFFSET
	class UStaticMesh*                                 ReplicatedBallMesh;                                       // 0x0848(0x0008) (Net)
	float                                              ReplicatedWorldBounceScale;                               // 0x0850(0x0004) (Net)
	float                                              ReplicatedBallGravityScale;                               // 0x0854(0x0004) (Net)
	float                                              ReplicatedBallMaxLinearSpeedScale;                        // 0x0858(0x0004) (Net)
	float                                              ReplicatedAddedCarBounceScale;                            // 0x085C(0x0004) (Net)
	float                                              AdditionalCarGroundBounceScaleZ;                          // 0x0860(0x0004)
	float                                              AdditionalCarGroundBounceScaleXY;                         // 0x0864(0x0004)
	class UPhysicalMaterial*                           ReplicatedPhysMatOverride;                                // 0x0868(0x0008) (Net)
	unsigned char                                      HitTeamNum;                                               // 0x0870(0x0001) (Net, Transient)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0871(0x0007) MISSED OFFSET
	class AGameEvent_Soccar_TA*                        GameEvent;                                                // 0x0878(0x0008) (Net, Transient)
	struct FExplosionData                              ReplicatedExplosionData;                                  // 0x0880(0x0018) (Net, Transient, Component)
	struct FExplosionDataExtended                      ReplicatedExplosionDataExtended;                          // 0x0898(0x0020) (Net, Transient, Component)
	class AExplosion_X*                                Explosion;                                                // 0x08B8(0x0008) (Transient)
	float                                              ExplosionTime;                                            // 0x08C0(0x0004) (Transient)
	struct FVector                                     OldLocation;                                              // 0x08C4(0x000C) (Transient)
	class UMaterialInterface*                          FadeMaterial;                                             // 0x08D0(0x0008)
	float                                              PredictionTimestep;                                       // 0x08D8(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x08DC(0x0004) MISSED OFFSET
	TArray<struct FPredictedPosition>                  PredictedPositions;                                       // 0x08E0(0x0010) (Const, Transient, NeedCtorLink)
	float                                              LastPredictionTime;                                       // 0x08F0(0x0004) (Const, Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x08F4(0x0004) MISSED OFFSET
	struct FGoalPenetrationData                        GoalPenetration;                                          // 0x08F8(0x0028) (Transient, Component)
	float                                              GroundForce;                                              // 0x0920(0x0004) (Edit)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0924(0x0004) MISSED OFFSET
	class ACar_TA*                                     CurrentAffector;                                          // 0x0928(0x0008) (Transient)
	class UBallTrajectoryComponent_TA*                 TrajectoryComponent;                                      // 0x0930(0x0008) (ExportObject, Component, EditInline)
	class UPitchTekDrawingComponent_TA*                PitchTekComponent;                                        // 0x0938(0x0008) (Const, ExportObject, Component, EditInline)
	struct FScriptDelegate                             __EventCarTouch__Delegate;                                // 0x0940(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0940(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventHitWorld__Delegate;                                // 0x0958(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0958(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventHitGround__Delegate;                               // 0x0970(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0970(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventHitGoal__Delegate;                                 // 0x0988(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0988(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventGameEventSet__Delegate;                            // 0x09A0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData09[0x8];                                       // 0x09A0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventExploded__Delegate;                                // 0x09B8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData10[0x8];                                       // 0x09B8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventHitTeamNumChanged__Delegate;                       // 0x09D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData11[0x8];                                       // 0x09D0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTrailIntensityChanged__Delegate;                   // 0x09E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData12[0x8];                                       // 0x09E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Ball_TA");
		return ptr;
	}


	float GetTrailIntensity();
	struct FLinearColor GetActiveTeamColor();
	void PredictGroundPosition(int MaxIterations, struct FBallPredictionInfo* PredictionInfo);
	void PredictPosition(float Time, struct FBallPredictionInfo* PredictionInfo);
	void SetPhysMatOverride(class UPhysicalMaterial* InPhysMatOverride);
	void DisableTrajectory();
	bool CanEverShowTrajectory();
	bool IsTrajectoryEnabled();
	struct FVector GetTrajectoryStartVelocity();
	struct FRotator GetTrajectoryStartRotation();
	struct FVector GetTrajectoryStartLocation();
	void UpdateTrajectoryPredictionPoints(bool bForceUpdate);
	void UpdateTrajectoryEnabled();
	bool ShouldDrawTrajectory();
	float GetAdditionalCarBounceScaleZ(class ACar_TA* Car);
	void SpawnEndOfGameFX();
	void SetEndOfGameHidden();
	void InitExplosionFX(class AExplosion_X* InExplosion, class UGoal_TA* ExplosionGoal, class APRI_TA* Scorer);
	void Explode(class UGoal_TA* ExplosionGoal, const struct FVector& ExplodeLocation, class APRI_TA* Scorer);
	void Destroyed();
	void DoDestroy();
	void DoExplode();
	void OnRigidBodyCollision(const struct FAccumulatedRigidBodyCollision& Collision);
	void Launch(const struct FVector& LaunchPosition, const struct FVector& LaunchDirection);
	void OnCarTouch(class ACar_TA* HitCar, TEnumAsByte<EBallHitType> HitType);
	void SetBallHitData(class ACar_TA* HitCar, const struct FVector& HitLocation, const struct FVector& HitNormal, TEnumAsByte<EBallHitType> HitType);
	void OnHitTeamNumChanged();
	bool SetHitTeamNum(unsigned char TeamNum);
	void SetCarHitTeamNum(unsigned char TeamNum);
	void RecordCarHit(class ACar_TA* HitCar, const struct FVector& HitLocation, const struct FVector& HitNormal, TEnumAsByte<EBallHitType> HitType);
	void Reset();
	void OnHitWorld(const struct FVector& HitLoc, const struct FVector& HitNormal, class UPhysicalMaterial* PhysMat);
	bool IsGroundMaterial(class UPhysicalMaterial* PhysMat);
	bool IsGroundHit(const struct FVector& HitNormal);
	void FellOutOfWorld();
	bool IsRoundActive();
	void OnHitGoal(class UGoal_TA* Goal, const struct FVector& HitLoc);
	void SetGameEvent(class AGameEvent_Soccar_TA* SoccarGame);
	void TurnOff();
	void InitAk();
	void PostBeginPlay();
	void PreBeginPlay();
	void SetBallMesh(class UStaticMesh* NewMesh);
	void SetWorldBounceScale(float NewScale);
	void SetCarBounceScale(float NewScale);
	void SetBallMaxLinearSpeedScale(float InMaxLinearSpeedScale);
	void SetBallGravityScale(float InBallGravityScale);
	void SetBallScale(float NewScale);
	void ReplicatedEvent(const struct FName& VarName);
	void EventTrailIntensityChanged(class ABall_TA* Ball);
	void EventHitTeamNumChanged(class ABall_TA* Ball);
	void EventExploded(class ABall_TA* Ball);
	void EventGameEventSet(class ABall_TA* Ball);
	void EventHitGoal(class ABall_TA* Ball, class UGoal_TA* Goal);
	void EventHitGround(class ABall_TA* Ball, const struct FVector& HitLoc, const struct FVector& HitNormal);
	void EventHitWorld(class ABall_TA* Ball, const struct FVector& HitLoc, const struct FVector& HitNormal);
	void EventCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<EBallHitType> HitType);
};


// Class TAGame.BallTrajectoryComponent_TA
// 0x006C (0x0110 - 0x00A4)
class UBallTrajectoryComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                             // 0x00A8(0x0004) (Transient)
	unsigned long                                      bCalculatePoints : 1;                                     // 0x00A8(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<struct FVector>                             TrajectoryPoints;                                         // 0x00B0(0x0010) (NeedCtorLink)
	struct FTrajectorySetup                            TrajectorySettings;                                       // 0x00C0(0x0014)
	float                                              TotalPathDistance;                                        // 0x00D4(0x0004) (Transient)
	struct FVector                                     StartLocation;                                            // 0x00D8(0x000C) (Transient)
	struct FVector                                     StartVelocity;                                            // 0x00E4(0x000C) (Transient)
	float                                              TrajectoryUpdateTime;                                     // 0x00F0(0x0004) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00F4(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventTrajectoryEnabledChanged__Delegate;                // 0x00F8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00F4(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallTrajectoryComponent_TA");
		return ptr;
	}


	int GetTrajectoryFXCount();
	void DestroyFXs();
	void SetupFXs();
	class APlayerController_TA* GetPlayer(int LocalPlayerNum);
	TArray<class APlayerController_TA*> GetViewers();
	void CheckShouldShowTrajectory();
	float GetTrajectoryScale();
	void UpdateTrajectoryPrediction(bool bForceUpdate);
	void OnEnabledChanged();
	void SetEnable(bool bEnable);
	void HandleGameStateChanged(class AGameEvent_TA* InGameEvent);
	void OnGameEventSet(class ABall_TA* Ball);
	void HandlePlayerAimAssistChanged();
	void HandleLocalPlayersChanged(class AGameEvent_TA* InGameEvent);
	void Detached();
	void BeginPlay();
	void EventTrajectoryEnabledChanged(class ABall_TA* Ball);
};


// Class TAGame.BallTrajectoryComponent_Line_TA
// 0x0008 (0x0118 - 0x0110)
class UBallTrajectoryComponent_Line_TA : public UBallTrajectoryComponent_TA
{
public:
	unsigned long                                      bTrajectoryPointsNeedUpdated : 1;                         // 0x0110(0x0004) (Transient)
	struct FColor                                      LineColor;                                                // 0x0114(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallTrajectoryComponent_Line_TA");
		return ptr;
	}


	void DestroyFX(int Index);
	void CreateFX(int Index, TArray<class APlayerController_TA*>* Viewers);
	void DestroyFXs();
	void SetupFXs();
};


// Class TAGame.BallTrajectoryComponent_Beam_TA
// 0x0018 (0x0130 - 0x0118)
class UBallTrajectoryComponent_Beam_TA : public UBallTrajectoryComponent_Line_TA
{
public:
	TArray<struct FTrajectoryFX>                       TrajectoryFXs;                                            // 0x0118(0x0010) (Transient, Component, NeedCtorLink)
	class UParticleSystem*                             ParticleBeamArchetype;                                    // 0x0128(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallTrajectoryComponent_Beam_TA");
		return ptr;
	}


	int GetTrajectoryFXCount();
	void DestroyFX(int Index);
	void DestroyFXs();
	void CreateFX(int Index, TArray<class APlayerController_TA*>* Viewers);
};


// Class TAGame.BallTrajectoryComponent_Spline_TA
// 0x0024 (0x013C - 0x0118)
class UBallTrajectoryComponent_Spline_TA : public UBallTrajectoryComponent_Line_TA
{
public:
	TArray<struct FTrajectorySplineFX>                 TrajectoryFXs;                                            // 0x0118(0x0010) (Transient, NeedCtorLink)
	class ASplineLoftActorSpawnable_TA*                SplineArchetype;                                          // 0x0128(0x0008)
	float                                              TangentMultiplier;                                        // 0x0130(0x0004)
	float                                              PulseMultiplier;                                          // 0x0134(0x0004)
	float                                              MinInterpSpeed;                                           // 0x0138(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallTrajectoryComponent_Spline_TA");
		return ptr;
	}


	int GetTrajectoryFXCount();
	void DestroyFX(int Index);
	void DestroyFXs();
	void CreateFX(int Index, TArray<class APlayerController_TA*>* Viewers);
	void SetupFXs();
};


// Class TAGame.BallTrajectoryComponent_Mesh_TA
// 0x0040 (0x0150 - 0x0110)
class UBallTrajectoryComponent_Mesh_TA : public UBallTrajectoryComponent_TA
{
public:
	TArray<struct FMeshInfo>                           InterpMeshes;                                             // 0x0110(0x0010) (Component, NeedCtorLink)
	class UMaterialInstanceConstant*                   MIC;                                                      // 0x0120(0x0008) (Transient)
	class UStaticMesh*                                 StaticMesh;                                               // 0x0128(0x0008)
	struct FColor                                      BeamColor_Max;                                            // 0x0130(0x0004)
	struct FColor                                      BeamColor_Mid;                                            // 0x0134(0x0004)
	struct FColor                                      BeamColor_Min;                                            // 0x0138(0x0004)
	float                                              MinInterpSpeed;                                           // 0x013C(0x0004)
	float                                              MeshScale;                                                // 0x0140(0x0004)
	float                                              MeshMoveSpeed;                                            // 0x0144(0x0004)
	float                                              MeshRotateSpeed;                                          // 0x0148(0x0004)
	float                                              TrajectoryPlayTestScale;                                  // 0x014C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallTrajectoryComponent_Mesh_TA");
		return ptr;
	}


	struct FLinearColor GetBeamColor(float VelocityPower);
	void HandleVelocityStartSpeedChanged(class ABall_GameEditor_TA* Ball);
	void SetupBallEditorMaterial();
	float GetTrajectoryScale();
	float GetMeshScale(int MeshIndex);
	int GetTrajectoryFXCount();
	void DestroyFXs();
	void SetupFXs();
};


// Class TAGame.BoostMesh_TA
// 0x0024 (0x0084 - 0x0060)
class UBoostMesh_TA : public UObject
{
public:
	struct FRandomRange                                FadeInTime;                                               // 0x0060(0x0008) (Edit)
	struct FRandomRange                                FadeOutTime;                                              // 0x0068(0x0008) (Edit)
	TArray<struct FAnimatedMaterialMesh>               MaterialParams;                                           // 0x0070(0x0010) (Edit, Component, NeedCtorLink)
	float                                              MaxMaterialTime;                                          // 0x0080(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BoostMesh_TA");
		return ptr;
	}


	void ApplyPaint(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint);
	void ApplyLinearColorParameter(class UActorComponent* Component, const struct FName& Param, const struct FLinearColor& InColor);
	void ApplyColorParameter(class UActorComponent* Component, const struct FName& Param, const struct FVector& Value, float Alpha);
	void ApplyVectorParameter(class UActorComponent* Component, const struct FName& Param, const struct FVector& Value);
	void ApplyFloatParameter(class UActorComponent* Component, const struct FName& Param, float Value);
	void ApplyMaterialOverride(class UMaterialInterface* Override, int Index);
	void FadeOut();
	void FadeIn();
	void ResetElapsedTime(float Value);
	void CopyBoostMeshDistributionParameters(class AFXActor_Boost_TA* Archetype);
	void Update(float DeltaTime);
	void Initialize(class AFXActor_X* FXActor);
};


// Class TAGame.BreakOutActor_Platform_TA
// 0x00C0 (0x0328 - 0x0268)
class ABreakOutActor_Platform_TA : public AActor
{
public:
	int                                                Sides;                                                    // 0x0268(0x0004) (Edit)
	unsigned long                                      bPrimaryPlayerStart : 1;                                  // 0x026C(0x0004) (Edit)
	int                                                TeamIndex;                                                // 0x0270(0x0004) (Edit)
	int                                                MaxDamage;                                                // 0x0274(0x0004) (Edit)
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x0278(0x0008) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class UDynamicLightEnvironmentComponent*           LightEnvironment;                                         // 0x0280(0x0008) (Edit, Const, ExportObject, EditConst, Component, EditInline)
	class AFXActor_X*                                  FXArchetype;                                              // 0x0288(0x0008) (Edit)
	float                                              NeighborRadius;                                           // 0x0290(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0294(0x0004) MISSED OFFSET
	TArray<class ABreakOutActor_Platform_TA*>          Neighbors;                                                // 0x0298(0x0010) (Edit, EditConst, NeedCtorLink)
	float                                              LastHitTime;                                              // 0x02A8(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02AC(0x0004) MISSED OFFSET
	struct FBreakoutDamageState                        DamageState;                                              // 0x02B0(0x0020) (Net)
	class AFXActor_X*                                  FXActor;                                                  // 0x02D0(0x0008)
	struct FBreakoutDamageState                        PreReplayState;                                           // 0x02D8(0x0020) (Transient)
	struct FScriptDelegate                             __EventDamageStateChanged__Delegate;                      // 0x02F8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02F8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventDamaged__Delegate;                                 // 0x0310(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0310(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BreakOutActor_Platform_TA");
		return ptr;
	}


	void SetPreReplayState();
	void SavePreReplayState();
	void STATIC_GatherNeighbors(class ABreakOutActor_Platform_TA* Start, int Iterations, TArray<class ABreakOutActor_Platform_TA*>* ToDamage);
	void HandleTeamColorsChanged(class ATeam_TA* Team);
	void HandleTeamRemoved(class UObject* TeamObj);
	void HandleTeamAdded(class UObject* TeamObj);
	bool IsBroken();
	bool IsDamaged();
	void Reset();
	void SetDamageState(unsigned char InDamageState, class APRI_TA* InDamageCauser, const struct FVector& InLocation, bool bDirectDamage, bool bImmediate);
	void IncreaseDamage(class APRI_TA* DamageCauser, const struct FVector& FromLocation, bool bDirectDamage);
	bool NeighborDamage(class ABall_TA* Ball, int InDamage, const struct FVector& HitLocation);
	bool OnBallHit(class ABall_TA* Ball, int InDamage, const struct FVector& HitNormal, const struct FVector& InVelocity, const struct FVector& HitLocation);
	void ReInitPhysics();
	void ReInitPhysicsDelayed();
	void InitFX();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventDamaged(class ABreakOutActor_Platform_TA* Platform, class APRI_TA* PRI, class ABall_TA* Ball);
	void EventDamageStateChanged(class ABreakOutActor_Platform_TA* Platform, const struct FBreakoutDamageState& InState);
};


// Class TAGame.BTComponent
// 0x0078 (0x00E8 - 0x0070)
class UBTComponent : public UComponent
{
public:
	class UBTNode*                                     Root;                                                     // 0x0070(0x0008) (Edit, Const)
	TEnumAsByte<EBTStatus>                             RootStatus;                                               // 0x0078(0x0001) (Const, Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0079(0x0007) MISSED OFFSET
	class AAIController_TA*                            AI;                                                       // 0x0080(0x0008) (Transient)
	unsigned long                                      bPrintStatusLogs : 1;                                     // 0x0088(0x0004) (Edit)
	unsigned long                                      bDirtyStatusLogs : 1;                                     // 0x0088(0x0004) (Transient)
	unsigned long                                      bEvaluatingConditions : 1;                                // 0x0088(0x0004) (Const, Transient)
	unsigned long                                      bPauseNextTick : 1;                                       // 0x0088(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	TArray<struct FBTStatusLog>                        StatusLogs;                                               // 0x0090(0x0010) (Const, Transient, NeedCtorLink)
	int                                                StatusLogsIndex;                                          // 0x00A0(0x0004) (Const, Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	TArray<int>                                        StatusLogsStack;                                          // 0x00A8(0x0010) (Const, Transient, NeedCtorLink)
	class UDebugDrawer_X*                              CanvasDrawer;                                             // 0x00B8(0x0008) (Transient)
	TArray<struct FBTDynamicLinkData>                  DynamicLinks;                                             // 0x00C0(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventDynamicLinksChanged__Delegate;                     // 0x00D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00D0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTComponent");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	struct FColor GetStatusColor(TEnumAsByte<EBTStatus> Status);
	struct FString GetDepthSpaces(float Depth);
	void SetDynamicLink(const struct FName& LinkName, class UBTNode* Node);
	void SetRoot(class UBTNode* NewRootArchetype);
	void Abort();
	void Tick(float DeltaTime);
	void Init(class AAIController_TA* ForAI);
	void EventDynamicLinksChanged(class UBTComponent* BT);
};


// Class TAGame.BTLockCollection
// 0x0040 (0x00B0 - 0x0070)
class UBTLockCollection : public UComponent
{
public:
	TArray<struct FTimedLock>                          Locks;                                                    // 0x0070(0x0010) (Const, Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventLockSet__Delegate;                                 // 0x0080(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventLockExpired__Delegate;                             // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0098(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTLockCollection");
		return ptr;
	}


	void UpdateLocks();
	float GetTimeRemaining(const struct FName& LockName);
	bool IsNameLocked(const struct FName& LockName);
	void RemoveNamedLock(const struct FName& LockName);
	void AddNamedLock(const struct FName& LockName, float ForHowLong);
	void EventLockExpired(const struct FName& LockName);
	void EventLockSet(const struct FName& LockName);
};


// Class TAGame.BTNode
// 0x0020 (0x0080 - 0x0060)
class UBTNode : public UObject
{
public:
	TArray<class UBTDecorator*>                        Decorators;                                               // 0x0060(0x0010) (Edit, Const, NeedCtorLink)
	unsigned long                                      bDebugPause : 1;                                          // 0x0070(0x0004) (Edit)
	unsigned long                                      bDebug : 1;                                               // 0x0070(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	class AAIController_TA*                            AI;                                                       // 0x0078(0x0008) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTNode");
		return ptr;
	}


	void SetStatusString(const struct FString& msg);
};


// Class TAGame.BTConditionalNode
// 0x0030 (0x00B0 - 0x0080)
class UBTConditionalNode : public UBTNode
{
public:
	TArray<class UBTNode*>                             PreConditions;                                            // 0x0080(0x0010) (Edit, Const, NeedCtorLink)
	TArray<class UBTNode*>                             Conditions;                                               // 0x0090(0x0010) (Edit, Const, NeedCtorLink)
	TArray<class UBTNode*>                             SuccessConditions;                                        // 0x00A0(0x0010) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTConditionalNode");
		return ptr;
	}

};


// Class TAGame.BTAction
// 0x000C (0x00BC - 0x00B0)
class UBTAction : public UBTConditionalNode
{
public:
	float                                              FinishTime;                                               // 0x00B0(0x0004) (Edit)
	float                                              AbortTime;                                                // 0x00B4(0x0004) (Edit)
	float                                              StartTime;                                                // 0x00B8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction");
		return ptr;
	}


	float GetRunningTime();
	TEnumAsByte<EBTStatus> OnExecute();
	void OnStarted();
	TEnumAsByte<EBTStatus> OnStart();
	void OnInit();
};


// Class TAGame.BTAction_Target
// 0x00A4 (0x0160 - 0x00BC)
class UBTAction_Target : public UBTAction
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	class UBTTarget*                                   Target;                                                   // 0x00C0(0x0008) (Edit)
	float                                              TargetPredictionTime;                                     // 0x00C8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	struct FAIProxyData                                SelfData;                                                 // 0x00D0(0x0048) (Transient)
	struct FAIProxyData                                TargetData;                                               // 0x0118(0x0048) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_Target");
		return ptr;
	}


	TEnumAsByte<EBTStatus> OnTargetExecute();
	TEnumAsByte<EBTStatus> OnExecute();
};


// Class TAGame.BTAction_MoveTo
// 0x005C (0x01BC - 0x0160)
class UBTAction_MoveTo : public UBTAction_Target
{
public:
	unsigned long                                      bReverse : 1;                                             // 0x0160(0x0004) (Edit)
	unsigned long                                      bBoost : 1;                                               // 0x0160(0x0004) (Edit)
	unsigned long                                      bAllowPointTurns : 1;                                     // 0x0160(0x0004) (Edit)
	unsigned long                                      bPointTurn : 1;                                           // 0x0160(0x0004) (Transient)
	unsigned long                                      bWasFacingDestination : 1;                                // 0x0160(0x0004) (Transient)
	unsigned long                                      bHasPath : 1;                                             // 0x0160(0x0004) (Transient)
	float                                              MinSpeed;                                                 // 0x0164(0x0004) (Edit)
	float                                              MaxSpeed;                                                 // 0x0168(0x0004) (Edit)
	float                                              MinBoostDistance;                                         // 0x016C(0x0004) (Edit)
	float                                              TeamSeparationDistance;                                   // 0x0170(0x0004) (Edit)
	float                                              ReachDistance;                                            // 0x0174(0x0004) (Edit)
	class UBTTarget*                                   FaceLocation;                                             // 0x0178(0x0008) (Edit)
	class UBTTarget*                                   FaceRotation;                                             // 0x0180(0x0008) (Edit)
	float                                              MaxTurnRadius;                                            // 0x0188(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x018C(0x0004) MISSED OFFSET
	TArray<class UBTMoveModifier*>                     Modifiers;                                                // 0x0190(0x0010) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	struct FVector                                     OldPathDestination;                                       // 0x01A0(0x000C) (Transient)
	struct FVector                                     OldPathCarLocation;                                       // 0x01AC(0x000C) (Transient)
	float                                              CachedMaxGravitySlope;                                    // 0x01B8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_MoveTo");
		return ptr;
	}


	void SteerTowardsLocal(const struct FVector& LocalOffset);
	void DriveAwayFrom(const struct FVector& TargetLocation, float TargetRadius, float BufferRadius);
	bool SeparateTeammates();
	void SlowDown();
	void SetTemporaryMaxSpeed(float InSpeed);
	void SlowForObstacles();
	struct FVector GetAimedDestination(const struct FVector& Destination, const struct FVector& AimDir);
	bool GetAimDir(const struct FVector& Destination, struct FVector* AimDir);
	void DriveTo(const struct FVector& Destination);
	void UpdatePath(const struct FVector& Destination);
	void PathTo(const struct FVector& Destination);
	void CacheGravityScale();
	struct FVector GetLeadDestination();
	bool HasReachedTarget();
	bool HasPassedTarget();
	TEnumAsByte<EBTStatus> OnTargetExecute();
	TEnumAsByte<EBTStatus> OnStart();
	void OnInit();
};


// Class TAGame.BTMoveModifier
// 0x0004 (0x0074 - 0x0070)
class UBTMoveModifier : public UComponent
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTMoveModifier");
		return ptr;
	}


	void AdjustDestination(const struct FVector& Goal, struct FVector* Destination);
};


// Class TAGame.BTCondition
// 0x000C (0x008C - 0x0080)
class UBTCondition : public UBTNode
{
public:
	float                                              UpdateDelay;                                              // 0x0080(0x0004) (Edit)
	unsigned long                                      bFlipResult : 1;                                          // 0x0084(0x0004) (Edit)
	unsigned long                                      bDirty : 1;                                               // 0x0084(0x0004) (Const, Transient)
	unsigned long                                      CachedResult : 1;                                         // 0x0084(0x0004) (Const, Transient)
	float                                              NextUpdateTime;                                           // 0x0088(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTCondition");
		return ptr;
	}


	bool ShouldProcessTeam(TEnumAsByte<EAITeam> CheckTeam, int ActorTeam);
	bool ShouldProcessActor(TEnumAsByte<EAITeam> CheckTeam, class AActor* CheckActor);
	void SetDirty();
	bool GetResult();
	void OnInit();
};


// Class TAGame.BTC_Any
// 0x000C (0x0098 - 0x008C)
class UBTC_Any : public UBTCondition
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	class UBTTarget*                                   Targets;                                                  // 0x0090(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Any");
		return ptr;
	}

};


// Class TAGame.BTC_NotAny
// 0x000C (0x0098 - 0x008C)
class UBTC_NotAny : public UBTCondition
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	class UBTTarget*                                   Targets;                                                  // 0x0090(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_NotAny");
		return ptr;
	}

};


// Class TAGame.BTC_ProxyBase
// 0x005C (0x00E8 - 0x008C)
class UBTC_ProxyBase : public UBTCondition
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	class UBTTarget*                                   Self;                                                     // 0x0090(0x0008) (Edit)
	float                                              SelfPredictionTime;                                       // 0x0098(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FAIProxyData                                SelfData;                                                 // 0x00A0(0x0048) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_ProxyBase");
		return ptr;
	}

};


// Class TAGame.BTC_TargetBase
// 0x00E8 (0x01D0 - 0x00E8)
class UBTC_TargetBase : public UBTC_ProxyBase
{
public:
	class UBTTarget*                                   Target;                                                   // 0x00E8(0x0008) (Edit)
	float                                              TargetPredictionTime;                                     // 0x00F0(0x0004) (Edit)
	unsigned long                                      bFlattenToDrivePlane : 1;                                 // 0x00F4(0x0004) (Edit)
	struct FAIProxyData                                TargetData;                                               // 0x00F8(0x0048) (Transient)
	struct FAIProxyData                                SelfData3D;                                               // 0x0140(0x0048) (Transient)
	struct FAIProxyData                                TargetData3D;                                             // 0x0188(0x0048) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_TargetBase");
		return ptr;
	}

};


// Class TAGame.BTC_Target
// 0x0048 (0x0218 - 0x01D0)
class UBTC_Target : public UBTC_TargetBase
{
public:
	float                                              DistanceGreaterThan;                                      // 0x01D0(0x0004) (Edit)
	float                                              DistanceLessThan;                                         // 0x01D4(0x0004) (Edit)
	float                                              HeightGreaterThan;                                        // 0x01D8(0x0004) (Edit)
	float                                              HeightLessThan;                                           // 0x01DC(0x0004) (Edit)
	float                                              SpeedGreaterThan;                                         // 0x01E0(0x0004) (Edit)
	float                                              SpeedLessThan;                                            // 0x01E4(0x0004) (Edit)
	float                                              SpeedTowardsGreaterThan;                                  // 0x01E8(0x0004) (Edit)
	float                                              SpeedTowardsLessThan;                                     // 0x01EC(0x0004) (Edit)
	float                                              SideSpeedGreaterThan;                                     // 0x01F0(0x0004) (Edit)
	float                                              SideSpeedLessThan;                                        // 0x01F4(0x0004) (Edit)
	float                                              RelativeSpeedGreaterThan;                                 // 0x01F8(0x0004) (Edit)
	float                                              RelativeSpeedLessThan;                                    // 0x01FC(0x0004) (Edit)
	float                                              RelativeSpeedTowardsGreaterThan;                          // 0x0200(0x0004) (Edit)
	float                                              RelativeSpeedTowardsLessThan;                             // 0x0204(0x0004) (Edit)
	float                                              RelativeSideSpeedGreaterThan;                             // 0x0208(0x0004) (Edit)
	float                                              RelativeSideSpeedLessThan;                                // 0x020C(0x0004) (Edit)
	float                                              AngleGreaterThan;                                         // 0x0210(0x0004) (Edit)
	float                                              AngleLessThan;                                            // 0x0214(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Target");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_SelectActor
// 0x000C (0x0098 - 0x008C)
class UBTC_SelectActor : public UBTCondition
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	class UBTTarget*                                   Targets;                                                  // 0x0090(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_SelectActor");
		return ptr;
	}

};


// Class TAGame.BTAction_Input
// 0x0024 (0x00E0 - 0x00BC)
class UBTAction_Input : public UBTAction
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	struct FVehicleInputs                              Input;                                                    // 0x00C0(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_Input");
		return ptr;
	}


	TEnumAsByte<EBTStatus> OnExecute();
};


// Class TAGame.BTAction_Stop
// 0x0008 (0x00C4 - 0x00BC)
class UBTAction_Stop : public UBTAction
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	unsigned long                                      bWasGoingForward : 1;                                     // 0x00C0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_Stop");
		return ptr;
	}


	TEnumAsByte<EBTStatus> OnExecute();
	TEnumAsByte<EBTStatus> OnStart();
};


// Class TAGame.BTAction_HitBall
// 0x0024 (0x01E0 - 0x01BC)
class UBTAction_HitBall : public UBTAction_MoveTo
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x01BC(0x0004) MISSED OFFSET
	float                                              RandomTargetOffset;                                       // 0x01C0(0x0004) (Edit)
	float                                              AimOffsetScale;                                           // 0x01C4(0x0004) (Edit)
	struct FVector                                     CurrentRandomTargetOffset;                                // 0x01C8(0x000C) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	class AAIController_Soccar_TA*                     SoccarAI;                                                 // 0x01D8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_HitBall");
		return ptr;
	}


	struct FVector GetAimedDestination(const struct FVector& Destination, const struct FVector& AimDir);
	struct FVector GetLeadDestination();
	TEnumAsByte<EBTStatus> OnTargetExecute();
	bool HasHitBall();
	void OnStarted();
	void OnInit();
};


// Class TAGame.BTAction_CatchBall
// 0x0004 (0x01E4 - 0x01E0)
class UBTAction_CatchBall : public UBTAction_HitBall
{
public:
	float                                              FallTime;                                                 // 0x01E0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_CatchBall");
		return ptr;
	}


	void DriveTo(const struct FVector& Destination);
	TEnumAsByte<EBTStatus> OnTargetExecute();
};


// Class TAGame.BTAction_WiggleTires
// 0x0004 (0x00C0 - 0x00BC)
class UBTAction_WiggleTires : public UBTAction
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_WiggleTires");
		return ptr;
	}


	TEnumAsByte<EBTStatus> OnExecute();
};


// Class TAGame.BTNodeParent
// 0x0014 (0x00C4 - 0x00B0)
class UBTNodeParent : public UBTConditionalNode
{
public:
	TArray<class UBTNode*>                             Children;                                                 // 0x00B0(0x0010) (Const, NeedCtorLink)
	int                                                RunningChild;                                             // 0x00C0(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTNodeParent");
		return ptr;
	}

};


// Class TAGame.BTExecutor
// 0x0004 (0x00C8 - 0x00C4)
class UBTExecutor : public UBTNodeParent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTExecutor");
		return ptr;
	}

};


// Class TAGame.BTRandomSelector
// 0x0024 (0x00E8 - 0x00C4)
class UBTRandomSelector : public UBTNodeParent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	TArray<float>                                      ChildWeights;                                             // 0x00C8(0x0010) (Transient, NeedCtorLink)
	TArray<int>                                        RemainingChildren;                                        // 0x00D8(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTRandomSelector");
		return ptr;
	}

};


// Class TAGame.BTSelector
// 0x0004 (0x00C8 - 0x00C4)
class UBTSelector : public UBTNodeParent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTSelector");
		return ptr;
	}

};


// Class TAGame.BTEvaluator
// 0x0000 (0x00C8 - 0x00C8)
class UBTEvaluator : public UBTSelector
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTEvaluator");
		return ptr;
	}

};


// Class TAGame.BTSequence
// 0x0004 (0x00C8 - 0x00C4)
class UBTSequence : public UBTNodeParent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTSequence");
		return ptr;
	}

};


// Class TAGame.BTDecorator
// 0x0008 (0x0088 - 0x0080)
class UBTDecorator : public UBTNode
{
public:
	class UBTNode*                                     Child;                                                    // 0x0080(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTDecorator");
		return ptr;
	}

};


// Class TAGame.BTDeco_RandomSteer
// 0x0010 (0x0098 - 0x0088)
class UBTDeco_RandomSteer : public UBTDecorator
{
public:
	float                                              MinDuration;                                              // 0x0088(0x0004) (Edit)
	float                                              MaxDuration;                                              // 0x008C(0x0004) (Edit)
	float                                              TimeRemaining;                                            // 0x0090(0x0004)
	float                                              ExtraSteer;                                               // 0x0094(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTDeco_RandomSteer");
		return ptr;
	}


	void AdjustSteer();
};


// Class TAGame.BTDeco_Success
// 0x0000 (0x0088 - 0x0088)
class UBTDeco_Success : public UBTDecorator
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTDeco_Success");
		return ptr;
	}

};


// Class TAGame.BTDynamicLink
// 0x0018 (0x00A0 - 0x0088)
class UBTDynamicLink : public UBTDecorator
{
public:
	struct FName                                       LinkName;                                                 // 0x0088(0x0008) (Edit, Const)
	unsigned long                                      bUnlinkedSuccess : 1;                                     // 0x0090(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class UBTNode*                                     ChildArchetype;                                           // 0x0098(0x0008) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTDynamicLink");
		return ptr;
	}


	void SetChildArchetype(class UBTNode* NewChildArchetype);
	void HandleDynamicLinksChanged(class UBTComponent* BT);
	void Init();
};


// Class TAGame.BTLock
// 0x0024 (0x00AC - 0x0088)
class UBTLock : public UBTDecorator
{
public:
	TEnumAsByte<ELockScope>                            LockScope;                                                // 0x0088(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0089(0x0003) MISSED OFFSET
	struct FName                                       LockName;                                                 // 0x008C(0x0008) (Edit)
	float                                              Time;                                                     // 0x0094(0x0004) (Edit)
	float                                              RandomTime;                                               // 0x0098(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	class UBTLockCollection*                           Locks;                                                    // 0x00A0(0x0008) (ExportObject, Transient, Component, EditInline)
	float                                              LockTime;                                                 // 0x00A8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTLock");
		return ptr;
	}

};


// Class TAGame.BTWeight
// 0x0004 (0x008C - 0x0088)
class UBTWeight : public UBTDecorator
{
public:
	float                                              Weight;                                                   // 0x0088(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTWeight");
		return ptr;
	}

};


// Class TAGame.BTProxyType
// 0x0004 (0x0064 - 0x0060)
class UBTProxyType : public UObject
{
public:
	unsigned long                                      bStatic : 1;                                              // 0x0060(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTProxyType");
		return ptr;
	}

};


// Class TAGame.BTTarget
// 0x0030 (0x0090 - 0x0060)
class UBTTarget : public UObject
{
public:
	class UBTProxyType*                                Type;                                                     // 0x0060(0x0008) (Edit)
	struct FVector                                     LocalOffset;                                              // 0x0068(0x000C) (Edit)
	struct FVector                                     WorldOffset;                                              // 0x0074(0x000C) (Edit)
	TArray<class UBTNode*>                             Filters;                                                  // 0x0080(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTTarget");
		return ptr;
	}

};


// Class TAGame.BugReport_TA
// 0x000C (0x01C0 - 0x01B4)
class UBugReport_TA : public UBugReport_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x01B4(0x0004) MISSED OFFSET
	class UReplay_TA*                                  Replay;                                                   // 0x01B8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BugReport_TA");
		return ptr;
	}


	class UReplay_TA* GetReplay();
};


// Class TAGame.CachedUnlockedProducts_TA
// 0x0028 (0x0088 - 0x0060)
class UCachedUnlockedProducts_TA : public UObject
{
public:
	TArray<int>                                        Products;                                                 // 0x0060(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __Products__ChangeNotify;                                 // 0x0070(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0070(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CachedUnlockedProducts_TA");
		return ptr;
	}


	void __Products__ChangeNotifyFunc();
	int Length();
	void Clear();
	void Set(TArray<int>* ProductIDs);
	void Remove(int ProductID);
	void Add(int ProductID);
	TArray<class UProduct_TA*> GetProducts();
	bool ContainsAllProducts(class UProductSlot_TA* Slot, TEnumAsByte<EUnlockMethod> UnlockMethod);
	bool ContainsProductsForSlot(class UProductSlot_TA* Slot);
	bool Contains(int ProductID);
};


// Class TAGame.CarColorSet_TA
// 0x0054 (0x00D4 - 0x0080)
class UCarColorSet_TA : public UColorPalette_X
{
public:
	TArray<struct FLinearColor>                        Grayscales;                                               // 0x0080(0x0010) (Edit, NeedCtorLink)
	TArray<struct FLinearColor>                        H;                                                        // 0x0090(0x0010) (Edit, NeedCtorLink)
	TArray<struct FLinearColor>                        SV;                                                       // 0x00A0(0x0010) (Edit, NeedCtorLink)
	struct FLinearColor                                ColorBlindColor;                                          // 0x00B0(0x0010) (Edit)
	TArray<struct FDebugColor>                         DebugColors;                                              // 0x00C0(0x0010) (Edit, Const, NeedCtorLink)
	float                                              MinStadiumBrightness;                                     // 0x00D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarColorSet_TA");
		return ptr;
	}


	void RebuildColors();
	struct FLinearColor GetFontColor(int ColorID);
	float GetMinStadiumBrightness();
	TArray<struct FLinearColor> GetStadiumColors(int ColorID);
};


// Class TAGame.CarComponent_TA
// 0x0058 (0x02C0 - 0x0268)
class ACarComponent_TA : public AActor
{
public:
	class AFXActor_X*                                  FXActorArchetype;                                         // 0x0268(0x0008) (Edit)
	class UFXActorEvent_X*                             FXEvent;                                                  // 0x0270(0x0008) (Edit)
	unsigned long                                      bDisabled : 1;                                            // 0x0278(0x0004)
	unsigned long                                      bAutoActivate : 1;                                        // 0x0278(0x0004) (Edit)
	unsigned long                                      bSimulateComponent : 1;                                   // 0x0278(0x0004) (Edit, Const)
	unsigned long                                      bCreated : 1;                                             // 0x0278(0x0004) (Transient)
	unsigned long                                      bActive : 1;                                              // 0x0278(0x0004) (Transient)
	unsigned long                                      bRemovedFromCar : 1;                                      // 0x0278(0x0004) (Transient)
	unsigned char                                      ComponentData;                                            // 0x027C(0x0001) (Transient)
	unsigned char                                      ReplicatedActive;                                         // 0x027D(0x0001) (Net, Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x027E(0x0002) MISSED OFFSET
	class APRI_TA*                                     Activator;                                                // 0x0280(0x0008) (Transient)
	class AVehicle_TA*                                 Vehicle;                                                  // 0x0288(0x0008) (Net)
	class ACar_TA*                                     Car;                                                      // 0x0290(0x0008) (Transient)
	float                                              ActivityTime;                                             // 0x0298(0x0004) (Transient)
	float                                              ReplicatedActivityTime;                                   // 0x029C(0x0004) (Net, Transient)
	class AFXActor_X*                                  FXActor;                                                  // 0x02A0(0x0008) (Transient)
	struct FScriptDelegate                             __EventActivationChanged__Delegate;                       // 0x02A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02A8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void FellOutOfWorld();
	void HandleCarDestroyed(class APawn_X* InCar);
	void Destroyed();
	float GetInactiveTime();
	float GetActiveTime();
	void ApplyForces(float ActiveTime);
	void PrePhysicsStep(float DeltaTime);
	void RemoveFromCar();
	bool CanDeactivate();
	bool ConditionalDeactivate();
	bool CanActivate();
	bool ConditionalActivate();
	void SetActive(bool bNewActive);
	void Deactivate();
	void Activate();
	void RemoveFX();
	void ReInitFX();
	void InitFX();
	void UnregisterCarEvents();
	void RegisterCarEvents();
	void OnCreated();
	void HandleVehicleSetup(class ACar_TA* InCar);
	void OnVehicleSetupComplete();
	void Create(class ACar_TA* OwnerCar, class APRI_TA* InActivator);
	void ArchetypeCreateFor(class ACar_TA* OwnerCar);
	void ClientUpdateActive();
	void ReplicatedEvent(const struct FName& VarName);
	void EventActivationChanged(class ACarComponent_TA* CarComponent);
};


// Class TAGame.CarComponent_AirControl_TA
// 0x0020 (0x02E0 - 0x02C0)
class ACarComponent_AirControl_TA : public ACarComponent_TA
{
public:
	struct FRotator                                    AirTorque;                                                // 0x02C0(0x000C) (Edit)
	struct FRotator                                    AirDamping;                                               // 0x02CC(0x000C) (Edit)
	float                                              ThrottleForce;                                            // 0x02D8(0x0004) (Edit)
	float                                              AirControlSensitivity;                                    // 0x02DC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_AirControl_TA");
		return ptr;
	}


	void PrePhysicsStep(float DeltaTime);
	void ApplyForces(float ActiveTime);
	void OnCreated();
};


// Class TAGame.CarComponent_AirControl_Robin_TA
// 0x0018 (0x02F8 - 0x02E0)
class ACarComponent_AirControl_Robin_TA : public ACarComponent_AirControl_TA
{
public:
	struct FWaveParams                                 RandomPitch;                                              // 0x02E0(0x0008) (Edit)
	struct FWaveParams                                 RandomYaw;                                                // 0x02E8(0x0008) (Edit)
	struct FWaveParams                                 RandomRoll;                                               // 0x02F0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_AirControl_Robin_TA");
		return ptr;
	}


	void ApplyForces(float ActiveTime);
};


// Class TAGame.CarComponent_Boost_TA
// 0x0068 (0x0328 - 0x02C0)
class ACarComponent_Boost_TA : public ACarComponent_TA
{
public:
	float                                              BoostConsumptionRate;                                     // 0x02C0(0x0004) (Edit)
	float                                              MaxBoostAmount;                                           // 0x02C4(0x0004) (Edit)
	float                                              StartBoostAmount;                                         // 0x02C8(0x0004) (Edit, Net)
	float                                              CurrentBoostAmount;                                       // 0x02CC(0x0004) (Edit, Net)
	float                                              BoostModifier;                                            // 0x02D0(0x0004) (Edit, Net)
	float                                              LastBoostAmountRequestTime;                               // 0x02D4(0x0004) (Transient)
	float                                              LastBoostAmount;                                          // 0x02D8(0x0004) (Transient)
	unsigned long                                      bPendingConfirmBoostAmount : 1;                           // 0x02DC(0x0004) (Transient)
	unsigned long                                      bNoBoost : 1;                                             // 0x02DC(0x0004) (Edit, Net)
	float                                              BoostForce;                                               // 0x02E0(0x0004) (Edit)
	float                                              MinBoostTime;                                             // 0x02E4(0x0004) (Edit)
	float                                              RechargeRate;                                             // 0x02E8(0x0004) (Net)
	float                                              RechargeDelay;                                            // 0x02EC(0x0004) (Net)
	int                                                UnlimitedBoostRefCount;                                   // 0x02F0(0x0004) (Edit, Net)
	unsigned char                                      ReplicatedBoostAmount;                                    // 0x02F4(0x0001) (Net, Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02F5(0x0003) MISSED OFFSET
	class UProductAsset_Boost_TA*                      BoostAsset;                                               // 0x02F8(0x0008)
	class UFXActorEvent_X*                             BoostShakeState;                                          // 0x0300(0x0008) (Edit)
	class UProfileControlsSave_TA*                     ControlsSave;                                             // 0x0308(0x0008)
	struct FScriptDelegate                             __EventBoostAmountChanged__Delegate;                      // 0x0310(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0310(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_Boost_TA");
		return ptr;
	}


	bool ShouldPredictBoostConsumption();
	void __CarComponent_Boost_TA__OnCreated_FDCB78144D05773082BD7CB36794648E(class UObject* Obj);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void ReadReplicatedBoostAmount();
	void SetReplicatedBoostAmount();
	void ApplyForces(float ActiveTime);
	void PrePhysicsStep(float DeltaTime);
	void ClientGiveBoost(float Amount);
	void ConfirmBoostAmount();
	void SendConfirmBoostAmount();
	void ClientFixBoostAmount(float TimeStamp, float Amount);
	void ServerConfirmBoostAmount(float TimeStamp, float Amount);
	void SetRechargeDelay(float InRechargeDelay);
	void SetRechargeRate(float InRechargeRate);
	bool HasUnlimitedBoost();
	void SetNoBoost(bool Enabled);
	void SetUnlimitedBoost(bool Enabled);
	void SetUnlimitedBoostDelayed(bool Enabled);
	void SetBoostModifier(float Modifier);
	void SetBoostAmount(float Amount);
	void GiveBoost(float Amount);
	void GiveStartingBoost();
	void GiveFullBoost();
	float GetPercentBoostFull();
	bool IsFull();
	void RemoveFromCar();
	bool CanDeactivate();
	bool CanActivate();
	void InitFX();
	void HandleBoostAsset(class UProductAsset_Boost_TA* Asset);
	void OnCreated();
	void ReplicatedEvent(const struct FName& VarName);
	void EventBoostAmountChanged(class ACarComponent_Boost_TA* Boost);
};


// Class TAGame.CarComponent_Dodge_TA
// 0x0070 (0x0330 - 0x02C0)
class ACarComponent_Dodge_TA : public ACarComponent_TA
{
public:
	float                                              DodgeInputThreshold;                                      // 0x02C0(0x0004) (Edit)
	float                                              SideDodgeImpulse;                                         // 0x02C4(0x0004) (Edit)
	float                                              SideDodgeImpulseMaxSpeedScale;                            // 0x02C8(0x0004) (Edit)
	float                                              ForwardDodgeImpulse;                                      // 0x02CC(0x0004) (Edit)
	float                                              ForwardDodgeImpulseMaxSpeedScale;                         // 0x02D0(0x0004) (Edit)
	float                                              BackwardDodgeImpulse;                                     // 0x02D4(0x0004) (Edit)
	float                                              BackwardDodgeImpulseMaxSpeedScale;                        // 0x02D8(0x0004) (Edit)
	float                                              SideDodgeTorque;                                          // 0x02DC(0x0004) (Edit)
	float                                              ForwardDodgeTorque;                                       // 0x02E0(0x0004) (Edit)
	float                                              DodgeTorqueTime;                                          // 0x02E4(0x0004) (Edit)
	float                                              MinDodgeTorqueTime;                                       // 0x02E8(0x0004) (Edit)
	float                                              DodgeZDamping;                                            // 0x02EC(0x0004) (Edit)
	float                                              DodgeZDampingDelay;                                       // 0x02F0(0x0004) (Edit)
	float                                              DodgeZDampingUpTime;                                      // 0x02F4(0x0004) (Edit)
	float                                              DodgeImpulseScale;                                        // 0x02F8(0x0004) (Edit)
	float                                              DodgeTorqueScale;                                         // 0x02FC(0x0004) (Edit)
	class UFXActorEvent_X*                             JumpEvent;                                                // 0x0300(0x0008) (Edit)
	class UFXActorEvent_X*                             DoubleJumpEvent;                                          // 0x0308(0x0008) (Edit)
	class UFXActorEvent_X*                             DodgeEvent;                                               // 0x0310(0x0008) (Edit)
	struct FVector                                     DodgeTorque;                                              // 0x0318(0x000C) (Net, Transient)
	struct FVector                                     DodgeDirection;                                           // 0x0324(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_Dodge_TA");
		return ptr;
	}


	void SetDodgeSettings();
	void PrePhysicsStep(float DeltaTime);
	void ApplyTorqueForces(float ActiveTime);
	void ApplyDodgeImpulse();
	struct FVector GetDodgeImpulse(const struct FVector& DodgeDir);
	void ApplyForces(float ActiveTime);
	bool CanActivate();
	void OnCreated();
};


// Class TAGame.CarComponent_DoubleJump_TA
// 0x0008 (0x02C8 - 0x02C0)
class ACarComponent_DoubleJump_TA : public ACarComponent_TA
{
public:
	float                                              JumpImpulse;                                              // 0x02C0(0x0004) (Edit)
	float                                              ImpulseScale;                                             // 0x02C4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_DoubleJump_TA");
		return ptr;
	}


	void PrePhysicsStep(float DeltaTime);
	void ApplyForces(float ActiveTime);
	void OnCreated();
};


// Class TAGame.CarComponent_DoubleJump_Robin_TA
// 0x0018 (0x02E0 - 0x02C8)
class ACarComponent_DoubleJump_Robin_TA : public ACarComponent_DoubleJump_TA
{
public:
	struct FWaveParams                                 RandomPitch;                                              // 0x02C8(0x0008) (Edit)
	struct FWaveParams                                 RandomYaw;                                                // 0x02D0(0x0008) (Edit)
	struct FWaveParams                                 RandomRoll;                                               // 0x02D8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_DoubleJump_Robin_TA");
		return ptr;
	}


	void ApplyForces(float ActiveTime);
};


// Class TAGame.CarComponent_FlipCar_TA
// 0x0010 (0x02D0 - 0x02C0)
class ACarComponent_FlipCar_TA : public ACarComponent_TA
{
public:
	float                                              FlipCarImpulse;                                           // 0x02C0(0x0004) (Edit)
	float                                              FlipCarTorque;                                            // 0x02C4(0x0004) (Edit)
	float                                              FlipCarTime;                                              // 0x02C8(0x0004) (Edit, Net)
	unsigned long                                      bFlipRight : 1;                                           // 0x02CC(0x0004) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_FlipCar_TA");
		return ptr;
	}


	void InitFlip();
	void PrePhysicsStep(float DeltaTime);
	void ApplyForces(float ActiveTime);
	bool CanActivate();
	void OnCreated();
};


// Class TAGame.CarComponent_Jump_TA
// 0x0028 (0x02E8 - 0x02C0)
class ACarComponent_Jump_TA : public ACarComponent_TA
{
public:
	float                                              MinJumpTime;                                              // 0x02C0(0x0004) (Edit)
	float                                              JumpImpulse;                                              // 0x02C4(0x0004) (Edit)
	float                                              JumpForce;                                                // 0x02C8(0x0004) (Edit)
	float                                              JumpForceTime;                                            // 0x02CC(0x0004) (Edit)
	float                                              PodiumJumpForceTime;                                      // 0x02D0(0x0004) (Edit)
	float                                              JumpImpulseSpeed;                                         // 0x02D4(0x0004) (Transient)
	float                                              JumpAccel;                                                // 0x02D8(0x0004) (Transient)
	float                                              MaxJumpHeight;                                            // 0x02DC(0x0004) (Transient)
	float                                              MaxJumpHeightTime;                                        // 0x02E0(0x0004) (Transient)
	unsigned long                                      bDeactivate : 1;                                          // 0x02E4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_Jump_TA");
		return ptr;
	}


	void PrePhysicsStep(float DeltaTime);
	void ApplyForces(float ActiveTime);
	void CacheJumpData();
	void OnCreated();
};


// Class TAGame.CarComponent_Jump_Robin_TA
// 0x0018 (0x0300 - 0x02E8)
class ACarComponent_Jump_Robin_TA : public ACarComponent_Jump_TA
{
public:
	struct FWaveParams                                 RandomPitch;                                              // 0x02E8(0x0008) (Edit)
	struct FWaveParams                                 RandomYaw;                                                // 0x02F0(0x0008) (Edit)
	struct FWaveParams                                 RandomRoll;                                               // 0x02F8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarComponent_Jump_Robin_TA");
		return ptr;
	}


	void ApplyForces(float ActiveTime);
};


// Class TAGame.SpecialPickup_TA
// 0x0070 (0x0330 - 0x02C0)
class ASpecialPickup_TA : public ACarComponent_TA
{
public:
	struct FString                                     PickupName;                                               // 0x02C0(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bHudIgnoreUseTime : 1;                                    // 0x02D0(0x0004) (Edit)
	unsigned long                                      bHasActivated : 1;                                        // 0x02D0(0x0004)
	unsigned long                                      bIsActive : 1;                                            // 0x02D0(0x0004) (Transient)
	float                                              ActivationDuration;                                       // 0x02D4(0x0004) (Edit)
	class AFXActor_X*                                  PickupFXArchetype;                                        // 0x02D8(0x0008) (Edit)
	TArray<struct FPickupReplacement>                  BodyReplacements;                                         // 0x02E0(0x0010) (Edit, NeedCtorLink)
	class UShakeComponent_X*                           ShakeComponentArchetype;                                  // 0x02F0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UAkSoundCue*                                 ActivateSFX;                                              // 0x02F8(0x0008) (Edit)
	class UAkSoundCue*                                 LocalActivateSFX;                                         // 0x0300(0x0008) (Edit)
	class AFXActor_X*                                  PickupFX;                                                 // 0x0308(0x0008)
	class UShakeComponent_X*                           ShakeComp;                                                // 0x0310(0x0008) (ExportObject, Component, EditInline)
	struct FScriptDelegate                             __EventActivated__Delegate;                               // 0x0318(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0318(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_TA");
		return ptr;
	}


	bool DisableBallImpactForces();
	bool GetShouldHideActivateUI();
	bool HasActivated();
	class ARBActor_TA* GetClientTarget();
	void OnVehicleSetupComplete();
	void RemovePickupFX();
	void InitPickupFX();
	float GetActiveTimePercent();
	void PreActivatedTick(float DeltaTime);
	void PickupTick(float DeltaTime);
	void PickupEnd();
	void PickupStart();
	class ACarComponent_Boost_TA* GetBoostComponent();
	void UsePickupReleased();
	void DeactivatePickup();
	bool TryActivate(class ARBActor_TA* TargetOverride);
	void Destroyed();
	void HandleDemolish(class ACar_TA* InCar, const struct FDemolishData& Data);
	void OnCreated();
	bool CanPickup(class ACar_TA* InCar);
	void ApplyPickup(class ACar_TA* InCar);
	void RecordHit(class ARBActor_TA* HitActor, const struct FVector& Normal, TEnumAsByte<EBallHitType> HitType);
	void EventActivated(class ACar_TA* InCar, class ASpecialPickup_TA* Pickup);
};


// Class TAGame.SpecialPickup_BallGravity_TA
// 0x0098 (0x03C8 - 0x0330)
class ASpecialPickup_BallGravity_TA : public ASpecialPickup_TA
{
public:
	float                                              BallGravity;                                              // 0x0330(0x0004) (Edit)
	float                                              Range;                                                    // 0x0334(0x0004) (Edit)
	struct FVector                                     Offset;                                                   // 0x0338(0x000C) (Edit)
	unsigned long                                      bDeactivateOnTouch : 1;                                   // 0x0344(0x0004) (Edit)
	class UParticleSystem*                             BeamPSArchetype;                                          // 0x0348(0x0008) (Edit)
	struct FName                                       BeamPSParam;                                              // 0x0350(0x0008) (Edit)
	float                                              RecordBallHitRate;                                        // 0x0358(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x035C(0x0004) MISSED OFFSET
	class UMaterialInstanceConstant*                   BallMIC;                                                  // 0x0360(0x0008) (Edit)
	struct FName                                       BallMICParam;                                             // 0x0368(0x0008) (Edit)
	class AFXActor_TA*                                 BallFXArchetype;                                          // 0x0370(0x0008) (Edit)
	struct FInterpCurveFloat                           BallMICCurve;                                             // 0x0378(0x0018) (Edit, NeedCtorLink)
	class UAkSoundCue*                                 BallSFX;                                                  // 0x0390(0x0008) (Edit)
	float                                              LastRecordedBallHitTime;                                  // 0x0398(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	class UParticleSystemComponent*                    BeamPSC;                                                  // 0x03A0(0x0008) (ExportObject, Transient, Component, EditInline)
	class AFXActor_TA*                                 BallFX;                                                   // 0x03A8(0x0008) (Transient)
	class UStaticMeshComponent*                        CopiedBallMesh;                                           // 0x03B0(0x0008) (ExportObject, Transient, Component, EditInline)
	class UMaterialInstanceConstant*                   BMIC;                                                     // 0x03B8(0x0008) (Transient)
	class ABall_TA*                                    PrevBall;                                                 // 0x03C0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BallGravity_TA");
		return ptr;
	}


	void HandleHitBall(class ACar_TA* InCar, class ABall_TA* Ball, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void RemoveBallFX();
	void UpdateBallFX(class ABall_TA* Ball, const struct FVector& BallContactPos);
	void RemoveBeamFX();
	void UpdateBeamFX(class ABall_TA* Ball);
	class ABall_TA* GetBallInRange();
	void UpdateVisual();
	void PickupTick(float DeltaTime);
	void ApplyForces(float ActiveTime);
	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_HauntedBallBeam_TA
// 0x0040 (0x0408 - 0x03C8)
class ASpecialPickup_HauntedBallBeam_TA : public ASpecialPickup_BallGravity_TA
{
public:
	unsigned long                                      bIsPhasingBall : 1;                                       // 0x03C8(0x0004)
	unsigned long                                      bIsInRange : 1;                                           // 0x03C8(0x0004)
	unsigned long                                      bSFxLoopIsPlaying : 1;                                    // 0x03C8(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET
	class ABall_Haunted_TA*                            PrevHauntedBall;                                          // 0x03D0(0x0008)
	int                                                MaxSimulatedClients;                                      // 0x03D8(0x0004)
	float                                              ArrivalDistance;                                          // 0x03DC(0x0004)
	struct FVector                                     CarAvoidenceOffset;                                       // 0x03E0(0x000C)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET
	class UAkSoundCue*                                 BeamEndSFX;                                               // 0x03F0(0x0008) (Edit)
	class UAkSoundCue*                                 ConnectedBeamLoopSFX;                                     // 0x03F8(0x0008) (Edit)
	class UAkSoundCue*                                 BeamLoopSFX;                                              // 0x0400(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_HauntedBallBeam_TA");
		return ptr;
	}


	void RemoveBeamFX();
	void UpdateBeamFX(class ABall_TA* Ball);
	void RemovePhase();
	class ABall_TA* GetBallInRange();
	void PickupTick(float DeltaTime);
	void PickupEnd();
	void PickupStart();
	void ApplyForces(float ActiveTime);
};


// Class TAGame.SpecialPickup_Targeted_TA
// 0x0038 (0x0368 - 0x0330)
class ASpecialPickup_Targeted_TA : public ASpecialPickup_TA
{
public:
	unsigned long                                      bCanTargetBall : 1;                                       // 0x0330(0x0004) (Edit)
	unsigned long                                      bCanTargetCars : 1;                                       // 0x0330(0x0004) (Edit)
	unsigned long                                      bCanTargetEnemyCars : 1;                                  // 0x0330(0x0004) (Edit)
	unsigned long                                      bCanTargetTeamCars : 1;                                   // 0x0330(0x0004) (Edit)
	unsigned long                                      bUseDirectionalTargeting : 1;                             // 0x0330(0x0004) (Edit)
	unsigned long                                      bRequireTrace : 1;                                        // 0x0330(0x0004) (Edit)
	float                                              Range;                                                    // 0x0334(0x0004) (Edit)
	float                                              DirectionalTargetingAccuracy;                             // 0x0338(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	class ARBActor_TA*                                 ClientTarget;                                             // 0x0340(0x0008) (Transient)
	class ARBActor_TA*                                 Targeted;                                                 // 0x0348(0x0008) (Net, Transient)
	struct FScriptDelegate                             __EventNewTarget__Delegate;                               // 0x0350(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0350(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Targeted_TA");
		return ptr;
	}


	class ARBActor_TA* GetClientTarget();
	void TargetChanged();
	void OnTargetChanged();
	void PreActivatedTick(float DeltaTime);
	bool TryActivate(class ARBActor_TA* TargetOverride);
	bool ValidateTargetTrace(class ARBActor_TA* InTarget);
	bool ValidateTarget(class ARBActor_TA* InTarget);
	class ARBActor_TA* GetTarget();
	void ReplicatedEvent(const struct FName& VarName);
	void EventNewTarget(class ACar_TA* OwnerCar, class ASpecialPickup_TA* Pickup);
};


// Class TAGame.SpecialPickup_BallFreeze_TA
// 0x0098 (0x0400 - 0x0368)
class ASpecialPickup_BallFreeze_TA : public ASpecialPickup_Targeted_TA
{
public:
	class AFXActor_X*                                  FreezeBreakFXArchetype;                                   // 0x0368(0x0008) (Edit)
	class AFXActor_X*                                  FreezeFXArchetype;                                        // 0x0370(0x0008) (Edit)
	class UMaterialInstanceConstant*                   FreezeMIC;                                                // 0x0378(0x0008) (Edit)
	struct FName                                       FreezeMaterialParam;                                      // 0x0380(0x0008) (Edit)
	struct FInterpCurveFloat                           FreezeInterpTime;                                         // 0x0388(0x0018) (Edit, NeedCtorLink)
	unsigned long                                      bMaintainMomentum : 1;                                    // 0x03A0(0x0004) (Edit)
	unsigned long                                      bTouched : 1;                                             // 0x03A0(0x0004) (Transient)
	float                                              TimeToStop;                                               // 0x03A4(0x0004) (Edit)
	float                                              StopMomentumPercentage;                                   // 0x03A8(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	class UAkSoundCue*                                 FreezeSFX;                                                // 0x03B0(0x0008) (Edit)
	class UAkSoundCue*                                 BreakSFX;                                                 // 0x03B8(0x0008) (Edit)
	class UStaticMeshComponent*                        CopiedBallMesh;                                           // 0x03C0(0x0008) (ExportObject, Transient, Component, EditInline)
	class ABall_TA*                                    Ball;                                                     // 0x03C8(0x0008) (Transient)
	struct FVector                                     OrigLinearVelocity;                                       // 0x03D0(0x000C) (Transient)
	struct FVector                                     OrigAngularVelocity;                                      // 0x03DC(0x000C) (Transient)
	float                                              OrigSpeed;                                                // 0x03E8(0x0004) (Transient)
	float                                              RepOrigSpeed;                                             // 0x03EC(0x0004) (Net, Transient)
	class UMaterialInstanceConstant*                   FreezeMat;                                                // 0x03F0(0x0008) (Transient)
	class AFXActor_X*                                  FreezeFX;                                                 // 0x03F8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BallFreeze_TA");
		return ptr;
	}


	void PickupEnd();
	void SpawnBreakFX();
	void HandleBallExploded(class ABall_TA* InBall);
	void HandleBallHit(class ABall_TA* InBall, class ACar_TA* InCar, TEnumAsByte<EBallHitType> HitType);
	void RemovePickupFX();
	void TickPickupFX(float DeltaTime);
	void ApplyForces(float ActiveTime);
	void PickupTick(float DeltaTime);
	void InitPickupFX();
	void OnTargetChanged();
	void PickupStart();
};


// Class TAGame.SpecialPickup_GrapplingHook_TA
// 0x0108 (0x0470 - 0x0368)
class ASpecialPickup_GrapplingHook_TA : public ASpecialPickup_Targeted_TA
{
public:
	float                                              Impulse;                                                  // 0x0368(0x0004) (Edit)
	float                                              Force;                                                    // 0x036C(0x0004) (Edit)
	float                                              MaxRopeLength;                                            // 0x0370(0x0004) (Edit)
	float                                              PredictionSpeed;                                          // 0x0374(0x0004) (Edit)
	unsigned long                                      bDeactivateOnTouch : 1;                                   // 0x0378(0x0004) (Edit)
	unsigned long                                      bInstant : 1;                                             // 0x0378(0x0004) (Edit)
	unsigned long                                      bBlocked : 1;                                             // 0x0378(0x0004) (Transient)
	unsigned long                                      bAttachedToBall : 1;                                      // 0x0378(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x037C(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           RopeLengthCurve;                                          // 0x0380(0x0018) (Edit, NeedCtorLink)
	class UStaticMesh*                                 RopeMesh;                                                 // 0x0398(0x0008) (Edit)
	struct FVector                                     RopeMeshScale;                                            // 0x03A0(0x000C) (Edit)
	float                                              RopeMeshInitialSize;                                      // 0x03AC(0x0004) (Edit)
	struct FRotator                                    RopeRotationOffset;                                       // 0x03B0(0x000C) (Edit)
	struct FName                                       RopeMeshSlackParam;                                       // 0x03BC(0x0008) (Edit)
	struct FName                                       RopeMeshGravityParam;                                     // 0x03C4(0x0008) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03CC(0x0004) MISSED OFFSET
	class USkeletalMesh*                               HookMesh;                                                 // 0x03D0(0x0008) (Edit)
	struct FVector                                     HookMeshScale;                                            // 0x03D8(0x000C) (Edit)
	struct FVector                                     HookMeshOffset;                                           // 0x03E4(0x000C) (Edit)
	struct FRotator                                    HookRotationOffset;                                       // 0x03F0(0x000C) (Edit)
	float                                              HitDistanceOffset;                                        // 0x03FC(0x0004) (Edit)
	float                                              AfterAttachDuration;                                      // 0x0400(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0404(0x0004) MISSED OFFSET
	class UAnimSet*                                    HookAnimSet;                                              // 0x0408(0x0008) (Edit)
	struct FName                                       HookClosedAnim;                                           // 0x0410(0x0008) (Edit)
	struct FName                                       HookOpenAnim;                                             // 0x0418(0x0008) (Edit)
	float                                              BlockedRequiredMoveDistance;                              // 0x0420(0x0004) (Edit)
	float                                              BlockedRequiredMoveTime;                                  // 0x0424(0x0004) (Edit)
	float                                              BlockedStartTime;                                         // 0x0428(0x0004) (Transient)
	struct FVector                                     BlockedStartPos;                                          // 0x042C(0x000C) (Transient)
	class UStaticMeshComponent_TA*                     RMC;                                                      // 0x0438(0x0008) (ExportObject, Transient, Component, EditInline)
	class UMaterialInstance*                           RMI;                                                      // 0x0440(0x0008) (Transient)
	class USkeletalMeshComponent_TA*                   HMC;                                                      // 0x0448(0x0008) (ExportObject, Transient, Component, EditInline)
	class ABall_TA*                                    Ball;                                                     // 0x0450(0x0008) (Transient)
	struct FVector                                     RopeOrigin;                                               // 0x0458(0x000C) (Transient)
	float                                              RopeToTime;                                               // 0x0464(0x0004) (Transient)
	float                                              CurrentRopeLength;                                        // 0x0468(0x0004) (Transient)
	float                                              AttachTime;                                               // 0x046C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_GrapplingHook_TA");
		return ptr;
	}


	void HandleBallExploded(class ABall_TA* InBall);
	void PickupEnd();
	void ScaleMeshToLocation(const struct FVector& NewLocation, const struct FVector& TargetLocation);
	struct FVector GetPredictedBallLocation(class ABall_TA* InBall);
	struct FVector GetTargetedLocation();
	void HandleCollision(class ARBActor_TA* RB, const struct FAccumulatedRigidBodyCollision& Collision);
	void UpdateVisual(float DeltaTime);
	void PickupTick(float DeltaTime);
	void ApplyForces(float ActiveTime);
	void DoAttach();
	void RemovePickupFX();
	void InitPickupFX();
	void PickupStart();
};


// Class TAGame.SpecialPickup_Spring_TA
// 0x01A8 (0x0510 - 0x0368)
class ASpecialPickup_Spring_TA : public ASpecialPickup_Targeted_TA
{
public:
	float                                              Force;                                                    // 0x0368(0x0004) (Edit)
	float                                              VerticalForce;                                            // 0x036C(0x0004) (Edit)
	struct FVector                                     Torque;                                                   // 0x0370(0x000C) (Edit)
	unsigned long                                      bApplyRelativeForce : 1;                                  // 0x037C(0x0004) (Edit)
	unsigned long                                      bApplyConstantForce : 1;                                  // 0x037C(0x0004) (Edit)
	unsigned long                                      bBreakConstantForceWithHit : 1;                           // 0x037C(0x0004) (Edit)
	unsigned long                                      bApplyRelativeConstantForce : 1;                          // 0x037C(0x0004) (Edit)
	unsigned long                                      bInstant : 1;                                             // 0x037C(0x0004) (Edit)
	unsigned long                                      bFollowAfterHit : 1;                                      // 0x037C(0x0004) (Edit)
	unsigned long                                      bSpringed : 1;                                            // 0x037C(0x0004)
	struct FInterpCurveFloat                           RelativeForceCurve;                                       // 0x0380(0x0018) (Edit, NeedCtorLink)
	float                                              RelativeForceNormalDirection;                             // 0x0398(0x0004) (Edit)
	float                                              MaxSpringLength;                                          // 0x039C(0x0004) (Edit)
	float                                              ConstantForce;                                            // 0x03A0(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03A4(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           RelativeConstantForceCurve;                               // 0x03A8(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           SpringLengthCurve;                                        // 0x03C0(0x0018) (Edit, NeedCtorLink)
	struct FVector                                     FromOffset;                                               // 0x03D8(0x000C) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03E4(0x0004) MISSED OFFSET
	class UStaticMesh*                                 SpringMesh;                                               // 0x03E8(0x0008) (Edit)
	struct FVector                                     SpringMeshScale;                                          // 0x03F0(0x000C) (Edit)
	float                                              SpringMeshInitialSize;                                    // 0x03FC(0x0004) (Edit)
	struct FRotator                                    SpringRotationOffset;                                     // 0x0400(0x000C) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x040C(0x0004) MISSED OFFSET
	class UStaticMesh*                                 HittingMesh;                                              // 0x0410(0x0008) (Edit)
	struct FVector                                     HittingMeshScale;                                         // 0x0418(0x000C) (Edit)
	struct FVector                                     HittingMeshOffset;                                        // 0x0424(0x000C) (Edit)
	struct FRotator                                    HittingRotationOffset;                                    // 0x0430(0x000C) (Edit)
	float                                              HitDistanceOffset;                                        // 0x043C(0x0004) (Edit)
	float                                              AfterSpringDuration;                                      // 0x0440(0x0004) (Edit)
	TEnumAsByte<EBallHitType>                          BallHitType;                                              // 0x0444(0x0001) (Edit)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0445(0x0003) MISSED OFFSET
	struct FInterpCurveFloat                           AfterHitLengthCurve;                                      // 0x0448(0x0018) (Edit, NeedCtorLink)
	class AFXActor_TA*                                 HitFXArchetype;                                           // 0x0460(0x0008) (Edit)
	class AFXActor_TA*                                 ShootFXArchetype;                                         // 0x0468(0x0008) (Edit)
	class UAkSoundCue*                                 HitSFX;                                                   // 0x0470(0x0008) (Edit)
	struct FName                                       FadeOutParam;                                             // 0x0478(0x0008) (Edit)
	struct FInterpCurveFloat                           FadeOutCurve;                                             // 0x0480(0x0018) (Edit, NeedCtorLink)
	float                                              MinSpringLength;                                          // 0x0498(0x0004) (Edit)
	float                                              WeldedForceScalar;                                        // 0x049C(0x0004) (Edit)
	float                                              WeldedVerticalForce;                                      // 0x04A0(0x0004) (Edit)
	float                                              CurrentSpringLength;                                      // 0x04A4(0x0004)
	float                                              SpringedTime;                                             // 0x04A8(0x0004)
	unsigned char                                      UnknownData04[0x4];                                       // 0x04AC(0x0004) MISSED OFFSET
	class UStaticMeshComponent_TA*                     SMC;                                                      // 0x04B0(0x0008) (ExportObject, Transient, Component, EditInline)
	class UMaterialInstance*                           SMI;                                                      // 0x04B8(0x0008) (Transient)
	class UStaticMeshComponent_TA*                     HMC;                                                      // 0x04C0(0x0008) (ExportObject, Transient, Component, EditInline)
	TArray<class UMaterialInstance*>                   HMI;                                                      // 0x04C8(0x0010) (Transient, NeedCtorLink)
	float                                              AfterSpringTime;                                          // 0x04D8(0x0004) (Transient)
	float                                              SpringToTime;                                             // 0x04DC(0x0004) (Transient)
	struct FVector                                     SpringOrigin;                                             // 0x04E0(0x000C) (Transient)
	struct FVector                                     SpringedLocation;                                         // 0x04EC(0x000C) (Transient)
	struct FVector                                     SpringedNormal;                                           // 0x04F8(0x000C) (Transient)
	float                                              SpringedLength;                                           // 0x0504(0x0004) (Transient)
	class AFXActor_TA*                                 ShootFX;                                                  // 0x0508(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Spring_TA");
		return ptr;
	}


	void PickupEnd();
	void HandleCarTouchedBall(class ABall_TA* Ball, class ACar_TA* OtherCar, TEnumAsByte<EBallHitType> HitType);
	void ScaleSpringMeshToLocation(const struct FVector& NewLocation, const struct FVector& TargetLoction);
	void UpdateVisual(float DeltaTime);
	void PickupTick(float DeltaTime);
	void UpdateCarTouchedEvent();
	void ApplyForces(float ActiveTime);
	struct FVector GetRelativeConstantForce(const struct FVector& Direction);
	struct FVector GetRelativeImpulse(const struct FVector& Direction);
	void SpawnHitFX();
	void DoSpring(bool bFirstHit);
	void RemovePickupFX();
	void InitPickupFX();
	void PickupStart();
};


// Class TAGame.SpecialPickup_BallLasso_TA
// 0x0008 (0x0518 - 0x0510)
class ASpecialPickup_BallLasso_TA : public ASpecialPickup_Spring_TA
{
public:
	struct FName                                       SpringMeshSlackParam;                                     // 0x0510(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BallLasso_TA");
		return ptr;
	}


	void ScaleSpringMeshToLocation(const struct FVector& NewLocation, const struct FVector& TargetLocation);
	void DoSpring(bool bFirstHit);
};


// Class TAGame.SpecialPickup_Tornado_TA
// 0x0168 (0x0498 - 0x0330)
class ASpecialPickup_Tornado_TA : public ASpecialPickup_TA
{
public:
	float                                              Height;                                                   // 0x0330(0x0004) (Edit)
	float                                              Radius;                                                   // 0x0334(0x0004) (Edit)
	struct FVector                                     Offset;                                                   // 0x0338(0x000C) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0344(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           VerticalForceCurve;                                       // 0x0348(0x0018) (Edit, NeedCtorLink)
	float                                              RotationalForce;                                          // 0x0360(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0364(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           CentripetalForceCurve;                                    // 0x0368(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           CarDirectionForceCurve;                                   // 0x0380(0x0018) (Edit, NeedCtorLink)
	float                                              Torque;                                                   // 0x0398(0x0004) (Edit)
	struct FVector                                     FXScale;                                                  // 0x039C(0x000C) (Edit)
	struct FVector                                     FXOffset;                                                 // 0x03A8(0x000C) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	class UStaticMesh*                                 TornadoMesh;                                              // 0x03B8(0x0008) (Edit)
	struct FVector                                     MeshOffset;                                               // 0x03C0(0x000C) (Edit)
	struct FVector                                     MeshScale;                                                // 0x03CC(0x000C) (Edit)
	class UMaterialInstanceConstant*                   TornadoMIC0;                                              // 0x03D8(0x0008) (Edit)
	class UMaterialInstanceConstant*                   TornadoMIC1;                                              // 0x03E0(0x0008) (Edit)
	class UMaterialInstanceConstant*                   TornadoMIC2;                                              // 0x03E8(0x0008) (Edit)
	class UMaterialInstanceConstant*                   TornadoMIC3;                                              // 0x03F0(0x0008) (Edit)
	class UMaterialInstanceConstant*                   TornadoMIC4;                                              // 0x03F8(0x0008) (Edit)
	class UMaterialInstanceConstant*                   TornadoMIC5;                                              // 0x0400(0x0008) (Edit)
	struct FInterpCurveFloat                           OpacityCurve;                                             // 0x0408(0x0018) (Edit, NeedCtorLink)
	float                                              MaxVelocityOffset;                                        // 0x0420(0x0004) (Edit)
	float                                              BallMultiplier;                                           // 0x0424(0x0004) (Edit)
	unsigned long                                      bDebugVis : 1;                                            // 0x0428(0x0004) (Edit)
	float                                              VelocityEase;                                             // 0x042C(0x0004) (Edit)
	class UAkSoundCue*                                 BallSFX;                                                  // 0x0430(0x0008) (Edit)
	class UAkSoundCue*                                 CarSFX;                                                   // 0x0438(0x0008) (Edit)
	class UStaticMeshComponent*                        SMC;                                                      // 0x0440(0x0008) (ExportObject, Component, EditInline)
	class UMaterialInstanceConstant*                   MIC0;                                                     // 0x0448(0x0008)
	class UMaterialInstanceConstant*                   MIC1;                                                     // 0x0450(0x0008)
	class UMaterialInstanceConstant*                   MIC2;                                                     // 0x0458(0x0008)
	class UMaterialInstanceConstant*                   MIC3;                                                     // 0x0460(0x0008)
	class UMaterialInstanceConstant*                   MIC4;                                                     // 0x0468(0x0008)
	class UMaterialInstanceConstant*                   MIC5;                                                     // 0x0470(0x0008)
	struct FVector                                     Vel;                                                      // 0x0478(0x000C) (Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0484(0x0004) MISSED OFFSET
	TArray<class ARBActor_TA*>                         Affecting;                                                // 0x0488(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Tornado_TA");
		return ptr;
	}


	void ApplyForces(float ActiveTime);
	void RemovePickupFX();
	void PlayCarSFX(class ARBActor_TA* InActor);
	void PlayBallSFX(class ARBActor_TA* InActor);
	void TickPickupFX(float DeltaTime);
	void PickupTick(float DeltaTime);
	void InitPickupFX();
};


// Class TAGame.CertifiedStat_TA
// 0x0018 (0x0078 - 0x0060)
class UCertifiedStat_TA : public UObject
{
public:
	class UClass*                                      StatClass;                                                // 0x0060(0x0008) (Edit)
	TArray<int>                                        RankThresholds;                                           // 0x0068(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CertifiedStat_TA");
		return ptr;
	}


	struct FString GetRankLabel(int StatValue);
	int GetRank(int StatValue);
	struct FString GetDescription();
	int GetID();
};


// Class TAGame.CertifiedStatDatabase_TA
// 0x0064 (0x00C4 - 0x0060)
class UCertifiedStatDatabase_TA : public UObject
{
public:
	TArray<class UCertifiedStat_TA*>                   Stats;                                                    // 0x0060(0x0010) (Edit, Const, EditConst, NeedCtorLink)
	struct FMap_Mirror                                 StatNameToStatID;                                         // 0x0070(0x0050) (Const, Native)
	unsigned long                                      bClickToRebuild : 1;                                      // 0x00C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CertifiedStatDatabase_TA");
		return ptr;
	}


	class UCertifiedStat_TA* GetStatByName(const struct FName& StatName);
	class UCertifiedStat_TA* GetStat(int Id);
	struct FName GetStatName(int StatId);
	int GetStatId(const struct FName& StatName);
};


// Class TAGame.ClientInputData_TA
// 0x0024 (0x0084 - 0x0060)
class UClientInputData_TA : public UObject
{
public:
	class APlayerController_TA*                        PC;                                                       // 0x0060(0x0008)
	TArray<struct FClientFrameData>                    InputFrames;                                              // 0x0068(0x0010) (NeedCtorLink)
	float                                              LastPacketTimestamp;                                      // 0x0078(0x0004)
	int                                                LastProcessedFrame;                                       // 0x007C(0x0004)
	int                                                LastProcessedReceivedFrame;                               // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ClientInputData_TA");
		return ptr;
	}

};


// Class TAGame.ClientJitterBuffer_TA
// 0x001C (0x007C - 0x0060)
class UClientJitterBuffer_TA : public UObject
{
public:
	class UNetworkJitterSettings_TA*                   JitterSettings;                                           // 0x0060(0x0008)
	float                                              LastPacketTime;                                           // 0x0068(0x0004)
	float                                              PacketTimeMu;                                             // 0x006C(0x0004)
	float                                              PacketTimeVariance;                                       // 0x0070(0x0004)
	float                                              BufferTime;                                               // 0x0074(0x0004)
	int                                                BufferSize;                                               // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ClientJitterBuffer_TA");
		return ptr;
	}


	void Reset();
	void UpdateBufferSize();
	void ReceivedPacket();
};


// Class TAGame.CollisionTestComponent_TA
// 0x004F (0x00EC - 0x009D)
class UCollisionTestComponent_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	class AActor*                                      LineStart;                                                // 0x00A0(0x0008) (Edit)
	class AActor*                                      LineEnd;                                                  // 0x00A8(0x0008) (Edit)
	class AActor*                                      ArchetypeToSpawn;                                         // 0x00B0(0x0008) (Edit)
	struct FVector                                     CachedCenter;                                             // 0x00B8(0x000C) (Const)
	struct FVector                                     CachedStart;                                              // 0x00C4(0x000C) (Const)
	struct FVector                                     CachedEnd;                                                // 0x00D0(0x000C) (Const)
	float                                              Speed;                                                    // 0x00DC(0x0004) (Edit)
	float                                              Step;                                                     // 0x00E0(0x0004) (Edit)
	float                                              Time;                                                     // 0x00E4(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x00E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CollisionTestComponent_TA");
		return ptr;
	}

};


// Class TAGame.ContentConfig_TA
// 0x0000 (0x0088 - 0x0088)
class UContentConfig_TA : public UContentConfig_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ContentConfig_TA");
		return ptr;
	}


	void Apply();
	void UpdateAvailableContent();
};


// Class TAGame.CrowdActorSettings_TA
// 0x0118 (0x0178 - 0x0060)
class UCrowdActorSettings_TA : public UObject
{
public:
	float                                              NoiseRiseRate;                                            // 0x0060(0x0004) (Edit)
	float                                              NoiseFallRate;                                            // 0x0064(0x0004) (Edit)
	struct FRandomRange                                IdleNoise;                                                // 0x0068(0x0008) (Edit)
	struct FRandomRange                                IdleNoiseDuration;                                        // 0x0070(0x0008) (Edit)
	class UCrowdNoiseModifier_TA*                      CountdownStartNoise;                                      // 0x0078(0x0008) (Edit, EditInline)
	class UCrowdNoiseModifier_TA*                      CountdownEndNoise;                                        // 0x0080(0x0008) (Edit, EditInline)
	class UCrowdNoiseModifier_TA*                      OvertimeStartNoise;                                       // 0x0088(0x0008) (Edit, EditInline)
	class UCrowdNoiseModifier_TA*                      TimeAlmostOutNoise;                                       // 0x0090(0x0008) (Edit, EditInline)
	TArray<struct FStatCrowdNoise>                     StatNoises;                                               // 0x0098(0x0010) (Edit, EditFixedSize, NeedCtorLink)
	class UAkSoundCue*                                 RandomChantsSound;                                        // 0x00A8(0x0008) (Edit)
	struct FRandomRange                                RandomChantsDelay;                                        // 0x00B0(0x0008) (Edit)
	unsigned long                                      UpdateStatNoises : 1;                                     // 0x00B8(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           BallGoalDistanceNoiseCurve;                               // 0x00C0(0x0018) (Edit, NeedCtorLink)
	struct FVector                                     GoalDotDirection;                                         // 0x00D8(0x000C) (Edit)
	float                                              MinGoalDotAngle;                                          // 0x00E4(0x0004) (Edit)
	TArray<struct FBallHitCrowdNoise>                  BallHitNoises;                                            // 0x00E8(0x0010) (Edit, NeedCtorLink)
	float                                              BallHitNoiseDelay;                                        // 0x00F8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	TArray<class UAkSoundCue*>                         CountDownSoundList;                                       // 0x0100(0x0010) (Edit, NeedCtorLink)
	TArray<class UAkSoundCue*>                         RoundCountDownSoundList;                                  // 0x0110(0x0010) (Edit, NeedCtorLink)
	class UAkSoundCue*                                 OneMinRemaining;                                          // 0x0120(0x0008) (Edit)
	class UAkSoundCue*                                 ThirtySecondsRemaining;                                   // 0x0128(0x0008) (Edit)
	class UAkSoundCue*                                 CrowdStingerWin;                                          // 0x0130(0x0008) (Edit)
	class UAkSoundCue*                                 CrowdStingerLose;                                         // 0x0138(0x0008) (Edit)
	class UAkSoundCue*                                 CrowdStingerForfeit;                                      // 0x0140(0x0008) (Edit)
	class UAkSoundCue*                                 CrowdStartOverTimeSound;                                  // 0x0148(0x0008) (Edit)
	class UAkSoundCue*                                 MatchEndedEncore;                                         // 0x0150(0x0008) (Edit)
	float                                              MatchEndedEncoreDelay;                                    // 0x0158(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x015C(0x0004) MISSED OFFSET
	struct FCrowdDefenseSettings                       DefenseChant;                                             // 0x0160(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CrowdActorSettings_TA");
		return ptr;
	}

};


// Class TAGame.CrowdNoiseModifier_TA
// 0x0018 (0x0078 - 0x0060)
class UCrowdNoiseModifier_TA : public UObject
{
public:
	float                                              ValueMin;                                                 // 0x0060(0x0004) (Edit)
	float                                              ValueMax;                                                 // 0x0064(0x0004) (Edit)
	float                                              DurationMin;                                              // 0x0068(0x0004) (Edit)
	float                                              DurationMax;                                              // 0x006C(0x0004) (Edit)
	class UAkSoundCue*                                 OneShotSound;                                             // 0x0070(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CrowdNoiseModifier_TA");
		return ptr;
	}

};


// Class TAGame.DataAsset_ESportsTeam_TA
// 0x0010 (0x0070 - 0x0060)
class UDataAsset_ESportsTeam_TA : public UObject
{
public:
	int                                                TeamID;                                                   // 0x0060(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	class UProductAssetReference_TA*                   ESportsTeamReference;                                     // 0x0068(0x0008) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DataAsset_ESportsTeam_TA");
		return ptr;
	}

};


// Class TAGame.DataAssetDatabase_TA
// 0x006C (0x00CC - 0x0060)
class UDataAssetDatabase_TA : public UObject
{
public:
	class UClass*                                      DataAssetClass;                                           // 0x0060(0x0008) (Edit, EditConst)
	TArray<class UObject*>                             DataAssets;                                               // 0x0068(0x0010) (Edit, NeedCtorLink)
	struct FMap_Mirror                                 NameToID;                                                 // 0x0078(0x0050) (Const, Native)
	unsigned long                                      bClickToRebuild : 1;                                      // 0x00C8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DataAssetDatabase_TA");
		return ptr;
	}


	class UObject* GetAssetFromName(class UClass* ObjClass, const struct FName& DataAssetName);
	class UObject* GetAssetFromID(class UClass* ObjClass, int DataAssetID);
	struct FName GetName(int DataAssetID);
	int GetID(const struct FName& DataAssetName);
};


// Class TAGame.DataAssetDatabase_ESportsTeam_TA
// 0x0004 (0x00D0 - 0x00CC)
class UDataAssetDatabase_ESportsTeam_TA : public UDataAssetDatabase_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DataAssetDatabase_ESportsTeam_TA");
		return ptr;
	}

};


// Class TAGame.DecalComponent_Constrained_TA
// 0x0008 (0x03E8 - 0x03E0)
class UDecalComponent_Constrained_TA : public UDecalComponent
{
public:
	float                                              WorldZ;                                                   // 0x03E0(0x0004) (Edit)
	unsigned long                                      bAttachedRotation : 1;                                    // 0x03E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DecalComponent_Constrained_TA");
		return ptr;
	}

};


// Class TAGame.DistributionFloatSpeed_TA
// 0x0014 (0x00B5 - 0x00A1)
class UDistributionFloatSpeed_TA : public UDistributionFloatParameterBase
{
public:
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET
	struct FVector                                     VelocityScale;                                            // 0x00A8(0x000C) (Edit)
	TEnumAsByte<ESpeedDistributionSpace>               VelocitySpace;                                            // 0x00B4(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DistributionFloatSpeed_TA");
		return ptr;
	}

};


// Class TAGame.DistributionFloatSteer_TA
// 0x0007 (0x00A8 - 0x00A1)
class UDistributionFloatSteer_TA : public UDistributionFloatParameterBase
{
public:
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A1(0x0007) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DistributionFloatSteer_TA");
		return ptr;
	}

};


// Class TAGame.DLCPack_TA
// 0x0070 (0x00D0 - 0x0060)
class UDLCPack_TA : public UObject
{
public:
	TArray<TEnumAsByte<EConsoleType>>                  UnlockedPlatforms;                                        // 0x0060(0x0010) (Edit, NeedCtorLink)
	TArray<TEnumAsByte<EConsoleType>>                  DiscUnlockedPlatforms;                                    // 0x0070(0x0010) (Edit, NeedCtorLink)
	class UProductSlot_TA*                             LabelSlot;                                                // 0x0080(0x0008) (Edit)
	int                                                SteamID;                                                  // 0x0088(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	struct FString                                     PS4ID;                                                    // 0x0090(0x0010) (Edit, NeedCtorLink)
	struct FString                                     XboxOneID;                                                // 0x00A0(0x0010) (Edit, NeedCtorLink)
	struct FString                                     SwitchID;                                                 // 0x00B0(0x0010) (Edit, NeedCtorLink)
	TArray<class UProduct_TA*>                         Products;                                                 // 0x00C0(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DLCPack_TA");
		return ptr;
	}


	int GetDLCLabelSlotProductID(int SubIdx);
};


// Class TAGame.EngineAudioBaseComponent_TA
// 0x005C (0x0100 - 0x00A4)
class UEngineAudioBaseComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class UAkPlaySoundComponent*                       EngineAudio;                                              // 0x00A8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UAkPlaySoundComponent*                       ExhaustAudio;                                             // 0x00B0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UEngineAudioBlowoffComponent_TA*             BlowoffComponent;                                         // 0x00B8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UWheelSpeedComponent_TA*                     WheelSpeed;                                               // 0x00C0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UThrottleStateComponent_TA*                  ThrottleComponent;                                        // 0x00C8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UAkSoundCue*                                 GearChangeSound;                                          // 0x00D0(0x0008) (Edit)
	class UMaxActorsGroup_TA*                          MaxActorsGroup;                                           // 0x00D8(0x0008) (ExportObject, Transient, Component, EditInline)
	class AVehicle_TA*                                 Car;                                                      // 0x00E0(0x0008) (Transient)
	struct FScriptDelegate                             __GetNormalizedRpmDelegate__Delegate;                     // 0x00E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioBaseComponent_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void GearChanged();
	void HandleSplitScreenTypeChanged(class UGameViewportClient_TA* ViewportClient);
	void HandleDisabled();
	void HandleEnabled();
	void InitFromAsset(class UProductAsset_EngineAudio_TA* EngineAsset);
	void Detached();
	void Attached();
	float GetNormalizedRpmDelegate();
};


// Class TAGame.EngineAudioComponent_TA
// 0x0020 (0x0120 - 0x0100)
class UEngineAudioComponent_TA : public UEngineAudioBaseComponent_TA
{
public:
	class UEngineAudioProfile_TA*                      Profile;                                                  // 0x0100(0x0008) (Edit)
	struct FCarStateData                               OldCarState;                                              // 0x0108(0x0010) (Transient)
	struct FPointer                                    NativeState;                                              // 0x0118(0x0008) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioComponent_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	float GetNormalizedRpm();
	struct FName GetNativeStateName();
	void DestroyNativeState();
	void HandleDisabled();
	void InitFromAsset(class UProductAsset_EngineAudio_TA* EngineAsset);
};


// Class TAGame.EngineAudioREVComponent_TA
// 0x00A0 (0x01A0 - 0x0100)
class UEngineAudioREVComponent_TA : public UEngineAudioBaseComponent_TA
{
public:
	class UEngineAudioProfileREV_TA*                   Profile;                                                  // 0x0100(0x0008) (Edit)
	class UAkRevPhysicsSimulation*                     PhysicsSim;                                               // 0x0108(0x0008) (Edit)
	class UEngineAudioRevSimLimiter_TA*                RevLimiter;                                               // 0x0110(0x0008) (Edit, ExportObject, Component, EditInline)
	class UEngineAudioRevSimReverse_TA*                Reverse;                                                  // 0x0118(0x0008) (Edit, ExportObject, Component, EditInline)
	class UEngineAudioRevSimVelocitySync_TA*           VelocitySync;                                             // 0x0120(0x0008) (Edit, ExportObject, Component, EditInline)
	class UEngineAudioRevSimBoost_TA*                  Boost;                                                    // 0x0128(0x0008) (Edit, ExportObject, Component, EditInline)
	class UEngineAudioRevSimBoostLevel_TA*             BoostLevel;                                               // 0x0130(0x0008) (Edit, ExportObject, Component, EditInline)
	class UEngineAudioRevSimResistance_TA*             Resistance;                                               // 0x0138(0x0008) (Edit, ExportObject, Component, EditInline)
	class UEngineAudioRevSimGearManager_TA*            GearManager;                                              // 0x0140(0x0008) (ExportObject, Component, EditInline)
	struct FAkRevSimFrame                              SimFrame;                                                 // 0x0148(0x0010) (Transient)
	struct FAkRevSimUpdateParams                       CachedUpdateParams;                                       // 0x0158(0x0048) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioREVComponent_TA");
		return ptr;
	}


	float __EngineAudioREVComponent_TA__InitFromAsset_4ACDEC0C4E2AEC3C810BF1A89BB11B00();
	void __EngineAudioREVComponent_TA__InitFromAsset_EB658F7D4B730BFFED2997B8BAF89EE8(class UAkRevPhysicsSimulation* S);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void InitFromAsset(class UProductAsset_EngineAudio_TA* EngineAsset);
};


// Class TAGame.EngineAudioBlowoffComponent_TA
// 0x0020 (0x00C4 - 0x00A4)
class UEngineAudioBlowoffComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class UAkSoundCue*                                 BlowoffSound;                                             // 0x00A8(0x0008) (Edit)
	float                                              BlowoffThrottleTime;                                      // 0x00B0(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	class AVehicle_TA*                                 Car;                                                      // 0x00B8(0x0008) (Transient)
	float                                              FullThrottleTime;                                         // 0x00C0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioBlowoffComponent_TA");
		return ptr;
	}


	void Attached();
};


// Class TAGame.EngineAudioPreviewBase_TA
// 0x0024 (0x0084 - 0x0060)
class UEngineAudioPreviewBase_TA : public UObject
{
public:
	float                                              StartDelay;                                               // 0x0060(0x0004) (Edit)
	float                                              AccelerateDelay;                                          // 0x0064(0x0004) (Edit)
	float                                              AccelerateLength;                                         // 0x0068(0x0004) (Edit)
	float                                              IdleLength;                                               // 0x006C(0x0004) (Edit)
	class UProductAsset_EngineAudio_TA*                EngineAsset;                                              // 0x0070(0x0008)
	class UAkParamGroup*                               Ak;                                                       // 0x0078(0x0008) (ExportObject, Component, EditInline)
	float                                              Throttle;                                                 // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioPreviewBase_TA");
		return ptr;
	}


	void GotoPreviewState();
	void GearChanged(int GearNum);
	void Update(float DeltaTime);
	void StartAccelerating();
	void StopAccelerating();
	void StopPreview();
	void StartPreview();
	void Init(class UProductAsset_EngineAudio_TA* InAsset, class UAkParamGroup* InAkParams);
};


// Class TAGame.EngineAudioPreview_TA
// 0x0044 (0x00C8 - 0x0084)
class UEngineAudioPreview_TA : public UEngineAudioPreviewBase_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	class UEngineAudioProfile_TA*                      Profile;                                                  // 0x0088(0x0008)
	struct FPointer                                    NativeState;                                              // 0x0090(0x0008) (Const, Native)
	struct FInterpCurveFloat                           GearToWheelSpeedAccel;                                    // 0x0098(0x0018) (Edit, NeedCtorLink)
	float                                              PreviewSpeed;                                             // 0x00B0(0x0004)
	float                                              MaxPreviewSpeed;                                          // 0x00B4(0x0004)
	float                                              WheelSpeedToPreviewSpeed;                                 // 0x00B8(0x0004)
	float                                              BrakeFactor;                                              // 0x00BC(0x0004)
	struct FName                                       IsLocalRTPC;                                              // 0x00C0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioPreview_TA");
		return ptr;
	}


	void GearChanged(int GearNum);
	void DestroyNativeState();
	void UpdateNativeState(float DeltaTime);
	void Init(class UProductAsset_EngineAudio_TA* InAsset, class UAkParamGroup* InAkParams);
};


// Class TAGame.EngineAudioProfileBase_TA
// 0x0010 (0x0070 - 0x0060)
class UEngineAudioProfileBase_TA : public UObject
{
public:
	float                                              BlowoffThrottleTime;                                      // 0x0060(0x0004) (Edit)
	float                                              WheelForwardSpeedInterpRate;                              // 0x0064(0x0004) (Edit)
	float                                              WheelSideSpeedInterpRate;                                 // 0x0068(0x0004) (Edit)
	float                                              MaxWheelSpeed;                                            // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioProfileBase_TA");
		return ptr;
	}

};


// Class TAGame.EngineAudioProfile_TA
// 0x0050 (0x00C0 - 0x0070)
class UEngineAudioProfile_TA : public UEngineAudioProfileBase_TA
{
public:
	TArray<struct FAudioGear>                          Gears;                                                    // 0x0070(0x0010) (Edit, NeedCtorLink)
	float                                              GearSwitchTime;                                           // 0x0080(0x0004) (Edit)
	float                                              RPMAccelStart;                                            // 0x0084(0x0004) (Edit)
	float                                              RPMAccelEnd;                                              // 0x0088(0x0004) (Edit)
	float                                              RPMAccelClutched;                                         // 0x008C(0x0004) (Edit)
	float                                              RPMDecelClutched;                                         // 0x0090(0x0004) (Edit)
	float                                              RPMMaxClutched;                                           // 0x0094(0x0004) (Edit)
	float                                              RPMAccelFactor;                                           // 0x0098(0x0004) (Edit)
	float                                              RPMDecelFactor;                                           // 0x009C(0x0004) (Edit)
	float                                              RPMAccelBoostStart;                                       // 0x00A0(0x0004) (Edit)
	float                                              RPMAccelBoostEnd;                                         // 0x00A4(0x0004) (Edit)
	float                                              RPMShiftUpBoost;                                          // 0x00A8(0x0004) (Edit)
	float                                              RPMMaxLoad;                                               // 0x00AC(0x0004) (Edit)
	float                                              EngineLoadSmoothFactor;                                   // 0x00B0(0x0004) (Edit)
	float                                              AirMaxThrottleTime;                                       // 0x00B4(0x0004) (Edit)
	float                                              RevLimitRPM;                                              // 0x00B8(0x0004) (Edit)
	float                                              RevLimitRPMDecel;                                         // 0x00BC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioProfile_TA");
		return ptr;
	}

};


// Class TAGame.EngineAudioProfileREV_TA
// 0x0030 (0x00A0 - 0x0070)
class UEngineAudioProfileREV_TA : public UEngineAudioProfileBase_TA
{
public:
	struct FAkRevSimPhysicsControls                    Controls;                                                 // 0x0070(0x0020) (Edit, NeedCtorLink)
	class UAkRevPhysicsSimulation*                     PhysicsSim;                                               // 0x0090(0x0008) (Edit)
	class UEngineAudioRevSimLimiter_TA*                RevLimiter;                                               // 0x0098(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioProfileREV_TA");
		return ptr;
	}

};


// Class TAGame.EngineAudioRevSimBoost_TA
// 0x0010 (0x0080 - 0x0070)
class UEngineAudioRevSimBoost_TA : public UComponent
{
public:
	float                                              InterpTime;                                               // 0x0070(0x0004) (Edit)
	float                                              InterpScale;                                              // 0x0074(0x0004) (Edit)
	float                                              InterpExp;                                                // 0x0078(0x0004) (Edit)
	float                                              ActiveTime;                                               // 0x007C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioRevSimBoost_TA");
		return ptr;
	}

};


// Class TAGame.EngineAudioRevSimBoostLevel_TA
// 0x0020 (0x0090 - 0x0070)
class UEngineAudioRevSimBoostLevel_TA : public UComponent
{
public:
	float                                              ActivatedInterpTime;                                      // 0x0070(0x0004) (Edit)
	float                                              InactiveInterpTime;                                       // 0x0074(0x0004) (Edit)
	float                                              InterpExp;                                                // 0x0078(0x0004) (Edit)
	float                                              ActivatedSpeedSq;                                         // 0x007C(0x0004) (Transient)
	float                                              InterpTime;                                               // 0x0080(0x0004) (Transient)
	float                                              InterpValue;                                              // 0x0084(0x0004) (Transient)
	float                                              InterpTimeElapsed;                                        // 0x0088(0x0004) (Transient)
	float                                              TargetValue;                                              // 0x008C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioRevSimBoostLevel_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
};


// Class TAGame.EngineAudioRevSimGearManager_TA
// 0x0014 (0x0084 - 0x0070)
class UEngineAudioRevSimGearManager_TA : public UComponent
{
public:
	int                                                RealGear;                                                 // 0x0070(0x0004)
	int                                                FakeGear;                                                 // 0x0074(0x0004)
	unsigned long                                      bPendingSilentDownShift : 1;                              // 0x0078(0x0004)
	float                                              TimeRemaining;                                            // 0x007C(0x0004)
	float                                              SilentDownShiftDelay;                                     // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioRevSimGearManager_TA");
		return ptr;
	}


	void TickGear(float DeltaTime, struct FAkRevSimFrame* SimFrame, struct FAkRevSimUpdateParams* SimUpdate);
};


// Class TAGame.EngineAudioRevSimLimiter_TA
// 0x0018 (0x0088 - 0x0070)
class UEngineAudioRevSimLimiter_TA : public UComponent
{
public:
	float                                              LimitTime;                                                // 0x0070(0x0004) (Edit)
	float                                              SideSpeedThresh;                                          // 0x0074(0x0004) (Edit)
	float                                              DecelScale;                                               // 0x0078(0x0004) (Edit)
	float                                              AirMaxThrottleTime;                                       // 0x007C(0x0004) (Edit)
	float                                              TimeRemaining;                                            // 0x0080(0x0004) (Transient)
	float                                              TimeActiveInAir;                                          // 0x0084(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioRevSimLimiter_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
};


// Class TAGame.EngineAudioRevSimResistance_TA
// 0x002C (0x009C - 0x0070)
class UEngineAudioRevSimResistance_TA : public UComponent
{
public:
	float                                              Clutched;                                                 // 0x0070(0x0004) (Edit)
	float                                              ZScale;                                                   // 0x0074(0x0004) (Edit)
	struct FInterpCurveFloat                           SideSpeedCurve;                                           // 0x0078(0x0018) (Edit, NeedCtorLink)
	float                                              SideFriction;                                             // 0x0090(0x0004) (Transient)
	float                                              ZFriction;                                                // 0x0094(0x0004) (Transient)
	float                                              SideAngle;                                                // 0x0098(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioRevSimResistance_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
};


// Class TAGame.EngineAudioRevSimReverse_TA
// 0x0004 (0x0074 - 0x0070)
class UEngineAudioRevSimReverse_TA : public UComponent
{
public:
	float                                              ReverseGearScale;                                         // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioRevSimReverse_TA");
		return ptr;
	}

};


// Class TAGame.EngineAudioRevSimVelocitySync_TA
// 0x001C (0x008C - 0x0070)
class UEngineAudioRevSimVelocitySync_TA : public UComponent
{
public:
	float                                              NoThrottleTime;                                           // 0x0070(0x0004) (Edit)
	float                                              NoThrottleTimeElapsed;                                    // 0x0074(0x0004) (Transient)
	float                                              RealToSimScale;                                           // 0x0078(0x0004) (Edit)
	float                                              InterpSpeed;                                              // 0x007C(0x0004) (Edit)
	float                                              InterpTime;                                               // 0x0080(0x0004) (Edit)
	float                                              InterpTimeLeft;                                           // 0x0084(0x0004) (Transient)
	float                                              FirstGearThrottleThreshold;                               // 0x0088(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioRevSimVelocitySync_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
};


// Class TAGame.EngineShare_TA
// 0x00C8 (0x0248 - 0x0180)
class UEngineShare_TA : public UEngineShare_X
{
public:
	unsigned long                                      bEnableClientPrediction : 1;                              // 0x0180(0x0004) (Edit, Const)
	unsigned long                                      bClientPhysicsUpdate : 1;                                 // 0x0180(0x0004) (Const, Transient)
	unsigned long                                      bDisableClientCorrections : 1;                            // 0x0180(0x0004) (Transient)
	unsigned long                                      bDebugClientCorrections : 1;                              // 0x0180(0x0004)
	unsigned long                                      bForceClientCorrection : 1;                               // 0x0180(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0184(0x0004) MISSED OFFSET
	class UReplayManager_TA*                           ReplayManager;                                            // 0x0188(0x0008) (Transient)
	class UAdManager_TA*                               AdManager;                                                // 0x0190(0x0008) (Transient)
	class UOnlineProductStore_TA*                      OnlineProductStore;                                       // 0x0198(0x0008) (ExportObject, Transient, Component, EditInline)
	float                                              PhysicsFramerate;                                         // 0x01A0(0x0004) (Edit)
	int                                                MaxPhysicsSubsteps;                                       // 0x01A4(0x0004) (Edit, Const)
	int                                                MaxUploadedClientFrames;                                  // 0x01A8(0x0004) (Edit)
	int                                                MaxClientReplayFrames;                                    // 0x01AC(0x0004) (Const, Transient)
	int                                                PhysicsFrame;                                             // 0x01B0(0x0004) (Const, Transient)
	float                                              RenderAlpha;                                              // 0x01B4(0x0004) (Const, Transient)
	int                                                ReplicatedPhysicsFrame;                                   // 0x01B8(0x0004) (Const, Transient)
	int                                                DirtyPhysicsFrame;                                        // 0x01BC(0x0004) (Const, Transient)
	int                                                ForceCorrectionFrames;                                    // 0x01C0(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET
	TArray<TScriptInterface<class UITickNotify_TA>>    TickNotifies;                                             // 0x01C8(0x0010) (Const, Transient, NeedCtorLink)
	int                                                TickNotifyIndex;                                          // 0x01D8(0x0004) (Const, Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01DC(0x0004) MISSED OFFSET
	struct FString                                     ShellArchetypePath;                                       // 0x01E0(0x0010) (Config, NeedCtorLink)
	class USystemSettingsManager_TA*                   SystemSettingsManager;                                    // 0x01F0(0x0008) (Transient)
	float                                              LastBugReportTime;                                        // 0x01F8(0x0004) (Const, Transient)
	float                                              DebugClientCorrectionStartTime;                           // 0x01FC(0x0004)
	int                                                DebugClientCorrectionCount;                               // 0x0200(0x0004)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0204(0x0004) MISSED OFFSET
	class UStatGraphSystem_TA*                         StatGraphs;                                               // 0x0208(0x0008) (ExportObject, Component, EditInline)
	class UPhysicsConfig_TA*                           PhysicsConfig;                                            // 0x0210(0x0008)
	TArray<class ANetworkInputBuffer_TA*>              InputBuffers;                                             // 0x0218(0x0010) (NeedCtorLink)
	float                                              LastPhysicsDeltaTimeScale;                                // 0x0228(0x0004)
	unsigned char                                      UnknownData04[0x4];                                       // 0x022C(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventPreAsyncTick__Delegate;                            // 0x0230(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x022C(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineShare_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void DebugClientCorrections();
	float GetBulletFixedDeltaTime();
	void RunPhysicsStep(int BulletSceneIndex, float DeltaTime);
	void DrawBuildInfo(class UCanvas* C);
	void UpdateReplicatedPhysicsFrame(int ServerFrame);
	void STATIC_DebugDedicatedServer(float ForHowLong);
	float GetPhysicsTime();
	void SetTickNotify(const TScriptInterface<class UITickNotify_TA>& Obj, bool bNotify);
	class UObject* STATIC_LoadStandaloneObject(class UClass* ExpectedClass, const struct FName& ObjectName, int LoadFlags);
	void InitOnlineGame(class UOnlineSubsystem* NewOnlineSubsystem);
	void RecordAppStart();
	void Init();
	struct FString STATIC_GetVersionString();
	void EventPreAsyncTick(float DeltaTime);
};


// Class TAGame.Errors_TA
// 0x00E0 (0x0160 - 0x0080)
class UErrors_TA : public UErrorList
{
public:
	class UErrorType*                                  ReplayImport;                                             // 0x0080(0x0008) (Const)
	class UErrorType*                                  ReplayExport;                                             // 0x0088(0x0008) (Const)
	class UErrorType*                                  ReplayNoReplay;                                           // 0x0090(0x0008) (Const)
	class UErrorType*                                  ReplayExportNoSpace;                                      // 0x0098(0x0008) (Const)
	class UErrorType*                                  UpdateRequired;                                           // 0x00A0(0x0008) (Const)
	class UErrorType*                                  TradeInMaxed;                                             // 0x00A8(0x0008) (Const)
	class UErrorType*                                  TransactionInProgress;                                    // 0x00B0(0x0008) (Const)
	class UErrorType*                                  OrderNotFound;                                            // 0x00B8(0x0008) (Const)
	class UErrorType*                                  InventoryOutOfSync;                                       // 0x00C0(0x0008) (Const)
	class UErrorType*                                  TimedOut;                                                 // 0x00C8(0x0008) (Const)
	class UErrorType*                                  TrainingModeNotFound;                                     // 0x00D0(0x0008) (Const)
	class UErrorType*                                  TrainingModeInvalidFavoritedCodes;                        // 0x00D8(0x0008) (Const)
	class UErrorType*                                  TrainingModeListPlayerTrainingFailed;                     // 0x00E0(0x0008) (Const)
	class UErrorType*                                  TrainingModeAddFailed;                                    // 0x00E8(0x0008) (Const)
	class UErrorType*                                  TrainingModeUpdateFailed;                                 // 0x00F0(0x0008) (Const)
	class UErrorType*                                  TrainingNameInvalid;                                      // 0x00F8(0x0008) (Const)
	class UErrorType*                                  CodeIsNotValid;                                           // 0x0100(0x0008) (Const)
	class UErrorType*                                  CodeHasBeenRedeemed;                                      // 0x0108(0x0008) (Const)
	class UErrorType*                                  CodeMaxIncorrectAttempts;                                 // 0x0110(0x0008) (Const)
	class UErrorType*                                  GarageSlotIsLocked;                                       // 0x0118(0x0008) (Const)
	class UErrorType*                                  GarageSlotAlreadyUnlocked;                                // 0x0120(0x0008) (Const)
	class UErrorType*                                  GarageSlotCostNotFound;                                   // 0x0128(0x0008) (Const)
	class UErrorType*                                  GarageNotEnoughCurrency;                                  // 0x0130(0x0008) (Const)
	class UErrorType*                                  LoadoutTemplateDoesNotExist;                              // 0x0138(0x0008) (Const)
	class UErrorType*                                  PlayerAlreadyLinked;                                      // 0x0140(0x0008) (Const)
	class UErrorType*                                  InvalidPlayerPlatformAuth;                                // 0x0148(0x0008) (Const)
	class UErrorType*                                  OnlineAchievementsSaveDataNotFound;                       // 0x0150(0x0008) (Const)
	class UErrorType*                                  ShopItemPlayerPurchaseMax;                                // 0x0158(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Errors_TA");
		return ptr;
	}

};


// Class TAGame.ExplosionHitHandler_TA
// 0x005C (0x0150 - 0x00F4)
class UExplosionHitHandler_TA : public UExplosionHitHandler_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00F4(0x0004) MISSED OFFSET
	unsigned long                                      bApplyToAllCars : 1;                                      // 0x00F8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	struct FMap_Mirror                                 VehicleToContactInfo;                                     // 0x0100(0x0050) (Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ExplosionHitHandler_TA");
		return ptr;
	}


	void ApplyImpulse(class ACar_TA* CarHit, const struct FVector& HitLocation, float DamageScale, struct FContactInformation* ContactInfo);
	void ProcessHit(class AActor* Victim, const struct FVector& HitLocation, float DamageScale, struct FContactInformation* ContactInfo);
};


// Class TAGame.FeatureFilterTest_TA
// 0x0000 (0x0060 - 0x0060)
class UFeatureFilterTest_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FeatureFilterTest_TA");
		return ptr;
	}


	int GetImplementationMacro();
	void Test();
};


// Class TAGame.FlockActor_TA
// 0x006C (0x02D4 - 0x0268)
class AFlockActor_TA : public AActor
{
public:
	class UStaticMesh*                                 AgentMesh;                                                // 0x0268(0x0008) (Edit, Const)
	class UInstancedStaticMeshComponent*               FlockInstancedMesh;                                       // 0x0270(0x0008) (Const, ExportObject, Component, EditInline)
	int                                                FlockSize;                                                // 0x0278(0x0004) (Edit)
	float                                              SeperationWeight;                                         // 0x027C(0x0004) (Edit)
	struct FVector                                     FlockRadius;                                              // 0x0280(0x000C) (Edit)
	float                                              AgentSpeed;                                               // 0x028C(0x0004) (Edit)
	float                                              SeperationIdealDistance;                                  // 0x0290(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0294(0x0004) MISSED OFFSET
	class ASplineActor*                                Spline;                                                   // 0x0298(0x0008) (Edit)
	float                                              SpawnSpreadDistanceAlongSpline;                           // 0x02A0(0x0004) (Edit)
	unsigned long                                      bRestartTimerEnabled : 1;                                 // 0x02A4(0x0004) (Edit)
	unsigned long                                      UpdateFlockMovement : 1;                                  // 0x02A4(0x0004) (Edit)
	unsigned long                                      ResetFlockOnToggleUpdateMovement : 1;                     // 0x02A4(0x0004) (Edit)
	float                                              WaitTimeInSeconds;                                        // 0x02A8(0x0004) (Edit)
	float                                              MinAgentScale;                                            // 0x02AC(0x0004) (Edit)
	float                                              MaxAgentScale;                                            // 0x02B0(0x0004) (Edit)
	float                                              CurrentRestartTime;                                       // 0x02B4(0x0004)
	TArray<struct FFlockAgent>                         Agents;                                                   // 0x02B8(0x0010) (NeedCtorLink)
	struct FVector                                     AverageAgentPosition;                                     // 0x02C8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FlockActor_TA");
		return ptr;
	}

};


// Class TAGame.ForceVolume_TA
// 0x0024 (0x02C8 - 0x02A4)
class AForceVolume_TA : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	struct FPointer                                    VfTable_IITickNotify_TA;                                  // 0x02A8(0x0008) (Const, Native, NoExport)
	TEnumAsByte<EForceDirection>                       ForceDirection;                                           // 0x02B0(0x0001) (Edit)
	TEnumAsByte<EForceMode>                            ConstantForceMode;                                        // 0x02B1(0x0001) (Edit)
	TEnumAsByte<EForceMode>                            EnterForceMode;                                           // 0x02B2(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x1];                                       // 0x02B3(0x0001) MISSED OFFSET
	float                                              ConstantForce;                                            // 0x02B4(0x0004) (Edit)
	float                                              EnterForce;                                               // 0x02B8(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET
	class AActor*                                      CustomForceDirection;                                     // 0x02C0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ForceVolume_TA");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	struct FVector GetForceDirection(class ARBActor_TA* RB);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PrePhysicsStep(float DeltaTime);
};


// Class TAGame.FpsBucketRecorder_TA
// 0x001B (0x00B8 - 0x009D)
class UFpsBucketRecorder_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	TArray<struct FFpsBucketData>                      Buckets;                                                  // 0x00A0(0x0010) (Edit, NeedCtorLink)
	int                                                MinFPS;                                                   // 0x00B0(0x0004)
	int                                                MaxFPS;                                                   // 0x00B4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FpsBucketRecorder_TA");
		return ptr;
	}


	struct FFpsBucketData GetTotalAverage();
	TArray<struct FFpsBucketData> GetAverages();
};


// Class TAGame.FriendsListBuilder_TA
// 0x0030 (0x0090 - 0x0060)
class UFriendsListBuilder_TA : public UObject
{
public:
	TArray<struct FPersonaDataId>                      PlatformFriends;                                          // 0x0060(0x0010) (NeedCtorLink)
	TArray<struct FPersonaDataId>                      PsyNetFriends;                                            // 0x0070(0x0010) (NeedCtorLink)
	TArray<struct FPersonaDataId>                      AllFriends;                                               // 0x0080(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FriendsListBuilder_TA");
		return ptr;
	}


	void Build(class UOnlineFriendMap_X* AllFriendsMap, class UOnlineFriendMap_X* PlatformFriendsMap, class UOnlineFriendMap_X* PsyNetFriendsMap, class UPersonas_TA* Personas);
};


// Class TAGame.FriendsListUtils_TA
// 0x0000 (0x0060 - 0x0060)
class UFriendsListUtils_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FriendsListUtils_TA");
		return ptr;
	}


	struct FFriendInfoCounts STATIC_UpdateFriendCounts(class UPersonas_TA* Personas, TArray<struct FPersonaDataId>* Friends);
	TArray<struct FPersonaDataId> STATIC_NetIdToPersonaId(TArray<struct FUniqueNetId>* Ids);
	TArray<struct FUniqueNetId> STATIC_PersonaIdToNetId(TArray<struct FPersonaDataId>* Ids);
};


// Class TAGame.FXActor_GameEditorActor_TA
// 0x001C (0x0344 - 0x0328)
class AFXActor_GameEditorActor_TA : public AFXActor_X
{
public:
	float                                              SpeedMultiplier;                                          // 0x0328(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x032C(0x0004) MISSED OFFSET
	class UFXActorEvent_X*                             EditingState;                                             // 0x0330(0x0008)
	struct FVector                                     PrevLocation;                                             // 0x0338(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_GameEditorActor_TA");
		return ptr;
	}


	void HandleSelectionChange(const TScriptInterface<class UInterface_GameEditor_TA>& EditorObject, bool bSelected);
	void TickFX(float DeltaTime);
	void PostBeginPlay();
};


// Class TAGame.FXActor_TA
// 0x0038 (0x0360 - 0x0328)
class AFXActor_TA : public AFXActor_X
{
public:
	class UFXActorEvent_X*                             HideWorldUIState;                                         // 0x0328(0x0008)
	class UFXActorEvent_X*                             PreviewState;                                             // 0x0330(0x0008)
	class UFXActorEvent_X*                             PaintedState;                                             // 0x0338(0x0008)
	class UFXActorEvent_X*                             BoostEndEvent;                                            // 0x0340(0x0008)
	TArray<class UFXActorEvent_X*>                     TeamStates;                                               // 0x0348(0x0010) (NeedCtorLink)
	class ULocalPlayerAudioParamsComponent_TA*         LocalPlayerAudioParamsComponent;                          // 0x0358(0x0008) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_TA");
		return ptr;
	}


	void STATIC___FXActor_TA__ClearPaintParameters_5A4B49E9486DCECE4BE93F8DB5B04B67(class UParticleSystemComponent* BeamPSC);
	void OnSetParticleSysParam(class USeqAct_SetParticleSysParam* Action);
	void STATIC_ClearPaintParameters(class AFXActor_X* FXActor);
	void ApplyPaintToAttachment(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, struct FFXAttachment* FXAttach);
	void ApplyPaint(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint);
	void HandleHideWorldUIChanged(class UGameShare_TA* G);
	void SetCarActorParam(class ACar_TA* InCar);
	void OnOwnerChanged();
	void PostBeginPlay();
};


// Class TAGame.FXActor_Ball_TA
// 0x0060 (0x03C0 - 0x0360)
class AFXActor_Ball_TA : public AFXActor_TA
{
public:
	float                                              SuperSonicSpeed;                                          // 0x0360(0x0004) (Edit)
	float                                              MaxGoalProximityDistance;                                 // 0x0364(0x0004) (Edit)
	float                                              BallFadeInSpeed;                                          // 0x0368(0x0004) (Edit)
	float                                              BallFadeOutSpeed;                                         // 0x036C(0x0004) (Edit)
	float                                              TrailOpacityLerpSpeed;                                    // 0x0370(0x0004) (Edit)
	float                                              CurrentTrailOpacity;                                      // 0x0374(0x0004) (Transient)
	float                                              BallFadeSpeed;                                            // 0x0378(0x0004) (Transient)
	float                                              BallFadeOpacity;                                          // 0x037C(0x0004) (Transient)
	float                                              ShockwaveParamMin;                                        // 0x0380(0x0004) (Edit)
	float                                              ShockwaveParamMax;                                        // 0x0384(0x0004) (Edit)
	float                                              ShockwaveParamTime;                                       // 0x0388(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x038C(0x0004) MISSED OFFSET
	class UFXActorEvent_X*                             InAirState;                                               // 0x0390(0x0008)
	class UFXActorEvent_X*                             SuperSonicState;                                          // 0x0398(0x0008)
	class ABall_TA*                                    Ball;                                                     // 0x03A0(0x0008) (Transient)
	float                                              TouchingWorldTime;                                        // 0x03A8(0x0004) (Transient)
	unsigned long                                      bInAir : 1;                                               // 0x03AC(0x0004) (Transient)
	unsigned long                                      bSuperSonic : 1;                                          // 0x03AC(0x0004) (Transient)
	float                                              CurrentTrailDilation;                                     // 0x03B0(0x0004) (Transient)
	float                                              MaxTrailDilation;                                         // 0x03B4(0x0004) (Edit)
	struct FName                                       TrailIntensityName;                                       // 0x03B8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_Ball_TA");
		return ptr;
	}


	void __FXActor_Ball_TA__PostBeginPlay_AC255CFC45759CC333D7A583B2540653(class ABall_TA* _);
	void __FXActor_Ball_TA__PostBeginPlay_D5245CBA43959A32A647F4B9F34C8B10(class ABall_TA* _);
	void Destroyed();
	void UpdateBallPenetration();
	void HandleBallExploded(class ABall_TA* InBall);
	void HandleBallGameEventSet(class ABall_TA* InBall);
	void ClearBallPositionMaterials();
	void SetBallPositionMaterials(const struct FLinearColor& LocParam, float ShockwaveParam);
	void UpdateBallPositionMaterials();
	float GetClosestLocalPlayerDistance();
	float GetPrimaryCameraDistance();
	void UpdateTrailIntensity();
	void UpdateTrailColor();
	void UpdateGoalProximity();
	void UpdateBallFade(float DeltaTime);
	void StartBallFadeOut();
	void StartBallFadeIn();
	void TickFX(float DeltaTime);
	void PostBeginPlay();
};


// Class TAGame.FXActor_BallBreakout_TA
// 0x0060 (0x0420 - 0x03C0)
class AFXActor_BallBreakout_TA : public AFXActor_Ball_TA
{
public:
	class UAkSoundCue*                                 MaxChargeSFX;                                             // 0x03C0(0x0008) (Edit)
	class UAkSoundCue*                                 SwitchTeamSFX;                                            // 0x03C8(0x0008) (Edit)
	class UAkSoundCue*                                 IdleSFX;                                                  // 0x03D0(0x0008) (Edit)
	class UAkSoundCue*                                 ResetSFX;                                                 // 0x03D8(0x0008) (Edit)
	TArray<class UAkSoundCue*>                         ChargeSFX;                                                // 0x03E0(0x0010) (Edit, NeedCtorLink)
	TArray<class UAkSoundCue*>                         DamageSFX;                                                // 0x03F0(0x0010) (Edit, NeedCtorLink)
	TArray<class UFXActorEvent_X*>                     DamageEvents;                                             // 0x0400(0x0010) (Edit, NeedCtorLink)
	class ABall_Breakout_TA*                           BallBreakout;                                             // 0x0410(0x0008) (Transient)
	int                                                LastDamage;                                               // 0x0418(0x0004)
	float                                              LastNoDamageHit;                                          // 0x041C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_BallBreakout_TA");
		return ptr;
	}


	void UpdateGoalProximity();
	void UpdateBallFade(float DeltaTime);
	void StartBallFadeOut();
	void StartBallFadeIn();
	void HandleAppliedDamage(class ABall_Breakout_TA* InBall, const struct FAppliedBreakoutDamage& Damage);
	void HandleNoDamageHit(class ABall_Breakout_TA* InBall);
	void HandleLastTeamTouchChanged(class ABall_Breakout_TA* InBall, unsigned char InLastTeamTouch);
	void HandleDamageIndexChanged(class ABall_Breakout_TA* InBall, int InDamageIndex);
	void PostBeginPlay();
};


// Class TAGame.FXActor_BallHaunted_TA
// 0x0080 (0x0440 - 0x03C0)
class AFXActor_BallHaunted_TA : public AFXActor_Ball_TA
{
public:
	class UAkSoundCue*                                 SwitchTeamSFX;                                            // 0x03C0(0x0008) (Edit)
	class UAkSoundCue*                                 IdleSFX;                                                  // 0x03C8(0x0008) (Edit)
	class UAkSoundCue*                                 BeamBreakSFX;                                             // 0x03D0(0x0008) (Edit)
	class UAkSoundCue*                                 BallEnterTrapSFX;                                         // 0x03D8(0x0008) (Edit)
	class UAkSoundCue*                                 BallExitTrapSFX;                                          // 0x03E0(0x0008) (Edit)
	class UAkSoundCue*                                 BallCountdownSFX;                                         // 0x03E8(0x0008) (Edit)
	TArray<class UFXActorEvent_X*>                     DamageEvents;                                             // 0x03F0(0x0010) (Edit, NeedCtorLink)
	class UParticleSystem*                             PulsePSArchetype;                                         // 0x0400(0x0008) (Edit)
	struct FName                                       PulsePSParam;                                             // 0x0408(0x0008) (Edit)
	float                                              BallPulseTimeModifier;                                    // 0x0410(0x0004) (Edit)
	float                                              BrokenBeamResetTime;                                      // 0x0414(0x0004) (Edit)
	float                                              MaxTimePercentageToPerformPulse;                          // 0x0418(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x041C(0x0004) MISSED OFFSET
	class ABall_Haunted_TA*                            BallHaunted;                                              // 0x0420(0x0008) (Transient)
	int                                                DamageIndex;                                              // 0x0428(0x0004) (Transient)
	unsigned long                                      bBallExploded : 1;                                        // 0x042C(0x0004) (Transient)
	unsigned long                                      bBeamIsBroken : 1;                                        // 0x042C(0x0004) (Transient)
	float                                              CurrentBrokenTime;                                        // 0x0430(0x0004) (Transient)
	float                                              NextPulseTime;                                            // 0x0434(0x0004) (Transient)
	class UParticleSystemComponent*                    PulsePSC;                                                 // 0x0438(0x0008) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_BallHaunted_TA");
		return ptr;
	}


	void __FXActor_BallHaunted_TA__PostBeginPlay_C2D998F1408F359F0A2AF7B558D8BC61(class ABall_Haunted_TA* _);
	void UpdateGoalProximity();
	void UpdateBallFade(float DeltaTime);
	void SetTimeInGoalRTPC(float Value);
	void ClearFXActor();
	void HandleBallExploded(class ABall_TA* InBall);
	void PulseBallInTrap();
	void HandleIsTrapped(class ABall_Haunted_TA* InBall, bool bIsTrapped, class UGoal_TA* Goal);
	void HandleLastTeamTouchChanged(class ABall_Haunted_TA* InBall, unsigned char InLastTeamTouch);
	void SetBeamIsBroken(bool bValue);
	void SetDamageIndex(int InDamageIndex);
	void Tick(float DeltaTime);
	void StartBallFadeOut();
	void StartBallFadeIn();
	void HandleActiveRoundChanged(class AGameEvent_Soccar_TA* GameEvent);
	void HandleGameEventSet(class ABall_TA* InBall);
	void Destroyed();
	void PostBeginPlay();
};


// Class TAGame.FXActor_Boost_TA
// 0x00B8 (0x0418 - 0x0360)
class AFXActor_Boost_TA : public AFXActor_TA
{
public:
	TArray<struct FParticleParameterSet>               ParametersPerExtraBoostSockets;                           // 0x0360(0x0010) (NeedCtorLink)
	TArray<struct FParticleBodyParameterSet>           BodyParticleParameters;                                   // 0x0370(0x0010) (Edit, NeedCtorLink)
	class UAkSoundCue*                                 DryFireSound;                                             // 0x0380(0x0008) (Edit)
	struct FLinearColor                                CarBoostGlowColor;                                        // 0x0388(0x0010) (Edit)
	TArray<struct FAnimatedMaterialMesh>               BoostMeshMaterialParams;                                  // 0x0398(0x0010) (Edit, Component, NeedCtorLink)
	TArray<struct FBoostMeshMaterialOverride>          BoostMeshMaterialOverrides;                               // 0x03A8(0x0010) (Edit, NeedCtorLink)
	class UBoostMesh_TA*                               BoostMeshArchetype;                                       // 0x03B8(0x0008) (Edit)
	class UBoostMesh_TA*                               BoostMesh;                                                // 0x03C0(0x0008) (Transient)
	struct FRandomRange                                BoostMeshFadeInTime;                                      // 0x03C8(0x0008) (Edit)
	struct FRandomRange                                BoostMeshFadeOutTime;                                     // 0x03D0(0x0008) (Edit)
	TArray<class UParticleSystemComponent*>            MultipleBoostsOverride;                                   // 0x03D8(0x0010) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<struct FPreviewParticleOverride>            PreviewParticleOverrides;                                 // 0x03E8(0x0010) (Const, NeedCtorLink)
	unsigned long                                      bWasBoosting : 1;                                         // 0x03F8(0x0004) (Transient)
	unsigned long                                      bWasInputBoosting : 1;                                    // 0x03F8(0x0004) (Transient)
	float                                              MaxBoostMeshMaterialTime;                                 // 0x03FC(0x0004) (Transient)
	class AVehicle_TA*                                 Vehicle;                                                  // 0x0400(0x0008) (Transient)
	class ACarPreviewActor_TA*                         CarPreview;                                               // 0x0408(0x0008) (Transient)
	class UCarMeshComponentBase_TA*                    CarMesh;                                                  // 0x0410(0x0008) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_Boost_TA");
		return ptr;
	}


	void HandleUpdatedPaintSettings(class UCarMeshComponentBase_TA* CarMeshComponent);
	void HandleCarDemolished(class ACar_TA* Car, const struct FDemolishData& Data);
	void ApplyPaint(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint);
	void ApplyPreviewParticleOverrides();
	void StopAllEffects();
	void BoostMeshFadeOut();
	void BoostMeshFadeIn();
	void ResetBoostMeshElapsedTime(float Value);
	void CopyBoostMeshDistributionParameters(class AFXActor_Boost_TA* Archetype);
	void UpdateBoostMeshMaterials(float DeltaTime);
	void InitializeBoostMesh();
	void CreateBoostMeshMaterials(class AFXActor_X* FXActor);
	void Inherit(class AFXActor_X* Other);
	bool IsPRInfoInGameState(const struct FName& GameState);
	void TickFX(float DeltaTime);
	void SetBodyParticleParams(class AFXActor_X* BodyFXActor);
	void InitExtraBoostComponents(class UProductAsset_Body_TA* BodyAsset);
	void DuplicateAttachment(class UProductAsset_Body_TA* BodyAsset, int AttachmentIdx);
	void SetParticleParams(const struct FName& AttachmentName, TArray<struct FParticleSysParam> Params);
	void SetAttachmentActor(class AActor* AttachToActor);
};


// Class TAGame.FXActor_BreakoutPlatform_TA
// 0x0090 (0x03F0 - 0x0360)
class AFXActor_BreakoutPlatform_TA : public AFXActor_TA
{
public:
	class UMaterialInterface*                          PlatformMaterial;                                         // 0x0360(0x0008) (Edit)
	class UMaterialInterface*                          RaysMaterial;                                             // 0x0368(0x0008) (Edit)
	struct FName                                       LocationParam;                                            // 0x0370(0x0008) (Edit)
	TArray<struct FPlatformParam>                      DamagedParams;                                            // 0x0378(0x0010) (Edit, NeedCtorLink)
	TArray<struct FPlatformParam>                      BrokenParams;                                             // 0x0388(0x0010) (Edit, NeedCtorLink)
	class UAkSoundCue*                                 DamageSFX;                                                // 0x0398(0x0008) (Edit)
	class UAkSoundCue*                                 DirectBreakSFX;                                           // 0x03A0(0x0008) (Edit)
	class UAkSoundCue*                                 IndirectBreakSFX;                                         // 0x03A8(0x0008) (Edit)
	float                                              DamageDistanceSpeed;                                      // 0x03B0(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	class UFXActorEvent_X*                             DamagedState;                                             // 0x03B8(0x0008)
	class UFXActorEvent_X*                             BrokenState;                                              // 0x03C0(0x0008)
	class ABreakOutActor_Platform_TA*                  BreakoutPlatform;                                         // 0x03C8(0x0008) (Transient)
	class UMaterialInstanceConstant*                   MIC;                                                      // 0x03D0(0x0008) (Transient)
	class UMaterialInstanceConstant*                   RaysMIC;                                                  // 0x03D8(0x0008) (Transient)
	unsigned char                                      DamageState;                                              // 0x03E0(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x03E1(0x0003) MISSED OFFSET
	float                                              DamageTime;                                               // 0x03E4(0x0004) (Transient)
	float                                              BrokenTime;                                               // 0x03E8(0x0004) (Transient)
	float                                              RemainingTime;                                            // 0x03EC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_BreakoutPlatform_TA");
		return ptr;
	}


	void SetTeamColor(const struct FLinearColor& TeamColor);
	void PlayDestroyIndirectSFX();
	void PlayDestroyDirectSFX();
	void PlayDamageSFX();
	void UpdateParamsAtTime(TArray<struct FPlatformParam> Params, float Time);
	void UpdateDamageParams(float DeltaTime);
	void TickFX(float DeltaTime);
	void HandleDamageStateChanged(class ABreakOutActor_Platform_TA* Platform, const struct FBreakoutDamageState& InState);
	void SetAttachmentActor(class AActor* AttachToActor);
};


// Class TAGame.FXActor_Car_TA
// 0x0104 (0x0464 - 0x0360)
class AFXActor_Car_TA : public AFXActor_TA
{
public:
	class UEffectsMap_X*                               WheelEffectsMap;                                          // 0x0360(0x0008) (Edit)
	class UAkSoundCue*                                 AkWheelImpactSound;                                       // 0x0368(0x0008) (Edit)
	class UAkSoundCue*                                 AkWheelDriveSound;                                        // 0x0370(0x0008) (Edit)
	class UAkSoundCue*                                 AkEnterSupersonicSound;                                   // 0x0378(0x0008) (Edit)
	class UAkSoundCue*                                 AkLoopSupersonicSound;                                    // 0x0380(0x0008) (Edit)
	float                                              MinImpactMomentum;                                        // 0x0388(0x0004) (Edit)
	struct FName                                       AkImpactTypeKey;                                          // 0x038C(0x0008) (Edit)
	struct FName                                       AkImpactIntensityKey;                                     // 0x0394(0x0008) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	class UCameraShake*                                WheelImpactShake;                                         // 0x03A0(0x0008) (Edit)
	class UForceFeedbackWaveform*                      WheelImpactForceFeedback;                                 // 0x03A8(0x0008) (Edit)
	struct FInterpCurveFloat                           ShakeScaleCurve;                                          // 0x03B0(0x0018) (Edit, NeedCtorLink)
	class UParticleSystem*                             SupersonicWheelTemplate;                                  // 0x03C8(0x0008) (Edit)
	float                                              BoostGlowRate;                                            // 0x03D0(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x03D4(0x0004) MISSED OFFSET
	class UShakeComponent_X*                           ShakeComponent;                                           // 0x03D8(0x0008) (ExportObject, Transient, Component, EditInline)
	class AVehicle_TA*                                 Vehicle;                                                  // 0x03E0(0x0008) (Transient)
	unsigned long                                      bThrottle : 1;                                            // 0x03E8(0x0004) (Transient)
	unsigned long                                      bInAir : 1;                                               // 0x03E8(0x0004) (Transient)
	unsigned long                                      bBrake : 1;                                               // 0x03E8(0x0004) (Transient)
	unsigned long                                      bWasBoosting : 1;                                         // 0x03E8(0x0004) (Transient)
	unsigned long                                      bWasBoostFlying : 1;                                      // 0x03E8(0x0004) (Transient)
	unsigned long                                      bWasSuperSonic : 1;                                       // 0x03E8(0x0004) (Transient)
	unsigned long                                      bWasOnWall : 1;                                           // 0x03E8(0x0004) (Transient)
	unsigned long                                      bEnabled : 1;                                             // 0x03E8(0x0004)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03EC(0x0004) MISSED OFFSET
	class UFXActorEvent_X*                             ThrottleState;                                            // 0x03F0(0x0008)
	class UFXActorEvent_X*                             SuperSonicState;                                          // 0x03F8(0x0008)
	class UFXActorEvent_X*                             InAirState;                                               // 0x0400(0x0008)
	class UFXActorEvent_X*                             BoostState;                                               // 0x0408(0x0008)
	class UFXActorEvent_X*                             BoostPreviewState;                                        // 0x0410(0x0008)
	class UFXActorEvent_X*                             BoostFlyState;                                            // 0x0418(0x0008)
	class UFXActorEvent_X*                             OnWallState;                                              // 0x0420(0x0008)
	class UPhysicalMaterial*                           ContactPhysMat;                                           // 0x0428(0x0008) (Transient)
	class UPhysicalMaterialProperty_TA*                ContactPhysMatProp;                                       // 0x0430(0x0008) (Transient)
	TArray<struct FWheelFX>                            WheelEffects;                                             // 0x0438(0x0010) (Transient, Component, NeedCtorLink)
	class UParticleSystem*                             WheelEffectsParticle;                                     // 0x0448(0x0008) (Transient)
	class UCarMeshComponent_TA*                        CarMesh;                                                  // 0x0450(0x0008) (ExportObject, Transient, Component, EditInline)
	class UMaxActorsGroup_TA*                          MaxActorsGroup;                                           // 0x0458(0x0008) (ExportObject, Transient, Component, EditInline)
	float                                              BoostGlow;                                                // 0x0460(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_Car_TA");
		return ptr;
	}


	void PlayWheelLandCameraShake(float ImpactSpeed);
	void SetWheelEffectActive(int WheelIdx, bool bEffectActive);
	void SetContactPhysMat(class UPhysicalMaterial* NewPhysMat);
	void UpdateContactPhysMat();
	void PlaySpawnFX(class ACar_TA* Car);
	void SetBraking(bool bNewBraking);
	void TickFX(float DeltaTime);
	void HandleTeamChanged(class ACar_TA* InCar);
	class AFXActor_TA* InstantiateTrailFXActor(class UProductAsset_SupersonicTrail_TA* TrailAsset, class AFXActor_TA* TrailFX, class ACar_TA* Car);
	void InitSupersonicFX(class ACar_TA* Car, class UProductAsset_SupersonicTrail_TA* TrailAsset);
	void HandleWheelLoaded(class UProductAsset_Wheel_TA* Product);
	void HandleProductAssets(class UProductAsset_SupersonicTrail_TA* Product);
	void InitWheelBones(class ACar_TA* Car);
	void HandleVehicleSetup(class ACar_TA* Car);
	void StopWheelEffects();
	void StopAllEffects();
	void HandleDisabled();
	void HandleEnabled();
	void Destroyed();
	void PostBeginPlay();
};


// Class TAGame.FXTrait_BoostParticle_TA
// 0x004C (0x00AC - 0x0060)
class UFXTrait_BoostParticle_TA : public UFXAttachmentTraitBase_X
{
public:
	class UParticleSystem*                             ParticlePreview;                                          // 0x0060(0x0008) (Edit)
	class UParticleSystem*                             DuplicateParticle;                                        // 0x0068(0x0008) (Edit)
	class UParticleSystem*                             DuplicateParticlePreview;                                 // 0x0070(0x0008) (Edit)
	TArray<struct FParticleSysParam>                   SharedParameters;                                         // 0x0078(0x0010) (Edit, NeedCtorLink)
	TArray<struct FParticleSysParam>                   DuplicateParameters;                                      // 0x0088(0x0010) (Edit, NeedCtorLink)
	TArray<struct FParticleSysParam>                   PreviewOverrideParameters;                                // 0x0098(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bConvertedDuplicateParametersToSharedParameters : 1;      // 0x00A8(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXTrait_BoostParticle_TA");
		return ptr;
	}

};


// Class TAGame.GameData_TA
// 0x0248 (0x02A8 - 0x0060)
class UGameData_TA : public UObject
{
public:
	class UProductDatabase_TA*                         Products;                                                 // 0x0060(0x0008) (Edit, Const)
	class UXPManager_TA*                               XPManager;                                                // 0x0068(0x0008) (Edit)
	int                                                MaxTeamSize;                                              // 0x0070(0x0004) (Edit, Const)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	TArray<class UProductSlot_TA*>                     ProductSlots;                                             // 0x0078(0x0010) (Edit, Const, NeedCtorLink)
	TArray<class UProductSlot_TA*>                     SlotLoadOrder;                                            // 0x0088(0x0010) (Edit, Const, NeedCtorLink)
	class UProductSlot_TA*                             BodySlot;                                                 // 0x0098(0x0008)
	class UProductSlot_TA*                             SkinSlot;                                                 // 0x00A0(0x0008)
	class UProductSlot_TA*                             WheelSlot;                                                // 0x00A8(0x0008)
	class UProductSlot_TA*                             BoostSlot;                                                // 0x00B0(0x0008)
	class UProductSlot_TA*                             AntennaSlot;                                              // 0x00B8(0x0008)
	class UProductSlot_TA*                             HatSlot;                                                  // 0x00C0(0x0008)
	class UProductSlot_TA*                             FrontSlot;                                                // 0x00C8(0x0008)
	class UProductSlot_TA*                             PaintFinishSlot;                                          // 0x00D0(0x0008)
	class UProductSlot_TA*                             BotSlot;                                                  // 0x00D8(0x0008)
	class UProductSlot_TA*                             LogoSlot;                                                 // 0x00E0(0x0008)
	class UProductSlot_TA*                             UnderGlowSlot;                                            // 0x00E8(0x0008)
	class UProductSlot_TA*                             PremiumInventorySlot;                                     // 0x00F0(0x0008)
	class UProductSlot_TA*                             CustomFinishSlot;                                         // 0x00F8(0x0008)
	class UProductSlot_TA*                             EngineAudioSlot;                                          // 0x0100(0x0008)
	class UProductSlot_TA*                             SupersonicTrailSlot;                                      // 0x0108(0x0008)
	class UProductSlot_TA*                             GoalExplosionSlot;                                        // 0x0110(0x0008)
	class UProductSlot_TA*                             PlayerBannerSlot;                                         // 0x0118(0x0008)
	class UProductSlot_TA*                             MusicStingersSlot;                                        // 0x0120(0x0008)
	class UProductSlot_TA*                             PlayerTitleSlot;                                          // 0x0128(0x0008)
	class UProductSlot_TA*                             ESportsTeamSlot;                                          // 0x0130(0x0008)
	class UProductSlot_TA*                             ArchiveSlot;                                              // 0x0138(0x0008)
	class UProductSlot_TA*                             AllSlot;                                                  // 0x0140(0x0008)
	class UProductSlot_TA*                             ShopItemSlot;                                             // 0x0148(0x0008)
	class UProductSlot_TA*                             CurrencySlot;                                             // 0x0150(0x0008)
	class UProductSlot_TA*                             PlayerAvatarBorderSlot;                                   // 0x0158(0x0008)
	class UProductSlot_TA*                             GiftPackSlot;                                             // 0x0160(0x0008)
	class UProductSlot_TA*                             BlueprintSlot;                                            // 0x0168(0x0008)
	TArray<struct FString>                             TeamArchetypePaths;                                       // 0x0170(0x0010) (Edit, Const, NeedCtorLink)
	TArray<class ATeam_TA*>                            TeamArchetypes;                                           // 0x0180(0x0010) (Const, Transient, NeedCtorLink)
	struct FString                                     GameModeListPath;                                         // 0x0190(0x0010) (Edit, Const, NeedCtorLink)
	class UGameModeList_TA*                            GameModeList;                                             // 0x01A0(0x0008) (Const, Transient)
	struct U_Types_TA_FLoadoutData                     DefaultLoadouts[0x2];                                     // 0x01A8(0x0040) (Const, NeedCtorLink)
	struct FClientLoadoutData                          DefaultClientLoadout;                                     // 0x0228(0x0010) (Const, NeedCtorLink)
	class UCarColorSet_TA*                             CustomColorSet;                                           // 0x0238(0x0008)
	class UCarColorSet_TA*                             ClubColorSet;                                             // 0x0240(0x0008)
	class UCarColorSet_TA*                             ClubColorSet_v1;                                          // 0x0248(0x0008)
	class UCarColorSet_TA*                             PlayerBannerColorSet;                                     // 0x0250(0x0008)
	class UCarColorSet_TA*                             PlayerVanityColorSet;                                     // 0x0258(0x0008)
	class UMapList_TA*                                 MapList;                                                  // 0x0260(0x0008) (Edit)
	class UGlobalLookupTexture_TA*                     GlobalLookupTexture;                                      // 0x0268(0x0008)
	TArray<class UClass*>                              OnlineProductAttributes;                                  // 0x0270(0x0010) (Const, NeedCtorLink)
	class USkinOverrideTable_TA*                       SkinOverrideTable;                                        // 0x0280(0x0008) (Edit, Const)
	class UPaintDatabase_TA*                           PaintDB;                                                  // 0x0288(0x0008) (Edit, Const)
	class UCertifiedStatDatabase_TA*                   CertifiedStatDB;                                          // 0x0290(0x0008) (Edit, Const)
	class USpecialEditionDatabase_TA*                  SpecialEditionDB;                                         // 0x0298(0x0008) (Edit, Const)
	class UDataAssetDatabase_ESportsTeam_TA*           ESportsTeamDB;                                            // 0x02A0(0x0008) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameData_TA");
		return ptr;
	}


	class UCarColorSet_TA* STATIC_GetClubColorSet();
	struct FString STATIC_GetMapName(bool bLocalize);
	TArray<class UProductSlot_TA*> STATIC_GetUnlockableLoadoutSlots(TArray<class UProductSlot_TA*>* ConcatLocal_7B1CE508445DEEFC13D91B8E1C1FA75C);
	TArray<class UProductSlot_TA*> STATIC_GetVanityLoadoutSlots();
	TArray<class UProductSlot_TA*> STATIC_GetLoadoutSlots();
	TArray<class UProductSlot_TA*> STATIC_GetGarageLoadoutSlots();
	bool STATIC_CanProductBeInSlot(class UProduct_TA* Product, class UProductSlot_TA* Slot);
	class UProductDatabase_TA* STATIC_GetProductDB();
	void STATIC_SetDefaultTeamColors();
	void STATIC_SetGlobalTeamColors(TArray<struct FLinearColor> Colors);
};


// Class TAGame.GameEngine_TA
// 0x0008 (0x0B50 - 0x0B48)
class UGameEngine_TA : public UGameEngine_X
{
public:
	class UServerConfig_X*                             ServerConfig;                                             // 0x0B48(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEngine_TA");
		return ptr;
	}


	struct FString STATIC_GetBuildInfo(const struct FString& Key);
};


// Class TAGame.GameEvent_TA
// 0x0498 (0x0700 - 0x0268)
class AGameEvent_TA : public AActor
{
public:
	class UGroupComponent_ORS*                         RegistryGroup;                                            // 0x0268(0x0008) (Edit, ExportObject, Component, EditInline)
	class UMatchType_TA*                               MatchType;                                                // 0x0270(0x0008) (Edit)
	class UClass*                                      MatchTypeClass;                                           // 0x0278(0x0008) (Edit, Net)
	struct FName                                       EventType;                                                // 0x0280(0x0008) (Edit, Const)
	struct FName                                       AudioSoundMode;                                           // 0x0288(0x0008) (Edit)
	struct FName                                       MatchTypeName;                                            // 0x0290(0x0008) (Edit, Const)
	class ACar_TA*                                     CarArchetype;                                             // 0x0298(0x0008) (Edit)
	class UClass*                                      PREIClass;                                                // 0x02A0(0x0008) (Edit)
	int                                                CountdownTime;                                            // 0x02A8(0x0004) (Edit)
	int                                                FinishTime;                                               // 0x02AC(0x0004) (Edit)
	unsigned long                                      bMultiplayer : 1;                                         // 0x02B0(0x0004) (Edit, Const)
	unsigned long                                      bCountdownMessagesDisabled : 1;                           // 0x02B0(0x0004)
	unsigned long                                      bFillWithAI : 1;                                          // 0x02B0(0x0004) (Edit)
	unsigned long                                      bAllowQueueSaveReplay : 1;                                // 0x02B0(0x0004) (Edit)
	unsigned long                                      bAllowReadyUp : 1;                                        // 0x02B0(0x0004) (Net, Transient)
	unsigned long                                      bRestartingMatch : 1;                                     // 0x02B0(0x0004)
	unsigned long                                      bRandomizedBotLoadouts : 1;                               // 0x02B0(0x0004)
	unsigned long                                      bHasLeaveMatchPenalty : 1;                                // 0x02B0(0x0004) (Net, Transient)
	unsigned long                                      bCanVoteToForfeit : 1;                                    // 0x02B0(0x0004) (Net, Transient)
	unsigned long                                      bDisableAimAssist : 1;                                    // 0x02B0(0x0004) (Const)
	unsigned long                                      bAwardAchievements : 1;                                   // 0x02B0(0x0004)
	int                                                MinPlayers;                                               // 0x02B4(0x0004) (Edit)
	int                                                MaxPlayers;                                               // 0x02B8(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET
	TArray<class AActor*>                              SpawnPoints;                                              // 0x02C0(0x0010) (Edit, NeedCtorLink)
	class AAIManager_TA*                               AIManagerArchetype;                                       // 0x02D0(0x0008) (Edit)
	class AAIManager_TA*                               AIManager;                                                // 0x02D8(0x0008) (Transient)
	class APylon_Soccar_TA*                            Pylon;                                                    // 0x02E0(0x0008) (Edit)
	class AAIController_TA*                            BotArchetype;                                             // 0x02E8(0x0008) (Edit)
	float                                              BotSkill;                                                 // 0x02F0(0x0004) (Net, Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02F4(0x0004) MISSED OFFSET
	TArray<class UMutator_TA*>                         DefaultMutators;                                          // 0x02F8(0x0010) (Edit, NeedCtorLink)
	TArray<class UMutator_TA*>                         Mutators;                                                 // 0x0308(0x0010) (Transient, NeedCtorLink)
	float                                              MatchTimeDilation;                                        // 0x0318(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x031C(0x0004) MISSED OFFSET
	class AHUD*                                        HUDArchetype;                                             // 0x0320(0x0008) (Edit)
	class APlayerController_TA*                        Activator;                                                // 0x0328(0x0008) (Transient)
	class ACar_TA*                                     ActivatorCar;                                             // 0x0330(0x0008) (Net, Transient)
	TArray<class AController*>                         Players;                                                  // 0x0338(0x0010) (Transient, NeedCtorLink)
	TArray<class APRI_TA*>                             PRIs;                                                     // 0x0348(0x0010) (Transient, NeedCtorLink)
	TArray<class ACar_TA*>                             Cars;                                                     // 0x0358(0x0010) (Transient, NeedCtorLink)
	TArray<class APlayerController_TA*>                LocalPlayers;                                             // 0x0368(0x0010) (Transient, NeedCtorLink)
	int                                                StartPointIndex;                                          // 0x0378(0x0004) (Transient)
	unsigned char                                      ReplicatedStateIndex;                                     // 0x037C(0x0001) (Const, Net, Transient)
	unsigned char                                      UnknownData03[0x3];                                       // 0x037D(0x0003) MISSED OFFSET
	TArray<struct FName>                               DeprecatedIndexToState;                                   // 0x0380(0x0010) (Const, NeedCtorLink)
	struct FName                                       ReplicatedStateName;                                      // 0x0390(0x0008) (Net, Transient)
	class UMessage_TA*                                 GameFullMessage;                                          // 0x0398(0x0008)
	class UMessage_TA*                                 OtherActiveMessage;                                       // 0x03A0(0x0008)
	class UMessage_TA*                                 NotEnoughPlayersMessage;                                  // 0x03A8(0x0008)
	class UMessage_TA*                                 TooManyPlayersMessage;                                    // 0x03B0(0x0008)
	class UMessage_TA*                                 NotPartyLeaderMessage;                                    // 0x03B8(0x0008)
	TArray<class UMessage_TA*>                         CountdownMessages;                                        // 0x03C0(0x0010) (NeedCtorLink)
	class UMessage_TA*                                 GoMessage;                                                // 0x03D0(0x0008)
	TArray<class UMessage_TA*>                         ReplacingBotCountdownMessages;                            // 0x03D8(0x0010) (NeedCtorLink)
	class UMessage_TA*                                 ReplacingBotGoMessage;                                    // 0x03E8(0x0008)
	TArray<struct FPlayerChatMessage>                  ChatHistory;                                              // 0x03F0(0x0010) (Transient, NeedCtorLink)
	int                                                GameStateTimeRemaining;                                   // 0x0400(0x0004) (Transient)
	int                                                ReplicatedGameStateTimeRemaining;                         // 0x0404(0x0004) (Net, Transient)
	class UBotConfig_TA*                               BotConfig;                                                // 0x0408(0x0008)
	TArray<struct FUniqueNetId>                        ForfeitInitiatorIDs;                                      // 0x0410(0x0010) (Transient, NeedCtorLink)
	TArray<struct FUniqueNetId>                        BannedPlayers;                                            // 0x0420(0x0010) (Transient, NeedCtorLink)
	class APRI_TA*                                     GameOwner;                                                // 0x0430(0x0008) (Net, Transient)
	struct U_Types_X_FCustomMatchSettings              MatchSettings;                                            // 0x0438(0x0090) (Net, Transient, NeedCtorLink)
	struct FString                                     RichPresenceString;                                       // 0x04C8(0x0010) (NeedCtorLink)
	class UMatchAdminComponent_TA*                     MatchAdmin;                                               // 0x04D8(0x0008) (Transient)
	class UListenServer_TA*                            ListenServer;                                             // 0x04E0(0x0008)
	int                                                ReplicatedRoundCountDownNumber;                           // 0x04E8(0x0004) (Net)
	unsigned char                                      UnknownData04[0x4];                                       // 0x04EC(0x0004) MISSED OFFSET
	class UMatchRecorder_TA*                           MatchRecorder;                                            // 0x04F0(0x0008)
	TArray<class UProductAsset_Bot_TA*>                RandomizedBots;                                           // 0x04F8(0x0010) (NeedCtorLink)
	TArray<class UGameState_TA*>                       GameStates;                                               // 0x0508(0x0010) (NeedCtorLink)
	class UGameState_TA*                               GameState;                                                // 0x0518(0x0008)
	struct FScriptDelegate                             __EventMatchStarted__Delegate;                            // 0x0520(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0520(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventGameStateChanged__Delegate;                        // 0x0538(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0538(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventGameStateTimeUpdated__Delegate;                    // 0x0550(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0550(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventFinished__Delegate;                                // 0x0568(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0568(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventDestroyed__Delegate;                               // 0x0580(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0580(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPlayerRestarted__Delegate;                         // 0x0598(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0598(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPlayerAdded__Delegate;                             // 0x05B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData11[0x8];                                       // 0x05B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPlayerRemoved__Delegate;                           // 0x05C8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData12[0x8];                                       // 0x05C8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventCarAdded__Delegate;                                // 0x05E0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData13[0x8];                                       // 0x05E0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventCarRemoved__Delegate;                              // 0x05F8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData14[0x8];                                       // 0x05F8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventReplicatedDemolish__Delegate;                      // 0x0610(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0610(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPenaltyChanged__Delegate;                          // 0x0628(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData16[0x8];                                       // 0x0628(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventCanVoteForfeitChanged__Delegate;                   // 0x0640(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData17[0x8];                                       // 0x0640(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventCountDownTimeUpdated__Delegate;                    // 0x0658(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData18[0x8];                                       // 0x0658(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventGameOwnerUpdated__Delegate;                        // 0x0670(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData19[0x8];                                       // 0x0670(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventMatchTypeSet__Delegate;                            // 0x0688(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData20[0x8];                                       // 0x0688(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventLocalPlayersChanged__Delegate;                     // 0x06A0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData21[0x8];                                       // 0x06A0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventMatchSettingsChanged__Delegate;                    // 0x06B8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData22[0x8];                                       // 0x06B8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPlayerResetTraining__Delegate;                     // 0x06D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData23[0x8];                                       // 0x06D0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __Pylon__ChangeNotify;                                    // 0x06E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData24[0x8];                                       // 0x06E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_TA");
		return ptr;
	}


	void InitCountDown();
	void StartCountdownTimer();
	void AllowReadyUp();
	class APRI_TA* FindPlayerPRI(const struct FUniqueNetId& UniqueId);
	void HandlePlayerRemoved(class AGameEvent_TA* GameEvent, class APRI_TA* PRI);
	void UpdateGameOwner();
	void SetGameOwner(class APRI_TA* NewOwner);
	void __GameEvent_TA__PostBeginPlay_B422D8814C21E205CC7EF096B2A49984(class UOnlineGameDedicatedServer_X* _, const struct U_Types_X_FCustomMatchSettings& Settings);
	void __GameEvent_TA__SetAllowReadyUp_BC295D634FEEC748DB127EA1E0150588(class APRI_TA* P);
	bool __GameEvent_TA__CheckPlayersReady_97605D734E5C6343D8A0E9B19133C902(class APRI_TA* P);
	struct FUniqueNetId __GameEvent_TA__CheckForBannedPlayers_C5D9E1604AD2E6D466FF8DB2FBFFFF97(class APRI_TA* PRI);
	bool __GameEvent_TA__CheckForBannedPlayers_F9A92DFA4EC12E43DD36BBA9AA6ACB4B(class APRI_TA* PRI);
	void __Pylon__ChangeNotifyFunc();
	bool DisableNamePlates();
	bool GetPlayerHUDPosition(class APRI_TA* PRI, struct FVector* Out_Position);
	void SetStaticDataPaused(bool bPause);
	bool AllowPausing(class APlayerController* PC);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void PlayerResetTraining();
	bool SuppressModalDialogs();
	bool ShouldShowBallIndicator();
	class UGameMode_TA* GetGameMode();
	void CheckInitiatedForfeit(class APRI_TA* PRI);
	void HandleSyncedBanStatus(class UBanSync_TA* BanSync);
	class APlayerController_TA* FindPCForUniqueID(const struct FUniqueNetId& PlayerID);
	void CheckForBannedPlayers(TArray<class APRI_TA*>* FilterLocal_49461D8B46B88C1136319E905929C94A, TArray<struct FUniqueNetId>* MapLocal_530864F4403D24F0C10CF992C260C535);
	bool AllowSplitScreenPlayer();
	void AddPlayerChatMessage(const struct FUniqueNetId& PlayerID, TEnumAsByte<EChatChannel> ChatChannel, class ATeamInfo* Team, const struct FString& Message);
	void ConditionalStartSpectatorMatch();
	struct FString STATIC_LocalizePresence(const struct FString& GameDataString);
	void GetPresenceStatus(struct FString* Out_PresenceString, struct FString* Out_GameDataString);
	struct FName GetMatchTypeName();
	bool IsPlayingFTE();
	bool IsPlayingTraining();
	bool IsPlayingLan();
	bool IsPlayingOffline();
	bool IsPlayingPrivate();
	bool IsPlayingPublic();
	bool IsOnlineMultiplayer();
	void CreateMatchType(const struct FString& Options);
	bool AllPlayersSelectedTeam();
	bool CanQueSaveReplay();
	void ForceMatchStart();
	void ConditionalStartMatch();
	bool DisableStatXP();
	bool GiveExtraXP();
	void GenerateItemDrops();
	void SaveLocalPlayerStats();
	bool CanUseBallCam();
	bool HandleNextGame();
	struct FName GetDesiredSoundGameMode();
	struct FName GetDesiredSoundState();
	void SetMaxPlayers(int InMaxPlayers);
	void SetRestartingMatch(bool bRestart);
	TScriptInterface<class UIOnlineGameHost_X> GetOnlineGameHost();
	class UOnlineGameLanServer_X* STATIC_GetOnlineGameLanServer();
	class UOnlineGameDedicatedServer_TA* GetOnlineGameDedicatedServer();
	bool ShouldBeFullScreen();
	bool IsFinished();
	void OnAllPlayersReady();
	void CheckPlayersReady();
	void SetAllowReadyUp(bool bAllow);
	void AutoReadyPlayers();
	bool ShouldAutoReadyUp(class APRI_TA* PRI);
	void SendGoMessage(class APlayerController_TA* Player);
	void SendCountdownMessage(int Seconds, class APlayerController_TA* Player);
	void BroadcastCountdownMessage(int Seconds);
	void BroadcastGoMessage();
	bool AllowShutdown();
	void HandleCarAddCarComponent(class UObject* O);
	float GetRealDeltaTime(float ElapsedTime);
	void SetTimeDilation(float NewTimeDilation);
	void ReplaceBotsWithAwaitingPlayers();
	void OnReplicatedDemolish(const struct FDemolishData& Data);
	void RemoveCar(class ACar_TA* Car);
	void AddCar(class ACar_TA* Car);
	void SetBotSkillByTeam(int Team, float NewSkill, float BoostThreshold, TArray<class AAIController_TA*>* OfTypeLocal_5B5F62704F27F52C714EE6BAF3FEE6CB, TArray<class AAIController_TA*>* FilterLocal_7669920748A5894A39CF95ABFDB573E8);
	void SetBotSkill(float NewSkill);
	class AAIController_TA* SpawnBotController();
	class APlayerController_TA* GetLocalPrimaryPlayer();
	void AddBot(class AAIController_TA* Bot, class UProductAsset_Bot_TA* BotAsset);
	class AAIController_TA* SpawnBot();
	class UProductAsset_Bot_TA* ChooseBotAsset(class AAIController_TA* Bot);
	bool HasPlayerNamed(const struct FString& PlayerName);
	void RandomizeBots();
	bool MoveToGround(class AActor* Mover, float HeightCheck);
	void SetAllDriving(bool bDriving);
	void Destroyed();
	void OnFinished();
	void StartEvent();
	void StartCountDown();
	void StartInitialCountDown();
	void OnGameStateTimeLapsed();
	void OnGameStateTimeUpdated();
	void UpdateGameStateTime();
	void SetGameStateTimeRemaining(int StateTime, bool bFromReplication);
	void SetGameStateTime(int StateTime);
	class UGameState_TA* GetGameState(const struct FName& StateName);
	void SetGameStateComponents(const struct FName& StateName);
	void GotoStateInternal(const struct FName& StateName);
	void GotoGameState(const struct FName& StateName);
	void OnPlayerRestarted(class ACar_TA* PlayerCar);
	void TeleportCar(class ACar_TA* PlayerCar);
	void OnCarSpawned(class ACar_TA* NewCar);
	class ACar_TA* SpawnCar(class AController* NewPlayer, const struct FVector& SpawnLoc, const struct FRotator& SpawnRot);
	bool SpotIsEncroached(const struct FVector& Spot);
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
	void RandomizeSpawnPoints();
	bool RestartPlayer(class AController* NewPlayer);
	bool PlayerCanRestart(class AController* aPlayer);
	void RestartPlayers();
	void RemoveLocalPlayer(class APlayerController_TA* Player);
	void AddLocalPlayer(class APlayerController_TA* Player);
	void RemovePRI(class APRI_TA* PRI, class UPlayerRemovedEvent_TA** ObjectInitializer_BC0AF62B492D1B267E0DC79ECB423A43);
	void AddPRI(class APRI_TA* PRI);
	void AddForfeitInitiator(const struct FUniqueNetId& PlayerID);
	void BanPlayerID(const struct FUniqueNetId& PlayerID);
	void BanConnection(class UNetConnection* Connection);
	void OnPlayerRemoved(class AController* OldPlayer);
	void RemovePlayer(class AController* Player);
	int GetMaxHumans();
	int GetNumHumans();
	void AddPlayers(TArray<class AController*> PlayersToAdd);
	bool ReplacePlayer(class APRI_TA* NewPlayer, struct FVector* CarLocation, struct FRotator* CarRotation, struct FVector* CarVelocity);
	bool ReplaceBot(class APRI_TA* PRI, class APRI_TA* Replace, struct FVector* CarLocation, struct FRotator* CarRotation, struct FVector* CarVelocity);
	bool FindBotReplacement(class APRI_TA* PRI);
	void UpdateBotCount();
	void TimerUpdateBotCount();
	void HandleSelectedLoadout(class APRI_TA* PlayerPRI);
	void OnPlayerAdded(class AController* NewPlayer);
	bool AddPlayer(class AController* Player, class UMessage_TA** ErrorMsg);
	void ResetPickups();
	void ResetPlayers();
	void DestroyCars();
	bool IsAIDebugger(class AController* C);
	void OnInit();
	void HandleAverageSkillChanged(class UOnlineGameDedicatedServer_X* Server);
	void InitBotSkill();
	void MutateObject(class UObject* O);
	bool HasMutatorType(class UClass* MutatorClass);
	bool HasMutatorNamed(const struct FName& MutatorName);
	void InitMutators();
	void HandleDestroyed(class AGameEvent_TA* GameEvent);
	void Init(class APlayerController_TA* InActivator);
	class UClass* GetMatchTypeFromOptions(const struct FString& Options);
	void InitListenServer();
	void InitGame(const struct FString& Options);
	bool PlayerCanStartEvent(class APlayerController_TA* InActivator, class UMessage_TA** ErrorMsg);
	class UOnlineGame_Base_X* GetOnlineGame();
	void NotifyKismetGameStateChanged();
	void OnGameStateChanged();
	void OnCanVoteForfeitChanged();
	void UpdateCanVoteToForfeit();
	bool ShouldAllowVoteToForfeit();
	void OnPenaltyChanged();
	void UpdateLeaveMatchPenalty();
	class UGameSettingPlaylist_X* GetPlaylist();
	bool ShouldHaveLeaveMatchPenalty();
	class UGameMetrics_TA* GetMetrics();
	void OnMatchSettingsChanged();
	void SetCustomMatchSettings(const struct U_Types_X_FCustomMatchSettings& NewSettings);
	void ClearGameScoreFromCustomSettings();
	void ReplicatedEvent(const struct FName& VarName);
	struct FString MatchGUID();
	void PostBeginPlay();
	void EventPlayerResetTraining(class AGameEvent_TA* GameEvent);
	void EventMatchSettingsChanged(class AGameEvent_TA* GameEvent, const struct U_Types_X_FCustomMatchSettings& NewMatchSettings);
	void EventLocalPlayersChanged(class AGameEvent_TA* GameEvent);
	void EventMatchTypeSet(class AGameEvent_TA* GameEvent);
	void EventGameOwnerUpdated(class AGameEvent_TA* GameEvent, class APRI_TA* NewGameOwner);
	void EventCountDownTimeUpdated(class AGameEvent_TA* GameEvent, int Seconds);
	void EventCanVoteForfeitChanged(class AGameEvent_TA* GameEvent);
	void EventPenaltyChanged(class AGameEvent_TA* GameEvent);
	void EventReplicatedDemolish(class AGameEvent_TA* GameEvent, const struct FDemolishData& Data);
	void EventCarRemoved(class AGameEvent_TA* GameEvent, class ACar_TA* Car);
	void EventCarAdded(class AGameEvent_TA* GameEvent, class ACar_TA* Car);
	void EventPlayerRemoved(class AGameEvent_TA* GameEvent, class APRI_TA* PRI);
	void EventPlayerAdded(class AGameEvent_TA* GameEvent, class APRI_TA* PRI);
	void EventPlayerRestarted(class AGameEvent_TA* GameEvent, class ACar_TA* PlayerCar);
	void EventDestroyed(class AGameEvent_TA* GameEvent);
	void EventFinished(class AGameEvent_TA* GameEvent);
	void EventGameStateTimeUpdated(class AGameEvent_TA* GameEvent);
	void EventGameStateChanged(class AGameEvent_TA* GameEvent);
	void EventMatchStarted(class AGameEvent_TA* GameEvent);
};


// Class TAGame.GameEvent_Team_TA
// 0x0068 (0x0768 - 0x0700)
class AGameEvent_Team_TA : public AGameEvent_TA
{
public:
	TArray<class ATeam_TA*>                            TeamArchetypes;                                           // 0x0700(0x0010) (Edit, NeedCtorLink)
	TArray<class ATeam_TA*>                            Teams;                                                    // 0x0710(0x0010) (Transient, NeedCtorLink)
	int                                                MaxTeamSize;                                              // 0x0720(0x0004) (Net, Transient)
	int                                                NumBots;                                                  // 0x0724(0x0004) (Transient)
	unsigned long                                      bMuteOppositeTeams : 1;                                   // 0x0728(0x0004) (Edit)
	unsigned long                                      bDisableMutingOtherTeam : 1;                              // 0x0728(0x0004) (Net, Transient)
	unsigned long                                      bForfeit : 1;                                             // 0x0728(0x0004) (Net, Transient)
	unsigned long                                      bUnfairTeams : 1;                                         // 0x0728(0x0004) (Transient)
	unsigned long                                      bAlwaysAutoSelectTeam : 1;                                // 0x0728(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x072C(0x0004) MISSED OFFSET
	class AVoteActor_TA*                               RematchVoteArchetype;                                     // 0x0730(0x0008) (Edit)
	class AVoteActor_TA*                               RematchVote;                                              // 0x0738(0x0008) (Transient)
	TArray<class UProductAsset_TA*>                    PreloadedBotAssets;                                       // 0x0740(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventTeamsCreated__Delegate;                            // 0x0750(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0750(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Team_TA");
		return ptr;
	}


	void StartRematchVote();
	void CheckRematchVote();
	bool __GameEvent_Team_TA__AllTeamsHaveHumans_32951ACE4957170BB8804BB3EB01C035(class ATeam_TA* Team);
	void UpdatePlayerShortcuts();
	void ClearTemporarySpawnSpots();
	void ResetPlayers();
	class ATeam_TA* GetOtherTeam(class ATeamInfo* Team);
	bool ChooseTeam(int TeamIndex, class APlayerController_TA* Player);
	bool CanChangeTeam();
	void OnPenaltyChanged();
	void OnTeamForfeited(class ATeam_TA* Team);
	void HandleTeamForfeit(class ATeam_TA* Team);
	void MuteOppositeTeams(bool bMute);
	void UpdateBotCount();
	bool ReplacePlayer(class APRI_TA* PRI, struct FVector* CarLocation, struct FRotator* CarRotation, struct FVector* CarVelocity);
	bool ReplaceBot(class APRI_TA* PRI, class APRI_TA* Replace, struct FVector* CarLocation, struct FRotator* CarRotation, struct FVector* CarVelocity);
	bool FindBotReplacement(class APRI_TA* PRI);
	void EndGame();
	void ForceNoContest();
	void CheckForForfeit(class AController* RemovedPlayer, class ATeam_TA* Team);
	void OnPlayerRemoved(class AController* OldPlayer);
	class ATeam_TA* PickTeam(class AController* C);
	bool AutoSelectTeam(class AController* NewPlayer);
	void AddTemporarySpawnSpot(class ATeam_TA* Team, class ACar_TA* Car);
	bool RestartPlayer(class AController* NewPlayer);
	void SetPlayerTeam(class AController* Player, int Team);
	void RemovePlayerFromTeam(class AController* Player);
	void AddPlayerToTeam(class ATeam_TA* NewTeam, class AController* NewPlayer);
	void HandleSelectedLoadout(class APRI_TA* PlayerPRI);
	void OnPlayerAdded(class AController* NewPlayer);
	void Destroyed();
	void DestroyTeams();
	void NotifyAllTeamsCreated(const struct FScriptDelegate& Callback);
	void OnAllTeamsCreated();
	void AssignCustomTeamSettings();
	void OnMatchSettingsChanged();
	bool AllTeamsHaveHumans();
	bool AllTeamsCreated();
	void SetTeam(int TeamNum, class ATeam_TA* NewTeam);
	void CreateTeams();
	void PreloadBot(class UProductAsset_Bot_TA* Bot);
	void PreloadBots();
	void OnInit();
	void SetMaxTeamSize(int MaxSize);
	void UpdateMaxTeamSize();
	void SetUnfairTeams(bool bUnfair);
	void InitBotSkill();
	void InitGame(const struct FString& Options);
	void EventTeamsCreated(class AGameEvent_Team_TA* GameEvent);
};


// Class TAGame.GameMode_TA
// 0x0040 (0x00A0 - 0x0060)
class UGameMode_TA : public UObject
{
public:
	class AGameInfo*                                   GameArchetype;                                            // 0x0060(0x0008) (Edit)
	class UMapSet_TA*                                  MapSet;                                                   // 0x0068(0x0008) (Edit)
	class UMapSet_TA*                                  FreeplayMapSet;                                           // 0x0070(0x0008) (Edit)
	TArray<struct FName>                               DisallowedMutatorCategories;                              // 0x0078(0x0010) (Edit, NeedCtorLink)
	class UClass*                                      GameInfoClass;                                            // 0x0088(0x0008)
	struct FString                                     GameArchetypePath;                                        // 0x0090(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameMode_TA");
		return ptr;
	}


	struct FString GetLocalizedName();
};


// Class TAGame.GameModeList_TA
// 0x0010 (0x0070 - 0x0060)
class UGameModeList_TA : public UObject
{
public:
	TArray<class UGameMode_TA*>                        GameModes;                                                // 0x0060(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameModeList_TA");
		return ptr;
	}


	class UGameMode_TA* GetGameModeForFreeplayMap(const struct FName& MapName);
	class UGameMode_TA* GetGameModeForClass(class UClass* GameInfoClass);
	class UMapSet_TA* GetMapSet(int GameModeIndex);
	struct FString GetGameURL(int GameModeIndex);
};


// Class TAGame.GameObserver_TA
// 0x0194 (0x0238 - 0x00A4)
class UGameObserver_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	float                                              HitTimeToBallMin;                                         // 0x00A8(0x0004) (Edit)
	float                                              HitTimeToBallMax;                                         // 0x00AC(0x0004) (Edit)
	float                                              HitPredictDistMax;                                        // 0x00B0(0x0004) (Edit)
	float                                              HitPredictDistMin;                                        // 0x00B4(0x0004) (Edit)
	float                                              OffenseDotBetweenMin;                                     // 0x00B8(0x0004) (Edit)
	float                                              OffenseDotBetweenMax;                                     // 0x00BC(0x0004) (Edit)
	float                                              OffenseDistToGoalMin;                                     // 0x00C0(0x0004) (Edit)
	float                                              OffenseDistToGoalMax;                                     // 0x00C4(0x0004) (Edit)
	float                                              OffenseDistToBallMin;                                     // 0x00C8(0x0004) (Edit)
	float                                              OffenseDistToBallMax;                                     // 0x00CC(0x0004) (Edit)
	float                                              DefenseDotBetweenMin;                                     // 0x00D0(0x0004) (Edit)
	float                                              DefenseDotBetweenMax;                                     // 0x00D4(0x0004) (Edit)
	float                                              DefenseDistToGoalMin;                                     // 0x00D8(0x0004) (Edit)
	float                                              DefenseDistToGoalMax;                                     // 0x00DC(0x0004) (Edit)
	float                                              DefenseDistToBallMin;                                     // 0x00E0(0x0004) (Edit)
	float                                              DefenseDistToBallMax;                                     // 0x00E4(0x0004) (Edit)
	float                                              ScorabilityDistToBallMin;                                 // 0x00E8(0x0004) (Edit)
	float                                              ScorabilityDistToBallMax;                                 // 0x00EC(0x0004) (Edit)
	float                                              ScorabilityDistToBallWeight;                              // 0x00F0(0x0004) (Edit)
	float                                              ScorabilityDotToBallMin;                                  // 0x00F4(0x0004) (Edit)
	float                                              ScorabilityDotToBallMax;                                  // 0x00F8(0x0004) (Edit)
	float                                              ScorabilityDotToBallWeight;                               // 0x00FC(0x0004) (Edit)
	float                                              ScorabilityOffenseWeight;                                 // 0x0100(0x0004) (Edit)
	float                                              ScorabilityDefenseWeight;                                 // 0x0104(0x0004) (Edit)
	float                                              CarBallAerialBlend;                                       // 0x0108(0x0004) (Edit)
	float                                              MaxAerialHitProbability;                                  // 0x010C(0x0004) (Edit)
	unsigned long                                      bDebugCarData : 1;                                        // 0x0110(0x0004)
	unsigned long                                      bDebugGoalData : 1;                                       // 0x0110(0x0004)
	unsigned long                                      bDebugBallData : 1;                                       // 0x0110(0x0004)
	unsigned long                                      bDebugPrediction : 1;                                     // 0x0110(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	TArray<struct FCarData>                            RelevantCars;                                             // 0x0118(0x0010) (NeedCtorLink)
	TArray<struct FGoalData>                           RelevantGoals;                                            // 0x0128(0x0010) (Component, NeedCtorLink)
	float                                              MinAerialAltitude;                                        // 0x0138(0x0004) (Edit)
	float                                              MaxAerialAltitude;                                        // 0x013C(0x0004) (Edit)
	float                                              AerialLikelyhood;                                         // 0x0140(0x0004)
	float                                              MaxCalculatedTimeToBall;                                  // 0x0144(0x0004) (Edit)
	struct FBallData                                   RelevantBall;                                             // 0x0148(0x0020)
	TArray<class UObject*>                             Listeners;                                                // 0x0168(0x0010) (Transient, NeedCtorLink)
	float                                              HighestScorability;                                       // 0x0178(0x0004)
	float                                              ClosestBallToGoal;                                        // 0x017C(0x0004)
	struct FCarData                                    HighestAerialCar;                                         // 0x0180(0x0058) (NeedCtorLink)
	struct FGoalData                                   ClosestGoalToBall;                                        // 0x01D8(0x0048) (Component)
	struct FScriptDelegate                             __EventCarHitBall__Delegate;                              // 0x0220(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0220(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameObserver_TA");
		return ptr;
	}


	void __GameObserver_TA__InitCars_D1B6B55144D2E21BC7D69599AB0BD1EF(class ACar_TA* C);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void DrawGoalData(const struct FGoalData& Data);
	void DrawCarData(const struct FCarData& Data);
	void DrawBallData(const struct FBallData& Data);
	float GetAerialSkill(float Altitude);
	struct FVector GetLocationAtTime(class ARBActor_TA* InActor, float inTime);
	struct FVector ClampLocationToGoal(class UGoal_TA* InGoal, const struct FVector& InLocation);
	void GetCarGoalData(class AVehicle_TA* ForCar, struct FGoalData* ForGoal, struct FCarGoalData* Data);
	struct FGoalData GetOffensiveGoal(class AVehicle_TA* ForCar);
	struct FGoalData GetDefensiveGoal(class AVehicle_TA* ForCar);
	void UpdateCarData(float DeltaTime, struct FCarData* Data);
	struct FCarData GetCarDataForPRI(class APRI_TA* PRI);
	struct FCarData GetCarData(class AVehicle_TA* ForCar);
	void UpdateCarsData(float DeltaTime);
	void UpdateGoalData(float DeltaTime, struct FGoalData* Data);
	void UpdateGoalsData(float DeltaTime);
	void UpdateBallData();
	void Tick(float DeltaTime);
	class AGameEvent_Soccar_TA* GetSoccarEvent();
	class ABall_TA* GetBall();
	void HandleCarHitBall(class ACar_TA* InCar, class ABall_TA* InBall, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void HandleCarRemoved(class AGameEvent_TA* G, class ACar_TA* InCar);
	void HandleCarAdded(class AGameEvent_TA* G, class ACar_TA* InCar);
	void InitCars();
	void HandleBallRemoved(class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* InBall);
	void HandleBallAdded(class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* InBall);
	void InitBall();
	void InitFieldProperties();
	void Attached();
	void EventCarHitBall(class ACar_TA* InCar, class ABall_TA* InBall);
};


// Class TAGame.GameShare_TA
// 0x00D8 (0x0138 - 0x0060)
class UGameShare_TA : public UObject
{
public:
	class UMaxActorsGroup_TA*                          CarEngineAudioGroup;                                      // 0x0060(0x0008) (Edit, Const, ExportObject, Component, EditInline)
	TArray<class UMaterialInstance*>                   BallPositionMaterialInstances;                            // 0x0068(0x0010) (Transient, NeedCtorLink)
	TArray<class AVehiclePickup_Boost_TA*>             ActiveBoostPills;                                         // 0x0078(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bHideWorldUI : 1;                                         // 0x0088(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	TArray<class UNameplateComponent_TA*>              Nameplates;                                               // 0x0090(0x0010) (ExportObject, Transient, Component, NeedCtorLink, EditInline)
	TArray<class ACarPreviewActor_TA*>                 CarPreviewActors;                                         // 0x00A0(0x0010) (Transient, NeedCtorLink)
	TArray<class UAkSoundSource*>                      SoundSourcePool;                                          // 0x00B0(0x0010) (Const, ExportObject, Transient, Component, NeedCtorLink, EditInline)
	struct FScriptDelegate                             __EventHideWorldUIChanged__Delegate;                      // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventNameplateAdded__Delegate;                          // 0x00D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventNameplateRemoved__Delegate;                        // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventCarPreviewActorAdded__Delegate;                    // 0x0108(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0108(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventCarPreviewActorRemoved__Delegate;                  // 0x0120(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0120(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameShare_TA");
		return ptr;
	}


	void NotifyCarPreviewActorAdded(const struct FScriptDelegate& Callback);
	void RemoveCarPreviewActor(class ACarPreviewActor_TA* PreviewCar);
	void AddCarPreviewActor(class ACarPreviewActor_TA* PreviewCar);
	void RemoveNameplate(class UNameplateComponent_TA* Nameplate);
	void AddNameplate(class UNameplateComponent_TA* Nameplate);
	void SetWorldUIHidden(bool bHidden);
	void NotifyHideWorldUIChanged(const struct FScriptDelegate& Callback);
	void EventCarPreviewActorRemoved(class UGameShare_TA* GameShare, class ACarPreviewActor_TA* PreviewCar);
	void EventCarPreviewActorAdded(class UGameShare_TA* GameShare, class ACarPreviewActor_TA* PreviewCar);
	void EventNameplateRemoved(class UGameShare_TA* GameShare, class UNameplateComponent_TA* NameplateComponent);
	void EventNameplateAdded(class UGameShare_TA* GameShare, class UNameplateComponent_TA* NameplateComponent);
	void EventHideWorldUIChanged(class UGameShare_TA* GameShare);
	class UAkSoundSource* GetPooledSoundSource();
};


// Class TAGame.GameViewportClient_TA
// 0x00D8 (0x0388 - 0x02B0)
class UGameViewportClient_TA : public UGameViewportClient_X
{
public:
	unsigned long                                      bSplitScreenDisabled : 1;                                 // 0x02B0(0x0004)
	unsigned long                                      bUpdateSplitscreenSizes : 1;                              // 0x02B0(0x0004) (Transient)
	unsigned long                                      bDrawWorldFullScreen : 1;                                 // 0x02B0(0x0004) (Transient)
	unsigned long                                      bDrawBuildInfo : 1;                                       // 0x02B0(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02B4(0x0004) MISSED OFFSET
	TArray<float>                                      LastSplitJoinTryTimes;                                    // 0x02B8(0x0010) (Transient, NeedCtorLink)
	float                                              UIScaleModifier;                                          // 0x02C8(0x0004)
	float                                              NameplateScaleModifier;                                   // 0x02CC(0x0004)
	class AGameEvent_TA*                               GameEvent;                                                // 0x02D0(0x0008)
	class UOnlineGame_X*                               OnlineGame;                                               // 0x02D8(0x0008)
	struct FScriptDelegate                             __EventPostInit__Delegate;                                // 0x02E0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02E0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSplitScreenTypeChanged__Delegate;                  // 0x02F8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02F8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventDrawWorldFullScreenChanged__Delegate;              // 0x0310(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0310(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventUIScaleModifierUpdated__Delegate;                  // 0x0328(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0328(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSafeZoneRatioUpdated__Delegate;                    // 0x0340(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0340(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventUpdatedNumLocalPlayers__Delegate;                  // 0x0358(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0358(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventNameplateScaleModifierUpdated__Delegate;           // 0x0370(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0370(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameViewportClient_TA");
		return ptr;
	}


	void __GameViewportClient_TA__Init_C87EB7C04F1C782F6DC597A6216DED3A(class AGameEvent_TA* _);
	void __GameViewportClient_TA__Init_320CCD5C477E5256946D0C8E73FCDB62(class ULocalPlayer* _);
	void __GameViewportClient_TA__Init_806C78B643C8351EDFD2CB8B0B99ED1A(class ULocalPlayer* _);
	int __GameViewportClient_TA__AddSplitScreenPlayer_41DAEDA3477CBB98425508A285B9BEDC(class ULocalPlayer* LP);
	void SetProgressMessage(TEnumAsByte<EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title, bool bIgnoreFutureNetworkMessages);
	void NotifyPlayerRemoved(int PlayerIndex, class ULocalPlayer* RemovedPlayer);
	void SetNameplateScaleModifier(float Value);
	void SetUIScaleModifier(float Value);
	void SetSafeZone(float Value);
	void HandlePrimaryPlayerChange(class ULocalPlayer* OldPrimary, class ULocalPlayer* NewPrimary);
	int STATIC_GetLocalPlayerCount();
	void NotifyOnNumLocalPlayersUpdated(const struct FScriptDelegate& Callback);
	void UpdateNumLocalPlayers();
	float GetAspectRatio(class ULocalPlayer* Player);
	class ULocalPlayer* CreatePlayer(int ControllerId, bool bSpawnActor, struct FString* OutError);
	void AddSplitScreenPlayer(TArray<int>* MapLocal_C1610D47464CC6564C6FC9A5092CE5BD);
	void HandleUserSignInComplete_CreateSplitScreenPlayer(unsigned char LocalUserNum);
	void InitiateAsyncLoginForSplitscreen(int ControllerId);
	bool HandleSplitScreenJoinAsync(int ControllerId);
	bool HandleKeyPress(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	void SplitscreenJoinResponse(const struct FUniqueNetId& PlayerID, bool bAllow, const struct FString& Error);
	void RequestSplitscreenJoin(int ControllerId);
	bool AllowTournamentSplitscreen(int ControllerId);
	bool GameEventAllowSplitScreenPlayer();
	void CreateSplitScreenPlayer(int ControllerId);
	void HandleSplitscreenJoinPrivilegeCheck(class UPrivilegeCheck_X* PrivilegeCheck);
	void TryToCreateSplitScreenPlayer(int ControllerId);
	void HandleUserSwitchComplete(unsigned char LocalUserNum);
	bool IsPlayingOnline();
	bool GameWantsFullScreen();
	void LayoutPlayers();
	void SetSplitscreenSizes();
	class APlayerControllerBase_TA* GetPrimaryPlayerController();
	void UpdateActiveSplitscreenType();
	void DrawTransition(class UCanvas* Canvas);
	void NotifyConnectionError(TEnumAsByte<EProgressMessageType> MessageType, const struct FString& Message, const struct FString& Title);
	bool Init(struct FString* OutError);
	void EventNameplateScaleModifierUpdated(class UGameViewportClient_TA* GVC);
	void EventUpdatedNumLocalPlayers(class UGameViewportClient_TA* GVC, int LocalPlayerCount);
	void EventSafeZoneRatioUpdated(class UGameViewportClient_TA* GVC);
	void EventUIScaleModifierUpdated(class UGameViewportClient_TA* GVC);
	void EventDrawWorldFullScreenChanged(class UGameViewportClient_TA* GVC);
	void EventSplitScreenTypeChanged(class UGameViewportClient_TA* GVC);
	void EventPostInit(class UGameViewportClient_TA* GVC);
};


// Class TAGame.GarageFolderUnlocker_TA
// 0x0000 (0x0060 - 0x0060)
class UGarageFolderUnlocker_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GarageFolderUnlocker_TA");
		return ptr;
	}


	void STATIC_GetUnlockedFolderProducts(TArray<int>* UnlockedProductIDs, TArray<int>* UnlockedFolders, TArray<int>* LockedFolders);
	void STATIC_FixupUnlockedGarageFolders(class USaveData_TA* SaveData);
};


// Class TAGame.GFxData_Personas_TA
// 0x0058 (0x00F0 - 0x0098)
class UGFxData_Personas_TA : public UGFxDataSingleton_X
{
public:
	struct FMap_Mirror                                 PersonaMap;                                               // 0x0098(0x0050) (Native)
	class UPersonas_TA*                                PersonasData;                                             // 0x00E8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Personas_TA");
		return ptr;
	}


	int GetOrCreatePersonaDataFromID(const struct FUniqueNetId& PlayerID);
	class UGFxData_Persona_TA* GetOrCreatePersonaData(class UPersona_TA* Persona);
	void HandleLocalPlayerAdded(class ULocalPlayer_TA* InLocalPlayer);
	class UGFxData_Persona_TA* STATIC_GetOrCreateFromID(class UGFxShell_X* InShell, const struct FUniqueNetId& PlayerID);
	class UGFxData_Persona_TA* STATIC_GetOrCreate(class UGFxShell_X* InShell, class UPersona_TA* Persona);
	void OnRemoved();
	void OnShellSet();
	int GetFromMap(const struct FUniqueNetId& PlayerID);
	void AddToMap(const struct FUniqueNetId& PlayerID, int RowIdx);
};


// Class TAGame.GFxEngine_TA
// 0x0028 (0x01B8 - 0x0190)
class UGFxEngine_TA : public UGFxEngine_X
{
public:
	TArray<struct FSoundStateItem>                     UISoundStates;                                            // 0x0190(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bViewingOnlineScene : 1;                                  // 0x01A0(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01A4(0x0004) MISSED OFFSET
	class ULoadingScreen_TA*                           LoadingScreen;                                            // 0x01A8(0x0008)
	class UOnlineSubsystem*                            OnlineSubsystem;                                          // 0x01B0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxEngine_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	int UISoundStatePrioritySort(const struct FSoundStateItem& A, const struct FSoundStateItem& B);
	void UpdateUISoundState();
	void OnShellDestroyed(class UGFxShell_X* Shell);
	void OnGameSessionEnded();
	void OnExternalUIChanged(bool bIsOpening);
	TEnumAsByte<ESoundStatePriority> GetSoundStatePriority(const struct FName& StateName);
	void ClearUISoundState(class UGFxShell_X* Shell);
	void PopUISoundState(const struct FName& StateName, class UGFxShell_X* Shell);
	void PushUniqueUISoundState(const struct FName& StateName, class UGFxShell_X* Shell);
	void PushUISoundState(const struct FName& StateName, class UGFxShell_X* Shell);
	void InitOnlineSub();
	void Init();
};


// Class TAGame.GlobalLookupTexture_TA
// 0x007C (0x022C - 0x01B0)
class UGlobalLookupTexture_TA : public UScriptedTexture
{
public:
	struct FIntVector                                  EnvironmentAPosition;                                     // 0x01B0(0x0008) (Edit, Const)
	struct FIntVector                                  EnvironmentBPosition;                                     // 0x01B8(0x0008) (Edit, Const)
	struct FIntVector                                  SunlightPosition;                                         // 0x01C0(0x0008) (Edit, Const)
	struct FIntVector                                  WorldLightPosition;                                       // 0x01C8(0x0008) (Edit, Const)
	int                                                TeamsPositionX;                                           // 0x01D0(0x0004) (Edit, Const)
	int                                                PlayersPositionX;                                         // 0x01D4(0x0004) (Edit, Const)
	TArray<struct FLinearColor>                        TopTeamColors;                                            // 0x01D8(0x0010) (Transient, NeedCtorLink)
	TArray<struct FLinearColor>                        BottomTeamColors;                                         // 0x01E8(0x0010) (Transient, NeedCtorLink)
	TArray<class UObject*>                             Players;                                                  // 0x01F8(0x0010) (Transient, NeedCtorLink)
	TArray<struct FLinearColor>                        TopPlayerColors;                                          // 0x0208(0x0010) (Transient, NeedCtorLink)
	TArray<struct FLinearColor>                        BottomPlayerColors;                                       // 0x0218(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bDebug : 1;                                               // 0x0228(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GlobalLookupTexture_TA");
		return ptr;
	}


	void OnRender(class UCanvas* Canvas);
	struct FLinearColor STATIC_GetFullBrightColor(const struct FLinearColor& InColor, float ValueScale);
	void Update();
	void SetTeamColors(int Team, const struct FLinearColor& Primary, const struct FLinearColor& Secondary);
	void RemovePlayer(class UObject* Player);
	float AddPlayer(class UObject* Player, const struct FLinearColor& Primary, const struct FLinearColor& Secondary);
};


// Class TAGame.Goal_TA
// 0x0104 (0x01A8 - 0x00A4)
class UGoal_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class AActor*                                      GoalOrientation;                                          // 0x00A8(0x0008) (Edit, Const)
	TArray<class AActor*>                              OverrideGoalIndicatorOrientations;                        // 0x00B0(0x0010) (Edit, NeedCtorLink)
	unsigned char                                      TeamNum;                                                  // 0x00C0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00C1(0x0007) MISSED OFFSET
	class AFXActor_X*                                  ScoreFX;                                                  // 0x00C8(0x0008) (Edit)
	struct FString                                     GoalIndicatorArchetype;                                   // 0x00D0(0x0010) (Edit, Const, NeedCtorLink)
	unsigned long                                      bNoGoalIndicator : 1;                                     // 0x00E0(0x0004) (Edit)
	unsigned long                                      bOnlyGoalsFromDirection : 1;                              // 0x00E0(0x0004) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x00E0(0x0004) (Edit)
	unsigned long                                      bShowFocusExtent : 1;                                     // 0x00E0(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	class AActor*                                      GoalDirection;                                            // 0x00E8(0x0008) (Edit, Const)
	int                                                PointsToAward;                                            // 0x00F0(0x0004) (Edit)
	struct FVector                                     AutoCamFocusExtent;                                       // 0x00F4(0x000C) (Edit)
	struct FVector                                     GoalFocusLocationOffset;                                  // 0x0100(0x000C) (Edit)
	float                                              MaxGoalScorerAttachRadius;                                // 0x010C(0x0004) (Edit)
	struct FVector                                     GoalScoredDotDirection;                                   // 0x0110(0x000C) (Edit)
	float                                              MinAttachGoalToScorerDot;                                 // 0x011C(0x0004) (Edit)
	struct FVector                                     Location;                                                 // 0x0120(0x000C) (Transient)
	struct FVector                                     Direction;                                                // 0x012C(0x000C) (Transient)
	struct FVector                                     Right;                                                    // 0x0138(0x000C) (Transient)
	struct FVector                                     Up;                                                       // 0x0144(0x000C) (Transient)
	struct FRotator                                    Rotation;                                                 // 0x0150(0x000C) (Transient)
	struct FVector                                     LocalExtent;                                              // 0x015C(0x000C) (Transient)
	struct FVector                                     WorldCenter;                                              // 0x0168(0x000C) (Transient)
	struct FVector                                     WorldExtent;                                              // 0x0174(0x000C) (Transient)
	struct FVector                                     WorldFrontCenter;                                         // 0x0180(0x000C) (Transient)
	struct FBox                                        WorldBox;                                                 // 0x018C(0x001C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Goal_TA");
		return ptr;
	}


	void SetEnabled(bool bValue);
	struct FVector GetGoalFocusExtentCenter();
	class AActor* GetGoalOverrideOrientationFromBallLocation(class ABall_TA* Ball);
	void Init();
	void BeginPlay();
};


// Class TAGame.GroundStaticMeshActor_TA
// 0x0004 (0x028C - 0x0288)
class AGroundStaticMeshActor_TA : public AStaticMeshActor
{
public:
	float                                              HideLocationOffset;                                       // 0x0288(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GroundStaticMeshActor_TA");
		return ptr;
	}

};


// Class TAGame.HandlingPreset_TA
// 0x0080 (0x00E0 - 0x0060)
class UHandlingPreset_TA : public UObject
{
public:
	struct FVehicleAxleData                            FrontAxle;                                                // 0x0060(0x0014) (Edit)
	struct FVehicleAxleData                            BackAxle;                                                 // 0x0074(0x0014) (Edit)
	class UPhysicsAsset*                               PhysAsset;                                                // 0x0088(0x0008) (Edit)
	struct FSimpleSpringSettings                       ChassisSpringDefaults;                                    // 0x0090(0x0050) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.HandlingPreset_TA");
		return ptr;
	}

};


// Class TAGame.HideLevelAssetsBase_TA
// 0x0020 (0x0288 - 0x0268)
class AHideLevelAssetsBase_TA : public AActor
{
public:
	TArray<class AActor*>                              ActorsInLevel;                                            // 0x0268(0x0010) (NeedCtorLink)
	TArray<class UClass*>                              ActorClasses;                                             // 0x0278(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.HideLevelAssetsBase_TA");
		return ptr;
	}


	void FindLevelActors();
};


// Class TAGame.GreenScreen_TA
// 0x0010 (0x0298 - 0x0288)
class AGreenScreen_TA : public AHideLevelAssetsBase_TA
{
public:
	TArray<class UPrimitiveComponent*>                 HiddenPrimitives;                                         // 0x0288(0x0010) (ExportObject, Component, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GreenScreen_TA");
		return ptr;
	}


	void ChangeBackgroundColor(float R, float G, float B);
	void Start(float R, float G, float B);
};


// Class TAGame.ToggleActorVisibility_TA
// 0x0000 (0x0288 - 0x0288)
class AToggleActorVisibility_TA : public AHideLevelAssetsBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ToggleActorVisibility_TA");
		return ptr;
	}


	void ToggleActorVisibility(int Index);
};


// Class TAGame.IdenticalProductCache_TA
// 0x0050 (0x00C0 - 0x0070)
class UIdenticalProductCache_TA : public UComponent
{
public:
	struct FMap_Mirror                                 Products;                                                 // 0x0070(0x0050) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IdenticalProductCache_TA");
		return ptr;
	}


	TArray<class UOnlineProduct_TA*> FindProductsWithIdenticalAttributes(class UOnlineProduct_TA* OnlineProduct);
	class UOnlineProduct_TA* FindProduct();
	class UOnlineProduct_TA* FindProductFromHash(const struct FProductHashID& HashID);
	TArray<class UOnlineProduct_TA*> GetProductsFromHash(const struct FProductHashID& HashID);
	TArray<class UOnlineProduct_TA*> MapHashIDs(TArray<struct FProductHashID>* HashIDs);
	TArray<class UOnlineProduct_TA*> GetUniqueProducts();
	TArray<class UOnlineProduct_TA*> GetAllProducts();
	void GetAllInstanceIDs();
	TArray<class UOnlineProduct_TA*> GetIdentical(class UOnlineProduct_TA* Product);
	int GetQuantity(class UOnlineProduct_TA* Product);
	int GetNumProducts();
	bool HasAnyProducts();
	void Clear();
	void RemoveInstanceID();
	void Remove(class UOnlineProduct_TA* OnlineProduct);
	void Add(class UOnlineProduct_TA* OnlineProduct);
	void Append(class UIdenticalProductCache_TA* ProductCache);
	void Set(TArray<class UOnlineProduct_TA*>* OnlineProducts);
};


// Class TAGame.ImpactEffectsComponent_TA
// 0x0154 (0x01F8 - 0x00A4)
class UImpactEffectsComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	int                                                SoundPriority;                                            // 0x00A8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	class UEffectsMap_X*                               ImpactEffectsMap;                                         // 0x00B0(0x0008) (Edit)
	class UAkSoundCue*                                 AkImpactSound;                                            // 0x00B8(0x0008) (Edit)
	class UAkSoundCue*                                 AkSlideSound;                                             // 0x00C0(0x0008) (Edit)
	float                                              AkSlideSoundDelay;                                        // 0x00C8(0x0004) (Edit)
	float                                              AkSlideMomentumMin;                                       // 0x00CC(0x0004) (Edit)
	struct FName                                       AkImpactTypeKey;                                          // 0x00D0(0x0008) (Edit)
	struct FName                                       AkImpactIntensityKey;                                     // 0x00D8(0x0008) (Edit)
	float                                              MinImpactMomentum;                                        // 0x00E0(0x0004) (Edit)
	float                                              MinImpactDelay;                                           // 0x00E4(0x0004) (Edit)
	class UCameraShake*                                ImpactCameraShake;                                        // 0x00E8(0x0008) (Edit)
	class UForceFeedbackWaveform*                      ImpactForceFeedback;                                      // 0x00F0(0x0008) (Edit)
	struct FInterpCurveFloat                           ShakeScaleCurve;                                          // 0x00F8(0x0018) (Edit, NeedCtorLink)
	float                                              LastWorldImpactTime;                                      // 0x0110(0x0004) (Transient)
	float                                              LastActorImpactTime;                                      // 0x0114(0x0004) (Transient)
	float                                              SlideTime;                                                // 0x0118(0x0004) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	class UParticleSystemComponent*                    SlideParticleComponent;                                   // 0x0120(0x0008) (ExportObject, Transient, Component, EditInline)
	class UAkPlaySoundComponent*                       SlideAudioComponent;                                      // 0x0128(0x0008) (ExportObject, Transient, Component, EditInline)
	class UShakeComponent_X*                           ShakeComponent;                                           // 0x0130(0x0008) (ExportObject, Transient, Component, EditInline)
	struct FCollisionEffectData                        LastCollisionEffectData;                                  // 0x0138(0x0058) (Transient)
	struct FCollisionEffectData                        SlideCollisionEffectData;                                 // 0x0190(0x0058) (Transient)
	class UPhysicalMaterialProperty_TA*                SlidePhysMatProp;                                         // 0x01E8(0x0008) (Transient)
	class UArenaReflectionsManager_TA*                 SlapbackManager;                                          // 0x01F0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ImpactEffectsComponent_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	class UParticleSystemComponent* PlayPooledParticle(class UParticleSystem* Template, const struct FVector& Location, const struct FRotator& Rotation, class AActor* AttachTo);
	void HandleCollision(struct FAccumulatedRigidBodyCollision* Collision);
};


// Class TAGame.InputRecorder_TA
// 0x0044 (0x02AC - 0x0268)
class AInputRecorder_TA : public AActor
{
public:
	struct FPointer                                    VfTable_IITickNotify_TA;                                  // 0x0268(0x0008) (Const, Native, NoExport)
	float                                              MaxRecordTime;                                            // 0x0270(0x0004) (Edit)
	unsigned long                                      bRecording : 1;                                           // 0x0274(0x0004) (Transient)
	unsigned long                                      bPlaying : 1;                                             // 0x0274(0x0004) (Transient)
	TArray<struct FReplicatedRBState>                  CarStates;                                                // 0x0278(0x0010) (Transient, NeedCtorLink)
	TArray<struct FReplicatedRBState>                  BallStates;                                               // 0x0288(0x0010) (Transient, NeedCtorLink)
	TArray<struct FVehicleInputs>                      Inputs;                                                   // 0x0298(0x0010) (Transient, NeedCtorLink)
	int                                                InputIndex;                                               // 0x02A8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.InputRecorder_TA");
		return ptr;
	}


	void Finished();
	struct FReplicatedRBState GetBallState();
	struct FReplicatedRBState GetCarState();
	class ABall_TA* GetBall();
	class ACar_TA* GetCar();
	void StartPlayback();
	void StopRecord();
	void HandleDestroyed(class APawn_X* P);
	void StartRecord();
};


// Class TAGame.InterpTrackAnimControlWithSensibleDefault_TA
// 0x0004 (0x0118 - 0x0114)
class UInterpTrackAnimControlWithSensibleDefault_TA : public UInterpTrackAnimControl
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0114(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.InterpTrackAnimControlWithSensibleDefault_TA");
		return ptr;
	}

};


// Class TAGame.InterpTrackSkelControlRotation_TA
// 0x000D (0x00F1 - 0x00E4)
class UInterpTrackSkelControlRotation_TA : public UInterpTrackFloatBase
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	struct FName                                       SkelControlName;                                          // 0x00E8(0x0008) (Edit)
	TEnumAsByte<ERotationAxis>                         RotAxis;                                                  // 0x00F0(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.InterpTrackSkelControlRotation_TA");
		return ptr;
	}

};


// Class TAGame.ItemDropGroup_TA
// 0x0050 (0x00B0 - 0x0060)
class UItemDropGroup_TA : public UObject
{
public:
	TArray<struct FCurrency>                           Currency;                                                 // 0x0060(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FProductDrop>                        Products;                                                 // 0x0070(0x0010) (NeedCtorLink, DataBinding)
	int                                                XP;                                                       // 0x0080(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	class UClass*                                      GFxDataClass;                                             // 0x0088(0x0008) (Const)
	TEnumAsByte<EDropGroupDisplayOrder>                DisplayOrder;                                             // 0x0090(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	struct FScriptDelegate                             __EventItemDropGroupHandled__Delegate;                    // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0091(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ItemDropGroup_TA");
		return ptr;
	}


	bool IsValid();
	void STATIC_InsertGroup(class UItemDropGroup_TA* NewGroup, TArray<class UItemDropGroup_TA*>* ItemDropGroups);
	void EventItemDropGroupHandled(class UItemDropGroup_TA* ItemDropGroup);
};


// Class TAGame.ITickNotify_TA
// 0x0000 (0x0060 - 0x0060)
class UITickNotify_TA : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ITickNotify_TA");
		return ptr;
	}

};


// Class TAGame.LightCurveType_TA
// 0x0004 (0x0064 - 0x0060)
class ULightCurveType_TA : public UObject
{
public:
	int                                                ParameterValue;                                           // 0x0060(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LightCurveType_TA");
		return ptr;
	}

};


// Class TAGame.LocalPlayer_TA
// 0x0070 (0x0520 - 0x04B0)
class ULocalPlayer_TA : public ULocalPlayer_X
{
public:
	class USaveGameManager_TA*                         SaveGameManager;                                          // 0x04B0(0x0008)
	class UProfile_TA*                                 Profile;                                                  // 0x04B8(0x0008) (Transient)
	class UObjectProvider*                             ProfileObjectProvider;                                    // 0x04C0(0x0008) (ExportObject, Transient, Component, EditInline)
	TEnumAsByte<ESplitScreenPosition>                  SplitScreenPosition;                                      // 0x04C8(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x04C9(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x04C9(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.LocalPlayer_TA.SuspendingEventToken
	unsigned char                                      UnknownData02[0x8];                                       // 0x04D8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.LocalPlayer_TA.SignoutStartedEventToken
	unsigned long                                      bOpenedStartMenu : 1;                                     // 0x04E0(0x0004) (Transient)
	unsigned long                                      bPendingBroadcastLoadout : 1;                             // 0x04E0(0x0004) (Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x04E4(0x0004) MISSED OFFSET
	class UControllerLayoutStack*                      ControllerLayouts;                                        // 0x04E8(0x0008)
	struct FScriptDelegate                             __EventProfileSet__Delegate;                              // 0x04F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x04F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSplitScreenPositionChanged__Delegate;              // 0x0508(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0508(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LocalPlayer_TA");
		return ptr;
	}


	void ApplyNetworkSettings(class UNetworkSave_TA* NetworkSave);
	class USaveData_TA* GetSaveData();
	class UObject* GetProfileObject(class UClass* saveClass);
	class UObject* GetSaveObject(class UClass* saveClass);
	void HandleNewEula(class UOnlineLegalText_X* Eula);
	void CheckForRankedReconnect();
	void SetOpenedStartMenu(bool bOpen);
	void HandleOnlineLoginChanged(class UOnlinePlayerAuthentication_X* Auth);
	void UpdateRankedReconnect();
	void HandleGameStateChanged(class AGameEvent_TA* GameEvent);
	void ClearLoginDelegates();
	void OnContinueWithNoUser(class UGFxModal_X* Modal);
	void OnShowAccountPicker(class UGFxModal_X* Modal);
	void OnLoginCancelled();
	void OnLoginFailed(unsigned char LocalUserNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode);
	void OnControllerPairingChanged(int NewLocalUserNum, int PreviousLocalUserNum);
	void OnLoginChange(unsigned char LocalUserNum);
	void ForceSaveGame();
	bool STATIC_IsControllerAssociatedWithLoggedInUser(unsigned char LocalUserNum);
	bool IsUserLoggedIn();
	void UnregisterUserStatusChangeFunctions();
	void RegisterUserStatusChangeFunctions();
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	TEnumAsByte<ESplitScreenPosition> GetSplitScreenPosition(class UGameViewportClient* InViewportClient);
	void HandleSplitScreenTypeChanged(class UGameViewportClient_TA* InViewportClient);
	void NotifyWhenProfileSet(const struct FScriptDelegate& Callback);
	void SetProfile(class UProfile_TA* NewProfile);
	void SetDefaultProfile();
	void HandleSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError* Error);
	void HandleLocalPlayerLeave(class ULocalPlayer* Player);
	void HandlePreLoadMap(const struct FString& MapName);
	void HandleRegisteredController(int InLocalPLayerNum, int InControllerID);
	void OnRemoved();
	void OnCreated();
	struct FUniqueNetId GetUniqueNetId();
	struct FString GetNickname();
	void EventSplitScreenPositionChanged(class ULocalPlayer_TA* LocalPlayer);
	void EventProfileSet(class ULocalPlayer_TA* LocalPlayer);
};


// Class TAGame.MapData_TA
// 0x0018 (0x0078 - 0x0060)
class UMapData_TA : public UObject
{
public:
	class UTexture2D*                                  Thumbnail;                                                // 0x0060(0x0008) (Edit)
	class UMapData_TA*                                 VariantOf;                                                // 0x0068(0x0008) (Edit)
	TEnumAsByte<EWeatherVariant>                       WeatherVariant;                                           // 0x0070(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	float                                              RandomWeight;                                             // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapData_TA");
		return ptr;
	}


	class UMapData_TA* STATIC_PickPreferredRandomMap(int NumPlayers, TArray<class UMapData_TA*>* Maps, TArray<struct FName>* Likes, TArray<struct FName>* Dislikes);
	TArray<class UMapData_TA*> STATIC_GetMapTypes(TArray<class UMapData_TA*> Maps);
	int STATIC_GetWeightedIndex(TArray<float> PreferredWeights);
	TArray<float> STATIC_GetPreferredWeights(int NumPlayers, const struct FName& MapSetName, TArray<class UMapData_TA*>* Maps, TArray<struct FName>* Likes, TArray<struct FName>* Dislikes);
	TArray<float> STATIC_GetWeightsFromPoints(TArray<class UMapData_TA*> Maps, TArray<int> Points, int NumPlayers, const struct FName& MapSetName);
	TArray<int> STATIC_GetPoints(TArray<class UMapData_TA*> Maps, TArray<struct FName> Likes, TArray<struct FName> Dislikes);
	TArray<class UMapData_TA*> STATIC_GetNonVariantMaps(TArray<class UMapData_TA*>* Maps);
	class UMapData_TA* STATIC_PickRandomMap(TArray<class UMapData_TA*> Maps);
	struct FString GetLocalizedVariantName();
	struct FString GetLocalizedBaseName();
	struct FString GetLocalizedName();
};


// Class TAGame.MapDataLoader_TA
// 0x0020 (0x0080 - 0x0060)
class UMapDataLoader_TA : public UObject
{
public:
	TArray<struct FMapSelectorPair>                    MapSelectors;                                             // 0x0060(0x0010) (Component, NeedCtorLink)
	TArray<struct FMapImageLoadRequest>                MapImageLoadRequests;                                     // 0x0070(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapDataLoader_TA");
		return ptr;
	}


	void UpdateAvailableMaps();
	void LoadLargeMapImage(class UMapData_TA* Map, const struct FScriptDelegate& OnLoaded);
	class UMapSelector_TA* GetMapSelector(class UMapSet_TA* MapSet, struct FMapSelectorPair* StructInitializer_F749E4A94397DF0FFB923189DC2888F2);
	class UMapDataLoader_TA* STATIC_GetInstance();
};


// Class TAGame.MapList_TA
// 0x00A8 (0x0108 - 0x0060)
class UMapList_TA : public UObject
{
public:
	TArray<class UMapData_TA*>                         AllMaps;                                                  // 0x0060(0x0010) (Edit, EditConst, NeedCtorLink)
	TArray<class UMapData_TA*>                         AllMaps_Pristine;                                         // 0x0070(0x0010) (Const, Transient, NeedCtorLink)
	TArray<class UMapData_TA*>                         SortedMaps;                                               // 0x0080(0x0010) (Edit, NeedCtorLink)
	TArray<class UMapData_TA*>                         SortedMaps_Pristine;                                      // 0x0090(0x0010) (Const, Transient, NeedCtorLink)
	TArray<struct FName>                               AdditionalCookedMaps;                                     // 0x00A0(0x0010) (Edit, NeedCtorLink)
	TArray<struct FMapGroup>                           MapGroups;                                                // 0x00B0(0x0010) (Edit, NeedCtorLink)
	TArray<struct FMapGroup>                           GeneratedMapGroups;                                       // 0x00C0(0x0010) (Edit, EditConst, NeedCtorLink)
	TArray<struct FMapGroup>                           GeneratedMapGroups_Pristine;                              // 0x00D0(0x0010) (Const, Transient, NeedCtorLink)
	class UMapSet_TA*                                  SelectableMaps;                                           // 0x00E0(0x0008) (Edit)
	class UMapSet_TA*                                  SeasonMaps;                                               // 0x00E8(0x0008) (Edit)
	class UMapSet_TA*                                  SeasonPlayoffsMaps;                                       // 0x00F0(0x0008) (Edit)
	TArray<class UMapSet_TA*>                          AllMapSets;                                               // 0x00F8(0x0010) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapList_TA");
		return ptr;
	}


	TArray<class UMapData_TA*> GetSortedMaps(TArray<class UMapData_TA*> UnsortedMaps);
	class UMapData_TA* GetMap(const struct FName& MapName);
};


// Class TAGame.MapSet_TA
// 0x0060 (0x00C0 - 0x0060)
class UMapSet_TA : public UObject
{
public:
	TArray<class UMapSet_TA*>                          IncludeSets;                                              // 0x0060(0x0010) (Edit, NeedCtorLink)
	TArray<class UMapSet_TA*>                          ExcludeSets;                                              // 0x0070(0x0010) (Edit, NeedCtorLink)
	TArray<class UMapData_TA*>                         IncludeMaps;                                              // 0x0080(0x0010) (Edit, NeedCtorLink)
	TArray<class UMapData_TA*>                         ExcludeMaps;                                              // 0x0090(0x0010) (Edit, NeedCtorLink)
	TArray<class UMapData_TA*>                         Maps;                                                     // 0x00A0(0x0010) (Edit, EditConst, NeedCtorLink)
	TArray<class UMapData_TA*>                         Maps_Pristine;                                            // 0x00B0(0x0010) (Const, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapSet_TA");
		return ptr;
	}


	class UMapData_TA* GetMap(const struct FName& MapName);
	class UMapData_TA* GetRandomMap();
};


// Class TAGame.MatchBroadcast_TA
// 0x0038 (0x02A0 - 0x0268)
class AMatchBroadcast_TA : public AActor
{
public:
	class AGameEvent_Soccar_TA*                        GameEvent;                                                // 0x0268(0x0008) (Net, Transient)
	TArray<class APlayerReplicationInfo*>              RecordedPlayers;                                          // 0x0270(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bBroadcasting : 1;                                        // 0x0280(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0284(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventLog__Delegate;                                     // 0x0288(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0284(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchBroadcast_TA");
		return ptr;
	}


	struct FName __MatchBroadcast_TA__RecordStartEvents_8201F70148D5E672D8F3A3A11226FC49(class UMutator_TA* M);
	void ClientLog(const struct FString& EventJson);
	void RecordFunction();
	int GetPlayerID(class APlayerReplicationInfo* PRI);
	void RecordMatchEnd();
	void RecordOvertime();
	void RecordPlayerStat(int PlayerID, const struct FName& Stat);
	void RecordPlayerAttackStat(int AttackerID, int VictimID, const struct FName& Stat, const struct FVector& AttackerLocation, const struct FVector& AttackerVelocity, const struct FRotator& AttackerRotation);
	void RecordPlayerHitBallStat(int PlayerID, const struct FName& Stat, float HitTime, const struct FVector& CarLocation, const struct FVector& CarVelocity, const struct FRotator& CarRotation, const struct FVector& BallLocation, const struct FVector& BallVelocity);
	void RecordGoalScored(int AttackingTeam, int DefendingTeam, const struct FVector& BallLocation, const struct FVector& BallVelocity);
	void RecordPlayerScoreHit(int PlayerID, float HitTime, const struct FVector& CarLocation, const struct FVector& CarVelocity, const struct FRotator& CarRotation, const struct FVector& BallLocation, const struct FVector& BallVelocity);
	void RecordTeamScore(int Team, int Score);
	void RecordLeaveTeam(int PlayerID);
	void RecordJoinTeam(int PlayerID, int Team);
	void RecordLeaveGame(int PlayerID);
	void RecordJoinServer(int PlayerID, const struct FUniqueNetId& PlayerNetId, const struct FString& PlayerName, const struct FUniqueNetId& PartyLeaderNetID, const struct FString& IP);
	void RecordJoinGame(int PlayerID, const struct FUniqueNetId& PlayerNetId, const struct FString& PlayerName);
	void RecordMatchStart(const struct FString& MapName, const struct FName& GameType, const struct FName& MatchType, int PlaylistId, TArray<struct FName> Mutators);
	float GetGameTimeSeconds();
	void HandleScoreUpdated(class ATeam_TA* Team);
	void RecordInitialScores();
	void RecordInitialPlayers();
	void RecordStartEvents(TArray<struct FName>* MapLocal_338EA5D14FB682350E70B1B7CC01B5D5);
	void HandleMatchEnded(class AGameEvent_Soccar_TA* G);
	void HandleOvertime(class AGameEvent_Soccar_TA* G);
	void HandleStat(class AStatFactory_TA* Factory, class APRI_TA* PRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim);
	void HandleGoalScored(class AGameEvent_Soccar_TA* G, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIdx);
	void HandleTeamChanged(class APRI_X* PRI);
	void HandlePlayerRemoved(class AGameEvent_TA* G, class APRI_TA* PRI);
	struct FString GetIP(class APRI_TA* PRI);
	struct FUniqueNetId GetPartyLeader(const struct FUniqueNetId& Member);
	void HandlePlayerAdded(class AGameEvent_TA* G, class APRI_TA* PRI);
	void StopRecording();
	void StartRecording();
	void HandleStatFactory(class AGameEvent_Soccar_TA* G);
	void HandleTeamsCreated(class AGameEvent_Team_TA* G);
	void Destroyed();
	void Start();
	void ServerStart();
	void Init(class AGameEvent_Soccar_TA* InGameEvent);
	void ClientCheckReady();
	void OnOwnerChanged();
	void ReplicatedEvent(const struct FName& VarName);
	void EventLog(class AMatchBroadcast_TA* Broadcast, const struct FString& EventJson);
};


// Class TAGame.MatchBroadcastLog_TA
// 0x0008 (0x0068 - 0x0060)
class UMatchBroadcastLog_TA : public UObject
{
public:
	struct FPointer                                    Log;                                                      // 0x0060(0x0008) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchBroadcastLog_TA");
		return ptr;
	}


	void Append(const struct FString& EventJson);
	void Init(const struct FString& Filename);
};


// Class TAGame.MaterialParamsSet_TA
// 0x0030 (0x0090 - 0x0060)
class UMaterialParamsSet_TA : public UObject
{
public:
	TArray<struct FMaterialTextureParam>               TextureParameters;                                        // 0x0060(0x0010) (Edit, NeedCtorLink)
	TArray<struct FMaterialVectorParam>                VectorParameters;                                         // 0x0070(0x0010) (Edit, NeedCtorLink)
	TArray<struct FMaterialScalarParam>                ScalarParameters;                                         // 0x0080(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MaterialParamsSet_TA");
		return ptr;
	}


	void Apply(class UMaterialInstanceConstant* MatInst);
};


// Class TAGame.MaxActorsGroup_TA
// 0x0040 (0x00B0 - 0x0070)
class UMaxActorsGroup_TA : public UComponent
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x0070(0x0008) (Const, Native, NoExport)
	int                                                MaxActors;                                                // 0x0078(0x0004) (Edit, Const)
	float                                              UpdateDelay;                                              // 0x007C(0x0004) (Edit, Const)
	float                                              NextUpdateTime;                                           // 0x0080(0x0004) (Const, Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	TArray<struct FMaxActorCallback>                   Actors;                                                   // 0x0088(0x0010) (Const, Transient, NeedCtorLink)
	struct FScriptDelegate                             __OnToggledDelegate__Delegate;                            // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0098(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MaxActorsGroup_TA");
		return ptr;
	}


	struct FString GetEnabledActorsString();
	void RemoveListener(class AActor* CheckActor, const struct FScriptDelegate& OnEnabled, const struct FScriptDelegate& OnDisabled);
	void AddListener(class AActor* CheckActor, const struct FScriptDelegate& OnEnabled, const struct FScriptDelegate& OnDisabled);
	void OnToggledDelegate();
};


// Class TAGame.Message_TA
// 0x00A0 (0x0100 - 0x0060)
class UMessage_TA : public UObject
{
public:
	struct FName                                       Type;                                                     // 0x0060(0x0008) (Edit, Const)
	class UAkSoundCue*                                 Sound;                                                    // 0x0068(0x0008) (Edit, Const)
	class UAkSoundCue*                                 PrimaryPlayerSound;                                       // 0x0070(0x0008) (Edit, Const)
	struct FString                                     Key;                                                      // 0x0078(0x0010) (Edit, Const, NeedCtorLink)
	struct FString                                     Section;                                                  // 0x0088(0x0010) (Edit, Const, NeedCtorLink)
	TEnumAsByte<EHUDMessageLevel>                      MessageLevel;                                             // 0x0098(0x0001) (Edit, Const)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	struct FString                                     LocalizedMessage;                                         // 0x00A0(0x0010) (Const, Transient, NeedCtorLink)
	TArray<struct FName>                               ParamNames;                                               // 0x00B0(0x0010) (Const, Transient, NeedCtorLink)
	TArray<struct FString>                             ParamTokens;                                              // 0x00C0(0x0010) (Const, Transient, NeedCtorLink)
	struct FMessagePacket                              Packet;                                                   // 0x00D0(0x0018) (Transient, NeedCtorLink)
	struct FMessagePacket                              DefaultPacket;                                            // 0x00E8(0x0018) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Message_TA");
		return ptr;
	}


	struct FString GetObjectText(class UObject* O);
	void Trigger(class APlayerController_TA* Receiver, const struct FMessagePacket& InPacket);
	struct FMessagePacket GetPacket();
	void BroadcastLocal(TArray<class AController*> Receivers);
	void Broadcast(TArray<class AController*> Receivers);
	void SendTo(class APlayerController_TA* Receiver);
	class UMessage_TA* SetInt(const struct FName& ParamName, int Value);
	class UMessage_TA* SetObject(const struct FName& ParamName, class UObject* Value);
	class UMessage_TA* Set(const struct FName& ParamName, const struct FString& Value);
	struct FString GetText(const struct FMessagePacket& InPacket);
};


// Class TAGame.MutatorGameSetting_TA
// 0x0034 (0x0098 - 0x0064)
class UMutatorGameSetting_TA : public UGameSetting_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TArray<struct FString>                             RequiresMutators;                                         // 0x0068(0x0010) (Edit, NeedCtorLink)
	TArray<struct FString>                             DisallowedWithMutators;                                   // 0x0078(0x0010) (Edit, NeedCtorLink)
	struct FString                                     MutatorPackage;                                           // 0x0088(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MutatorGameSetting_TA");
		return ptr;
	}


	class UMutator_TA* GetMutator();
	struct FString GetMutatorArchetypePath();
};


// Class TAGame.NavigationHandle_TA
// 0x000C (0x01B4 - 0x01A8)
class UNavigationHandle_TA : public UNavigationHandle
{
public:
	struct FVector                                     OldDriveLocation;                                         // 0x01A8(0x000C) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NavigationHandle_TA");
		return ptr;
	}


	void GetNextDriveDestination(const struct FVector& CurrentDestination, struct FVector* OutDestination);
	bool PathCache_Empty();
};


// Class TAGame.NetworkConfig_TA
// 0x003C (0x00B4 - 0x0078)
class UNetworkConfig_TA : public UOnlineConfig_X
{
public:
	struct FNetworkLimit                               ReplicationRate;                                          // 0x0078(0x0010) (Edit)
	struct FNetworkLimit                               ClientRate;                                               // 0x0088(0x0010) (Edit)
	struct FNetworkLimit                               ClientInputRate;                                          // 0x0098(0x0010) (Edit)
	int                                                MaxClientUploadFrames;                                    // 0x00A8(0x0004) (Edit)
	unsigned long                                      bForceNetPackets : 1;                                     // 0x00AC(0x0004) (Edit)
	float                                              ForcePacketSignificantDistance;                           // 0x00B0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NetworkConfig_TA");
		return ptr;
	}


	void UndoNetworkLimit(struct FNetworkLimit* Limit, int* Min, int* Max);
	void ApplyNetworkLimit(struct FNetworkLimit* Limit, int* Min, int* Max);
	void Undo();
	void Apply();
};


// Class TAGame.NetworkInputBuffer_TA
// 0x0060 (0x02C8 - 0x0268)
class ANetworkInputBuffer_TA : public AActor
{
public:
	class UPhysicsConfig_TA*                           PhysicsConfig;                                            // 0x0268(0x0008)
	class UNetworkJitterSettings_TA*                   JitterSettings;                                           // 0x0270(0x0008)
	class UEngineShare_TA*                             EngineShare;                                              // 0x0278(0x0008)
	class UClientInputData_TA*                         PrimaryClient;                                            // 0x0280(0x0008)
	TArray<class UClientInputData_TA*>                 Clients;                                                  // 0x0288(0x0010) (NeedCtorLink)
	float                                              TimeSinceLastMovePacket;                                  // 0x0298(0x0004)
	int                                                MaxInputFramesPerPacket;                                  // 0x029C(0x0004)
	TArray<float>                                      PingTimestamps;                                           // 0x02A0(0x0010) (Transient, NeedCtorLink)
	float                                              LastTickTime;                                             // 0x02B0(0x0004) (Transient)
	struct FInputBufferStats                           Stats;                                                    // 0x02B4(0x0008)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET
	class UNetworkPingEvent_X*                         PingEvent;                                                // 0x02C0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NetworkInputBuffer_TA");
		return ptr;
	}


	void ResetInputBuffer();
	void ServerResetInputBuffer();
	void UpdatePing();
	void ClientAckFrame(float TimeStamp, int InClientFrame, const struct FInputBufferStats& InStats);
	void ResetStats();
	void SendClientAck(float TimeStamp);
	void ServerTick();
	void TrimInputFrames(class UClientInputData_TA* Client);
	void ReceiveClientFrames(class UClientInputData_TA* Client, struct FClientPacketData* Packet);
	void ReceiveNewClientPacket(class UClientInputData_TA* Client, struct FClientPacketData* Packet);
	void ReceiveClientPacket(class UClientInputData_TA* Client, struct FClientPacketData* Packet);
	void ServerReceivePacket(class APlayerController_TA* PC, const struct FClientPacketData& Packet);
	void ClientSendPacket(class UClientInputData_TA* Client);
	void SendClientMovePackets();
	bool ShouldSendClientMovePackets();
	void ClientTick();
	void RemoveClient(class APlayerController_TA* PC);
	class UClientInputData_TA* AddClient(class APlayerController_TA* PC);
	class UClientInputData_TA* GetClient(class APlayerController_TA* PC);
	void Destroyed();
	void PostBeginPlay();
};


// Class TAGame.NetworkInputBuffer_CSTS_TA
// 0x0030 (0x02F8 - 0x02C8)
class ANetworkInputBuffer_CSTS_TA : public ANetworkInputBuffer_TA
{
public:
	class UPhysicsConfig_TA*                           Config;                                                   // 0x02C8(0x0008)
	float                                              LastPacketReceiveTime;                                    // 0x02D0(0x0004)
	float                                              CurrentTimeDilation;                                      // 0x02D4(0x0004)
	int                                                SequentialMissedInputs;                                   // 0x02D8(0x0004)
	int                                                BufferLowWatermark;                                       // 0x02DC(0x0004)
	TArray<int>                                        BufferLowHistory;                                         // 0x02E0(0x0010) (NeedCtorLink)
	int                                                BufferLowHistoryIndex;                                    // 0x02F0(0x0004)
	int                                                ExtraBuffer;                                              // 0x02F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NetworkInputBuffer_CSTS_TA");
		return ptr;
	}


	void ClientAckFrame_CSTS(float TimeStamp, int InClientFrame, const struct FInputBufferStats& InStats, TEnumAsByte<EInputBufferSaturationLevel> SatLevel);
	TEnumAsByte<EInputBufferSaturationLevel> GetInputBufferSaturationLevel(int InputBufferSize);
	void SendClientAck(float TimeStamp);
	void UpdateExtraBuffer();
	void StartUpdatingExtraBuffer();
	void ResetInputBuffer();
	void ReceiveNewClientPacket(class UClientInputData_TA* Client, struct FClientPacketData* Packet);
	void PostBeginPlay();
};


// Class TAGame.NetworkInputBuffer_ServerConsume_TA
// 0x000C (0x02D4 - 0x02C8)
class ANetworkInputBuffer_ServerConsume_TA : public ANetworkInputBuffer_TA
{
public:
	class UClientJitterBuffer_TA*                      JitterBuffer;                                             // 0x02C8(0x0008)
	unsigned long                                      bFillingBuffer : 1;                                       // 0x02D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NetworkInputBuffer_ServerConsume_TA");
		return ptr;
	}


	void ResetInputBuffer();
	void ReceiveNewClientPacket(class UClientInputData_TA* Client, struct FClientPacketData* Packet);
	void PostBeginPlay();
};


// Class TAGame.NetworkInputBuffer_STS_TA
// 0x0030 (0x02F8 - 0x02C8)
class ANetworkInputBuffer_STS_TA : public ANetworkInputBuffer_TA
{
public:
	class UClientJitterBuffer_TA*                      JitterBuffer;                                             // 0x02C8(0x0008)
	float                                              ExtraSimTimeRemaining;                                    // 0x02D0(0x0004)
	struct FSimTimeAdjustDebugData                     Debug;                                                    // 0x02D4(0x0008)
	float                                              TimeLastSimTimeAdjustment;                                // 0x02DC(0x0004)
	float                                              TimeClientAckdAdjustSimTime;                              // 0x02E0(0x0004)
	unsigned char                                      ReplicatedInputBufferSize;                                // 0x02E4(0x0001) (Net)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02E5(0x0003) MISSED OFFSET
	unsigned long                                      bAdjustingSimTime : 1;                                    // 0x02E8(0x0004)
	int                                                BufferSizeLowWatermark;                                   // 0x02EC(0x0004)
	float                                              TimeLastMissedInput;                                      // 0x02F0(0x0004)
	float                                              TimeLastTightenUpBufferCheck;                             // 0x02F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NetworkInputBuffer_STS_TA");
		return ptr;
	}


	void ServerFinishedSimTimeAdjust();
	void ClientAdjustSimTime(int FrameAdjustment);
	void NotifyClientAdjustSimTime(int FrameAdjustment);
	bool CanTellClientToAdjustSimTime();
	bool CanTightenUpInputBufferSize();
	void ServerTick();
	void BufferSizeChanged(int PrevBufferSize, int BufferSize);
	void ReceiveNewClientPacket(class UClientInputData_TA* Client, struct FClientPacketData* Packet);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
};


// Class TAGame.NetworkJitterSettings_TA
// 0x001C (0x007C - 0x0060)
class UNetworkJitterSettings_TA : public UObject
{
public:
	float                                              MinTimeBetweenPackets;                                    // 0x0060(0x0004) (Edit)
	float                                              MaxTimeBetweenPackets;                                    // 0x0064(0x0004) (Edit)
	float                                              BufferStdDeviations;                                      // 0x0068(0x0004) (Edit)
	float                                              MinBufferTime;                                            // 0x006C(0x0004) (Edit)
	float                                              RollingAverageTime;                                       // 0x0070(0x0004) (Edit)
	float                                              InputBufferTightenUpSizeFrequency;                        // 0x0074(0x0004) (Edit)
	int                                                MaxSingleAdjustmentFrames;                                // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NetworkJitterSettings_TA");
		return ptr;
	}

};


// Class TAGame.Note_Linked_TA
// 0x0010 (0x0288 - 0x0278)
class ANote_Linked_TA : public ANote
{
public:
	class ANote_Linked_TA*                             NextNote;                                                 // 0x0278(0x0008) (Edit)
	class ANote_Linked_TA*                             PrevNote;                                                 // 0x0280(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Note_Linked_TA");
		return ptr;
	}

};


// Class TAGame.Notification_TA
// 0x00A8 (0x0108 - 0x0060)
class UNotification_TA : public UObject
{
public:
	int                                                NotificationID;                                           // 0x0060(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FString                                     Title;                                                    // 0x0068(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     Body;                                                     // 0x0078(0x0010) (NeedCtorLink, DataBinding)
	unsigned long                                      bPopUp : 1;                                               // 0x0088(0x0004) (DataBinding)
	unsigned long                                      bRemoveAfterDisplayed : 1;                                // 0x0088(0x0004) (DataBinding)
	unsigned long                                      bPopUpShown : 1;                                          // 0x0088(0x0004) (DataBinding)
	unsigned long                                      bSave : 1;                                                // 0x0088(0x0004) (Const)
	float                                              PopUpDuration;                                            // 0x008C(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0090(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.Notification_TA.Expiration
	class UNotificationManager_TA*                     NotificationManager;                                      // 0x0098(0x0008) (Transient)
	class UClass*                                      GFxDataClass;                                             // 0x00A0(0x0008) (Const)
	struct FScriptDelegate                             AcceptCallBack;                                           // 0x00A8(0x0010) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00A8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             DenyCallBack;                                             // 0x00C0(0x0010) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __ClickDelegate__Delegate;                                // 0x00D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRemoveNotification__Delegate;                      // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x00F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Notification_TA");
		return ptr;
	}


	bool IsCrossplayNotificationAllowed(const struct FUniqueNetId& OtherPlayerID);
	bool ShouldShow();
	struct FUniqueNetId GetSenderID(struct FUniqueNetId* StructInitializer_D91884DD4A6CB6E79A0322AD3107D116);
	class UNotification_TA* SetDenyDelegate(const struct FScriptDelegate& Callback);
	class UNotification_TA* SetAcceptDelegate(const struct FScriptDelegate& Callback);
	void RemoveNotification();
	void HandleNotificationSaveAdded(class UNotificationSave_TA* NotificationSave);
	void SaveNotification();
	class ULocalPlayer_TA* GetLocalPlayer();
	void OnPopUpDisplayed();
	class UNotification_TA* SetBody(const struct FString& InBody);
	class UNotification_TA* SetTitle(const struct FString& InTitle);
	void OnPopUpOnlyNotificationCreated();
	void OnNotificationCreated(bool bSuppressPopup);
	void ClickDeny();
	void ClickAccept();
	bool IsExpired();
	void Expire();
	void UpdateExpiration();
	void SetExpiration();
	void Init(class UNotificationManager_TA* InNotificationManager);
	void EventRemoveNotification(class UNotification_TA* Notification);
	void ClickDelegate(class UNotification_TA* Notification);
};


// Class TAGame.GenericNotification_TA
// 0x0000 (0x0108 - 0x0108)
class UGenericNotification_TA : public UNotification_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GenericNotification_TA");
		return ptr;
	}

};


// Class TAGame.NotificationManager_TA
// 0x0078 (0x00D8 - 0x0060)
class UNotificationManager_TA : public UObject
{
public:
	TArray<class UNotification_TA*>                    Notifications;                                            // 0x0060(0x0010) (NeedCtorLink)
	int                                                CurrentNotificationID;                                    // 0x0070(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventNotificationAdded__Delegate;                       // 0x0078(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0074(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventNotificationRemoved__Delegate;                     // 0x0090(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0090(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __HasExistingNotificationDelegate__Delegate;              // 0x00A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00A8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __NotificationFilterFunction__Delegate;                   // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NotificationManager_TA");
		return ptr;
	}


	int TypeCount(class UClass* NotificationClass, TArray<class UNotification_TA*>* OfTypeLocal_41549591411FF0511E2429A4FD047ACE);
	void RemoveNotificationsOfType(class UClass* NotificationClass);
	void RemoveNotification(class UNotification_TA* Notification);
	void RemoveAllNotificationsFromSender(const struct FUniqueNetId& SenderId, struct FUniqueNetId* StructInitializer_1246AE3047B58318A4A63B8C77610220);
	class UNotification_TA* PopUpOnlyNotification(class UClass* NotificationClass);
	class UNotification_TA* AddNotification(class UClass* NotificationClass, bool bSuppressPopup);
	int GetNewNotificationID();
	bool HasExistingNotification(const struct FScriptDelegate& HasExistingDelegate);
	void RemoveNotificationTypeFromSender(class UClass* NotificationClass, const struct FUniqueNetId& SenderId);
	void HandleAcceptedFriendRequest(const struct FOnlineFriend& FriendData);
	void HandleChallengesSynced(class UChallengeDefaultManager_TA* DefaultManager);
	void HandleNotificationSaveAdded(class UNotificationSave_TA* NotificationSave);
	class ULocalPlayer_TA* GetLocalPlayer();
	void Construct();
	bool NotificationFilterFunction(class UNotification_TA* InNotification);
	bool HasExistingNotificationDelegate(class UNotification_TA* OtherNotification);
	void EventNotificationRemoved(class UNotificationManager_TA* NotificationManager, class UNotification_TA* Notification);
	void EventNotificationAdded(class UNotificationManager_TA* NotificationManager, class UNotification_TA* Notification);
};


// Class TAGame.NxForceFieldCapsule_TA
// 0x003C (0x02F8 - 0x02BC)
class ANxForceFieldCapsule_TA : public ANxForceField
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET
	class UDrawCapsuleComponent*                       InnerDrawComponent;                                       // 0x02C0(0x0008) (ExportObject, Component, EditInline)
	class UDrawCapsuleComponent*                       OuterDrawComponent;                                       // 0x02C8(0x0008) (ExportObject, Component, EditInline)
	float                                              InnerRadius;                                              // 0x02D0(0x0004) (Edit)
	float                                              OuterRadius;                                              // 0x02D4(0x0004) (Edit)
	float                                              Length;                                                   // 0x02D8(0x0004) (Edit)
	float                                              InnerStrength;                                            // 0x02DC(0x0004) (Edit)
	float                                              OuterStrength;                                            // 0x02E0(0x0004) (Edit)
	float                                              InnerMaxSpeed;                                            // 0x02E4(0x0004) (Edit)
	float                                              OuterMaxSpeed;                                            // 0x02E8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02EC(0x0004) MISSED OFFSET
	struct FPointer                                    Kernel;                                                   // 0x02F0(0x0008) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NxForceFieldCapsule_TA");
		return ptr;
	}


	void DoInitRBPhys();
};


// Class TAGame.ProductHash_TA
// 0x0000 (0x0060 - 0x0060)
class UProductHash_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductHash_TA");
		return ptr;
	}


	struct FProductHashID STATIC_GetHashIDFromInstanceID(class UOnlineProductStoreSet_TA* ProductSet);
	class UProduct_TA* STATIC_GetProductFromInstanceID(class UOnlineProductStoreSet_TA* ProductSet);
	struct FProductHashSource STATIC_GetProductSourceFromInstanceID(class UOnlineProductStoreSet_TA* ProductSet, struct FProductHashSource* StructInitializer_1AB1C4CB45BAD6D48D722E80C9420623, struct FProductHashSource* StructInitializer_B315F9C349CC420A2D76B1885F59C138, struct FProductHashSource* StructInitializer_AE7C5B2148746FC0BAB4AF8394C94B02);
	TArray<class UOnlineProduct_TA*> STATIC_GetOnlineProductsFromHashID(const struct FProductHashID& HashID, class UOnlineProductStoreSet_TA* ProductSet);
	class UOnlineProduct_TA* STATIC_GetOnlineProductFromHashID(const struct FProductHashID& HashID, class UOnlineProductStoreSet_TA* ProductSet);
	class UProduct_TA* STATIC_GetProductFromHashID(const struct FProductHashID& HashID, class UOnlineProductStoreSet_TA* ProductSet);
	int STATIC_GetProductIDFromHashID(const struct FProductHashID& HashID, class UOnlineProductStoreSet_TA* ProductSet);
	struct FProductHashSource STATIC_ProductToProductSource(class UProduct_TA* Product, struct FProductHashSource* StructInitializer_A59CB465485AC7E91C092EB1A7200E2F);
	struct FProductHashSource STATIC_OnlineProductToProductSource(class UOnlineProduct_TA* OnlineProduct, struct FProductHashSource* StructInitializer_C7DD48834988747C49FFAFBFED36F4A3);
	TArray<struct FProductHashSource> STATIC_GetProductSourcesFromHashID(const struct FProductHashID& HashID, class UOnlineProductStoreSet_TA* ProductSet, TArray<struct FProductHashSource>* MapLocal_7A6A9065476423B08AF6B3ACB77EB489, TArray<struct FProductHashSource>* ArrayInitializer_B473F26447ECF4F1FEDC059D7126E8D0, TArray<struct FProductHashSource>* ArrayInitializer_B667C5404E415BB816B39694828F2544);
	struct FProductHashSource STATIC_GetProductSourceFromHashID(const struct FProductHashID& HashID, class UOnlineProductStoreSet_TA* ProductSet, struct FProductHashSource* StructInitializer_0976A7E04818732F6E4DE780803999CC);
};


// Class TAGame.OnlineProduct_TA
// 0x003C (0x009C - 0x0060)
class UOnlineProduct_TA : public UObject
{
public:
	int                                                ProductID;                                                // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x0064(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.OnlineProduct_TA.InstanceID
	TArray<class UProductAttribute_TA*>                Attributes;                                               // 0x0070(0x0010) (NeedCtorLink)
	int                                                SeriesID;                                                 // 0x0080(0x0004)
	int                                                TradeHold;                                                // 0x0084(0x0004)
	struct FString                                     CachedSortLabel;                                          // 0x0088(0x0010) (Const, Transient, NeedCtorLink)
	struct FProductHashID                              CachedHash;                                               // 0x0098(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineProduct_TA");
		return ptr;
	}


	struct FOnlineProductAttribute STATIC___OnlineProduct_TA__InstanceTempOnlineProduct_8ECB041646DC76BF74181388A8042371(class UProductAttribute_TA* A);
	bool __OnlineProduct_TA__RequiresDynamicThumbnail_4A999F824040272473B3408E33A6451F(class UProductAttribute_TA* Att);
	void __OnlineProduct_TA__OnLoaded_1942733A45E37A04E1242C88D10EC86E(class UProductAttribute_Certified_TA* Certified);
	bool __OnlineProduct_TA__OnLoaded_8F601E0C4E33E77B38FB2AA62E90522C(class UProductAttribute_Certified_TA* Certified);
	void __OnlineProduct_TA__OnLoaded_4086411F4A6664C006099B86D832573C(class UProductAttribute_TA* A);
	int STATIC___OnlineProduct_TA__SortOnlineProductsByQuality_6EB4C54341787D48563F4ABA97A28953(class UOnlineProduct_TA* L, class UOnlineProduct_TA* R);
	void SetTradehold(int InTradehold);
	TArray<class UOnlineProduct_TA*> STATIC_SortOnlineProductsByQuality(TArray<class UOnlineProduct_TA*>* Products, TArray<class UOnlineProduct_TA*>* FilterLocal_D9C0029C4E6F2EF9AE391384D3CEC1FA, TArray<class UOnlineProduct_TA*>* SortLocal_01D675B04ABE12BDA657B49EF72BAF36);
	int STATIC_SortOnlineProductsBySlot(class UOnlineProduct_TA* P0, class UOnlineProduct_TA* P1);
	void OnLoaded(TArray<class UProductAttribute_Certified_TA*>* OfTypeLocal_294B8DB84FAC45AF20A95283EC306352, TArray<class UProductAttribute_Certified_TA*>* FilterLocal_5F8273774DCFE3D891080A918022DE3E);
	void RemoveAttributes(class UClass* AttributeClass, TArray<class UProductAttribute_TA*>* FilterLocal_A5F173D848E7B71D1922919184B00D69);
	void RemoveAttribute(class UProductAttribute_TA* InAttribute);
	void AddAttribute(class UProductAttribute_TA* InAttribute);
	void SetProductID(int InProductID);
	bool GetIsUntradeable();
	void STATIC_SortByTradeHoldAscending(TArray<class UOnlineProduct_TA*>* Products);
	void STATIC_SortByTradeHoldDescending(TArray<class UOnlineProduct_TA*>* Products);
	bool CanBeArchived();
	bool RequiresDynamicThumbnail();
	struct FString GetDebugString();
	struct FString GetAttributeString();
	struct FProductHashID OnlineProductHash();
	struct FProductHashID OnlineProductHashV1();
	void GetPaintedColorAttribute(struct FString* ProductPaintColorName, struct FColor* ProductPaintColor, struct FColor* StructInitializer_25FEFA40484150863DFDCBA86FBFEE83);
	TEnumAsByte<EProductQuality> GetQuality();
	TArray<class UProductAttribute_TA*> GetReplicatedAttributes();
	TArray<class UProductAttribute_TA*> GetAttributes();
	struct FString GetLongLabel();
	int GetBlueprintSeriesID();
	TEnumAsByte<EBlueprintType> GetBlueprintType();
	bool IsBlueprint();
	class UProduct_TA* GetProduct();
	class UProductAttribute_TA* GetAttribute(class UClass* AttributeClass);
	struct FOnlineProductData InstanceOnlineProductData();
	class UOnlineProduct_TA* STATIC_InstanceTempOnlineProduct(const struct FProductHashID& HashID, struct FOnlineProductData* StructInitializer_2365D0C94987E8981C9083ACABD09314, TArray<class UProductAttribute_TA*>* ArrayResultLocal_A297A95841876FEF42A881A8590FE816, TArray<struct FOnlineProductAttribute>* MapLocal_D56855F14C7ADCB74C970BAFEE141088);
	class UOnlineProduct_TA* STATIC_CreateOnlineProduct(struct FOnlineProductData* ProductData);
	void STATIC_ProcessOnlineData(TArray<class UOnlineProduct_TA*>* OutProducts, TArray<struct FOnlineProductData>* InProductData);
};


// Class TAGame.PaintDatabase_TA
// 0x0064 (0x00C4 - 0x0060)
class UPaintDatabase_TA : public UObject
{
public:
	TArray<class UProductPaint_TA*>                    Paints;                                                   // 0x0060(0x0010) (Edit, Const, EditConst, NeedCtorLink)
	struct FMap_Mirror                                 PaintNameToPaintID;                                       // 0x0070(0x0050) (Const, Native)
	unsigned long                                      bClickToRebuild : 1;                                      // 0x00C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PaintDatabase_TA");
		return ptr;
	}


	void STATIC_ComputeHSLDifferenceBetweenTwoPaints(int DestinationPaintID, int SourcePaintID, float* Hue, float* Saturation, float* Lightness);
	class UProductPaint_TA* GetPaintByName(const struct FName& PaintName);
	class UProductPaint_TA* GetPaint(int Id);
	struct FName GetPaintName(int PaintID);
	int GetPaintID(const struct FName& PaintName);
};


// Class TAGame.ParticleSystemComponent_TA
// 0x0018 (0x03F8 - 0x03E0)
class UParticleSystemComponent_TA : public UParticleSystemComponent
{
public:
	struct FVector                                     PreviewFakeVelocity;                                      // 0x03E0(0x000C) (Edit)
	struct FVector                                     PodiumFakeVelocity;                                       // 0x03EC(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ParticleSystemComponent_TA");
		return ptr;
	}


	void STATIC_AttachToWheel(class UParticleSystemComponent* PSC, class USkeletalMeshComponent* WheelMesh, class UProductAsset_Wheel_TA* WheelAsset, const struct FName& Socket, TArray<class UProductAttribute_TA*>* AttributesToApply);
};


// Class TAGame.Persona_TA
// 0x0120 (0x0180 - 0x0060)
class UPersona_TA : public UObject
{
public:
	struct FString                                     PlayerName;                                               // 0x0060(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     UnSanitizedPlayerName;                                    // 0x0070(0x0010) (NeedCtorLink)
	struct FUniqueNetId                                PlayerID;                                                 // 0x0080(0x0038) (DataBinding)
	TEnumAsByte<EOnlineFriendState>                    OnlinePresenceState;                                      // 0x00B8(0x0001) (DataBinding)
	TEnumAsByte<EOnlineFriendState>                    OnlinePresenceState_Platform;                             // 0x00B9(0x0001)
	TEnumAsByte<EOnlineFriendState>                    OnlinePresenceState_PsyNet;                               // 0x00BA(0x0001)
	TEnumAsByte<EOnlinePlatform>                       Platform;                                                 // 0x00BB(0x0001) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	struct FString                                     OnlinePresenceMessage;                                    // 0x00C0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     OnlinePresenceMessage_Platform;                           // 0x00D0(0x0010) (NeedCtorLink)
	struct FString                                     OnlinePresenceMessage_PsyNet;                             // 0x00E0(0x0010) (NeedCtorLink)
	unsigned long                                      bBlockedStatus : 1;                                       // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bCanSendPartyInvite : 1;                                  // 0x00F0(0x0004)
	unsigned long                                      bPlatformFriend : 1;                                      // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bPsyNetFriend : 1;                                        // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bNameSanitized : 1;                                       // 0x00F0(0x0004) (DataBinding)
	int                                                GroupId;                                                  // 0x00F4(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00F8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.Persona_TA.LastActive
	struct FString                                     PlayerNote;                                               // 0x0100(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     PsyTagName;                                               // 0x0110(0x0010) (NeedCtorLink, DataBinding)
	int                                                PsyTagCode;                                               // 0x0120(0x0004) (DataBinding)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	struct FString                                     ClubTag;                                                  // 0x0128(0x0010) (NeedCtorLink, DataBinding)
	struct FScriptDelegate                             __EventUpdated__Delegate;                                 // 0x0138(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0138(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventNameSanitized__Delegate;                           // 0x0150(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0150(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventBlockStatusChanged__Delegate;                      // 0x0168(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0168(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Persona_TA");
		return ptr;
	}


	struct FString GetComboNameDisplay();
	struct FString GetSingleOrMultiDisplayName(bool bPlatformRelationship, bool bPsyNetRelationship);
	struct FString GetSingleDisplayName(bool bPlatformRelationship, bool bPsyNetRelationship);
	void SetBlockStatus(bool bBlocked);
	void SetPsyTag(const struct FPsyTag& InTag, const struct FString& PlatformName);
	void NotifyOnNameSanitized(const struct FScriptDelegate& Callback);
	void SetPlayerNameSanitized(const struct FString& Original, const struct FString& Sanitized);
	void SetPlayerName(const struct FString& NewName);
	bool CanSendPartyInvite();
	bool IsFriendInGame();
	bool IsPurePsyNetFriendInGame();
	bool IsPlatformFriendInGame();
	bool IsSamePlatformPsyNetFriendsAllowed();
	bool IsFriend();
	void ReconcilePresence();
	void SetFriendGroupIDFromPresenceState();
	void SetOnlinePresenceState(TEnumAsByte<EOnlineFriendState> InOnlinePresenceState, TEnumAsByte<EPersonaInfoOrigin> Origin);
	void SetPlatformPresenceMessage(const struct FString& PresenceInfo);
	class UPersona_TA* UpdateFromOnlineFriend(const struct FOnlineFriend& OnlineInfo, TEnumAsByte<EPersonaInfoOrigin> Origin);
	void EventBlockStatusChanged(class UPersona_TA* Persona);
	void EventNameSanitized(class UPersona_TA* Persona);
	void EventUpdated(class UPersona_TA* Persona);
};


// Class TAGame.Personas_TA
// 0x0080 (0x00E0 - 0x0060)
class UPersonas_TA : public UObject
{
public:
	struct FMap_Mirror                                 PersonaMap;                                               // 0x0060(0x0050) (Native)
	unsigned long                                      bVerbosePresenceSort : 1;                                 // 0x00B0(0x0004) (Const, Config)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	struct FString                                     DeletedAccountDisplayName;                                // 0x00B8(0x0010) (Const, Localized, NeedCtorLink)
	struct FScriptDelegate                             __EventAdded__Delegate;                                   // 0x00C8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00C8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Personas_TA");
		return ptr;
	}


	class UPersona_TA* CreatePersonaFromOnlineFriend(TEnumAsByte<EPersonaInfoOrigin> Origin, struct FOnlineFriend* FriendData);
	class UPersona_TA* CreatePersona(const struct FUniqueNetId& PlayerID, const struct FString& PlayerName, TEnumAsByte<EPersonaInfoOrigin> Origin, struct FOnlineFriend* StructInitializer_8315E9DD4118A618454B30A3A6AC1918);
	class UPersona_TA* AddPersona(class UPersona_TA* Persona);
	class UPersona_TA* UpdatePersonaFromData(TEnumAsByte<EPersonaInfoOrigin> Origin, struct FOnlineFriend* FriendData);
	void SortPersonaDataAlphabetically(TArray<struct FPersonaDataId>* OutPersonaData);
	void SortPersonaData(TArray<struct FPersonaDataId>* OutPersonaData);
	void GetAllPersonasInGroup(int GroupId, TArray<class UPersona_TA*>* OutPersonas);
	void AddToMap(class UPersona_TA* Persona);
	class UPersona_TA* GetPersonaFromID(const struct FUniqueNetId& PlayerID);
	void STATIC_ShowBlockedInteractionError(class UPersona_TA* BlockedPersona, class UGFxShell_TA* Shell);
	class UPersona_TA* GetOrCreateFromOnlineFriend(TEnumAsByte<EPersonaInfoOrigin> Origin, struct FOnlineFriend* FriendData);
	class UPersona_TA* UpdatePersonaName(const struct FUniqueNetId& PlayerID, const struct FString& PlayerName);
	class UPersona_TA* GetOrCreate(const struct FUniqueNetId& PlayerID, const struct FString& PlayerName);
	void CreateDefaultPersonas(struct FUniqueNetId* StructInitializer_D50D51B64B35835D6DD28FAEC3F03605);
	void EventAdded(class UPersonas_TA* PersonasManager, class UPersona_TA* Persona);
};


// Class TAGame.PhysicalMaterialProperty_TA
// 0x000C (0x006C - 0x0060)
class UPhysicalMaterialProperty_TA : public UPhysicalMaterialPropertyBase
{
public:
	struct FName                                       AkSwitchValue;                                            // 0x0060(0x0008) (Edit)
	unsigned long                                      bStickyWheels : 1;                                        // 0x0068(0x0004) (Edit)
	unsigned long                                      bConsiderForGround : 1;                                   // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PhysicalMaterialProperty_TA");
		return ptr;
	}

};


// Class TAGame.PhysicsConfig_TA
// 0x0128 (0x01A0 - 0x0078)
class UPhysicsConfig_TA : public UOnlineConfig_X
{
public:
	TArray<struct FString>                             EnabledFeatures;                                          // 0x0078(0x0010) (Edit, NeedCtorLink)
	TArray<struct FString>                             DisabledFeatures;                                         // 0x0088(0x0010) (Edit, NeedCtorLink)
	struct FCarInteractionConfig                       CarInteractionSettings;                                   // 0x0098(0x00B8) (NeedCtorLink)
	struct FSuperSonicConfig                           SuperSonicSettings;                                       // 0x0150(0x000C)
	unsigned long                                      bUseAckermannSteering : 1;                                // 0x015C(0x0004)
	unsigned long                                      bPredictContacts : 1;                                     // 0x015C(0x0004)
	unsigned long                                      bQuantizePhysics : 1;                                     // 0x015C(0x0004)
	unsigned long                                      bOverrideServerPhysicsState : 1;                          // 0x015C(0x0004)
	unsigned long                                      bBackupVehicleInputs : 1;                                 // 0x015C(0x0004)
	unsigned long                                      bUseNEQ : 1;                                              // 0x015C(0x0004)
	unsigned long                                      bExtrapolateRendering : 1;                                // 0x015C(0x0004) (Edit)
	unsigned long                                      bEnableCustomExplosionPhysics : 1;                        // 0x015C(0x0004)
	float                                              JumpLeaveGroundTime;                                      // 0x0160(0x0004)
	struct FSimTimeScaleSettings                       STS;                                                      // 0x0164(0x0004)
	struct FContinuousSimTimeScaleSettings             CSTS;                                                     // 0x0168(0x0034)
	float                                              PushForceConstantScale;                                   // 0x019C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PhysicsConfig_TA");
		return ptr;
	}


	void DisableFeature(const struct FString& Feature);
	void EnableFeature(const struct FString& Feature);
	void Reset();
	void Apply();
};


// Class TAGame.PitchTekDrawingComponent_TA
// 0x0033 (0x00D0 - 0x009D)
class UPitchTekDrawingComponent_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	struct FVector                                     PreviousOwnerPosition;                                    // 0x00A0(0x000C) (Transient)
	TEnumAsByte<EPitchTekDecalType>                    DecalType;                                                // 0x00AC(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	TArray<struct FWheelContactData>                   WheelContacts;                                            // 0x00B0(0x0010) (Transient, Component, NeedCtorLink)
	struct FPitchTekCarBodyContactData                 CarBodyContactData;                                       // 0x00C0(0x0010) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PitchTekDrawingComponent_TA");
		return ptr;
	}


	void QueueJumpBlastDecal(const struct FVector& JumpBlastLocation);
	void QueueDemolitionExplosionDecal(const struct FVector& DemolitionExplosionLocation);
	void QueueGoalExplosionDecal(const struct FVector& GoalExplosionLocation);
};


// Class TAGame.PlayerVanity_TA
// 0x00F8 (0x0168 - 0x0070)
class UPlayerVanity_TA : public UComponent
{
public:
	struct FString                                     MovieReference;                                           // 0x0070(0x0010) (Transient, NeedCtorLink, DataBinding)
	class UTexture*                                    ToPlayer;                                                 // 0x0080(0x0008) (Transient, DataBinding)
	class UTexture2D*                                  PaintableLayer;                                           // 0x0088(0x0008) (Transient, DataBinding)
	class UTexture2D*                                  TintableLayer;                                            // 0x0090(0x0008) (Transient, DataBinding)
	unsigned long                                      bColorable : 1;                                           // 0x0098(0x0004) (Transient, DataBinding)
	unsigned long                                      bIsDirty : 1;                                             // 0x0098(0x0004) (Transient)
	int                                                ColorID;                                                  // 0x009C(0x0004) (Transient, DataBinding)
	struct FColor                                      ColorValue;                                               // 0x00A0(0x0004) (Transient, DataBinding)
	struct FColor                                      DefaultColorValue;                                        // 0x00A4(0x0004) (Transient, DataBinding)
	struct FColor                                      PaintColor;                                               // 0x00A8(0x0004) (Transient, DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x00AC(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.PlayerVanity_TA.InstanceID
	struct FProductHashID                              HashID;                                                   // 0x00B8(0x0004) (Transient, DataBinding)
	struct FColor                                      RawDefaultColorValue;                                     // 0x00BC(0x0004) (Transient)
	TArray<class UProductAttribute_TA*>                Attributes;                                               // 0x00C0(0x0010) (Transient, NeedCtorLink)
	struct FUniqueNetId                                PlayerID;                                                 // 0x00D0(0x0038) (Transient, DataBinding)
	class UProfile_TA*                                 Profile;                                                  // 0x0108(0x0008) (Transient)
	class UPlayerVanitySave_TA*                        VanitySaveObject;                                         // 0x0110(0x0008) (Transient)
	TEnumAsByte<EVanityType>                           VanityType;                                               // 0x0118(0x0001) (Const)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0119(0x0007) MISSED OFFSET
	struct FScriptDelegate                             OnLoadCompleteCallback;                                   // 0x0120(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0119(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventOnLoadComplete__Delegate;                          // 0x0138(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0138(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventEquipProduct__Delegate;                            // 0x0150(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0150(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerVanity_TA");
		return ptr;
	}


	void __PlayerVanity_TA__InitWithProfile_41BA39FF4BDB3191FA6146B25D4D2589(class USaveData_TA* _);
	void ClearVanity();
	void ApplyColor(const struct FColor& InColor);
	int GetDefaultColor();
	void EquipColor(int InColorID);
	void EquipProduct_Internal(int InSelectedColorValue);
	void HandleEquippedProductLoaded(const struct FAssetLoadResult& Result);
	void EquipProduct(class UProfile_TA* InProfile, const struct FProductHashID& InHashID);
	void UpdateColorFromProfile(class UProfile_TA* InProfile, int InProductID, int InColorID);
	bool IsEmpty();
	void UpdateFromAsset(class UProductAsset_PlayerVanity_TA* Asset);
	void HandleLoaded(const struct FAssetLoadResult& Result);
	class UClass* GetSaveType();
	void SetPlayerID(const struct FUniqueNetId& InPlayerId);
	void UpdateSaveObject();
	void InitWithProductID(const struct FUniqueNetId& InPlayerId, int InProductID, const struct FProductHashID& InHashID, TArray<class UProductAttribute_TA*> InAttributes, const struct FScriptDelegate& Callback);
	void InitWithData(class UPlayerVanitySave_TA* InData);
	void HandleRemovedOnlineProduct(class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct, struct FProductHashID* StructInitializer_B5AF6F2E4C7162F86F6C56BEF76B123E);
	void HandleProfileDataChanged(class UPlayerVanitySave_TA* InData);
	void InitWithProfile(class UProfile_TA* InProfile);
	void EventEquipProduct(class UPlayerVanity_TA* PlayerVanity);
	void EventOnLoadComplete(const struct FUniqueNetId& InPlayerId, TEnumAsByte<EVanityType> InVanityType);
};


// Class TAGame.PlayerAvatar_TA
// 0x0000 (0x0168 - 0x0168)
class UPlayerAvatar_TA : public UPlayerVanity_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerAvatar_TA");
		return ptr;
	}


	void HandleUpdateTexture(class UTexture* AvatarTexture);
};


// Class TAGame.PlayerAvatarBorder_TA
// 0x0008 (0x0170 - 0x0168)
class UPlayerAvatarBorder_TA : public UPlayerVanity_TA
{
public:
	class UProductAsset_PlayerAvatarBorder_TA*         Asset;                                                    // 0x0168(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerAvatarBorder_TA");
		return ptr;
	}


	void HandleLoaded(const struct FAssetLoadResult& Result);
	class UClass* GetSaveType();
};


// Class TAGame.PlayerBanner_TA
// 0x0008 (0x0170 - 0x0168)
class UPlayerBanner_TA : public UPlayerVanity_TA
{
public:
	class UProductAsset_PlayerBanner_TA*               Asset;                                                    // 0x0168(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerBanner_TA");
		return ptr;
	}


	void HandleLoaded(const struct FAssetLoadResult& Result);
	class UClass* GetSaveType();
};


// Class TAGame.PremiumSkin_TA
// 0x0080 (0x00E0 - 0x0060)
class UPremiumSkin_TA : public UObject
{
public:
	class UMaterialInstanceConstant*                   MIC;                                                      // 0x0060(0x0008) (Edit)
	TEnumAsByte<EProductQuality>                       Quality;                                                  // 0x0068(0x0001) (Edit)
	TEnumAsByte<ESkinType>                             SkinType;                                                 // 0x0069(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x6];                                       // 0x006A(0x0006) MISSED OFFSET
	struct FMaterialParams                             SkinParameters;                                           // 0x0070(0x0030) (Edit, NeedCtorLink)
	class UTexture2D*                                  Thumbnail;                                                // 0x00A0(0x0008) (Edit)
	unsigned long                                      bTeamFinishDisabled : 1;                                  // 0x00A8(0x0004) (Edit)
	unsigned long                                      bCustomFinishDisabled : 1;                                // 0x00A8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<class UProductAssetAttribute_TA*>           Attributes;                                               // 0x00B0(0x0010) (Edit, NeedCtorLink, EditInline)
	TArray<class UPremiumSkinSet_TA*>                  SkinSets;                                                 // 0x00C0(0x0010) (Edit, EditConst, NeedCtorLink)
	class UProductAsset_Skin_TA*                       AssetTemplate;                                            // 0x00D0(0x0008) (ExportObject, NeedCtorLink, EditInline)
	class UProductTemplate_TA*                         ProductTemplate;                                          // 0x00D8(0x0008) (ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PremiumSkin_TA");
		return ptr;
	}

};


// Class TAGame.PremiumSkinSet_TA
// 0x0018 (0x0078 - 0x0060)
class UPremiumSkinSet_TA : public UObject
{
public:
	class UProductAsset_Body_TA*                       Body;                                                     // 0x0060(0x0008) (Edit)
	TArray<struct FPremiumSkinSetItem>                 Skins;                                                    // 0x0068(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PremiumSkinSet_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_TA
// 0x0020 (0x0080 - 0x0060)
class UProductAttribute_TA : public UObject
{
public:
	struct FName                                       Typename;                                                 // 0x0060(0x0008) (Const)
	unsigned long                                      bReplicated : 1;                                          // 0x0068(0x0004) (Const)
	unsigned long                                      bRequiresDynamicThumbnail : 1;                            // 0x0068(0x0004) (Const)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	struct FString                                     Label;                                                    // 0x0070(0x0010) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_TA");
		return ptr;
	}


	class UProductAttribute_SpecialEdition_TA* STATIC___ProductAttribute_TA__ModifyLoadout_C08F67664D64113D0D764B9F906A73BB(const struct FClientLoadoutOnlineProduct& P);
	bool HasLoadedAllAdditionalReferences(class ULoadingProduct_TA* ProductData);
	void LoadAdditionalAssets(const struct FScriptDelegate& Callback);
	bool ShouldLoadAdditionalAssets();
	struct FString GetSortLabel();
	struct FString GetTypeHashID();
	struct FString GetHashID();
	struct FString GetOnlineProductAttributeValue();
	struct FOnlineProductAttribute InstanceOnlineProductAttribute();
	TArray<int> STATIC_ModifyLoadout(TArray<int> OnlineProductIDs, TArray<int>* LoadoutProductIDs, struct FClientLoadoutOnlineData* OnlineLoadout, TArray<class UProductAttribute_SpecialEdition_TA*>* MapLocal_94B2CCD249E71E6A9EF840920B9F4FD5);
	void ApplyToObject(class UProductAsset_TA* Asset, class UObject* Target);
	int STATIC_SortAttributes(class UProductAttribute_TA* A, class UProductAttribute_TA* B);
	void STATIC_ApplyAttributeOverrides(class UProductAsset_TA* Asset, class UObject* Target, TArray<class UProductAttribute_TA*>* Attributes, TArray<class UClass*>* AttributesToIgnore);
	void STATIC_ApplyAttributes(class UProductAsset_TA* Asset, class UObject* Target, TArray<class UProductAttribute_TA*>* Attributes, TArray<class UClass*>* AttributesToIgnore, TArray<class UProductAttribute_TA*>* SortLocal_AF661A2B4E300442EEB6E8910E7DD13C);
	void OnLoaded();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* OtherAttributes);
	bool Init(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* OtherAttributes);
	class UProductAttribute_TA* STATIC_Get(class UClass* AttributeClass, TArray<class UProductAttribute_TA*> Attributes);
};


// Class TAGame.ProductAttribute_SpecialEditionSettings_TA
// 0x0020 (0x00A0 - 0x0080)
class UProductAttribute_SpecialEditionSettings_TA : public UProductAttribute_TA
{
public:
	TArray<struct FSpecialEditionConfig>               Editions;                                                 // 0x0080(0x0010) (Edit, NeedCtorLink)
	TArray<class UProductSpecialEdition_TA*>           SupportedEditions;                                        // 0x0090(0x0010) (Edit, Const, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_SpecialEditionSettings_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_TA
// 0x0080 (0x00E0 - 0x0060)
class UProductAsset_TA : public UObject
{
public:
	class UProductTemplate_TA*                         Product;                                                  // 0x0060(0x0008) (Edit, EditConst, EditInline)
	class UTexture2D*                                  Thumbnail;                                                // 0x0068(0x0008) (Edit, Const, DuplicateTransient)
	class UThumbnailRenderer_TA*                       ThumbnailRenderer;                                        // 0x0070(0x0008) (Edit)
	class UMaterialInterface*                          ThumbnailMaterial;                                        // 0x0078(0x0008) (Edit)
	float                                              ThumbnailKeyLightBrightnessScale;                         // 0x0080(0x0004) (Edit)
	struct FVector                                     ThumbnailCameraTranslationOffset;                         // 0x0084(0x000C) (Edit, Const)
	struct FRotator                                    ThumbnailCameraRotationOffset;                            // 0x0090(0x000C) (Edit, Const)
	float                                              ThumbnailCameraFOV;                                       // 0x009C(0x0004) (Edit, Const)
	struct FRotator                                    ThumbnailProductRotation;                                 // 0x00A0(0x000C) (Edit, Const)
	float                                              ParticleWarmupTime;                                       // 0x00AC(0x0004) (Edit, Const)
	float                                              AnimationWarmupTime;                                      // 0x00B0(0x0004) (Edit, Const)
	struct FVector                                     ParticleFakeVelocity;                                     // 0x00B4(0x000C) (Edit, Const)
	struct FVector                                     SkeletalMeshAnimationOffset;                              // 0x00C0(0x000C) (Edit, Const)
	unsigned long                                      bForceRebuildThumbnail : 1;                               // 0x00CC(0x0004) (Edit, Const)
	unsigned long                                      bPreviewDynamicThumbnail : 1;                             // 0x00CC(0x0004) (Edit, Const)
	unsigned long                                      bServerSideOnlyWasSetInitially : 1;                       // 0x00CC(0x0004) (Transient)
	TArray<class UProductAssetAttribute_TA*>           Attributes;                                               // 0x00D0(0x0010) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_TA");
		return ptr;
	}


	void SetupDynamicThumbnail(class UPrimitiveComponent* PrimComp);
	class UTexture2D* RenderAssetThumbnail(const struct FString& TextureName, class UPackage* InPackage);
	struct FName GetThumbnailAssetName();
	struct FName GetThumbnailAssetPackageName();
	struct FString GetAssetPackagePath();
	struct FString GetProductPackagePath();
	class UObject* GetAttribute(class UClass* AttributeClass);
	void AddFXActorToThumbnailScene(class AFXActor_X* FXActor, class UCarMeshComponent_TA* SKMToAttachTo, class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* InAttributes);
	bool CreateAndAttachThumbnailPSC(const struct FFXAttachment& Attachment, class AFXActor_X* FXActor, int AttachmentIdx, class USkeletalMeshComponent* Owner, TArray<class UProductAttribute_TA*>* InAttributes);
	class UParticleSystem* GetParticleSystemThumbnailOverride(class AFXActor_X* FXActor, int AttachmentIdx, struct FFXAttachment* Attachment);
	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* InAttributes);
	struct FString CheckCanSave();
	class UProduct_TA* GetProduct();
};


// Class TAGame.ProductAsset_Body_TA
// 0x0278 (0x0358 - 0x00E0)
class UProductAsset_Body_TA : public UProductAsset_TA
{
public:
	class USkeletalMesh*                               Mesh;                                                     // 0x00E0(0x0008) (Edit)
	class UAnimTree*                                   AnimTreeTemplate;                                         // 0x00E8(0x0008) (Edit)
	TArray<class UAnimSet*>                            AnimSets;                                                 // 0x00F0(0x0010) (Edit, NeedCtorLink)
	class UPhysicsAsset*                               PhysicsAsset;                                             // 0x0100(0x0008) (Edit)
	class UHandlingPreset_TA*                          HandlingPreset;                                           // 0x0108(0x0008) (Edit)
	float                                              HandlingPresetZOffset;                                    // 0x0110(0x0004) (Edit)
	struct FVehicleAxleSettings                        FrontAxle;                                                // 0x0114(0x0028) (Edit)
	struct FVehicleAxleSettings                        BackAxle;                                                 // 0x013C(0x0028) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0164(0x0004) MISSED OFFSET
	TArray<struct FVehicleAxleSettings>                AdditionalAxles;                                          // 0x0168(0x0010) (Edit, NeedCtorLink)
	float                                              SteerScale;                                               // 0x0178(0x0004) (Edit)
	struct FSimpleSpringSettings                       ChassisSpring;                                            // 0x017C(0x0050) (Edit)
	float                                              ChassisRotationScale;                                     // 0x01CC(0x0004) (Edit, EditConst, DuplicateTransient)
	float                                              ChassisTranslationScale;                                  // 0x01D0(0x0004) (Edit, EditConst, DuplicateTransient)
	float                                              SuspensionTravelMax;                                      // 0x01D4(0x0004) (Edit)
	float                                              SuspensionTravelMin;                                      // 0x01D8(0x0004) (Edit)
	unsigned long                                      bUseLegacySuspensionOffsets : 1;                          // 0x01DC(0x0004)
	unsigned long                                      bOverrideBoostFlapsAngle : 1;                             // 0x01DC(0x0004) (Edit)
	class UAkSoundCue*                                 EngineSound;                                              // 0x01E0(0x0008) (Deprecated)
	class UAkSoundCue*                                 ExhaustSound;                                             // 0x01E8(0x0008) (Deprecated)
	class UAkSoundCue*                                 BlowoffSound;                                             // 0x01F0(0x0008) (Deprecated)
	class UEngineAudioProfile_TA*                      EngineAudioProfile;                                       // 0x01F8(0x0008) (Deprecated)
	class UProductAsset_EngineAudio_TA*                EngineAudioAsset;                                         // 0x0200(0x0008) (Deprecated)
	TArray<class UProductAsset_EngineAudio_TA*>        EngineAudioAssets;                                        // 0x0208(0x0010) (Edit, NeedCtorLink)
	int                                                EngineAudioProductID;                                     // 0x0218(0x0004) (EditConst, Deprecated)
	unsigned char                                      UnknownData01[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	class UProductAssetReference_TA*                   EngineAudioReference;                                     // 0x0220(0x0008) (Edit, EditInline)
	class AFXActor_X*                                  FXActor;                                                  // 0x0228(0x0008) (Edit)
	int                                                SkinMaterialIndex;                                        // 0x0230(0x0004) (Edit)
	int                                                BrakelightMaterialIndex;                                  // 0x0234(0x0004) (Edit)
	int                                                ChassisMaterialIndex;                                     // 0x0238(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x023C(0x0004) MISSED OFFSET
	TArray<struct FName>                               BoostEmitterSockets;                                      // 0x0240(0x0010) (Edit, NeedCtorLink)
	float                                              BoostFlapsAngle;                                          // 0x0250(0x0004) (Edit)
	struct FLinearColor                                ForcedTeamColors[0x2];                                    // 0x0254(0x0010) (Edit)
	struct FLinearColor                                ForcedCustomColor;                                        // 0x0274(0x0010) (Edit)
	struct FVector                                     SupersonicTrailOffset;                                    // 0x0284(0x000C) (Edit)
	TArray<class UProduct_TA*>                         AdditionalUnlocks2;                                       // 0x0290(0x0010) (Edit, NeedCtorLink)
	class UProductEquipProfile_TA*                     EquipProfile;                                             // 0x02A0(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	TArray<struct FProductAttachment>                  Attachments;                                              // 0x02A8(0x0010) (Edit, Component, NeedCtorLink)
	TArray<struct FParticleSysParam>                   BoostParticleParameters;                                  // 0x02B8(0x0010) (Edit, NeedCtorLink)
	class UParticleSystem*                             SupersonicWheelTemplate;                                  // 0x02C8(0x0008) (Edit)
	class AFXActor_X*                                  DemolishFX;                                               // 0x02D0(0x0008) (Edit)
	class AFXActor_X*                                  SpawnFX;                                                  // 0x02D8(0x0008) (Edit)
	class AFXActor_X*                                  ExitFX;                                                   // 0x02E0(0x0008) (Edit)
	float                                              WheelPreviewAnimTranslateScale;                           // 0x02E8(0x0004) (Edit)
	unsigned char                                      UnknownData03[0x4];                                       // 0x02EC(0x0004) MISSED OFFSET
	TArray<struct FBoostAttachmentToggle>              BoostAttachmentsToModify;                                 // 0x02F0(0x0010) (Edit, NeedCtorLink)
	struct FMaterialParams                             SkinParameters;                                           // 0x0300(0x0030) (Edit, NeedCtorLink)
	class UProductAssetReferenceWheel_TA*              ThumbnailWheelAsset;                                      // 0x0330(0x0008) (Edit, EditInline)
	TArray<struct FSkeletalMeshLODDistanceInfo>        LODDistanceInfo;                                          // 0x0338(0x0010) (NeedCtorLink)
	TArray<class UObject*>                             MutatorArchetypes;                                        // 0x0348(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Body_TA");
		return ptr;
	}


	bool CanEquip(class UProduct_TA* InProduct);
	bool HasBone(const struct FName& InBoneName);
	void FixPhysicsBoxTranslation();
	void ApplyBoostAttachmentDisablesToFXActor(class AFXActor_X* OutFXActor);
	void ModifyAttachment(class AFXActor_X* OutFXActor, int AttachmentIndex, struct FBoostAttachmentToggle* EventsToUse);
	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* InAttributes);
	struct FString CheckCanSave();
};


// Class TAGame.ProductAsset_Boost_TA
// 0x0010 (0x00F0 - 0x00E0)
class UProductAsset_Boost_TA : public UProductAsset_TA
{
public:
	class AFXActor_Boost_TA*                           FXActor;                                                  // 0x00E0(0x0008) (Edit)
	float                                              PreviewFrontWheelSpinSpeed;                               // 0x00E8(0x0004) (Edit)
	float                                              PreviewBackWheelSpinSpeed;                                // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Boost_TA");
		return ptr;
	}


	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* InAttributes);
	class UParticleSystem* GetParticleSystemThumbnailOverride(class AFXActor_X* InFXActor, int AttachmentIdx, struct FFXAttachment* Attachment);
	struct FString CheckCanSave();
};


// Class TAGame.ProductAsset_Bot_TA
// 0x001C (0x00FC - 0x00E0)
class UProductAsset_Bot_TA : public UProductAsset_TA
{
public:
	TArray<class UProduct_TA*>                         LoadoutProducts2;                                         // 0x00E0(0x0010) (Edit, NeedCtorLink)
	int                                                BlueTeamColorID;                                          // 0x00F0(0x0004) (Edit)
	int                                                OrangeTeamColorID;                                        // 0x00F4(0x0004) (Edit)
	int                                                CustomColorID;                                            // 0x00F8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Bot_TA");
		return ptr;
	}


	struct U_Types_TA_FLoadoutData GetLoadout(int TeamIndex);
};


// Class TAGame.ProductAsset_Container_TA
// 0x0000 (0x00E0 - 0x00E0)
class UProductAsset_Container_TA : public UProductAsset_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Container_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_EngineAudio_TA
// 0x0040 (0x0120 - 0x00E0)
class UProductAsset_EngineAudio_TA : public UProductAsset_TA
{
public:
	class UAkSoundCue*                                 EngineSound;                                              // 0x00E0(0x0008) (Edit)
	class UAkSoundCue*                                 ExhaustSound;                                             // 0x00E8(0x0008) (Edit)
	class UAkSoundCue*                                 IgnitionSound;                                            // 0x00F0(0x0008) (Edit)
	class UAkSoundCue*                                 BlowoffSound;                                             // 0x00F8(0x0008) (Edit)
	class UAkSoundCue*                                 ThrottleEngageSound;                                      // 0x0100(0x0008) (Edit)
	class UAkSoundCue*                                 ThrottleReleaseSound;                                     // 0x0108(0x0008) (Edit)
	class UAkSoundCue*                                 GearChangeSound;                                          // 0x0110(0x0008) (Edit)
	class UEngineAudioProfileBase_TA*                  Profile;                                                  // 0x0118(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_EngineAudio_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_GoalExplosion_TA
// 0x001C (0x00FC - 0x00E0)
class UProductAsset_GoalExplosion_TA : public UProductAsset_TA
{
public:
	class AFXActor_X*                                  GoalExplosionFX;                                          // 0x00E0(0x0008) (Edit)
	TArray<class UExplosionHitHandler_X*>              ExplosionComponents;                                      // 0x00E8(0x0010) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	unsigned long                                      bUseOverrideGoalOrientations : 1;                         // 0x00F8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_GoalExplosion_TA");
		return ptr;
	}


	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* InAttributes);
};


// Class TAGame.ProductAsset_Pack_TA
// 0x0000 (0x00E0 - 0x00E0)
class UProductAsset_Pack_TA : public UProductAsset_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Pack_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_PaintFinish_TA
// 0x0060 (0x0140 - 0x00E0)
class UProductAsset_PaintFinish_TA : public UProductAsset_TA
{
public:
	class ULightCurveType_TA*                          LightCurveType;                                           // 0x00E0(0x0008) (Edit)
	class UTexture*                                    DetailNormal;                                             // 0x00E8(0x0008) (Edit)
	float                                              SpecularTint;                                             // 0x00F0(0x0004) (Edit)
	float                                              RimLightTint;                                             // 0x00F4(0x0004) (Edit)
	float                                              DiffuseDetailNormalStrength;                              // 0x00F8(0x0004) (Edit)
	float                                              SpecularDetailNormalStrength;                             // 0x00FC(0x0004) (Edit)
	float                                              SpecularStrength;                                         // 0x0100(0x0004) (Edit)
	float                                              EnvironmentStrength;                                      // 0x0104(0x0004) (Edit)
	float                                              SparkleStrength;                                          // 0x0108(0x0004) (Edit)
	float                                              PearlescentStrength;                                      // 0x010C(0x0004) (Edit)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                   // 0x0110(0x0010) (Edit, Const, EditConst, NeedCtorLink)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x0120(0x0010) (Edit, Const, EditConst, NeedCtorLink)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x0130(0x0010) (Edit, Const, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_PaintFinish_TA");
		return ptr;
	}


	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* InAttributes);
	void STATIC_SetPaintFinishParametersOnMaterial(class UMaterialInstance* MatInst, class UProductAsset_PaintFinish_TA* Finish, const struct FString& Prefix);
};


// Class TAGame.ProductAsset_PlayerVanity_TA
// 0x0030 (0x0110 - 0x00E0)
class UProductAsset_PlayerVanity_TA : public UProductAsset_TA
{
public:
	class USwfMovie*                                   MovieReference;                                           // 0x00E0(0x0008) (Edit)
	class UTexture2D*                                  ToPlayer;                                                 // 0x00E8(0x0008) (Edit)
	class UTexture2D*                                  PaintableLayer;                                           // 0x00F0(0x0008) (Edit)
	class UTexture2D*                                  TintableLayer;                                            // 0x00F8(0x0008) (Edit)
	struct FLinearColor                                DefaultPaintColor;                                        // 0x0100(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_PlayerVanity_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_PlayerAvatar_TA
// 0x0000 (0x0110 - 0x0110)
class UProductAsset_PlayerAvatar_TA : public UProductAsset_PlayerVanity_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_PlayerAvatar_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_PlayerAvatarBorder_TA
// 0x0000 (0x0110 - 0x0110)
class UProductAsset_PlayerAvatarBorder_TA : public UProductAsset_PlayerVanity_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_PlayerAvatarBorder_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_PlayerBanner_TA
// 0x0000 (0x0110 - 0x0110)
class UProductAsset_PlayerBanner_TA : public UProductAsset_PlayerVanity_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_PlayerBanner_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_Skin_TA
// 0x00F0 (0x01D0 - 0x00E0)
class UProductAsset_Skin_TA : public UProductAsset_TA
{
public:
	class UMaterialInterface*                          Skin;                                                     // 0x00E0(0x0008) (Edit)
	TArray<struct FSkinBodySettings>                   BodySettings;                                             // 0x00E8(0x0010) (Edit, NeedCtorLink)
	TEnumAsByte<ESkinType>                             SkinType;                                                 // 0x00F8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00F9(0x0003) MISSED OFFSET
	struct FLinearColor                                ThumbnailTeamColor;                                       // 0x00FC(0x0010) (Edit)
	struct FLinearColor                                ThumbnailCustomColor;                                     // 0x010C(0x0010) (Edit)
	unsigned long                                      bTeamFinishDisabled : 1;                                  // 0x011C(0x0004) (Edit)
	unsigned long                                      bCustomFinishDisabled : 1;                                // 0x011C(0x0004) (Edit)
	struct FParameterInformation                       TeamFinishToApply;                                        // 0x0120(0x0038) (Edit, NeedCtorLink)
	struct FParameterInformation                       CustomFinishToApply;                                      // 0x0158(0x0038) (Edit, NeedCtorLink)
	struct FLinearColor                                ForcedTeamColors[0x2];                                    // 0x0190(0x0010) (Edit)
	struct FLinearColor                                ForcedCustomColor[0x2];                                   // 0x01B0(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Skin_TA");
		return ptr;
	}


	bool IsAnimatedSkinType();
	bool HasForcedCustomColor(int TeamIndex);
	bool HasForcedTeamColor(int TeamIndex);
	bool HasForcedCustomFinish();
	bool HasForcedTeamFinish();
	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* InAttributes);
	int GetThumbnailBodyID(class UProfile_TA* Profile, int EquippedBodyID);
	struct FMaterialParams GetSkinParameters(class UProductAsset_Body_TA* ForBody);
	struct FString CheckCanSave();
};


// Class TAGame.ProductAsset_SupersonicTrail_TA
// 0x0028 (0x0108 - 0x00E0)
class UProductAsset_SupersonicTrail_TA : public UProductAsset_TA
{
public:
	class AFXActor_TA*                                 FXActor;                                                  // 0x00E0(0x0008) (Const)
	class AFXActor_TA*                                 LeftFXActor;                                              // 0x00E8(0x0008) (Edit)
	class AFXActor_TA*                                 RightFXActor;                                             // 0x00F0(0x0008) (Edit)
	class UAkSoundCue*                                 AkEnterSound;                                             // 0x00F8(0x0008) (Edit)
	class UAkSoundCue*                                 AkLoopSound;                                              // 0x0100(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_SupersonicTrail_TA");
		return ptr;
	}


	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* InAttributes);
};


// Class TAGame.ProductAsset_Wheel_TA
// 0x00B8 (0x0198 - 0x00E0)
class UProductAsset_Wheel_TA : public UProductAsset_TA
{
public:
	float                                              MeshRadius;                                               // 0x00E0(0x0004) (Edit)
	float                                              MeshWidth;                                                // 0x00E4(0x0004) (Edit)
	class UWheelAssetGenerator_TA*                     Generator;                                                // 0x00E8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UWheelAssetGenerator_TA*                     PrevGenerator;                                            // 0x00F0(0x0008) (Const, ExportObject, Component, EditInline)
	class UStaticMesh*                                 CollisionMesh;                                            // 0x00F8(0x0008) (Edit)
	class UAkSoundCue*                                 CustomWheelDriveSound;                                    // 0x0100(0x0008) (Edit)
	class UAkSoundCue*                                 CustomWheelImpactSound;                                   // 0x0108(0x0008) (Edit)
	TEnumAsByte<EMeshMirrorMode>                       MirrorMode;                                               // 0x0110(0x0001) (Const)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0111(0x0007) MISSED OFFSET
	class UStaticMesh*                                 StaticMesh;                                               // 0x0118(0x0008) (Const)
	class UStaticMesh*                                 RearStaticMesh;                                           // 0x0120(0x0008) (Const)
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0128(0x0008) (Const)
	class USkeletalMesh*                               RearSkeletalMesh;                                         // 0x0130(0x0008) (Const)
	class UAnimTree*                                   AnimTree;                                                 // 0x0138(0x0008) (Const)
	class UAnimTree*                                   LeftAnimTree;                                             // 0x0140(0x0008) (Const)
	TArray<class UAttachmentBehavior_TA*>              Behaviors;                                                // 0x0148(0x0010) (Const, NeedCtorLink)
	struct FWheelAttachment                            Attachment;                                               // 0x0158(0x0030) (Const, Component, NeedCtorLink)
	TArray<struct FWheelAttachment>                    Attachments;                                              // 0x0188(0x0010) (Const, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Wheel_TA");
		return ptr;
	}


	void ApplyPaintToWheelAttachment(class UPrimitiveComponent* PrimComp, const struct FWheelAttachment& InAttachment, TArray<class UProductAttribute_TA*>* InAttributes);
	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* InAttributes);
	struct FString CheckCanSave();
};


// Class TAGame.ProductAssetAttribute_TA
// 0x0000 (0x0060 - 0x0060)
class UProductAssetAttribute_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAssetAttribute_TA");
		return ptr;
	}

};


// Class TAGame.AssetAttribute_TeamEdition_TA
// 0x0024 (0x0084 - 0x0060)
class UAssetAttribute_TeamEdition_TA : public UProductAssetAttribute_TA
{
public:
	TArray<class UProductOverride_TA*>                 Template;                                                 // 0x0060(0x0010) (Edit, NeedCtorLink, EditInline)
	TArray<struct FTeamEditionOverrides>               TeamEditions;                                             // 0x0070(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bAddAllAvailableTeams : 1;                                // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AssetAttribute_TeamEdition_TA");
		return ptr;
	}


	void ApplyPaintOverrides(int TeamID, class UProductPaint_TA* Paint, class UObject* Target);
	void ApplyToObject(int TeamID, class UObject* Target);
	int GetIndexFromTeamID(int TeamID);
};


// Class TAGame.ProductAttribute_PaintSettings_TA
// 0x00A8 (0x0108 - 0x0060)
class UProductAttribute_PaintSettings_TA : public UProductAssetAttribute_TA
{
public:
	struct FPaintMaterialGroup                         MaterialGroups[0x2];                                      // 0x0060(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bPaintParticles : 1;                                      // 0x0080(0x0004) (Edit)
	unsigned long                                      bPaintBody : 1;                                           // 0x0080(0x0004) (Edit)
	unsigned long                                      bGammaCorrect : 1;                                        // 0x0080(0x0004) (Edit)
	struct FName                                       PaintParameterName;                                       // 0x0084(0x0008) (Edit)
	TEnumAsByte<EPaintColorVariant>                    PaintType;                                                // 0x008C(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x008D(0x0003) MISSED OFFSET
	TArray<struct FPaintAttributeParameter>            PaintAdditionalParameters;                                // 0x0090(0x0010) (Edit, NeedCtorLink)
	float                                              PaintEmissiveMultiplier;                                  // 0x00A0(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	TArray<class UMaterialInterface*>                  PaintableMaterials;                                       // 0x00A8(0x0010) (Edit, EditConst, NeedCtorLink)
	TArray<class UMaterialInterface*>                  PaintableMaterialsMetallic;                               // 0x00B8(0x0010) (Edit, EditConst, NeedCtorLink)
	TArray<class UProductPaint_TA*>                    IncludePaints;                                            // 0x00C8(0x0010) (Edit, Const, Transient, NeedCtorLink)
	TArray<class UProductPaint_TA*>                    ExcludePaints;                                            // 0x00D8(0x0010) (Edit, EditConst, NeedCtorLink)
	TArray<class UProductPaint_TA*>                    UnsupportedPaints;                                        // 0x00E8(0x0010) (Edit, EditConst, NeedCtorLink)
	TArray<struct FPaintWithOverride>                  PaintsToOverride;                                         // 0x00F8(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_PaintSettings_TA");
		return ptr;
	}


	class UProductPaint_TA* GetPaintFromProductOverride(class UProductOverride_TA* ProductOverrideToFind);
	struct FString GetError();
};


// Class TAGame.ProductAssetLoader_TA
// 0x0018 (0x0078 - 0x0060)
class UProductAssetLoader_TA : public UObject
{
public:
	unsigned long                                      bDebug : 1;                                               // 0x0060(0x0004) (Edit)
	unsigned long                                      bLoadingAssetAsync : 1;                                   // 0x0060(0x0004) (Const, Transient)
	unsigned long                                      bAssetLoadedThisFrame : 1;                                // 0x0060(0x0004) (Const, Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TArray<struct FAssetLoadRequest>                   LoadAssetQueue;                                           // 0x0068(0x0010) (Const, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAssetLoader_TA");
		return ptr;
	}


	void Tick(float DeltaTime);
	void SetTickEnabled(bool bTick);
	void FlushAsyncLoading();
	void CancelLoadAsset(int ProductID, class UObject* Listener);
	void CancelLoadAssets(class UObject* Listener);
	void LoadAssetByNameAsync(const struct FName& AssetName, const struct FScriptDelegate& OnLoaded);
	void LoadThumbnailAssetAsync(int ProductID, const struct FScriptDelegate& OnLoaded);
	void LoadAssetAsync(int ProductID, const struct FScriptDelegate& OnLoaded);
	class UProductAsset_TA* LoadAssetByName(const struct FName& AssetName);
	class UProductAsset_TA* LoadAsset(int ProductID);
	class UProductAssetLoader_TA* STATIC_GetInstance();
};


// Class TAGame.ProductAssetReferenceBase_TA
// 0x000C (0x006C - 0x0060)
class UProductAssetReferenceBase_TA : public UObject
{
public:
	class UProductAsset_TA*                            ProductAsset;                                             // 0x0060(0x0008)
	int                                                ProductID;                                                // 0x0068(0x0004) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAssetReferenceBase_TA");
		return ptr;
	}

};


// Class TAGame.ProductAssetReference_TA
// 0x000C (0x0078 - 0x006C)
class UProductAssetReference_TA : public UProductAssetReferenceBase_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	class UProductAsset_TA*                            Asset;                                                    // 0x0070(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAssetReference_TA");
		return ptr;
	}

};


// Class TAGame.ProductAssetReferenceBody_TA
// 0x000C (0x0078 - 0x006C)
class UProductAssetReferenceBody_TA : public UProductAssetReferenceBase_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	class UProductAsset_Body_TA*                       BodyAsset;                                                // 0x0070(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAssetReferenceBody_TA");
		return ptr;
	}

};


// Class TAGame.ProductAssetReferencePaintFinish_TA
// 0x000C (0x0078 - 0x006C)
class UProductAssetReferencePaintFinish_TA : public UProductAssetReferenceBase_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	class UProductAsset_PaintFinish_TA*                PaintFinishAsset;                                         // 0x0070(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAssetReferencePaintFinish_TA");
		return ptr;
	}

};


// Class TAGame.ProductAssetReferenceWheel_TA
// 0x000C (0x0078 - 0x006C)
class UProductAssetReferenceWheel_TA : public UProductAssetReferenceBase_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	class UProductAsset_Wheel_TA*                      WheelAsset;                                               // 0x0070(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAssetReferenceWheel_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_AnimatedSkinLabel_TA
// 0x0010 (0x0090 - 0x0080)
class UProductAttribute_AnimatedSkinLabel_TA : public UProductAttribute_TA
{
public:
	struct FString                                     AnimatedLabel;                                            // 0x0080(0x0010) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_AnimatedSkinLabel_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Blueprint_TA
// 0x0008 (0x0088 - 0x0080)
class UProductAttribute_Blueprint_TA : public UProductAttribute_TA
{
public:
	int                                                ProductID;                                                // 0x0080(0x0004)
	int                                                CachedBlueprintSeriesID;                                  // 0x0084(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Blueprint_TA");
		return ptr;
	}


	void __ProductAttribute_Blueprint_TA__OnInit_4B5B362E4C950D9DFF46A48861D08881(class UGFxData_ContainerDrops_TA* _);
	void UpdateBlueprintSeriesID();
	struct FString GetSortLabel();
	struct FString GetTypeHashID();
	struct FString GetHashID();
	struct FString GetOnlineProductAttributeValue();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* OtherAttributes);
};


// Class TAGame.ProductAttribute_BodyCompatibility_TA
// 0x0010 (0x0090 - 0x0080)
class UProductAttribute_BodyCompatibility_TA : public UProductAttribute_TA
{
public:
	TArray<class UProduct_TA*>                         CompatibleBodies;                                         // 0x0080(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_BodyCompatibility_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Certified_TA
// 0x0030 (0x00B0 - 0x0080)
class UProductAttribute_Certified_TA : public UProductAttribute_TA
{
public:
	struct FName                                       ValueKeyName;                                             // 0x0080(0x0008) (Const)
	class UCertifiedStat_TA*                           CertifiedStat;                                            // 0x0088(0x0008) (Transient)
	int                                                StatId;                                                   // 0x0090(0x0004)
	int                                                StatValue;                                                // 0x0094(0x0004)
	struct FScriptDelegate                             __EventRankedUp__Delegate;                                // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Certified_TA");
		return ptr;
	}


	struct FString GetSortLabel();
	struct FString GetHashID();
	struct FString GetTypeHashID();
	struct FString GetDescription();
	struct FString GetRankLabel();
	int GetRank();
	void AddStatValue(int InValue);
	struct FString GetOnlineProductAttributeValue();
	void OnLoaded();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* Attributes);
	class UProductAttribute_Certified_TA* STATIC_CreateInstance(const struct FName& StatName);
	void EventRankedUp(class UProductAttribute_Certified_TA* CertifiedAttribute);
};


// Class TAGame.ProductAttribute_Container_TA
// 0x0004 (0x0084 - 0x0080)
class UProductAttribute_Container_TA : public UProductAttribute_TA
{
public:
	unsigned long                                      bUnlocked : 1;                                            // 0x0080(0x0004) (Edit)
	unsigned long                                      bSkipRoulette : 1;                                        // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Container_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Currency_TA
// 0x0004 (0x0084 - 0x0080)
class UProductAttribute_Currency_TA : public UProductAttribute_TA
{
public:
	int                                                CurrencyID;                                               // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Currency_TA");
		return ptr;
	}


	struct FString GetSortLabel();
	struct FString GetTypeHashID();
	struct FString GetHashID();
	struct FString GetOnlineProductAttributeValue();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* OtherAttributes);
};


// Class TAGame.ProductAttribute_Key_TA
// 0x0004 (0x0084 - 0x0080)
class UProductAttribute_Key_TA : public UProductAttribute_TA
{
public:
	unsigned long                                      bMagicKey : 1;                                            // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Key_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Licensed_TA
// 0x0000 (0x0080 - 0x0080)
class UProductAttribute_Licensed_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Licensed_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_LicenseGroup_TA
// 0x0008 (0x0088 - 0x0080)
class UProductAttribute_LicenseGroup_TA : public UProductAttribute_TA
{
public:
	TEnumAsByte<ELicenseGroup>                         Group;                                                    // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	unsigned long                                      bRequireSameLicenseGroupOnBody : 1;                       // 0x0084(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_LicenseGroup_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Painted_TA
// 0x0004 (0x0084 - 0x0080)
class UProductAttribute_Painted_TA : public UProductAttribute_TA
{
public:
	int                                                PaintID;                                                  // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Painted_TA");
		return ptr;
	}


	TArray<class UProductOverride_TA*> STATIC___ProductAttribute_Painted_TA__ApplyPaintOverridesToObject_1612623541E715DD4B5F4C810A3AD34F(const struct FPaintWithOverride& O);
	bool STATIC___ProductAttribute_Painted_TA__ApplyToSetParameter_91175F1842C59CE6C350428A8D4D19E5(const struct FPaintAttributeParameter& PaintParam);
	struct FString GetSortLabel();
	struct FString GetHashID();
	struct FString GetTypeHashID();
	void ApplyToPlayerVanity(class UPlayerVanity_TA* Vanity, class UProductPaint_TA* Paint);
	void STATIC_ApplyToFXActor(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class AFXActor_TA* FXActor);
	struct FLinearColor STATIC_GetPaintColor(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, TEnumAsByte<EPaintColorVariant> PaintVariant, bool bGammaCorrect);
	void STATIC_ApplyToSetParameter(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, const TScriptInterface<class UISetParameter>& Target, TArray<struct FPaintAttributeParameter>* FilterLocal_85CF20D9448FCB4AAAE8B58CE7077D67);
	void STATIC_OverrideMeshMaterial(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class UMeshComponent* Mesh, int InMaterialIndex, class UMaterialInterface* InMaterial);
	void STATIC_ApplyToBody(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class UCarMeshComponentBase_TA* Mesh);
	void STATIC_ApplyToSkin(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class UCarMeshComponentBase_TA* Mesh);
	void STATIC_ApplyToMesh(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class UMeshComponent* Mesh, TArray<class UMaterialInterface*> InPaintMats);
	void STATIC_ApplyPaintOverridesToObject(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class UObject* Target, TArray<struct FPaintWithOverride>* FilterLocal_DD7A5D31434A1390A5D60A814440F4CD, TArray<class UProductOverride_TA*>* MapManyLocal_83500691401FD39746D9ECB66C0B5773);
	void STATIC_ApplyPaintToObject(class UProductAttribute_PaintSettings_TA* PaintSettings, class UProductPaint_TA* Paint, class UObject* Target, class UProductAsset_TA* Asset);
	void ApplyToObject(class UProductAsset_TA* Asset, class UObject* Target);
	struct FString GetOnlineProductAttributeValue();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* Attributes);
	class UProductAttribute_Painted_TA* STATIC_CreateInstance(int InPaintID);
};


// Class TAGame.ProductAttribute_PaintSettingsUpload_TA
// 0x0010 (0x0090 - 0x0080)
class UProductAttribute_PaintSettingsUpload_TA : public UProductAttribute_TA
{
public:
	TArray<int>                                        ExcludePaints;                                            // 0x0080(0x0010) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_PaintSettingsUpload_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_PlatformExclusive_TA
// 0x0018 (0x0098 - 0x0080)
class UProductAttribute_PlatformExclusive_TA : public UProductAttribute_TA
{
public:
	TArray<TEnumAsByte<EConsoleType>>                  InclusiveConsoles;                                        // 0x0080(0x0010) (Edit, NeedCtorLink)
	class UProduct_TA*                                 ReplacementProduct;                                       // 0x0090(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_PlatformExclusive_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_PreviewOnly_TA
// 0x0000 (0x0080 - 0x0080)
class UProductAttribute_PreviewOnly_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_PreviewOnly_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Quality_TA
// 0x0001 (0x0081 - 0x0080)
class UProductAttribute_Quality_TA : public UProductAttribute_TA
{
public:
	TEnumAsByte<EProductQuality>                       Quality;                                                  // 0x0080(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Quality_TA");
		return ptr;
	}


	struct FString STATIC_ProductQualityToString(TEnumAsByte<EProductQuality> InQuality);
	struct FString GetHashID();
	struct FString GetTypeHashID();
	struct FString GetOnlineProductAttributeValue();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* Attributes);
};


// Class TAGame.ProductAttribute_QualityProductDBOverride_TA
// 0x0001 (0x0081 - 0x0080)
class UProductAttribute_QualityProductDBOverride_TA : public UProductAttribute_TA
{
public:
	TEnumAsByte<EProductQuality>                       QualityOverride;                                          // 0x0080(0x0001) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_QualityProductDBOverride_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Schematic_TA
// 0x0000 (0x0080 - 0x0080)
class UProductAttribute_Schematic_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Schematic_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_SortingLabel_TA
// 0x0044 (0x00C4 - 0x0080)
class UProductAttribute_SortingLabel_TA : public UProductAttribute_TA
{
public:
	struct FString                                     LocalizationKey;                                          // 0x0080(0x0010) (Edit, NeedCtorLink)
	struct FString                                     ReplacementKey;                                           // 0x0090(0x0010) (Edit, NeedCtorLink)
	struct FString                                     ReplacementValue;                                         // 0x00A0(0x0010) (Edit, NeedCtorLink)
	struct FString                                     SortingLabel;                                             // 0x00B0(0x0010) (NeedCtorLink)
	int                                                MaxReplacementSize;                                       // 0x00C0(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_SortingLabel_TA");
		return ptr;
	}


	void ReplaceKeyWithValue(const struct FString& Value, struct FString* InLabel);
	void UpdateSortingLabel(struct FString* InLabel);
};


// Class TAGame.ProductAttribute_SpecialEdition_TA
// 0x0004 (0x0084 - 0x0080)
class UProductAttribute_SpecialEdition_TA : public UProductAttribute_TA
{
public:
	int                                                EditionID;                                                // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_SpecialEdition_TA");
		return ptr;
	}


	bool __ProductAttribute_SpecialEdition_TA__GetOverrideProductID_F6F7F913450A165A710E658CA51709CC(const struct FSpecialEditionConfig& E);
	struct FString GetSortLabel();
	struct FString GetHashID();
	struct FString GetTypeHashID();
	struct FString GetOnlineProductAttributeValue();
	int GetOverrideProductID(int ProductID);
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* Attributes);
	class UProductAttribute_SpecialEdition_TA* STATIC_CreateInstance(int InEditionID, class UProductAttribute_SpecialEdition_TA** ObjectInitializer_6E31DE534079FF786DC41E9CB97CF78A);
};


// Class TAGame.ProductAttribute_TeamEdition_TA
// 0x0004 (0x0084 - 0x0080)
class UProductAttribute_TeamEdition_TA : public UProductAttribute_TA
{
public:
	int                                                Id;                                                       // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_TeamEdition_TA");
		return ptr;
	}


	bool HasLoadedAllAdditionalReferences(class ULoadingProduct_TA* ProductData);
	void LoadAdditionalAssets(const struct FScriptDelegate& Callback);
	bool ShouldLoadAdditionalAssets();
	struct FString GetSortLabel();
	struct FString GetTypeHashID();
	struct FString GetHashID();
	void ApplyPaintOverrides(class UProductPaint_TA* Paint, class UProductAsset_TA* Asset, class UObject* Target);
	void ApplyToObject(class UProductAsset_TA* Asset, class UObject* Target);
	struct FString GetOnlineProductAttributeValue();
	class UProductAttribute_TeamEdition_TA* STATIC_CreateInstance(int TeamID, class UProductAttribute_TeamEdition_TA** ObjectInitializer_A38068514736FE6316CDB7B07C0B8813);
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* OtherAttributes);
};


// Class TAGame.ProductAttribute_TeamEditionUpload_TA
// 0x0010 (0x0090 - 0x0080)
class UProductAttribute_TeamEditionUpload_TA : public UProductAttribute_TA
{
public:
	TArray<int>                                        SupportedTeamEditions;                                    // 0x0080(0x0010) (Edit, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_TeamEditionUpload_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_TeamForcedProduct_TA
// 0x0010 (0x0090 - 0x0080)
class UProductAttribute_TeamForcedProduct_TA : public UProductAttribute_TA
{
public:
	class UProductAssetReference_TA*                   Teams[0x2];                                               // 0x0080(0x0008) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_TeamForcedProduct_TA");
		return ptr;
	}


	int ValidateProduct(int TeamIndex, int ProductID);
	bool CanEquip(int ProductID);
};


// Class TAGame.ProductAttribute_TeamOverride_TA
// 0x0028 (0x00A8 - 0x0080)
class UProductAttribute_TeamOverride_TA : public UProductAttribute_TA
{
public:
	TEnumAsByte<EPaintTeam>                            Team;                                                     // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0088(0x0010) (Edit, NeedCtorLink)
	struct FName                                       AssetName;                                                // 0x0098(0x0008) (Edit)
	class UTexture*                                    Thumbnail;                                                // 0x00A0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_TeamOverride_TA");
		return ptr;
	}


	void STATIC_ApplyToMesh(class UMeshComponent* Mesh, TArray<class UMaterialInterface*>* InMaterials);
	void ApplyToObject(class UProductAsset_TA* Asset, class UObject* Target);
};


// Class TAGame.ProductAttribute_Tiered_TA
// 0x0004 (0x0084 - 0x0080)
class UProductAttribute_Tiered_TA : public UProductAttribute_TA
{
public:
	int                                                TierIndex;                                                // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Tiered_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_TitleID_TA
// 0x0008 (0x0088 - 0x0080)
class UProductAttribute_TitleID_TA : public UProductAttribute_TA
{
public:
	struct FName                                       TitleId;                                                  // 0x0080(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_TitleID_TA");
		return ptr;
	}


	struct FString GetHashID();
	struct FString GetTypeHashID();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* OtherAttributes);
};


// Class TAGame.ProductAttribute_UnlockMethod_TA
// 0x0001 (0x0081 - 0x0080)
class UProductAttribute_UnlockMethod_TA : public UProductAttribute_TA
{
public:
	TEnumAsByte<EUnlockMethod>                         UnlockMethod;                                             // 0x0080(0x0001) (Edit, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_UnlockMethod_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_UserColor_TA
// 0x0004 (0x0084 - 0x0080)
class UProductAttribute_UserColor_TA : public UProductAttribute_TA
{
public:
	struct FColor                                      ColorValue;                                               // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_UserColor_TA");
		return ptr;
	}


	void ApplyToObject(class UProductAsset_TA* Asset, class UObject* Target);
	class UProductAttribute_UserColor_TA* STATIC_CreateInstance(const struct FColor& InColorValue, class UProductAttribute_UserColor_TA** ObjectInitializer_BEEB7D174651F0DC6EA07C91B017F976);
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* OtherAttributes);
};


// Class TAGame.ProductDatabase_Builder_TA
// 0x0004 (0x0064 - 0x0060)
class UProductDatabase_Builder_TA : public UObject
{
public:
	unsigned long                                      bPrime : 1;                                               // 0x0060(0x0004) (Edit)
	unsigned long                                      bClickToBuildMarked : 1;                                  // 0x0060(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductDatabase_Builder_TA");
		return ptr;
	}

};


// Class TAGame.ProductDatabase_TA
// 0x01C4 (0x0224 - 0x0060)
class UProductDatabase_TA : public UObject
{
public:
	TArray<class UProduct_TA*>                         Products_New;                                             // 0x0060(0x0010) (Edit, Const, EditConst, NeedCtorLink)
	TArray<class UProduct_TA*>                         Products_Pristine;                                        // 0x0070(0x0010) (Const, Transient, NeedCtorLink)
	TArray<class UDLCPack_TA*>                         DLCPacks;                                                 // 0x0080(0x0010) (Edit, EditConst, NeedCtorLink)
	TArray<class UProductAsset_TA*>                    AlwaysLoadedAssets;                                       // 0x0090(0x0010) (Edit, EditConst, NeedCtorLink)
	TArray<struct FBodyToEngineAudioPair>              BodyToEngineAudioMap;                                     // 0x00A0(0x0010) (Edit, EditConst, NeedCtorLink)
	TArray<struct FBodyToEngineAudioPair>              BodyToEngineAudioMap_Pristine;                            // 0x00B0(0x0010) (Const, Transient, NeedCtorLink)
	struct FGarageFolderData                           GarageFolderInfo;                                         // 0x00C0(0x0060) (Edit, EditConst)
	struct FMap_Mirror                                 ProductNameToProductID;                                   // 0x0120(0x0050) (Const, Native)
	struct FMap_Mirror                                 ProductNameToProductID_Pristine;                          // 0x0170(0x0050) (Const, Native, Transient)
	struct FMap_Mirror                                 DuplicateToAssetSourceMap;                                // 0x01C0(0x0050) (Const, Native)
	TArray<struct FTemporaryProduct>                   TemporaryProducts;                                        // 0x0210(0x0010) (Transient, Config, NeedCtorLink)
	unsigned long                                      bUseQualityToCheckForOnlineProduct : 1;                   // 0x0220(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductDatabase_TA");
		return ptr;
	}


	bool STATIC_IsOnlineUnlock(TEnumAsByte<EUnlockMethod> UnlockMethod);
	class UOnlineProduct_TA* STATIC_FindProductByProductID(int ProductID, TArray<class UOnlineProduct_TA*>* OnlineProducts);
	class UOnlineProduct_TA* STATIC_FindProductByInstanceID(TArray<class UOnlineProduct_TA*>* OnlineProducts);
	bool STATIC_IsOfflineUnlock(class UProduct_TA* Product);
	bool STATIC_IsDefaultProduct(class UProduct_TA* Product);
	bool STATIC_IsOnlineProduct(class UProduct_TA* Product);
	bool STATIC_ContainsOnlineProducts();
	bool STATIC_StaticIsOnlineQuality(TEnumAsByte<EProductQuality> Quality);
	bool STATIC_IsOnlineID();
	bool DoesPlayerOwnProduct(int ProductID, struct FUniqueNetId* PlayerID);
	void RemoveIncompatibleProducts(TArray<int>* OutProducts);
	void RemoveIncompatibleLoadout(struct U_Types_TA_FLoadoutData* Loadout);
	int ReplaceIncompatibleProduct(int ProductID, TArray<int>* EquippedProducts);
	bool CanEquip(int ProductID, TArray<int>* EquippedProducts);
	void ConvertProductIDs(TArray<int>* ProductIDs, TArray<class UProduct_TA*>* OutProducts);
	class UProductAsset_TA* LoadAssetByName(const struct FName& AssetName);
	void STATIC_TLoadAsset();
	class UProductAsset_TA* LoadAsset(int ProductID);
	TArray<class UProduct_TA*> GetAllProductsBySlot(class UProductSlot_TA* Slot);
	void AllProductsBySlot(class UProductSlot_TA* Slot, class UProduct_TA** Product);
	void AllProducts(class UProduct_TA** Product);
	class UProduct_TA* GetProductByName(const struct FName& ProductName);
	class UProduct_TA* GetProductByHashID(const struct FProductHashID& HashID);
	class UProduct_TA* GetProduct(int Id);
	struct FName GetProductThumbnailName(int ProductID);
	struct FName GetProductName(int ProductID);
	int GetProductID(const struct FName& ProductName);
};


// Class TAGame.ProductEquipProfile_TA
// 0x0060 (0x00C0 - 0x0060)
class UProductEquipProfile_TA : public UObject
{
public:
	class UProductEquipProfileSlot_TA*                 Skin;                                                     // 0x0060(0x0008) (Edit, EditInline)
	class UProductEquipProfileSlot_TA*                 Wheel;                                                    // 0x0068(0x0008) (Edit, EditInline)
	class UProductEquipProfileSlot_TA*                 Boost;                                                    // 0x0070(0x0008) (Edit, EditInline)
	class UProductEquipProfileSlot_TA*                 Antenna;                                                  // 0x0078(0x0008) (Edit, EditInline)
	class UProductEquipProfileSlot_TA*                 Hat;                                                      // 0x0080(0x0008) (Edit, EditInline)
	class UProductEquipProfileSlot_TA*                 PaintFinish;                                              // 0x0088(0x0008) (Edit, EditInline)
	class UProductEquipProfileSlot_TA*                 CustomFinish;                                             // 0x0090(0x0008) (Edit, EditInline)
	class UProductEquipProfileSlot_TA*                 EngineAudio;                                              // 0x0098(0x0008) (Edit, EditInline)
	class UProductEquipProfileSlot_TA*                 SupersonicTrail;                                          // 0x00A0(0x0008) (Edit, EditInline)
	class UProductEquipProfileSlot_TA*                 GoalExplosion;                                            // 0x00A8(0x0008) (Edit, EditInline)
	TArray<class UProductEquipProfileSlot_TA*>         AllSlots;                                                 // 0x00B0(0x0010) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductEquipProfile_TA");
		return ptr;
	}


	int __ProductEquipProfile_TA__GetForcedProducts_BCB28507418EEEB33CAB2EA1E50C8A18(class UProductEquipProfileSlot_TA* FP);
	bool __ProductEquipProfile_TA__GetForcedProducts_BAFB9F554B03C1BA0CD794BC1A9F602B(class UProductEquipProfileSlot_TA* Slot);
	TArray<int> GetForcedProducts(TArray<class UProductEquipProfileSlot_TA*>* FilterLocal_B10DD5934BECBC930EF0D19A2C2F2350, TArray<int>* MapLocal_E4547EFA4ED7C47012CD78AE41842C33);
	bool CanEquip(class UProduct_TA* InProduct);
};


// Class TAGame.ProductEquipProfileSlot_TA
// 0x0000 (0x0060 - 0x0060)
class UProductEquipProfileSlot_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductEquipProfileSlot_TA");
		return ptr;
	}


	bool CanEquip(class UProduct_TA* Product);
};


// Class TAGame.ProductEquipProfileSlot_Custom_TA
// 0x0028 (0x0088 - 0x0060)
class UProductEquipProfileSlot_Custom_TA : public UProductEquipProfileSlot_TA
{
public:
	TEnumAsByte<EEnableSlotCustomization>              SlotCustomization;                                        // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	TArray<class UProductAssetReference_TA*>           WhitelistProducts;                                        // 0x0068(0x0010) (Edit, NeedCtorLink, EditInline)
	TArray<class UProductAssetReference_TA*>           BlacklistProducts;                                        // 0x0078(0x0010) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductEquipProfileSlot_Custom_TA");
		return ptr;
	}


	bool CanEquip(class UProduct_TA* Product);
};


// Class TAGame.ProductEquipProfileSlot_Disabled_TA
// 0x0000 (0x0060 - 0x0060)
class UProductEquipProfileSlot_Disabled_TA : public UProductEquipProfileSlot_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductEquipProfileSlot_Disabled_TA");
		return ptr;
	}


	bool CanEquip(class UProduct_TA* Product);
};


// Class TAGame.ProductEquipProfileSlot_Enabled_TA
// 0x0000 (0x0060 - 0x0060)
class UProductEquipProfileSlot_Enabled_TA : public UProductEquipProfileSlot_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductEquipProfileSlot_Enabled_TA");
		return ptr;
	}


	bool CanEquip(class UProduct_TA* Product);
};


// Class TAGame.ProductEquipProfileSlot_ForcedProduct_TA
// 0x0008 (0x0068 - 0x0060)
class UProductEquipProfileSlot_ForcedProduct_TA : public UProductEquipProfileSlot_TA
{
public:
	class UProductAssetReference_TA*                   ForcedProduct;                                            // 0x0060(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductEquipProfileSlot_ForcedProduct_TA");
		return ptr;
	}


	int GetForcedProductID();
	bool CanEquip(class UProduct_TA* Product);
};


// Class TAGame.ProductFilter_TA
// 0x0000 (0x0060 - 0x0060)
class UProductFilter_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductFilter_TA");
		return ptr;
	}


	void STATIC_AddLogLevel(TEnumAsByte<EProductFilterLogLevel> LogLevel, struct FProductFilter* Filter);
	struct FString STATIC_GetFilterLogString(const struct FProductFilter& Filter);
	TArray<struct FProductHashID> STATIC_GetSortedHashIDs(TEnumAsByte<EProductFilterSortType> SortType, class UIdenticalProductCache_TA* IdenticalProductCache, TArray<class UOnlineProduct_TA*>* OnlineProducts, TArray<class UProduct_TA*>* UnlockedProducts, TArray<int>* FavoritedHashes);
	void STATIC_FilterProducts(struct FProductFilter* Filter);
	TArray<class UProduct_TA*> STATIC_GetDisplayableOfflineProducts(bool bIgnoreLockedProducts, TArray<class UOnlineProduct_TA*>* OnlineProducts, TArray<int>* OfflineProducts);
};


// Class TAGame.ProductLoader_TA
// 0x0050 (0x00C0 - 0x0070)
class UProductLoader_TA : public UComponent
{
public:
	TArray<class UProduct_TA*>                         RemainingProducts;                                        // 0x0070(0x0010) (NeedCtorLink)
	TArray<class UProductAsset_TA*>                    Assets;                                                   // 0x0080(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __EventAssetLoaded__Delegate;                             // 0x0090(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0090(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventAllAssetsLoaded__Delegate;                         // 0x00A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00A8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductLoader_TA");
		return ptr;
	}


	bool __ProductLoader_TA__LoadProducts_A7BE2C5F4EBA885181E980828E9ECB6C(class UProduct_TA* P);
	void __ProductLoader_TA__LoadRemainingProducts_CA7207104760E808A6CBEEB04FC900DE(class UProduct_TA* P);
	bool __ProductLoader_TA__AddEngineAudio_FC6F91764F39EAE5CF5427BFD1406FDD(class UProduct_TA* P);
	class UProduct_TA* __ProductLoader_TA__AddMissingSlots_49AB7E4048F43F4E1D0834B482D89862(class UProductSlot_TA* Slot);
	class UProductSlot_TA* __ProductLoader_TA__AddMissingSlots_259B10284734F3520146339A5264A624(class UProductAsset_TA* Asset);
	class UProductSlot_TA* __ProductLoader_TA__AddMissingSlots_79B48A37411D0E4BDE42F1A9849E7B48(class UProduct_TA* P);
	void CancelLoad();
	void OnAllAssetsLoaded();
	void NotifyWhenAllAssetsLoaded(const struct FScriptDelegate& Callback);
	void AddMissingSlots(TArray<class UProductSlot_TA*>* MapLocal_744F815D46BA22DA754C6B9AE707D9B5, TArray<class UProductSlot_TA*>* MapLocal_E760EC964CF1621D501F4DBD9B9A0E0A, TArray<class UProductSlot_TA*>* ArrayResultLocal_B6C33C254E965A4D025872A54DE81E08, TArray<class UProductSlot_TA*>* DifferenceLocal_FF92F3774CE94ACB80913D915B1C62F3, TArray<class UProduct_TA*>* MapLocal_A368A2DE4685F4214165CD96489E2178, TArray<class UProduct_TA*>* FilterLocal_17EB7D234CFEF785A3BDD9B39CD7154D);
	void AddEngineAudio(class UProductAsset_Body_TA* Body);
	void AddForcedProducts(class UProductAsset_Body_TA* Body, TArray<int>* ArrayResultLocal_67CFEC754A241C2FBC5567A0754F86E5, TArray<class UProduct_TA*>* MapLocal_0FD3DE58462EFC7583A12C86927CE645, TArray<class UProduct_TA*>* FilterLocal_A52F36614426B42233BC3C955B780C5F);
	void RemoveIncompatibleProducts(class UProductAsset_Body_TA* Body, TArray<class UProduct_TA*>* FilterLocal_118EFCD445383ECEFBF9F589B456C923);
	void HandleAssetLoaded(const struct FAssetLoadResult& Result);
	void HandleBodyLoaded(const struct FAssetLoadResult& Result);
	class UProductAsset_TA* AllAssets(class UClass* AssetClass, class UProductAsset_TA** Asset);
	class UProductAsset_TA* GetAsset(class UClass* AssetClass);
	class UProductAsset_TA* GetAssetByID(int ProductID);
	class UProductAsset_TA* GetAssetBySlot(class UProductSlot_TA* Slot);
	void LoadClientLoadout(struct FClientLoadoutData* NewLoadout);
	void LoadLoadout(struct U_Types_TA_FLoadoutData* NewLoadout);
	bool ShouldLoadProduct(class UProduct_TA* Product);
	void LoadRemainingProducts();
	void LoadProducts(TArray<int> ProductIDs, TArray<class UProduct_TA*>* MapLocal_902F1D9446A7709C4AE933A73C697376, TArray<class UProduct_TA*>* FilterLocal_B8F8FFFA4DB21BA358152DBF03D2D0D2);
	void EventAllAssetsLoaded(class UProductLoader_TA* Loader);
	void EventAssetLoaded(class UProductLoader_TA* Loader, class UProductAsset_TA* Asset);
};


// Class TAGame.ProductOverride_TA
// 0x0000 (0x0060 - 0x0060)
class UProductOverride_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_TA");
		return ptr;
	}


	void ApplyToObject(class UObject* Target);
	void STATIC_ApplyOverrides(TArray<class UProductOverride_TA*> Overrides, class UObject* Target);
};


// Class TAGame.ProductOverride_MaterialParameter_TA
// 0x0050 (0x00B0 - 0x0060)
class UProductOverride_MaterialParameter_TA : public UProductOverride_TA
{
public:
	class UMaterialInstanceConstant*                   CopyFromMIC;                                              // 0x0060(0x0008) (Edit)
	struct FName                                       MaterialName;                                             // 0x0068(0x0008) (Edit)
	TArray<struct FFontParameterValue>                 FontParameterValues;                                      // 0x0070(0x0010) (Edit, NeedCtorLink)
	TArray<struct FScalarParameterValue>               ScalarParameterValues;                                    // 0x0080(0x0010) (Edit, NeedCtorLink)
	TArray<struct FTextureParameterValue>              TextureParameterValues;                                   // 0x0090(0x0010) (Edit, NeedCtorLink)
	TArray<struct FVectorParameterValue>               VectorParameterValues;                                    // 0x00A0(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_MaterialParameter_TA");
		return ptr;
	}


	void __ProductOverride_MaterialParameter_TA__ApplyToObject_FA4B81C041F659768AE35FAE7E4F2A82(const struct FAnimatedMaterialMesh& X);
	void ApplyOverrideToMesh(class UMeshComponent* MeshComp);
	void ApplyToObject(class UObject* Target);
};


// Class TAGame.ProductPaint_TA
// 0x00D1 (0x0131 - 0x0060)
class UProductPaint_TA : public UObject
{
public:
	struct FString                                     Label;                                                    // 0x0060(0x0010) (Edit, Const, Localized, EditConst, NeedCtorLink)
	struct FLinearColor                                Colors[0xC];                                              // 0x0070(0x0010) (Edit)
	TEnumAsByte<EPaintFinishType>                      FinishType;                                               // 0x0130(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductPaint_TA");
		return ptr;
	}


	int GetID();
};


// Class TAGame.ProductSlot_TA
// 0x007C (0x00DC - 0x0060)
class UProductSlot_TA : public UObject
{
public:
	struct FString                                     Label;                                                    // 0x0060(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PluralLabel;                                              // 0x0070(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0080(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     OnlineLabel;                                              // 0x0090(0x0010) (Edit, NeedCtorLink)
	int                                                SlotIndex;                                                // 0x00A0(0x0004) (Const, Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class UProduct_TA*                                 DefaultProduct_New;                                       // 0x00A8(0x0008) (Edit)
	class UProductTemplate_TA*                         ProductTemplate;                                          // 0x00B0(0x0008) (Edit, Const, EditInline)
	class UProductAsset_TA*                            ProductAssetTemplate;                                     // 0x00B8(0x0008) (Edit, Const, EditInline)
	class UTexture*                                    Icon;                                                     // 0x00C0(0x0008) (Edit, Const)
	class UTexture*                                    IconLarge;                                                // 0x00C8(0x0008) (Edit, Const)
	unsigned long                                      bReplicated : 1;                                          // 0x00D0(0x0004) (Edit, Const)
	unsigned long                                      bAlwaysCooked : 1;                                        // 0x00D0(0x0004) (Edit, Const)
	unsigned long                                      bDedicatedServerRelevant : 1;                             // 0x00D0(0x0004) (Edit, Const)
	unsigned long                                      bAlwaysLoaded : 1;                                        // 0x00D0(0x0004) (Edit, Const)
	unsigned long                                      bDefaultProductAlwaysLoaded : 1;                          // 0x00D0(0x0004) (Edit, Const)
	unsigned long                                      bAllowLicensedEquip : 1;                                  // 0x00D0(0x0004) (Edit, Const)
	float                                              DropWeight;                                               // 0x00D4(0x0004) (Edit, Const)
	int                                                MatchesRequiredToUnlock;                                  // 0x00D8(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductSlot_TA");
		return ptr;
	}


	int GetDefaultProductID();
};


// Class TAGame.ProductSpecialEdition_TA
// 0x0010 (0x0070 - 0x0060)
class UProductSpecialEdition_TA : public UObject
{
public:
	struct FString                                     Label;                                                    // 0x0060(0x0010) (Edit, Const, Localized, EditConst, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductSpecialEdition_TA");
		return ptr;
	}


	int GetID();
};


// Class TAGame.ProductTemplate_TA
// 0x0090 (0x00F0 - 0x0060)
class UProductTemplate_TA : public UObject
{
public:
	class UProductSlot_TA*                             Slot;                                                     // 0x0060(0x0008) (Edit, EditConst)
	TEnumAsByte<EUnlockMethod>                         UnlockMethod;                                             // 0x0068(0x0001) (Edit, EditConst)
	TEnumAsByte<EProductQuality>                       Quality;                                                  // 0x0069(0x0001) (Edit, EditConst)
	unsigned char                                      UnknownData00[0x6];                                       // 0x006A(0x0006) MISSED OFFSET
	class UProductAsset_Pack_TA*                       Folder;                                                   // 0x0070(0x0008) (Edit)
	class UDLCPack_TA*                                 DLC;                                                      // 0x0078(0x0008) (Const)
	class UClass*                                      StatClass;                                                // 0x0080(0x0008) (Edit)
	class UProduct_TA*                                 RequiredProduct;                                          // 0x0088(0x0008) (Edit)
	struct FProductReplacement2                        PlatformReplacement;                                      // 0x0090(0x0018) (NeedCtorLink)
	TArray<TEnumAsByte<EConsoleType>>                  PlatformExclusive;                                        // 0x00A8(0x0010) (NeedCtorLink)
	TArray<TEnumAsByte<EProductTradeRestriction>>      TradeRestrictions;                                        // 0x00B8(0x0010) (Edit, EditConst, NeedCtorLink)
	TArray<class UProductAttribute_TA*>                Attributes;                                               // 0x00C8(0x0010) (Edit, NeedCtorLink, EditInline)
	TArray<class UProductAttribute_TA*>                ChinaAttributes;                                          // 0x00D8(0x0010) (Edit, EditConst, NeedCtorLink, EditInline)
	unsigned long                                      bLocalized : 1;                                           // 0x00E8(0x0004) (Edit, EditConst)
	unsigned long                                      bAutoGenerateDLCPack : 1;                                 // 0x00E8(0x0004) (Edit)
	unsigned long                                      bLicensed : 1;                                            // 0x00E8(0x0004)
	int                                                SortPriority;                                             // 0x00EC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductTemplate_TA");
		return ptr;
	}


	class UProductAttribute_TA* GetAttribute(class UClass* AttributeClass);
};


// Class TAGame.Product_TA
// 0x0050 (0x0140 - 0x00F0)
class UProduct_TA : public UProductTemplate_TA
{
public:
	struct FName                                       AssetPackageName;                                         // 0x00F0(0x0008) (Edit, Const)
	struct FString                                     AssetPath;                                                // 0x00F8(0x0010) (Edit, Const, NeedCtorLink)
	unsigned long                                      bReplaced : 1;                                            // 0x0108(0x0004) (Edit, Const)
	unsigned long                                      bPack : 1;                                                // 0x0108(0x0004) (Edit, Const)
	unsigned char                                      UnknownData00[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	struct FString                                     Label;                                                    // 0x0110(0x0010) (Const, Transient, NeedCtorLink)
	struct FString                                     AsciiLabel;                                               // 0x0120(0x0010) (Const, Transient, NeedCtorLink)
	struct FString                                     LongLabel;                                                // 0x0130(0x0010) (Const, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Product_TA");
		return ptr;
	}


	bool CanBeArchived();
	bool IsPaintable();
	struct FString GetDisplayLabelSlot();
	TEnumAsByte<EProductQuality> GetQuality();
	bool IsContainerKey();
	bool IsCurrency();
	bool IsBlueprint();
	bool IsContainerUnlocked();
	bool CanEquip();
	bool IsContainer();
	bool IsSchematic();
	bool IsPlatformExclusive();
	bool IsLicensed();
	bool IsExactlyDecryptor();
	bool IsExactlyKey();
	TArray<class UProductAttribute_TA*> GetAttributes();
	TArray<TEnumAsByte<EConsoleType>> GetPlatforms();
	void LoadAssetAsync(const struct FScriptDelegate& Callback);
	class UProductAsset_TA* LoadAsset();
	struct FString GetSortLabel();
	struct FString GetThumbnailAssetPath();
	struct FString GetThumbnailPackageNameForLoad();
	struct FName GetThumbnailPackageName();
	struct FName GetThumbnailAssetName();
	struct FString GetTrademarkLabel();
	struct FProductHashID GetHashID();
	int GetID();
	struct FProductHashID GetPackHashID();
};


// Class TAGame.ProductThumbnail_TA
// 0x0020 (0x0080 - 0x0060)
class UProductThumbnail_TA : public UObject
{
public:
	class UTexture*                                    Texture;                                                  // 0x0060(0x0008) (Transient)
	class UTextureRenderTarget2D*                      RenderTarget;                                             // 0x0068(0x0008) (Transient)
	int                                                RenderCount;                                              // 0x0070(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	struct FDouble                                     LastRenderTime;                                           // 0x0078(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductThumbnail_TA");
		return ptr;
	}


	void ResetRenderCount();
};


// Class TAGame.ProductThumbnailAsset_TA
// 0x0018 (0x0078 - 0x0060)
class UProductThumbnailAsset_TA : public UObject
{
public:
	class UTexture2D*                                  Thumbnail;                                                // 0x0060(0x0008) (Edit, DuplicateTransient)
	class UTexture2D*                                  ColorMaskBackground;                                      // 0x0068(0x0008) (DuplicateTransient)
	class UTexture2D*                                  ThumbnailColorMask;                                       // 0x0070(0x0008) (DuplicateTransient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductThumbnailAsset_TA");
		return ptr;
	}

};


// Class TAGame.ProductThumbnailAsset_Blueprint_TA
// 0x0008 (0x0080 - 0x0078)
class UProductThumbnailAsset_Blueprint_TA : public UProductThumbnailAsset_TA
{
public:
	class UTexture2D*                                  RevealedThumbnail;                                        // 0x0078(0x0008) (Edit, Const, DuplicateTransient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductThumbnailAsset_Blueprint_TA");
		return ptr;
	}

};


// Class TAGame.ProductThumbnailQueue_TA
// 0x004C (0x00AC - 0x0060)
class UProductThumbnailQueue_TA : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x0060(0x0008) (Const, Native, NoExport)
	TArray<int>                                        ThumbnailSizes;                                           // 0x0068(0x0010) (Edit, Const, NeedCtorLink)
	float                                              RenderDelay;                                              // 0x0078(0x0004) (Edit, Config)
	int                                                RenderCountMax;                                           // 0x007C(0x0004) (Edit, Config)
	unsigned long                                      bDebug : 1;                                               // 0x0080(0x0004) (Edit)
	unsigned long                                      bCreatedThumbnailScene : 1;                               // 0x0080(0x0004) (Const, Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	TArray<struct FRenderThumbnailScene>               SceneQue;                                                 // 0x0088(0x0010) (Const, Transient, NeedCtorLink)
	TArray<struct FRenderThumbnailRequest>             Requests;                                                 // 0x0098(0x0010) (Const, Transient, NeedCtorLink)
	int                                                ThumbnailsCreatedSinceLastPurge;                          // 0x00A8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductThumbnailQueue_TA");
		return ptr;
	}


	void CancelRenderThumbnail(class UProductAsset_TA* Asset, class UOnlineProduct_TA* OnlineProduct, TEnumAsByte<EProductThumbnailSize> Size);
	void CancelRenderThumbnails(class UObject* Listener);
	void RenderThumbnail(class UProductAsset_TA* Asset, class UOnlineProduct_TA* OnlineProduct, TEnumAsByte<EProductThumbnailSize> Size, const struct FScriptDelegate& OnRendered);
	class UProductThumbnailQueue_TA* STATIC_GetInstance();
};


// Class TAGame.ProductUtil_TA
// 0x0000 (0x0060 - 0x0060)
class UProductUtil_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductUtil_TA");
		return ptr;
	}


	int STATIC_GetAssetSourcePID(int ProductID);
	bool STATIC_AreDuplicateProducts(class UProduct_TA* ProductA, class UProduct_TA* ProductB);
	void STATIC_RemoveProduct(int ProductID, TArray<class UOnlineProduct_TA*>* OnlineProducts, int* OutNumRemovedProducts);
	TArray<int> STATIC_GetAllProductIDs(TArray<class UOnlineProduct_TA*>* OnlineProducts, TArray<int>* OfflineProducts);
	int STATIC_GetNumLockedOfflineProductsForSlots(TArray<class UProductSlot_TA*>* GarageSlots, TArray<int>* UnlockedProducts);
	TArray<class UOnlineProduct_TA*> STATIC_GetOnlineProductsForSlot(class UProductSlot_TA* Slot, TArray<class UOnlineProduct_TA*>* OnlineProducts);
	bool STATIC_HasOnlineProductsForSlot(class UProductSlot_TA* Slot, TArray<class UOnlineProduct_TA*>* OnlineProducts);
	void STATIC_MapInstanceIDs(TArray<class UOnlineProduct_TA*>* OnlineProducts);
	void STATIC_RemovingMissingInstanceIDs(TArray<class UOnlineProduct_TA*>* OnlineProducts);
	class UOnlineProduct_TA* STATIC_CreateOnlineProduct(struct FOnlineProductData* ProductData);
	void STATIC_ProcessOnlineData(TArray<struct FOnlineProductData>* InProductData, TArray<class UOnlineProduct_TA*>* OutProducts);
	class UOnlineProduct_TA* STATIC_GetFirstOnlineProduct(int ProductID, TArray<class UOnlineProduct_TA*>* OnlineProducts);
	int STATIC_GetProductIDFromOnlineID(TArray<class UOnlineProduct_TA*>* OnlineProducts);
	class UOnlineProduct_TA* STATIC_GetOnlineProductByID(TArray<class UOnlineProduct_TA*>* OnlineProducts);
	TArray<class UOnlineProduct_TA*> STATIC_GetNewProducts(TArray<class UOnlineProduct_TA*>* NewProducts);
	bool STATIC_IsOnlineID();
};


// Class TAGame.PSC_Constrained_TA
// 0x0008 (0x03E8 - 0x03E0)
class UPSC_Constrained_TA : public UParticleSystemComponent
{
public:
	float                                              WorldZ;                                                   // 0x03E0(0x0004) (Edit)
	unsigned long                                      bAttachedRotation : 1;                                    // 0x03E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PSC_Constrained_TA");
		return ptr;
	}

};


// Class TAGame.Pylon_Soccar_TA
// 0x0058 (0x04FC - 0x04A4)
class APylon_Soccar_TA : public APylon
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x04A4(0x0004) MISSED OFFSET
	struct FRotator                                    FieldOrientation;                                         // 0x04A8(0x000C) (Edit, EditConst)
	struct FVector                                     FieldSize;                                                // 0x04B4(0x000C) (Edit, EditConst)
	struct FVector                                     FieldExtent;                                              // 0x04C0(0x000C) (Edit, EditConst)
	struct FVector                                     FieldCenter;                                              // 0x04CC(0x000C) (Edit, EditConst)
	TArray<class UGoal_TA*>                            Goals;                                                    // 0x04D8(0x0010) (Edit, ExportObject, EditConst, Component, NeedCtorLink, EditInline)
	TArray<class APlayerStart*>                        SpawnPoints;                                              // 0x04E8(0x0010) (Edit, EditConst, NeedCtorLink)
	float                                              GroundZ;                                                  // 0x04F8(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Pylon_Soccar_TA");
		return ptr;
	}


	struct FVector ClampPointToField(const struct FVector& V);
	struct FVector ClampToField(const struct FVector& V);
};


// Class TAGame.QuickChatTracker_TA
// 0x0053 (0x00F0 - 0x009D)
class UQuickChatTracker_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	struct FMap_Mirror                                 GroupMessages;                                            // 0x00A0(0x0050) (Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.QuickChatTracker_TA");
		return ptr;
	}


	void HandleChatMessage(class APlayerController_TA* PC, const struct FString& Message, bool bPreset);
	void Construct();
	TArray<struct FQuickChatGroup> GetQuickChatGroups();
	void IncrementQuickChat(const struct FString& Key, int IncrementAmount);
};


// Class TAGame.Ball_Breakout_TA
// 0x00D8 (0x0AD8 - 0x0A00)
class ABall_Breakout_TA : public ABall_TA
{
public:
	TArray<struct FBreakoutDamage>                     DamageAtTime;                                             // 0x0A00(0x0010) (Edit, NeedCtorLink)
	TArray<int>                                        DamageForceLevels;                                        // 0x0A10(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bClearTeamOnDamage : 1;                                   // 0x0A20(0x0004)
	unsigned long                                      bCanDamageOwnTeam : 1;                                    // 0x0A20(0x0004)
	float                                              MinDamageVelocity;                                        // 0x0A24(0x0004)
	float                                              MinDamageTime;                                            // 0x0A28(0x0004)
	int                                                MinImpactSpeedForCharge;                                  // 0x0A2C(0x0004)
	float                                              DoubleTapTime;                                            // 0x0A30(0x0004)
	float                                              ForceAccumDecayPerSecond;                                 // 0x0A34(0x0004)
	float                                              ForceAccumMax;                                            // 0x0A38(0x0004)
	float                                              ForceAccumRecent;                                         // 0x0A3C(0x0004) (Transient)
	unsigned char                                      LastTeamTouch;                                            // 0x0A40(0x0001) (Net)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0A41(0x0007) MISSED OFFSET
	class ACar_TA*                                     LastCarTouch;                                             // 0x0A48(0x0008)
	int                                                LastDamage;                                               // 0x0A50(0x0004)
	float                                              LastDamageTime;                                           // 0x0A54(0x0004)
	int                                                DamageIndex;                                              // 0x0A58(0x0004) (Net)
	float                                              AbsorbedForce;                                            // 0x0A5C(0x0004) (Transient)
	struct FAppliedBreakoutDamage                      AppliedDamage;                                            // 0x0A60(0x0018) (Net)
	struct FScriptDelegate                             __EventDamageIndexChanged__Delegate;                      // 0x0A78(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0A78(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventLastTeamTouchChanged__Delegate;                    // 0x0A90(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0A90(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventHitNoDamage__Delegate;                             // 0x0AA8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0AA8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventAppliedDamage__Delegate;                           // 0x0AC0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0AC0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Ball_Breakout_TA");
		return ptr;
	}


	float GetDamagePercent();
	bool WillDamage();
	int GetDamageIndexForForce(float Force);
	int GetDamageIndexForTime(float Time);
	void Tick(float DeltaTime);
	void SetLastTeamTouch(unsigned char InLastTeamTouch);
	void ForceDamageIndex(int InIndex);
	void SetDamageIndex(int InIndex);
	void OnRigidBodyCollision(const struct FAccumulatedRigidBodyCollision& Collision);
	void OnCarTouch(class ACar_TA* HitCar, TEnumAsByte<EBallHitType> HitType);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventAppliedDamage(class ABall_Breakout_TA* Ball, const struct FAppliedBreakoutDamage& Damage);
	void EventHitNoDamage(class ABall_Breakout_TA* Ball);
	void EventLastTeamTouchChanged(class ABall_Breakout_TA* Ball, unsigned char InLastTeamTouch);
	void EventDamageIndexChanged(class ABall_Breakout_TA* Ball, int InDamageIndex);
};


// Class TAGame.Ball_God_TA
// 0x0088 (0x0A88 - 0x0A00)
class ABall_God_TA : public ABall_TA
{
public:
	float                                              WallBounceSpeed;                                          // 0x0A00(0x0004) (Const)
	float                                              WallBounceBlend;                                          // 0x0A04(0x0004) (Const)
	float                                              WallBounceBackDistance;                                   // 0x0A08(0x0004) (Const)
	float                                              TargetBlendScaleXY;                                       // 0x0A0C(0x0004) (Const)
	float                                              TargetBlendScaleZ;                                        // 0x0A10(0x0004) (Const)
	float                                              TargetSpeed;                                              // 0x0A14(0x0004) (Net)
	float                                              TargetSpeedIncrement;                                     // 0x0A18(0x0004) (Const)
	float                                              TargetSpeedBlend;                                         // 0x0A1C(0x0004) (Const)
	float                                              MaxVelocityPitch;                                         // 0x0A20(0x0004) (Const)
	float                                              LastSpeedIncrementTime;                                   // 0x0A24(0x0004)
	float                                              TargetSpeedIncrementTime;                                 // 0x0A28(0x0004) (Const)
	float                                              MinGlowBrightness;                                        // 0x0A2C(0x0004) (Const)
	float                                              MaxGlowBrightness;                                        // 0x0A30(0x0004) (Const)
	float                                              PulseSpeedScale;                                          // 0x0A34(0x0004) (Const)
	float                                              PulseBrightnessScale;                                     // 0x0A38(0x0004) (Const)
	float                                              PulseMinBrightness;                                       // 0x0A3C(0x0004) (Const)
	float                                              PulseLifetime;                                            // 0x0A40(0x0004) (Const)
	struct FLinearColor                                GlowDefaultColor;                                         // 0x0A44(0x0010) (Const)
	struct FLinearColor                                MaxSpeedColor;                                            // 0x0A54(0x0010) (Const)
	struct FName                                       AudioCurveName;                                           // 0x0A64(0x0008) (Const)
	struct FName                                       AudioIntensityName;                                       // 0x0A6C(0x0008) (Const)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0A74(0x0004) MISSED OFFSET
	class UFXActorEvent_X*                             FXEvent_TeamChanged;                                      // 0x0A78(0x0008) (Const)
	class UFXActorEvent_X*                             FXEvent_IntensityChanged;                                 // 0x0A80(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Ball_God_TA");
		return ptr;
	}


	void __Ball_God_TA__Construct_7D41B8D94A35BF4D91D0309D21077EDA(class AGameEvent_Team_TA* _);
	void __Ball_God_TA__Construct_9F0CF6E6401417A5522BE4B1F9BFBD28(class ABall_TA* Ball);
	struct FVector GetDirectionToTarget();
	struct FVector GetAimLocation();
	float GetTrailIntensity();
	class UGoal_TA* GetGoalTarget();
	int GetTargetTeamIndex();
	struct FLinearColor GetActiveTeamColor();
	bool AtMaxSpeed();
	float GetGlowBrightness();
	float GetTargetSpeedAlpha();
	void UpdatePulse();
	void OnTargetSpeedChanged();
	void TryIncrementTargetSpeed();
	void UpdateColor();
	void OnHitTeamNumChanged();
	void SetCarHitTeamNum(unsigned char TeamNum);
	void OnHitWorld(const struct FVector& HitLoc, const struct FVector& HitNormal, class UPhysicalMaterial* PhysMat);
	void PostBeginPlay();
	void Construct();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class TAGame.Ball_Haunted_TA
// 0x0108 (0x0B08 - 0x0A00)
class ABall_Haunted_TA : public ABall_TA
{
public:
	struct FVector2D                                   SeekPositionRangeLength;                                  // 0x0A00(0x0008)
	struct FVector2D                                   SeekPositionRangeWidth;                                   // 0x0A08(0x0008)
	struct FVector2D                                   SeekPositionRangeHeight;                                  // 0x0A10(0x0008)
	struct FVector2D                                   NextSeekTimeRange;                                        // 0x0A18(0x0008)
	float                                              TrappedHoverHeight;                                       // 0x0A20(0x0004)
	float                                              HorizontalSpeed;                                          // 0x0A24(0x0004)
	float                                              VerticalSpeed;                                            // 0x0A28(0x0004)
	float                                              ArrivalDistance;                                          // 0x0A2C(0x0004)
	float                                              TrappedHorizontalSpeed;                                   // 0x0A30(0x0004)
	float                                              TrappedVerticalSpeed;                                     // 0x0A34(0x0004)
	float                                              TrappedCaptureTime;                                       // 0x0A38(0x0004)
	float                                              HitPhysicsDuration;                                       // 0x0A3C(0x0004)
	unsigned char                                      ReplicatedBeamBrokenValue;                                // 0x0A40(0x0001) (Net)
	unsigned char                                      LastTeamTouch;                                            // 0x0A41(0x0001) (Net)
	unsigned char                                      DeactivatedGoalIndex;                                     // 0x0A42(0x0001) (Net)
	unsigned char                                      TotalActiveBeams;                                         // 0x0A43(0x0001) (Net, Transient)
	struct FVector                                     SeekTarget;                                               // 0x0A44(0x000C) (Transient)
	float                                              NextNeutralTime;                                          // 0x0A50(0x0004) (Transient)
	unsigned long                                      bHitPhysicsActive : 1;                                    // 0x0A54(0x0004) (Transient)
	unsigned long                                      bIsBallBeamed : 1;                                        // 0x0A54(0x0004) (Net, Transient)
	unsigned long                                      bIsTrapped : 1;                                           // 0x0A54(0x0004) (Transient)
	float                                              CurrentCaptureTime;                                       // 0x0A58(0x0004) (Transient)
	float                                              CaptureTimePercentage;                                    // 0x0A5C(0x0004) (Transient)
	float                                              CaptureTimeAtExit;                                        // 0x0A60(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0A64(0x0004) MISSED OFFSET
	class UGoal_TA*                                    ActiveGoal;                                               // 0x0A68(0x0008) (ExportObject, Transient, Component, EditInline)
	int                                                NumActiveBeamsByTeam[0x2];                                // 0x0A70(0x0004) (Transient)
	struct FScriptDelegate                             __EventLastTeamTouchChanged__Delegate;                    // 0x0A78(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0A78(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventIsTrapped__Delegate;                               // 0x0A90(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0A90(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventBeamIsBroken__Delegate;                            // 0x0AA8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0AA8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __ReplicatedBeamBrokenValue__ChangeNotify;                // 0x0AC0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0AC0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __LastTeamTouch__ChangeNotify;                            // 0x0AD8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0AD8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __DeactivatedGoalIndex__ChangeNotify;                     // 0x0AF0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0AF0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Ball_Haunted_TA");
		return ptr;
	}


	void __Ball_Haunted_TA__PostBeginPlay_AE7050564353D7D4BF92DF82211A5651();
	void __Ball_Haunted_TA__PostBeginPlay_2C27A2C64DF691DC084BC89179A9ACC6();
	void __Ball_Haunted_TA__SetGameEvent_DC836DFC4DE730B154E49099F105CF74(class AGameEvent_Soccar_TA* SG);
	void __DeactivatedGoalIndex__ChangeNotifyFunc();
	void __LastTeamTouch__ChangeNotifyFunc();
	void __ReplicatedBeamBrokenValue__ChangeNotifyFunc();
	struct FVector GetBallDestination();
	float GetVerticalVelocity(const struct FVector& Destination);
	struct FVector GetDesiredVelocity();
	void AddHauntedForces();
	void TickAuthoritative();
	void Tick(float DeltaTime);
	void OnGoalExit();
	void OnHitGoal(class UGoal_TA* Goal, const struct FVector& HitLoc);
	void ScoreTrapGoal();
	void SetLastTeamTouch(unsigned char InLastTeamTouch);
	void SetBallIsTrapped(bool bValue, class UGoal_TA* Goal);
	void OnHitWorld(const struct FVector& HitLoc, const struct FVector& HitNormal, class UPhysicalMaterial* PhysMat);
	void SetBallHitData(class ACar_TA* HitCar, const struct FVector& HitLocation, const struct FVector& HitNormal, TEnumAsByte<EBallHitType> HitType);
	void TryBreakBeam(class ACar_TA* HitCar);
	void OnCarTouch(class ACar_TA* HitCar, TEnumAsByte<EBallHitType> HitType);
	void ActivateHitPhysics();
	void SetBallPhased(bool bValue, int TeamIndex);
	void SetBallTarget();
	void SetGameEvent(class AGameEvent_Soccar_TA* SoccarGame);
	void PostBeginPlay();
	void EventBeamIsBroken(class ABall_Haunted_TA* Ball);
	void EventIsTrapped(class ABall_Haunted_TA* Ball, bool bInIsTrapped, class UGoal_TA* Goal);
	void EventLastTeamTouchChanged(class ABall_Haunted_TA* Ball, unsigned char InLastTeamTouch);
};


// Class TAGame.Ball_Trajectory_TA
// 0x0090 (0x0A90 - 0x0A00)
class ABall_Trajectory_TA : public ABall_TA
{
public:
	TArray<struct FVector>                             AccurateTrajectoryPoints;                                 // 0x0A00(0x0010) (NeedCtorLink)
	TArray<struct FVector>                             AllPoints;                                                // 0x0A10(0x0010) (NeedCtorLink)
	float                                              LastCalculateTime;                                        // 0x0A20(0x0004)
	float                                              FixedDeltaTime;                                           // 0x0A24(0x0004)
	float                                              TotalPathDistance;                                        // 0x0A28(0x0004)
	int                                                FrameCount;                                               // 0x0A2C(0x0004)
	int                                                TotalStepCount;                                           // 0x0A30(0x0004)
	int                                                TotalFrameCount;                                          // 0x0A34(0x0004)
	int                                                CurrentStepCount;                                         // 0x0A38(0x0004)
	int                                                StepToPutAPointAt;                                        // 0x0A3C(0x0004)
	struct FVector                                     LastLocation;                                             // 0x0A40(0x000C)
	struct FVector                                     LastVelocity;                                             // 0x0A4C(0x000C)
	struct FVector                                     LastAngularVelocity;                                      // 0x0A58(0x000C)
	struct FRotator                                    LastRotation;                                             // 0x0A64(0x000C)
	struct FTrajectorySetup                            TrajectorySettings;                                       // 0x0A70(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0A84(0x0004) MISSED OFFSET
	class UBallTrajectoryComponent_TA*                 TrajectoryComponentToUpdate;                              // 0x0A88(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Ball_Trajectory_TA");
		return ptr;
	}


	bool CalculateTrajectory(const struct FTrajectorySetup& Settings, float TrajectoryScale, class UBallTrajectoryComponent_TA* InTrajectoryComponent, const struct FVector& StartLocation, const struct FRotator& StartRotation, const struct FVector& LaunchVelocity, const struct FVector& InAngularVelocity, bool bForceUpdate);
	bool CanEverShowTrajectory();
	void PostBeginPlay();
};


// Class TAGame.Vehicle_TA
// 0x00F8 (0x0890 - 0x0798)
class AVehicle_TA : public ARBActor_TA
{
public:
	class UCarMeshComponent_TA*                        CarMesh;                                                  // 0x0798(0x0008) (Edit, Const, ExportObject, Component, EditInline)
	class UVehicleSim_TA*                              VehicleSim;                                               // 0x07A0(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FStickyForceData                            StickyForce;                                              // 0x07A8(0x0008) (Edit)
	struct FAutoFlipData                               AutoFlip;                                                 // 0x07B0(0x0008) (Edit)
	unsigned long                                      bDriving : 1;                                             // 0x07B8(0x0004) (Net, Transient)
	unsigned long                                      bReplicatedHandbrake : 1;                                 // 0x07B8(0x0004) (Const, Net, Transient)
	unsigned long                                      bJumped : 1;                                              // 0x07B8(0x0004) (Transient)
	unsigned long                                      bDoubleJumped : 1;                                        // 0x07B8(0x0004) (Transient)
	unsigned long                                      bOnGround : 1;                                            // 0x07B8(0x0004) (Transient)
	unsigned long                                      bSuperSonic : 1;                                          // 0x07B8(0x0004) (Transient)
	unsigned long                                      bPodiumMode : 1;                                          // 0x07B8(0x0004) (Net, Transient)
	struct FVehicleInputs                              Input;                                                    // 0x07BC(0x0020) (Const, Transient)
	unsigned char                                      ReplicatedThrottle;                                       // 0x07DC(0x0001) (Const, Net, Transient)
	unsigned char                                      ReplicatedSteer;                                          // 0x07DD(0x0001) (Const, Net, Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x07DE(0x0002) MISSED OFFSET
	class AAIController_TA*                            AIController;                                             // 0x07E0(0x0008) (Transient)
	class APlayerController_TA*                        PlayerController;                                         // 0x07E8(0x0008) (Transient)
	class APRI_TA*                                     PRI;                                                      // 0x07F0(0x0008) (Transient)
	int                                                VehicleUpdateTag;                                         // 0x07F8(0x0004) (Const, Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x07FC(0x0004) MISSED OFFSET
	struct FCarInteractionData                         CarInteraction;                                           // 0x0800(0x0010)
	struct FVector                                     LocalCollisionOffset;                                     // 0x0810(0x000C) (Const, Transient)
	struct FVector                                     LocalCollisionExtent;                                     // 0x081C(0x000C) (Const, Transient)
	int                                                LastBallTouchFrame;                                       // 0x0828(0x0004) (Transient)
	int                                                LastBallImpactFrame;                                      // 0x082C(0x0004) (Transient)
	class ACarComponent_Boost_TA*                      BoostComponent;                                           // 0x0830(0x0008) (Transient)
	class ACarComponent_Dodge_TA*                      DodgeComponent;                                           // 0x0838(0x0008) (Transient)
	class ACarComponent_AirControl_TA*                 AirControlComponent;                                      // 0x0840(0x0008) (Transient)
	class ACarComponent_Jump_TA*                       JumpComponent;                                            // 0x0848(0x0008) (Transient)
	class ACarComponent_DoubleJump_TA*                 DoubleJumpComponent;                                      // 0x0850(0x0008) (Transient)
	class UPitchTekDrawingComponent_TA*                PitchTekComponent;                                        // 0x0858(0x0008) (Const, ExportObject, Component, EditInline)
	class ULocalPlayerAudioParamsComponent_TA*         LocalPlayerAudioParamsComponent;                          // 0x0860(0x0008) (ExportObject, Transient, Component, EditInline)
	float                                              TimeBelowSupersonicSpeed;                                 // 0x0868(0x0004) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x086C(0x0004) MISSED OFFSET
	class UNetworkConfig_TA*                           NetworkConfig;                                            // 0x0870(0x0008)
	struct FScriptDelegate                             __EventPRIChanged__Delegate;                              // 0x0878(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0878(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Vehicle_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void DumpVehicleSetup();
	void ForceNetPacketIfNearBall();
	void VehicleSettingsUpdated();
	void OnSuperSonicChanged();
	void OnGroundChanged();
	bool IsHitLocationWithinForwardAngle(const struct FVector& HitLocation, float YawAngleDegrees, float PitchAngleDegrees);
	bool IsCarHitAngleWithinForwardAngleCurve(class AVehicle_TA* OtherCar, const struct FVector& HitLocation, const struct FInterpCurveFloat& YawAngleDegreesCurve, const struct FInterpCurveFloat& PitchAngleDegreesCurve);
	bool IsCarHitAngleWithinForwardAngle(class AVehicle_TA* OtherCar, const struct FVector& HitLocation, float YawAngleDegrees, float PitchAngleDegrees);
	bool IsCarWithinForwardEllipticalCone(class AVehicle_TA* OtherCar, float YawAngleDegrees, float PitchAngleDegrees);
	float GetForwardSpeed();
	float GetTimeOffGround();
	float GetTimeOnGround();
	struct FVector GetGroundNormal();
	bool IsOnWall();
	bool IsOnGround();
	int GetNumWheelWorldContacts();
	int GetNumWheelContacts();
	void ZeroMovementVariables();
	void SetVehicleInput(const struct FVehicleInputs& NewInput);
	void EnablePodiumMode();
	void SetDriving(bool bDrive);
	void InitAudioParams();
	void OnPRIChanged();
	void OnControllerChanged();
	void UnPossessed();
	void PossessedBy(class AController* C);
	void ReplicatedEvent(const struct FName& VarName);
	void EventPRIChanged(class AVehicle_TA* Vehicle);
};


// Class TAGame.RBHistory_TA
// 0x0030 (0x00A0 - 0x0070)
class URBHistory_TA : public UComponent
{
public:
	TArray<int>                                        FrameSnapshots;                                           // 0x0070(0x0010) (Const, Transient, NeedCtorLink)
	TArray<unsigned long>                              ServerSnapshots;                                          // 0x0080(0x0010) (Const, Transient, NeedCtorLink)
	TArray<struct FRBPhysicsSnapshot>                  RBPhysicsSnapshots;                                       // 0x0090(0x0010) (Const, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RBHistory_TA");
		return ptr;
	}

};


// Class TAGame.RBVehicleHistory_TA
// 0x0048 (0x00E8 - 0x00A0)
class URBVehicleHistory_TA : public URBHistory_TA
{
public:
	float                                              InputFadeTime;                                            // 0x00A0(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	TArray<struct FRBVehicleSnapshot>                  RBVehicleSnapshots;                                       // 0x00A8(0x0010) (Const, Transient, Component, NeedCtorLink)
	TArray<struct FCarComponentHistory>                ComponentHistories;                                       // 0x00B8(0x0010) (Const, Transient, NeedCtorLink)
	struct FVehicleInputs                              BackupVehicleInputs;                                      // 0x00C8(0x0020) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RBVehicleHistory_TA");
		return ptr;
	}

};


// Class TAGame.RBVehiclePart_TA
// 0x0018 (0x0280 - 0x0268)
class ARBVehiclePart_TA : public AActor
{
public:
	int                                                MaxVehicleParts;                                          // 0x0268(0x0004) (Edit, Const)
	unsigned char                                      UnknownData00[0x4];                                       // 0x026C(0x0004) MISSED OFFSET
	class UAkParamGroup*                               Ak;                                                       // 0x0270(0x0008) (ExportObject, Component, EditInline)
	class UImpactEffectsComponent_TA*                  ImpactEffectsComponent;                                   // 0x0278(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RBVehiclePart_TA");
		return ptr;
	}


	void SetCollisionComponent(class UPrimitiveComponent* PrimComp);
	void CopyPrimitive(class UPrimitiveComponent* From, class UPrimitiveComponent* To);
	class UVehiclePartSkeletalMeshComponent_TA* CopySkeletalMesh(class USkeletalMeshComponent* InComponent, class UPhysicsAsset* CollisionAsset);
	class UVehiclePartStaticMeshComponent_TA* CopyStaticMesh(class UStaticMeshComponent* InComponent, class URB_BodySetup* BodySetup);
	void RemoveOldVehiclePart();
	void InitFX();
	void PostBeginPlay();
};


// Class TAGame.Replay_TA
// 0x0250 (0x02B0 - 0x0060)
class UReplay_TA : public UObject
{
public:
	struct FString                                     ReplayName;                                               // 0x0060(0x0010) (NeedCtorLink, DataBinding)
	int                                                EngineVersion;                                            // 0x0070(0x0004) (Const, Transient)
	int                                                LicenseeVersion;                                          // 0x0074(0x0004) (Const, Transient)
	int                                                NetVersion;                                               // 0x0078(0x0004) (Const, Transient)
	int                                                ReplayVersion;                                            // 0x007C(0x0004) (Const)
	int                                                ReplayLastSaveVersion;                                    // 0x0080(0x0004) (Const)
	int                                                GameVersion;                                              // 0x0084(0x0004) (Const)
	int                                                BuildID;                                                  // 0x0088(0x0004) (Const)
	int                                                Changelist;                                               // 0x008C(0x0004) (Const)
	struct FString                                     BuildVersion;                                             // 0x0090(0x0010) (Const, NeedCtorLink)
	int                                                ReserveMegabytes;                                         // 0x00A0(0x0004) (Config)
	float                                              RecordFPS;                                                // 0x00A4(0x0004) (Const, Config, DataBinding)
	float                                              KeyframeDelay;                                            // 0x00A8(0x0004) (Const, Config)
	int                                                MaxChannels;                                              // 0x00AC(0x0004) (Const, Config)
	int                                                MaxReplaySizeMB;                                          // 0x00B0(0x0004) (Const, Config)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	TArray<class UClass*>                              PlaybackClasses;                                          // 0x00B8(0x0010) (Transient, NeedCtorLink)
	TArray<class UClass*>                              IgnoreClasses;                                            // 0x00C8(0x0010) (Transient, NeedCtorLink)
	struct FString                                     FilePath;                                                 // 0x00D8(0x0010) (Transient, NeedCtorLink, DataBinding)
	struct FString                                     Id;                                                       // 0x00E8(0x0010) (NeedCtorLink, DataBinding)
	struct FName                                       MapName;                                                  // 0x00F8(0x0008) (Const, DataBinding)
	struct FString                                     Date;                                                     // 0x0100(0x0010) (Const, NeedCtorLink, DataBinding)
	int                                                NumFrames;                                                // 0x0110(0x0004) (Const, DataBinding)
	struct FName                                       MatchType;                                                // 0x0114(0x0008) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	struct FString                                     PlayerName;                                               // 0x0120(0x0010) (NeedCtorLink, DataBinding)
	unsigned long                                      bFileCorrupted : 1;                                       // 0x0130(0x0004) (Const, DataBinding)
	unsigned long                                      bForceKeyframe : 1;                                       // 0x0130(0x0004) (Const, Transient)
	unsigned long                                      bLoadedNetPackages : 1;                                   // 0x0130(0x0004) (Const, Transient)
	unsigned long                                      bDebug : 1;                                               // 0x0130(0x0004) (Edit, Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0134(0x0004) MISSED OFFSET
	TArray<unsigned char>                              Data;                                                     // 0x0138(0x0010) (Const, Transient, NeedCtorLink)
	TArray<struct FReplayKeyframe>                     KeyFrames;                                                // 0x0148(0x0010) (Const, Transient, NeedCtorLink)
	TEnumAsByte<EReplayState>                          ReplayState;                                              // 0x0158(0x0001) (Const, Transient)
	unsigned char                                      UnknownData03[0x3];                                       // 0x0159(0x0003) MISSED OFFSET
	int                                                CurrentFrame;                                             // 0x015C(0x0004) (Const, Transient)
	int                                                NextKeyframe;                                             // 0x0160(0x0004) (Const, Transient)
	float                                              CurrentTime;                                              // 0x0164(0x0004) (Const, Transient)
	TArray<struct FReplayActorChannel>                 Channels;                                                 // 0x0168(0x0010) (Const, Transient, NeedCtorLink)
	struct FMap_Mirror                                 ChannelsMap;                                              // 0x0178(0x0050) (Const, Native, Transient)
	class UPackageMap*                                 PackageMap;                                               // 0x01C8(0x0008) (Const, Transient)
	TArray<struct FName>                               Levels;                                                   // 0x01D0(0x0010) (Const, Transient, NeedCtorLink)
	TArray<int>                                        FreeChannels;                                             // 0x01E0(0x0010) (Const, Transient, NeedCtorLink)
	float                                              AccumulatedDeltaTime;                                     // 0x01F0(0x0004) (Const, Transient)
	float                                              TimeToSkipTo;                                             // 0x01F4(0x0004) (Const, Transient)
	int                                                FrameToSkipTo;                                            // 0x01F8(0x0004) (Const, Transient)
	int                                                PlayersOnlyTicks;                                         // 0x01FC(0x0004) (Const, Transient)
	struct FPointer                                    WriterAr;                                                 // 0x0200(0x0008) (Const, Native, Transient)
	struct FPointer                                    ReaderAr;                                                 // 0x0208(0x0008) (Const, Native, Transient)
	TArray<struct FReplayLogItem>                      Logs;                                                     // 0x0210(0x0010) (Transient, NeedCtorLink)
	TArray<struct FTimelineKeyframe>                   TimelineKeyframes;                                        // 0x0220(0x0010) (Transient, NeedCtorLink, DataBinding)
	class UCameraTrack_TA*                             CameraTrack;                                              // 0x0230(0x0008) (Transient)
	struct FScriptDelegate                             __EventPlaybackStopped__Delegate;                         // 0x0238(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0238(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSpawned__Delegate;                                 // 0x0250(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0250(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPreTimeSkip__Delegate;                             // 0x0268(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0268(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPostTimeSkip__Delegate;                            // 0x0280(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0280(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPlayedFrame__Delegate;                             // 0x0298(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0298(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Replay_TA");
		return ptr;
	}


	float GetPlaybackTime();
	bool STATIC_IsFromBeforeGameVersion(unsigned char BeforeGameVersion);
	bool STATIC_IsFromBeforeReplayVersion(unsigned char BeforeReplayVersion);
	struct FName GetMapToLoad();
	void SetReplayName(const struct FString& NewName);
	void RemoveTimelineKeyframe(int KeyframeIndex);
	void AddTimelineKeyframe(const struct FName& Type, int frame);
	void STATIC_ReplayLog(class UObject* Context, const struct FString& Text);
	void TrimData(int FirstKeyframe, int FirstFrame);
	class UReplay_TA* CreateCopy(float StartTime);
	void ImportReplay(const struct FString& Path);
	void ExportReplay(const struct FString& Path);
	void SerializeReplay(TArray<unsigned char>* OutBytes);
	void SkipToFrame(int frame, bool bFlush);
	void SkipToTime(float Time, bool bFlush);
	class AActor* GetPlaybackActor(const struct FName& RecordedActorName);
	float GetReplayTimeSeconds();
	void StopPlayback();
	void StartPlaybackAtFrame(int StartFrame);
	void StartPlaybackAtTimeSeconds(float StartTime);
	void StopRecord();
	void StartRecord();
	void Tick(float DeltaTime);
	void AllReplayActors(class UClass* BaseClass, class AActor** Actor);
	void PreExport();
	void EventPlayedFrame(class UReplay_TA* Replay);
	void EventPostTimeSkip(class UReplay_TA* Replay);
	void EventPreTimeSkip(class UReplay_TA* Replay);
	void EventSpawned(class UReplay_TA* Replay, class AActor* A);
	void EventPlaybackStopped(class UReplay_TA* Replay);
};


// Class TAGame.ReplayComponent_TA
// 0x0007 (0x00A4 - 0x009D)
class UReplayComponent_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	unsigned long                                      bRecording : 1;                                           // 0x00A0(0x0004) (Const, Transient)
	unsigned long                                      bPlaying : 1;                                             // 0x00A0(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ReplayComponent_TA");
		return ptr;
	}

};


// Class TAGame.ReplayManager_TA
// 0x00D8 (0x0138 - 0x0060)
class UReplayManager_TA : public UObject
{
public:
	struct FString                                     ReplaysPath;                                              // 0x0060(0x0010) (Edit, Const, Config, NeedCtorLink)
	TArray<struct FPointer>                            ExportTasks;                                              // 0x0070(0x0010) (Native, Transient)
	TArray<struct FPointer>                            ClassTasks;                                               // 0x0080(0x0010) (Native, Transient)
	TArray<struct FPointer>                            ImportTasks;                                              // 0x0090(0x0010) (Native, Transient)
	struct FPointer                                    HeadersCountTask;                                         // 0x00A0(0x0008) (Native, Transient)
	TArray<struct FPointer>                            HeaderLoadTasks;                                          // 0x00A8(0x0010) (Native, Transient)
	TArray<struct FReplayExportCallbackData>           ExportCallbacks;                                          // 0x00B8(0x0010) (Transient, NeedCtorLink)
	TArray<struct FReplayImportCallbackData>           ImportCallbacks;                                          // 0x00C8(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventPreLoadReplay__Delegate;                           // 0x00D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventExportFinished__Delegate;                          // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventImportFinished__Delegate;                          // 0x0108(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0108(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventHeadersLoaded__Delegate;                           // 0x0120(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0120(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ReplayManager_TA");
		return ptr;
	}


	void PlayReplay(class UReplay_TA* Replay, const struct FString& Map, const struct FString& URL);
	void PlayReplayFile(const struct FString& FilePath, const struct FString& Map, const struct FString& URL);
	void PlayReplayID(const struct FString& ReplayID, const struct FString& Map, const struct FString& URL);
	void SetTick(bool bTick);
	void Tick(float DeltaTime);
	void DeleteReplayFile(const struct FString& ReplayID);
	void ExportReplayBytes(const struct FString& ReplayID, const struct FScriptDelegate& Callback, TArray<unsigned char>* Bytes);
	void ExportReplay(class UReplay_TA* Replay, const struct FScriptDelegate& Callback);
	void ImportReplayFile(const struct FString& FilePath, const struct FScriptDelegate& Callback, bool bSyncronous);
	void LoadHeaderFile(const struct FString& FilePath, const struct FScriptDelegate& Callback);
	void LoadHeaders(const struct FScriptDelegate& Callback);
	struct FString GetReplayFolder();
	void Init();
	class UReplayManager_TA* STATIC_GetInstance();
	bool IsExporting();
	void EventHeadersLoaded(class UReplayManager_TA* Manager, TArray<struct FReplayHeaderLoadResult> Headers, class UError* Error);
	void EventImportFinished(class UReplayManager_TA* Manager, class UReplay_TA* Replay, class UError* Error);
	void EventExportFinished(class UReplayManager_TA* Manager, const struct FString& Id, class UError* Error);
	void EventPreLoadReplay(class UReplayManager_TA* Manager, class UReplay_TA* Replay);
};


// Class TAGame.RLBot_SessionRecorder_TA
// 0x0030 (0x0298 - 0x0268)
class ARLBot_SessionRecorder_TA : public AActor
{
public:
	int                                                MaxRecordSizeMB;                                          // 0x0268(0x0004) (Edit, Config)
	unsigned char                                      UnknownData00[0x4];                                       // 0x026C(0x0004) MISSED OFFSET
	TArray<unsigned char>                              Data;                                                     // 0x0270(0x0010) (NeedCtorLink)
	struct FPointer                                    Archive;                                                  // 0x0280(0x0008) (Native)
	TArray<struct FPlayerActorIDPair>                  PlayerActorIDMap;                                         // 0x0288(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RLBot_SessionRecorder_TA");
		return ptr;
	}


	void Destroyed();
	void StopRecording();
	void StartRecording();
};


// Class TAGame.RLBot_Util_TA
// 0x0024 (0x0084 - 0x0060)
class URLBot_Util_TA : public UObject
{
public:
	struct FString                                     ControllerURL;                                            // 0x0060(0x0010) (Config, NeedCtorLink)
	struct FString                                     OutputFilePath;                                           // 0x0070(0x0010) (Config, NeedCtorLink)
	float                                              PacketSendRate;                                           // 0x0080(0x0004) (Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RLBot_Util_TA");
		return ptr;
	}


	void __RLBot_Util_TA__Init_F69D68C54CD0B786F9D8E0B429E1D797(const struct FString& _);
	void SetPaused(bool bPaused);
	void EndMatch(class AGameEvent_TA* GameEvent);
	void HandleReplayFrame(class UReplay_TA* Replay);
	void ReplayFinished();
	void ExportReplay(const struct FString& Path);
	void HandleHitBall(class ACar_TA* Car, class ABall_TA* Ball, const struct FVector& HitLocation, const struct FVector& HitNormal);
	class AAIController_TA* SpawnCustomBot(class AGameEvent_TA* G, const struct FString& BotName, unsigned char Team, const struct FBotLoadout& Loadout);
	class AAIController_TA* SpawnClassicBot(class AGameEvent_TA* G, const struct FString& BotName, unsigned char Team, float Skill, const struct FBotLoadout& Loadout);
	class AAIController_TA* SpawnBot(class AGameEvent_TA* G, const struct FString& BotName, unsigned char TeamNum, class UProductAsset_Bot_TA* Asset, const struct FBotLoadout& Loadout);
	class UProductAsset_Bot_TA* GetBotAsset(const struct FString& BotName);
	int GetTeamScore(class AGameEvent_TA* G, int Team);
	int GetDisplaySeconds(class AGameEvent_TA* G);
	bool GetOvertime(class AGameEvent_TA* G);
	bool GetBallHasBeenHit(class AGameEvent_TA* G);
	void PreLoadMap();
	void PostLoadMap();
	void StopMatch();
	void StartMatch();
	void Init();
	class URLBot_Util_TA* STATIC_GetInstance();
};


// Class TAGame.RPC_AddBuild_TA
// 0x0068 (0x0168 - 0x0100)
class URPC_AddBuild_TA : public URPC_X
{
public:
	int                                                Id;                                                       // 0x0100(0x0004)
	int                                                CL;                                                       // 0x0104(0x0004)
	struct FString                                     Branch;                                                   // 0x0108(0x0010) (NeedCtorLink)
	struct FString                                     BuildVersion;                                             // 0x0118(0x0010) (NeedCtorLink)
	struct FString                                     Label;                                                    // 0x0128(0x0010) (NeedCtorLink)
	struct FString                                     FeaturesFilter;                                           // 0x0138(0x0010) (NeedCtorLink)
	struct FString                                     Configuration;                                            // 0x0148(0x0010) (NeedCtorLink)
	struct FString                                     Environment;                                              // 0x0158(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_AddBuild_TA");
		return ptr;
	}


	void Init();
};


// Class TAGame.SampleHistory_TA
// 0x0070 (0x00E0 - 0x0070)
class USampleHistory_TA : public UComponent
{
public:
	class USampleRecordSettings_TA*                    RecordSettings;                                           // 0x0070(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FString                                     Title;                                                    // 0x0078(0x0010) (Edit, NeedCtorLink)
	TArray<struct FGraphSummaryMethod>                 Summaries;                                                // 0x0088(0x0010) (Edit, NeedCtorLink)
	float                                              YMin;                                                     // 0x0098(0x0004) (Edit)
	float                                              YMax;                                                     // 0x009C(0x0004) (Edit)
	float                                              GoodValue;                                                // 0x00A0(0x0004) (Edit)
	float                                              BadValue;                                                 // 0x00A4(0x0004) (Edit)
	float                                              BaseValue;                                                // 0x00A8(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<struct FSample>                             Samples;                                                  // 0x00B0(0x0010) (NeedCtorLink)
	int                                                SampleIndex;                                              // 0x00C0(0x0004)
	float                                              AccumTime;                                                // 0x00C4(0x0004)
	struct FSample                                     PendingSample;                                            // 0x00C8(0x0008)
	unsigned long                                      bHasPendingSample : 1;                                    // 0x00D0(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	class UStatGraphDrawer_TA*                         Drawer;                                                   // 0x00D8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SampleHistory_TA");
		return ptr;
	}


	void Tick(float DeltaTime);
	void AddSample(float NewValue);
	float GetSummaryValue(TEnumAsByte<EGraphSummaryType> Type, float MaxSampleAge, bool bAbsoluteValue);
	class USampleHistory_TA* SetBaseValue(float InBaseValue);
	class USampleHistory_TA* SetGoodBadValues(float InGoodValue, float InBadValue);
	class USampleHistory_TA* SetGraphMaxMin(float MaxValue, float MinValue);
	class USampleHistory_TA* AddSummary(TEnumAsByte<EGraphSummaryType> Type, float MaxSampleAge, bool bAbsValue, struct FGraphSummaryMethod* StructInitializer_EF43700D425F41A7AE7AD3BE00ED796F);
	class USampleHistory_TA* SetTitle(const struct FString& InTitle);
};


// Class TAGame.SampleRecordSettings_TA
// 0x0008 (0x0078 - 0x0070)
class USampleRecordSettings_TA : public UComponent
{
public:
	float                                              MaxSampleAge;                                             // 0x0070(0x0004) (Edit)
	float                                              RecordRate;                                               // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SampleRecordSettings_TA");
		return ptr;
	}

};


// Class TAGame.SaveGameManager_TA
// 0x0090 (0x00F0 - 0x0060)
class USaveGameManager_TA : public UObject
{
public:
	class USaveObjectManager_TA*                       SaveObjectManager;                                        // 0x0060(0x0008)
	struct FString                                     SaveDataID;                                               // 0x0068(0x0010) (NeedCtorLink)
	class ULocalPlayer_TA*                             Player;                                                   // 0x0078(0x0008) (Transient)
	class USaveData_TA*                                SaveData;                                                 // 0x0080(0x0008) (ExportObject, NeedCtorLink, EditInline)
	class UObjectProvider*                             SaveObjectProvider;                                       // 0x0088(0x0008) (ExportObject, Transient, Component, EditInline)
	float                                              MinTimeBetweenSaves;                                      // 0x0090(0x0004) (Config)
	float                                              LastSaveTime;                                             // 0x0094(0x0004) (Transient)
	class UError*                                      DataLoadError;                                            // 0x0098(0x0008) (Transient)
	class UError*                                      DataSaveError;                                            // 0x00A0(0x0008) (Transient)
	unsigned long                                      bDataLoaded : 1;                                          // 0x00A8(0x0004) (Transient)
	unsigned long                                      bUserIgnoredLoadFailure : 1;                              // 0x00A8(0x0004) (Transient)
	unsigned long                                      bEnableSaving : 1;                                        // 0x00A8(0x0004) (Transient)
	unsigned long                                      bDisableSaveOSS : 1;                                      // 0x00A8(0x0004) (Transient)
	unsigned long                                      bDirty : 1;                                               // 0x00A8(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	struct FString                                     SaveFolderPath;                                           // 0x00B0(0x0010) (Config, NeedCtorLink)
	struct FScriptDelegate                             __EventDataLoaded__Delegate;                              // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventDataSaved__Delegate;                               // 0x00D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveGameManager_TA");
		return ptr;
	}


	bool DeleteMount();
	void HandleNoSpaceSystemDialogComplete(bool bContinueWithouSaving);
	void Save_Internal();
	void Save_Timer();
	void HandleDataSaved(const struct FSaveObjectResult& Result);
	void ForceSave();
	void Save();
	bool CanSave();
	void UserIgnoredLoadFailure(bool bValue);
	void HandleProceedWithDefaultSaveData(struct FLoadObjectResult* StructInitializer_9ADB915741C2395110A3DAB1D78E8D49);
	void DisableSaving();
	void EnableSaving();
	void HandleDataLoaded(const struct FLoadObjectResult& Result);
	void OnLocalSaveDataDisabled(struct FLoadObjectResult* StructInitializer_7838DF084E27B701D14167A35325E200);
	void Load();
	void NotifyWhenLoaded(const struct FScriptDelegate& Callback);
	void HandlePlayerLoginStatusChange(class UOnlinePlayer_X* OnlinePlayer);
	void Init(class ULocalPlayer_TA* InPlayer);
	void Construct();
	struct FString GetSaveFileName(const struct FString& SaveFolder);
	struct FString GetSaveFolder();
	struct FString GetSaveEnvFolder();
	void EventDataSaved(class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError* Error);
	void EventDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError* Error);
};


// Class TAGame.SaveObjectManager_TA
// 0x00D8 (0x0138 - 0x0060)
class USaveObjectManager_TA : public UObject
{
public:
	struct FPointer                                    VfTable_FTickableObject;                                  // 0x0060(0x0008) (Const, Native, NoExport)
	TArray<struct FPointer>                            ImportTasks;                                              // 0x0068(0x0010) (Native, Transient, AlwaysInit)
	TArray<struct FScriptDelegate>                     ImportCallbacks;                                          // 0x0078(0x0010) (Transient, NeedCtorLink)
	TArray<struct FPointer>                            ExportTasks;                                              // 0x0088(0x0010) (Native, Transient, AlwaysInit)
	TArray<struct FPointer>                            ListFilesTasks;                                           // 0x0098(0x0010) (Native, Transient, AlwaysInit)
	TArray<struct FPointer>                            DeleteTasks;                                              // 0x00A8(0x0010) (Native, Transient, AlwaysInit)
	TArray<struct FScriptDelegate>                     ListFilesCallbacks;                                       // 0x00B8(0x0010) (Transient, NeedCtorLink)
	int                                                KeepNewestSaveFileCount;                                  // 0x00C8(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	class UObject*                                     SaveData;                                                 // 0x00D0(0x0008)
	struct FString                                     SavePath;                                                 // 0x00D8(0x0010) (NeedCtorLink)
	int                                                ControllerId;                                             // 0x00E8(0x0004)
	unsigned long                                      bSaving : 1;                                              // 0x00EC(0x0004) (Transient)
	unsigned long                                      bPlayerSaveData : 1;                                      // 0x00EC(0x0004) (Edit)
	struct FScriptDelegate                             __EventDataLoaded__Delegate;                              // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventDataSaved__Delegate;                               // 0x0108(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0108(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnFilesListed__Delegate;                                // 0x0120(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0120(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveObjectManager_TA");
		return ptr;
	}


	void CancelGetHeaders(const struct FScriptDelegate& Callback);
	void GetHeaders(int InControllerID, const struct FString& InPath, const struct FString& InPattern, const struct FScriptDelegate& Callback);
	void SetNewFileSaveCount(int Count);
	void HandleSaveResult(TEnumAsByte<ESaveGameResult> Result, struct FSaveObjectResult* StructInitializer_2537196246C9771911EE9A907407B151);
	class UError* GetSaveError(TEnumAsByte<ESaveGameResult> Result);
	class UError* GetLoadError(TEnumAsByte<EBasicLoadResult> InResult);
	void LoadAsync(int ControllerIndex, class UObject* RootObj, const struct FString& PathName, bool bExactFileMatch, const struct FScriptDelegate& Callback);
	struct FLoadObjectResult Load(int InControllerID, class UObject* RootObj, const struct FString& PathName, bool bExactFileMatch);
	void SaveAsync(int InControllerID, class UObject* RootObj, const struct FString& PathName, bool bExactFileMatch);
	struct FSaveObjectResult Save(int InControllerID, class UObject* RootObj, const struct FString& PathName, bool bExactFileMatch);
	void DecrementSaveManagerCounter();
	void IncrementSaveManagerCounter();
	int STATIC_GetSaveDataSpace(int ControllerIndex);
	struct FString GetPlatformSavePath(const struct FString& DefaultPath, const struct FUniqueNetId& PlayerID);
	bool DeleteMount(int ControllerIndex, const struct FString& PathName);
	void DeleteFiles(int ControllerIndex, const struct FString& PathName, int KeepNewestFileCount);
	bool IsReadingSaveData();
	void LoadGameDataAsync(int ControllerIndex, class UObject* RootObj, const struct FString& PathName, bool bExactFileMatch, const struct FScriptDelegate& Callback);
	TEnumAsByte<EBasicLoadResult> LoadGameData(int ControllerIndex, class UObject* RootObj, const struct FString& PathName, bool bExactFileMatch);
	bool IsDoneSaving();
	bool IsSaving();
	TEnumAsByte<ESaveGameResult> UpdateSaveResult(int ControllerIndex);
	TEnumAsByte<ESaveGameResult> SaveGameDataAsync(int ControllerIndex, class UObject* RootObj, const struct FString& PathName, bool bExactFileMatch);
	TEnumAsByte<ESaveGameResult> SaveGameData(int ControllerIndex, class UObject* RootObj, const struct FString& PathName, bool bExactFileMatch);
	void OnFilesListed(TArray<struct FString> Files, TEnumAsByte<EBasicLoadResult> Result);
	void EventDataSaved(const struct FSaveObjectResult& Result);
	void EventDataLoaded(const struct FLoadObjectResult& Result);
};


// Class TAGame.SaveObjectSerializer_TA
// 0x0005 (0x0065 - 0x0060)
class USaveObjectSerializer_TA : public USerializer_X
{
public:
	int                                                Version;                                                  // 0x0060(0x0004) (Edit)
	TEnumAsByte<EBasicLoadResult>                      Result;                                                   // 0x0064(0x0001) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveObjectSerializer_TA");
		return ptr;
	}


	class USaveObjectSerializer_TA* SetVersion(int InVersion);
	void DeserializeObject(class UObject* Target, TArray<unsigned char>* InData);
	void SerializeObject(class UObject* Target, TArray<unsigned char>* OutData);
	class USaveObjectSerializer_TA* STATIC_CreateNew(int InVersion);
};


// Class TAGame.SeqAct_DumpMovie_TA
// 0x0000 (0x0160 - 0x0160)
class USeqAct_DumpMovie_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_DumpMovie_TA");
		return ptr;
	}

};


// Class TAGame.SeqAct_SetLoadout_TA
// 0x00A0 (0x0200 - 0x0160)
class USeqAct_SetLoadout_TA : public USequenceAction
{
public:
	TArray<class UProductAsset_TA*>                    Products;                                                 // 0x0160(0x0010) (NeedCtorLink)
	TArray<struct FProductWithSettings>                ProductsWithPaint;                                        // 0x0170(0x0010) (Edit, NeedCtorLink)
	class UProductAsset_PaintFinish_TA*                TeamFinish;                                               // 0x0180(0x0008) (Edit)
	class UProductAsset_PaintFinish_TA*                AccentFinish;                                             // 0x0188(0x0008) (Edit)
	unsigned long                                      bUseInGameColors : 1;                                     // 0x0190(0x0004) (Edit)
	unsigned long                                      bOverwriteCurrent : 1;                                    // 0x0190(0x0004) (Edit)
	struct FLinearColor                                TeamColor;                                                // 0x0194(0x0010) (Edit)
	struct FLinearColor                                AccentColor;                                              // 0x01A4(0x0010) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01B4(0x0004) MISSED OFFSET
	class UProductPaint_TA*                            BodyPaint;                                                // 0x01B8(0x0008)
	class UProductPaint_TA*                            SkinPaint;                                                // 0x01C0(0x0008)
	class UProductPaint_TA*                            WheelPaint;                                               // 0x01C8(0x0008)
	class UProductPaint_TA*                            BoostPaint;                                               // 0x01D0(0x0008)
	class UProductPaint_TA*                            SSTrailPaint;                                             // 0x01D8(0x0008)
	class UProductPaint_TA*                            AntennaPaint;                                             // 0x01E0(0x0008)
	class UProductPaint_TA*                            HatPaint;                                                 // 0x01E8(0x0008)
	class UProductPaint_TA*                            GoalExplosionPaint;                                       // 0x01F0(0x0008)
	class ACar_TA*                                     ParentCar;                                                // 0x01F8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetLoadout_TA");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	void HandleOverrideLoadout(class ACar_TA* Car);
	class UProductAsset_TA* GetProductAsset(class UClass* ClassToFind, class UObject* PackageToCompare);
	void ApplyChangesToProductAsset(class UCarMeshComponent_TA* CarMesh, class UProductPaint_TA* PaintToApply, class UObject* ObjectToChange, class UClass* ProductAssetClass, class UAssetAttribute_TeamEdition_TA* TeamEdition, int TeamID, class UObject* PackageToCompare);
	void CheckAndApplyChangesToComponent(class UObject* ObjectToCheck, class UObject* ObjectToCompare, class UProductPaint_TA* Paint, class UAssetAttribute_TeamEdition_TA* TeamEdition, int TeamID);
	void ApplyChangesToAttachment(const struct FProductAttachment& CurrentAttachment, class UProductPaint_TA* Paint, class UAssetAttribute_TeamEdition_TA* TeamEdition, int TeamID);
	void ApplyNewChangesToProductAssets(class UProductLoader_TA* ProductLoader);
	void HandleFirstLoadout(class ACar_TA* Car);
	void CopyPropertiesFromCar(class ACar_TA* Car);
	void Activated();
};


// Class TAGame.SeqAct_SetReplayFX_TA
// 0x002C (0x018C - 0x0160)
class USeqAct_SetReplayFX_TA : public USequenceAction
{
public:
	float                                              FocusDistance;                                            // 0x0160(0x0004) (Edit)
	int                                                FocusBlur;                                                // 0x0164(0x0004) (Edit)
	float                                              FocusStrength;                                            // 0x0168(0x0004) (Edit)
	unsigned long                                      bUseGreenScreen : 1;                                      // 0x016C(0x0004) (Edit)
	unsigned long                                      bUseVignetteOverlay : 1;                                  // 0x016C(0x0004) (Edit)
	struct FLinearColor                                GreenScreenColor;                                         // 0x0170(0x0010) (Edit)
	TEnumAsByte<EImageFilterOptions>                   ImageFilterIndex;                                         // 0x0180(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0181(0x0003) MISSED OFFSET
	float                                              ImageFilterIntensity;                                     // 0x0184(0x0004) (Edit)
	float                                              Vignette;                                                 // 0x0188(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetReplayFX_TA");
		return ptr;
	}


	void SetSystemSettings();
	void InitValuesFromSystemSettings();
	void Activated();
	void CopySettingsFromPostProcessManager();
};


// Class TAGame.SeqEvent_UIStateChange_TA
// 0x0005 (0x0181 - 0x017C)
class USeqEvent_UIStateChange_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	TEnumAsByte<EUIMenuState>                          UIState;                                                  // 0x0180(0x0001) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_UIStateChange_TA");
		return ptr;
	}

};


// Class TAGame.SimpleSpringComponent_TA
// 0x0078 (0x00E8 - 0x0070)
class USimpleSpringComponent_TA : public UComponent
{
public:
	struct FSimpleSpringSettings                       Spring;                                                   // 0x0070(0x0050) (Edit)
	unsigned long                                      bEnabled : 1;                                             // 0x00C0(0x0004) (Edit)
	unsigned long                                      bInitialized : 1;                                         // 0x00C0(0x0004) (Transient)
	struct FVector                                     Displacement;                                             // 0x00C4(0x000C) (Transient)
	struct FVector                                     MassLocation;                                             // 0x00D0(0x000C) (Transient)
	struct FVector                                     MassVelocity;                                             // 0x00DC(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SimpleSpringComponent_TA");
		return ptr;
	}


	void DrawDebug(const struct FRotator& BaseRotation);
	struct FVector GetNormalizedDisplacement();
	void AddForce(const struct FVector& Force);
	void UpdateSpring(float DeltaTime, struct FVector* BaseLocation, struct FRotator* BaseRotation);
	void UpdatePrimitive(float DeltaTime, class UPrimitiveComponent* BaseComponent);
};


// Class TAGame.AntennaComponent_TA
// 0x0078 (0x0160 - 0x00E8)
class UAntennaComponent_TA : public USimpleSpringComponent_TA
{
public:
	struct FName                                       TopperSocket;                                             // 0x00E8(0x0008) (Edit)
	class USkeletalMesh*                               AntennaMesh;                                              // 0x00F0(0x0008) (Edit)
	float                                              AntennaSegmentExtension;                                  // 0x00F8(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	class UMaterialInterface*                          AntennaMaterial;                                          // 0x0100(0x0008) (Edit)
	class UAnimTree*                                   AnimTreeTemplate;                                         // 0x0108(0x0008) (Edit)
	TArray<struct FName>                               BendyBoneControllers;                                     // 0x0110(0x0010) (Edit, NeedCtorLink)
	float                                              BendScale;                                                // 0x0120(0x0004)
	float                                              PitchScale;                                               // 0x0124(0x0004) (Edit)
	float                                              RollScale;                                                // 0x0128(0x0004) (Edit)
	float                                              PitchZScale;                                              // 0x012C(0x0004) (Edit)
	float                                              RollZScale;                                               // 0x0130(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0134(0x0004) MISSED OFFSET
	class UMaterialInstanceConstant*                   TopperMaterial;                                           // 0x0138(0x0008) (Transient)
	float                                              LastTopperWindSpeedParamValue;                            // 0x0140(0x0004) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	class USkeletalMeshComponent_TA*                   AntennaSK;                                                // 0x0148(0x0008) (ExportObject, Transient, Component, EditInline)
	TArray<class USkelControlSingleBone*>              BendyControls;                                            // 0x0150(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AntennaComponent_TA");
		return ptr;
	}


	void UpdateSpring(float DeltaTime, struct FVector* BaseLocation, struct FRotator* BaseRotation);
	void UpdatePrimitive(float DeltaTime, class UPrimitiveComponent* BaseComponent);
	void SetTopperMaterial(class UMaterialInstanceConstant* InTopperMaterial);
	void InitAntenna(class USkeletalMeshComponent_TA* AttachToMesh);
};


// Class TAGame.SkelControlRotationSpring_TA
// 0x005C (0x018C - 0x0130)
class USkelControlRotationSpring_TA : public USkelControlSingleBone
{
public:
	struct FRotator                                    RotationMin;                                              // 0x0130(0x000C) (Edit)
	struct FRotator                                    RotationMax;                                              // 0x013C(0x000C) (Edit)
	struct FVector                                     SpringToPitch;                                            // 0x0148(0x000C) (Edit)
	struct FVector                                     SpringToYaw;                                              // 0x0154(0x000C) (Edit)
	struct FVector                                     SpringToRoll;                                             // 0x0160(0x000C) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x016C(0x0004) MISSED OFFSET
	class USimpleSpringComponent_TA*                   SpringComponent;                                          // 0x0170(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FVector                                     TestSpringForce;                                          // 0x0178(0x000C) (Edit)
	float                                              TestSpringDelay;                                          // 0x0184(0x0004) (Edit)
	float                                              LastTestSpringTime;                                       // 0x0188(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkelControlRotationSpring_TA");
		return ptr;
	}

};


// Class TAGame.SkelControlSingleBoneCopy_TA
// 0x0078 (0x01A8 - 0x0130)
class USkelControlSingleBoneCopy_TA : public USkelControlSingleBone
{
public:
	struct FName                                       ControlToCopyName;                                        // 0x0130(0x0008) (Edit)
	struct FAxisConversion                             TranslationX;                                             // 0x0138(0x000C) (Edit)
	struct FAxisConversion                             TranslationY;                                             // 0x0144(0x000C) (Edit)
	struct FAxisConversion                             TranslationZ;                                             // 0x0150(0x000C) (Edit)
	struct FAxisConversion                             RotationPitch;                                            // 0x015C(0x000C) (Edit)
	struct FAxisConversion                             RotationYaw;                                              // 0x0168(0x000C) (Edit)
	struct FAxisConversion                             RotationRoll;                                             // 0x0174(0x000C) (Edit)
	struct FVector                                     TranslationScale;                                         // 0x0180(0x000C)
	struct FVector                                     RotationScale;                                            // 0x018C(0x000C)
	unsigned long                                      bConvertedScales : 1;                                     // 0x0198(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x019C(0x0004) MISSED OFFSET
	class USkelControlSingleBone*                      ControlToCopy;                                            // 0x01A0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkelControlSingleBoneCopy_TA");
		return ptr;
	}

};


// Class TAGame.SkelControlSingleBoneParameterized_TA
// 0x00F0 (0x0220 - 0x0130)
class USkelControlSingleBoneParameterized_TA : public USkelControlSingleBone
{
public:
	struct FRawDistributionFloat                       Pitch;                                                    // 0x0130(0x0028) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Yaw;                                                      // 0x0158(0x0028) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       Roll;                                                     // 0x0180(0x0028) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       PitchSpeed;                                               // 0x01A8(0x0028) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       YawSpeed;                                                 // 0x01D0(0x0028) (Edit, Component, NeedCtorLink)
	struct FRawDistributionFloat                       RollSpeed;                                                // 0x01F8(0x0028) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkelControlSingleBoneParameterized_TA");
		return ptr;
	}

};


// Class TAGame.SkelControlTether_TA
// 0x0010 (0x0110 - 0x0100)
class USkelControlTether_TA : public USkelControlBase
{
public:
	struct FName                                       AnchorBoneName;                                           // 0x0100(0x0008) (Edit)
	float                                              DistanceMin;                                              // 0x0108(0x0004) (Edit)
	float                                              DistanceMax;                                              // 0x010C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkelControlTether_TA");
		return ptr;
	}

};


// Class TAGame.SkeletalMeshActor_NoSlomo_TA
// 0x0004 (0x02D0 - 0x02CC)
class ASkeletalMeshActor_NoSlomo_TA : public ASkeletalMeshActor
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x02CC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkeletalMeshActor_NoSlomo_TA");
		return ptr;
	}

};


// Class TAGame.SkeletalMeshActorMAT_Products_TA
// 0x00E8 (0x03C8 - 0x02E0)
class ASkeletalMeshActorMAT_Products_TA : public ASkeletalMeshActorMAT
{
public:
	class UProductAsset_Body_TA*                       BodyAsset;                                                // 0x02E0(0x0008) (Edit)
	class UProductAsset_Skin_TA*                       SkinAsset;                                                // 0x02E8(0x0008) (Edit)
	class UProductAsset_PaintFinish_TA*                TeamFinishAsset;                                          // 0x02F0(0x0008) (Edit)
	class UProductAsset_PaintFinish_TA*                CustomFinishAsset;                                        // 0x02F8(0x0008) (Edit)
	class UProductAsset_Wheel_TA*                      WheelAsset;                                               // 0x0300(0x0008) (Edit)
	class UProductAsset_Boost_TA*                      BoostAsset;                                               // 0x0308(0x0008) (Edit)
	class UProductAsset_Attachment_TA*                 AntennaAsset;                                             // 0x0310(0x0008) (Edit)
	class UProductAsset_Attachment_TA*                 HatAsset;                                                 // 0x0318(0x0008) (Edit)
	unsigned long                                      bInitBoostFX : 1;                                         // 0x0320(0x0004) (Edit)
	unsigned long                                      bUseInGameColors : 1;                                     // 0x0320(0x0004) (Edit)
	struct FLinearColor                                TeamColor;                                                // 0x0324(0x0010) (Edit)
	struct FLinearColor                                CustomColor;                                              // 0x0334(0x0010) (Edit)
	float                                              FakeBoostVelocity;                                        // 0x0344(0x0004) (Edit)
	float                                              DeactivateBoostVelocity;                                  // 0x0348(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x034C(0x0004) MISSED OFFSET
	class UCarPreviewMeshComponent_TA*                 CarMeshComp;                                              // 0x0350(0x0008) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      FLWheelSKComponent;                                       // 0x0358(0x0008) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      FRWheelSKComponent;                                       // 0x0360(0x0008) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      BLWheelSKComponent;                                       // 0x0368(0x0008) (ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      BRWheelSKComponent;                                       // 0x0370(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        FLWheelSMComponent;                                       // 0x0378(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        FRWheelSMComponent;                                       // 0x0380(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        BLWheelSMComponent;                                       // 0x0388(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        BRWheelSMComponent;                                       // 0x0390(0x0008) (ExportObject, Component, EditInline)
	TArray<class UMeshComponent*>                      WheelMeshComponents;                                      // 0x0398(0x0010) (ExportObject, Component, NeedCtorLink, EditInline)
	TArray<struct FBothWheelAssets>                    AdditionalWheels;                                         // 0x03A8(0x0010) (Component, NeedCtorLink)
	class UNameplateComponent_TA*                      NameplateComponent;                                       // 0x03B8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UProductLoader_TA*                           ProductLoader;                                            // 0x03C0(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkeletalMeshActorMAT_Products_TA");
		return ptr;
	}


	void AddProduct(class UProductAsset_TA* InProduct, struct FClientLoadoutData* OutLoadout);
	struct FClientLoadoutData GetClientLoadoutData();
	void HandleAllProductsLoaded(class UProductLoader_TA* InProductLoader);
	void UpdateWithLoadout(const struct U_Types_TA_FLoadoutData& Loadout);
	void CreateAttachments();
	void UpdateBoost();
	void CreateBoostActor();
	void UpdateAllComponents();
	void Tick(float DeltaTime);
	void PostBeginPlay();
};


// Class TAGame.SkeletalMeshComponent_NoSlomo_TA
// 0x0000 (0x07B0 - 0x07B0)
class USkeletalMeshComponent_NoSlomo_TA : public USkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkeletalMeshComponent_NoSlomo_TA");
		return ptr;
	}

};


// Class TAGame.SkeletalMeshComponent_TA
// 0x0008 (0x07B8 - 0x07B0)
class USkeletalMeshComponent_TA : public USkeletalMeshComponent
{
public:
	float                                              FOVOverride;                                              // 0x07B0(0x0004) (Edit, Const)
	unsigned long                                      bIgnoreScriptAttach : 1;                                  // 0x07B4(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkeletalMeshComponent_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	class UParticleSystemComponent* CreateAttachmentPSC(class UParticleSystem* PS);
	class USkeletalMeshComponent_TA* CreateAttachmentSK(class USkeletalMesh* Mesh, class UMaterialInterface* MaterialOverride);
	class UStaticMeshComponent_TA* CreateAttachmentSMC(class UStaticMesh* Mesh, class UMaterialInterface* MaterialOverride, bool bCreateNewMIC);
	void ModifyAttachmentPrimitive(class UPrimitiveComponent* PrimComp);
	void Tick(float DeltaTime);
	void OnDetached();
	void OnAttached();
};


// Class TAGame.CarMeshComponentBase_TA
// 0x0110 (0x08C8 - 0x07B8)
class UCarMeshComponentBase_TA : public USkeletalMeshComponent_TA
{
public:
	class UProductAsset_Body_TA*                       BodyAsset;                                                // 0x07B8(0x0008)
	class UProductAsset_Skin_TA*                       SkinAsset;                                                // 0x07C0(0x0008)
	class UProductAsset_Wheel_TA*                      WheelAsset;                                               // 0x07C8(0x0008)
	struct FLinearColor                                TeamColorOverride;                                        // 0x07D0(0x0010) (Transient)
	struct FLinearColor                                CustomColorOverride;                                      // 0x07E0(0x0010) (Transient)
	int                                                Team;                                                     // 0x07F0(0x0004) (Transient)
	int                                                TeamColorID;                                              // 0x07F4(0x0004) (Transient)
	int                                                CustomColorID;                                            // 0x07F8(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x07FC(0x0004) MISSED OFFSET
	class UProductAsset_Logo_TA*                       Logo;                                                     // 0x0800(0x0008) (Transient)
	unsigned long                                      bSwapLogoColors : 1;                                      // 0x0808(0x0004) (Transient)
	unsigned long                                      bBoosting : 1;                                            // 0x0808(0x0004) (Transient)
	unsigned long                                      bLocalPlayer : 1;                                         // 0x0808(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x080C(0x0004) MISSED OFFSET
	class UProductAsset_PaintFinish_TA*                TeamFinish;                                               // 0x0810(0x0008) (Transient)
	class UProductAsset_PaintFinish_TA*                CustomFinish;                                             // 0x0818(0x0008) (Transient)
	struct FClubColorSet                               ClubColors;                                               // 0x0820(0x0008) (Transient)
	TArray<class UAntennaComponent_TA*>                Antennas;                                                 // 0x0828(0x0010) (ExportObject, Transient, Component, NeedCtorLink, EditInline)
	TArray<class UMeshComponent*>                      WheelMeshes;                                              // 0x0838(0x0010) (ExportObject, Transient, Component, NeedCtorLink, EditInline)
	class AFXActor_X*                                  BodyFX;                                                   // 0x0848(0x0008) (Transient)
	TArray<class AFXActor_X*>                          FXActors;                                                 // 0x0850(0x0010) (Transient, NeedCtorLink)
	TArray<class UAttachmentBehavior_TA*>              Behaviors;                                                // 0x0860(0x0010) (Transient, NeedCtorLink)
	class AFXActor_X*                                  BodyFXActor;                                              // 0x0870(0x0008) (Transient)
	struct FClientLoadoutOnlineData                    ProductAttributes;                                        // 0x0878(0x0010) (Transient, NeedCtorLink)
	TArray<struct FName>                               ProductAttachmentSockets;                                 // 0x0888(0x0010) (Edit, Const, NeedCtorLink)
	int                                                QueuedTeamFinishID;                                       // 0x0898(0x0004) (Transient)
	int                                                QueuedCustomFinishID;                                     // 0x089C(0x0004) (Transient)
	TArray<struct FInheritedObjects>                   ObjectsWithInheritedSettings;                             // 0x08A0(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventPaintSettingsUpdated__Delegate;                    // 0x08B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x08B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarMeshComponentBase_TA");
		return ptr;
	}


	void __CarMeshComponentBase_TA__InitBodyVisuals_07874C954A7B71A53BEE02A15E58AF0E(const struct FProductAttachment& A);
	void __CarMeshComponentBase_TA__CreateWheelMeshes_29E5E89242AF67C02253CE914EB66A14(class UMeshComponent* W);
	void __CarMeshComponentBase_TA__ApplyPaintSettings_13AF931340C2DFEEE6C215BEE49013EF(class UMeshComponent* W);
	void ApplyColorsToCar(const struct FLinearColor& TeamColor, const struct FLinearColor& CustomColor);
	void ApplyPaintSettingsToObject(class UProductPaint_TA* ProductPaint, class UProductAttribute_PaintSettings_TA* PaintSettings, class UObject* ObjectToPaint, class UProductAsset_TA* Asset);
	void ApplyPaintToObject(class UProductPaint_TA* ProductPaint, class UProductAttribute_PaintSettings_TA* PaintSettings, class UObject* ObjectToPaint, class UProductAsset_TA* Product);
	void SetWheelMesh(class UMeshComponent* MeshComp, class UProductAsset_Wheel_TA* Asset, TEnumAsByte<EWheelPosition> WheelPos, const struct FName& BoneName, struct FVehicleAxleSettings* Axle);
	struct FVector CalculatePresetSuspensionOffset();
	class AFXActor_X* AttachFXActor(class AFXActor_X* FXActorTemplate);
	class UAttachmentBehavior_TA* AddBehavior(class UProductAsset_TA* Asset, class UActorComponent* Component, class UAttachmentBehavior_TA* BehaviorArchetype);
	void AddBehaviors(class UProductAsset_TA* Asset, class UActorComponent* Component, TArray<class UAttachmentBehavior_TA*>* BehaviorArchetypes);
	void AddCarInheritedObject(class UProductAsset_TA* Asset, class UObject* ObjectToAdd, class UProductAttribute_InheritCarSetting_TA* InheritSettings, struct FInheritedObjects* StructInitializer_6063009D4AD2B2298065DDB12A0A22A1, struct FInheritedObjects* StructInitializer_AC6CDFD145588E38440677BF1324ED58);
	void UpdateInheritedObjects();
	void AttachOrnament(class UProductAsset_TA* Asset, struct FProductAttachment* AttachStruct, TArray<class UClass*>* ArrayInitializer_299415FC4D593E1AA0586E8003E34082, TArray<class UClass*>* ArrayInitializer_54DFDDAF4B9786348A1A52B636A4DC58);
	bool CanPaintAntennaMesh(class UProductAsset_TA* Asset, class UAntennaComponent_TA* Antenna, TEnumAsByte<EProductAttachmentSocket> Socket);
	void SetMaterialColorParams(class UMaterialInstanceConstant* MatInst, const struct FLinearColor& PaintColor, const struct FName& ColorParam, const struct FName& FullColorParam);
	bool CanCorrectColor(bool bTeamColor);
	void SetMaterialColors(class UMaterialInstanceConstant* MatInst);
	struct FLinearColor GetCorrectedPaintColor(const struct FLinearColor& InColor);
	void SetMeshMaterialColors(class UMeshComponent* Mesh);
	void CreateWheelMICs();
	void SetPaintFinishParametersToAccent(class UMaterialInstanceConstant* MatInst, bool bIsPaintFinishDisable, class UProductAsset_PaintFinish_TA* PaintFinishToApply, const struct FParameterInformation& OptionalPaintFinishToApply, const struct FString& Prefix);
	void SetPaintFinishParameters(class UMeshComponent* Mesh);
	void ApplyPaintSettings();
	void OnPaintChanged();
	void STATIC_ResetMaterials(class UMeshComponent* Mesh);
	void InitMaterials();
	bool FilterTeamAttributes(class UProductAttribute_TA* Attribute);
	void RemoveProductAttributeFromProduct(class UClass* AttributeClassToRemove, int ProductSlot, TArray<class UProductAttribute_TA*>* FilterLocal_FAF826B44B7D369792BC5EB1885BEB5F);
	void ApplyAttributes(class UProductAsset_TA* Asset, class UObject* Target, TArray<class UClass*>* AttributesToIgnore);
	TArray<class UProductAttribute_TA*> GetAttributes(class UProduct_TA* Product, TArray<class UProductAttribute_TA*>* ArrayInitializer_11ED17C34A08E66B439BE2AD60407366, TArray<class UProductAttribute_TA*>* ConcatLocal_63D49B7D4EFC6DE217A434AD46D3F196, TArray<class UProductAttribute_TA*>* FilterLocal_E75ED4A2440A551FC868FB93A4403055);
	void SetIsLocalPlayer(bool bIsLocal);
	struct FLinearColor GetCustomColor();
	struct FLinearColor GetTeamColor();
	void SetLogo(class UProductAsset_Logo_TA* InLogo, bool bSwapColors);
	void SetCustomFinish(class UProductAsset_PaintFinish_TA* Finish);
	void HandleCustomFinishLoaded(const struct FAssetLoadResult& Result);
	void SetCustomFinishID(int ProductID);
	void SetCustomColorOverride(const struct FLinearColor& NewColor);
	void SetCustomColorID(int ColorID);
	void SetTeamFinish(class UProductAsset_PaintFinish_TA* Finish);
	void HandleTeamFinishLoaded(const struct FAssetLoadResult& Result);
	void SetTeamFinishID(int ProductID);
	void SetClubColors(const struct FClubColorSet& Colors);
	void SetTeamColorOverride(const struct FLinearColor& NewColor);
	void SetTeamColorID(int InTeam, int InColorID);
	void ClearColorOverrides();
	void SetTeamPaint(const struct FLoadoutTeamPaint& Paint);
	void CreateWheelAttachment(class UProductAsset_Wheel_TA* Asset, class UMeshComponent* WheelMesh, const struct FWheelAttachment& InAttachment);
	void CreateWheelMesh(class UProductAsset_Wheel_TA* Asset, TEnumAsByte<EWheelPosition> WheelPos, const struct FVehicleAxleSettings& Axle, const struct FName& BoneName);
	void CreateWheelMeshes();
	void SetMaterialParameters(int ElementIdx, struct FMaterialParams* Params);
	void OnDetached();
	void InitBodyVisuals();
	class UPhysicsAsset* GetPhysicsAsset();
	void InitBodyAsset();
	void AddVisualAsset(class UProductAsset_TA* Asset);
	void SetBodyAsset(class UProductAsset_Body_TA* Body);
	void InitAssets();
	void EventPaintSettingsUpdated(class UCarMeshComponentBase_TA* CarMeshComponent);
};


// Class TAGame.CarMeshComponent_TA
// 0x0080 (0x0948 - 0x08C8)
class UCarMeshComponent_TA : public UCarMeshComponentBase_TA
{
public:
	float                                              BoostBlendInTime;                                         // 0x08C8(0x0004) (Edit)
	float                                              BoostBlendOutTime;                                        // 0x08CC(0x0004) (Edit)
	float                                              BoostDriveFlapScale;                                      // 0x08D0(0x0004) (Edit)
	float                                              WheelSuspensionBlendRate;                                 // 0x08D4(0x0004) (Edit)
	float                                              WheelSteerBlendRate;                                      // 0x08D8(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x08DC(0x0004) MISSED OFFSET
	TArray<struct FWheelSkelControlSet>                WheelControls;                                            // 0x08E0(0x0010) (Transient, Component, NeedCtorLink)
	float                                              BoostFlyHeight;                                           // 0x08F0(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x08F4(0x0004) MISSED OFFSET
	TArray<class USkelControlBase*>                    BoostFlyControls;                                         // 0x08F8(0x0010) (Transient, NeedCtorLink)
	class USimpleSpringComponent_TA*                   ChassisSpringComponent;                                   // 0x0908(0x0008) (ExportObject, Transient, Component, EditInline)
	class USkelControlSingleBone*                      ChassisSpringControl;                                     // 0x0910(0x0008) (Transient)
	TArray<class USkelControlBase*>                    BoostControls;                                            // 0x0918(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bInAir : 1;                                               // 0x0928(0x0004) (Transient)
	unsigned long                                      bBoostFlying : 1;                                         // 0x0928(0x0004) (Transient)
	unsigned long                                      bPreviewSupersonic : 1;                                   // 0x0928(0x0004) (Transient)
	unsigned long                                      bWantsBoostCameraAdjustment : 1;                          // 0x0928(0x0004) (Transient)
	float                                              Throttle;                                                 // 0x092C(0x0004) (Transient)
	struct FScriptDelegate                             __EventAttached__Delegate;                                // 0x0930(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0930(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarMeshComponent_TA");
		return ptr;
	}


	bool WantsBoostCameraAdjustment();
	void UpdateWheelPreviewRotation(float DeltaTime, float PreviewFrontWheelSpinSpeed, float PreviewBackWheelSpinSpeed);
	void SetBodyFXActor(class AFXActor_X* InBodyFX);
	void ApplyPaintSettings();
	void InitBodyVisuals();
	void InitAttachments(class UProductLoader_TA* InLoadout);
	void SetLoadout(class UProductLoader_TA* InLoadout);
	void SetProductAttributes(struct FClientLoadoutOnlineData* OnlineLoadout);
	void InitWheelControl(int Idx, const struct FString& Prefix);
	void InitWheelControls();
	void InitBoostControls();
	void ClearAttachments();
	void NotifyWhenAttached(const struct FScriptDelegate& Callback);
	void OnDetached();
	void OnAttached();
	void EventAttached(class UCarMeshComponent_TA* Mesh);
};


// Class TAGame.CarPreviewMeshComponent_TA
// 0x0020 (0x08E8 - 0x08C8)
class UCarPreviewMeshComponent_TA : public UCarMeshComponentBase_TA
{
public:
	class UProductAsset_Boost_TA*                      BoostAsset;                                               // 0x08C8(0x0008)
	class AFXActor_Boost_TA*                           BoostFX;                                                  // 0x08D0(0x0008) (Transient)
	class UProductAsset_Attachment_TA*                 AntennaAsset;                                             // 0x08D8(0x0008)
	class UProductAsset_Attachment_TA*                 HatAsset;                                                 // 0x08E0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarPreviewMeshComponent_TA");
		return ptr;
	}


	void CreateWheelMeshes();
	void InitAttachments();
	void InitFXStatesForActor(class AFXActor_X* FXActor);
	void InitFXStates();
	void InitBoostFX();
	void InitBodyFX();
	void InitFXVisuals();
};


// Class TAGame.SkyLightVolumeComponent_TA
// 0x0060 (0x0230 - 0x01D0)
class USkyLightVolumeComponent_TA : public USkyLightComponent
{
public:
	float                                              BlendDistance;                                            // 0x01D0(0x0004) (Edit, Const)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	class ASkyLight*                                   LightToOverride;                                          // 0x01D8(0x0008) (Edit)
	class UBrushComponent*                             BrushComponent;                                           // 0x01E0(0x0008) (ExportObject, Component, EditInline)
	unsigned char                                      UnknownData01[0x8];                                       // 0x01E8(0x0008) MISSED OFFSET
	struct FMatrix                                     CachedParentToWorld;                                      // 0x01F0(0x0040) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkyLightVolumeComponent_TA");
		return ptr;
	}


	void SetLowerLightProperties(float NewBrightness, const struct FColor& NewLightColor);
};


// Class TAGame.SpecialEditionDatabase_TA
// 0x0064 (0x00C4 - 0x0060)
class USpecialEditionDatabase_TA : public UObject
{
public:
	TArray<class UProductSpecialEdition_TA*>           SpecialEditions;                                          // 0x0060(0x0010) (Edit, Const, EditConst, NeedCtorLink)
	struct FMap_Mirror                                 EditionNameToEditionID;                                   // 0x0070(0x0050) (Const, Native)
	unsigned long                                      bClickToRebuild : 1;                                      // 0x00C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialEditionDatabase_TA");
		return ptr;
	}


	class UProductSpecialEdition_TA* GetSpecialEditionByName(const struct FName& EditionName);
	class UProductSpecialEdition_TA* GetSpecialEdition(int Id);
	struct FName GetSpecialEditionName(int EditionID);
	int GetSpecialEditionId(const struct FName& EditionName);
};


// Class TAGame.StatEvent_TA
// 0x0060 (0x00C0 - 0x0060)
class UStatEvent_TA : public UObject
{
public:
	int                                                Points;                                                   // 0x0060(0x0004) (Edit, Const)
	float                                              CooldownSeconds;                                          // 0x0064(0x0004) (Edit, Const)
	unsigned long                                      bAddToScore : 1;                                          // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bIsLeaderboardStat : 1;                                   // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bNotifyTicker : 1;                                        // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bShowOnHUD : 1;                                           // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bPrimaryStat : 1;                                         // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bSkipReplication : 1;                                     // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bCanMute : 1;                                             // 0x0068(0x0004) (Edit, Const)
	unsigned long                                      bCountMultiplied : 1;                                     // 0x0068(0x0004) (Edit, Const)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	class UStatGroup_TA*                               Group;                                                    // 0x0070(0x0008) (Edit, Const)
	class UTexture*                                    Texture;                                                  // 0x0078(0x0008) (Edit, Const)
	struct FName                                       UISound;                                                  // 0x0080(0x0008) (Edit, Const)
	class UClass*                                      DisplayProductStatClass;                                  // 0x0088(0x0008) (Edit, Const)
	struct FString                                     Label;                                                    // 0x0090(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PluralLabel;                                              // 0x00A0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x00B0(0x0010) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatEvent_TA");
		return ptr;
	}


	float GetNextCooldownTime();
	int GetPoints(class AGameEvent_TA* GameEvent, int Count);
	struct FName GetGroupName();
};


// Class TAGame.StatFactoryBase_TA
// 0x0010 (0x0278 - 0x0268)
class AStatFactoryBase_TA : public AActor
{
public:
	TArray<class UStatEvent_TA*>                       AllStatEvents;                                            // 0x0268(0x0010) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatFactoryBase_TA");
		return ptr;
	}

};


// Class TAGame.StatGraph_TA
// 0x0020 (0x0090 - 0x0070)
class UStatGraph_TA : public UComponent
{
public:
	class USampleRecordSettings_TA*                    RecordSettings;                                           // 0x0070(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FDouble                                     LastTickTime;                                             // 0x0078(0x0008) (Const)
	TArray<class USampleHistory_TA*>                   SampleHistories;                                          // 0x0080(0x0010) (ExportObject, Component, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatGraph_TA");
		return ptr;
	}


	void StopDrawing();
	class USampleHistory_TA* CreateSampleHistory(const struct FString& Title);
	class USampleHistory_TA* AddSampleHistory(class USampleHistory_TA* History);
	void Construct();
};


// Class TAGame.InputBufferGraph_TA
// 0x0028 (0x00B8 - 0x0090)
class UInputBufferGraph_TA : public UStatGraph_TA
{
public:
	class USampleHistory_TA*                           Buffer;                                                   // 0x0090(0x0008) (ExportObject, Component, EditInline)
	class USampleHistory_TA*                           BufferTarget;                                             // 0x0098(0x0008) (ExportObject, Component, EditInline)
	class USampleHistory_TA*                           OverUnderFrames;                                          // 0x00A0(0x0008) (ExportObject, Component, EditInline)
	class USampleHistory_TA*                           PhysicsRate;                                              // 0x00A8(0x0008) (ExportObject, Component, EditInline)
	float                                              MaxPhysicsRate;                                           // 0x00B0(0x0004)
	float                                              MinPhysicsRate;                                           // 0x00B4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.InputBufferGraph_TA");
		return ptr;
	}


	void AddSample(struct FInputBufferStats* Stats);
	class USampleHistory_TA* CreateBufferHistory(const struct FString& Title);
	void Construct();
};


// Class TAGame.NetStatGraph_TA
// 0x0044 (0x00D4 - 0x0090)
class UNetStatGraph_TA : public UStatGraph_TA
{
public:
	class USampleHistory_TA*                           PacketsOut;                                               // 0x0090(0x0008) (ExportObject, Component, EditInline)
	class USampleHistory_TA*                           PacketsIn;                                                // 0x0098(0x0008) (ExportObject, Component, EditInline)
	class USampleHistory_TA*                           LostPacketsOut;                                           // 0x00A0(0x0008) (ExportObject, Component, EditInline)
	class USampleHistory_TA*                           LostPacketsIn;                                            // 0x00A8(0x0008) (ExportObject, Component, EditInline)
	class USampleHistory_TA*                           BytesOut;                                                 // 0x00B0(0x0008) (ExportObject, Component, EditInline)
	class USampleHistory_TA*                           BytesIn;                                                  // 0x00B8(0x0008) (ExportObject, Component, EditInline)
	class USampleHistory_TA*                           Latency;                                                  // 0x00C0(0x0008) (ExportObject, Component, EditInline)
	float                                              ExpectedOutPacketRate;                                    // 0x00C8(0x0004)
	float                                              ExpectedInPacketRate;                                     // 0x00CC(0x0004)
	float                                              MaxBytesRate;                                             // 0x00D0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NetStatGraph_TA");
		return ptr;
	}


	void UpdateGraphRanges();
	class USampleHistory_TA* CreateBytesSummary(const struct FString& Title);
	class USampleHistory_TA* CreateLossSummary(const struct FString& Title);
	class USampleHistory_TA* CreatePktSummary(const struct FString& Title);
	void Construct();
};


// Class TAGame.PerfStatGraph_TA
// 0x0040 (0x00D0 - 0x0090)
class UPerfStatGraph_TA : public UStatGraph_TA
{
public:
	class USampleHistory_TA*                           FPS;                                                      // 0x0090(0x0008) (ExportObject, Component, EditInline)
	class USampleHistory_TA*                           FrameTime;                                                // 0x0098(0x0008) (ExportObject, Component, EditInline)
	class USampleHistory_TA*                           GameThreadTime;                                           // 0x00A0(0x0008) (ExportObject, Component, EditInline)
	class USampleHistory_TA*                           RenderThreadTime;                                         // 0x00A8(0x0008) (ExportObject, Component, EditInline)
	class USampleHistory_TA*                           GPUFrameTime;                                             // 0x00B0(0x0008) (ExportObject, Component, EditInline)
	TArray<class USampleHistory_TA*>                   FrameTimeHistories;                                       // 0x00B8(0x0010) (ExportObject, Component, NeedCtorLink, EditInline)
	float                                              MaxFPS;                                                   // 0x00C8(0x0004)
	float                                              TargetFPS;                                                // 0x00CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PerfStatGraph_TA");
		return ptr;
	}


	void UpdateGraphRanges();
	class USampleHistory_TA* CreateFrameTimeHistory(const struct FString& Title);
	class USampleHistory_TA* CreateFpsHistory(const struct FString& Title);
	void Construct();
};


// Class TAGame.StatGraphDrawer_TA
// 0x0084 (0x00E4 - 0x0060)
class UStatGraphDrawer_TA : public UObject
{
public:
	class USampleHistory_TA*                           History;                                                  // 0x0060(0x0008) (ExportObject, Component, EditInline)
	float                                              MaxSampleAge;                                             // 0x0068(0x0004)
	float                                              Scale;                                                    // 0x006C(0x0004)
	float                                              PixelsPerSample;                                          // 0x0070(0x0004)
	float                                              ValueStartX;                                              // 0x0074(0x0004)
	float                                              MaxCharHeight;                                            // 0x0078(0x0004)
	float                                              SpaceWidth;                                               // 0x007C(0x0004)
	float                                              LabelMaxWidth;                                            // 0x0080(0x0004)
	float                                              ValueMaxWidth;                                            // 0x0084(0x0004)
	float                                              GridCellWidth;                                            // 0x0088(0x0004)
	float                                              GridCellHeight;                                           // 0x008C(0x0004)
	float                                              GraphWidth;                                               // 0x0090(0x0004)
	float                                              GraphHeight;                                              // 0x0094(0x0004)
	float                                              GraphStartX;                                              // 0x0098(0x0004)
	float                                              GraphEndX;                                                // 0x009C(0x0004)
	float                                              X;                                                        // 0x00A0(0x0004)
	float                                              Y;                                                        // 0x00A4(0x0004)
	class UCanvas*                                     Canvas;                                                   // 0x00A8(0x0008)
	TArray<struct FSummaryLabel>                       SummaryLabels;                                            // 0x00B0(0x0010) (NeedCtorLink)
	TArray<struct FGraphLine>                          GridLines;                                                // 0x00C0(0x0010) (NeedCtorLink)
	TArray<struct FGraphLine>                          SampleLines;                                              // 0x00D0(0x0010) (NeedCtorLink)
	int                                                SampleLineIndex;                                          // 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatGraphDrawer_TA");
		return ptr;
	}

};


// Class TAGame.StatGraphSystem_TA
// 0x0044 (0x00B4 - 0x0070)
class UStatGraphSystem_TA : public UComponent
{
public:
	float                                              GraphSampleTime;                                          // 0x0070(0x0004) (Edit)
	TEnumAsByte<EStatGraphLevel>                       GraphLevel;                                               // 0x0074(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	class UPerfStatGraph_TA*                           PerfStatGraph;                                            // 0x0078(0x0008) (ExportObject, Component, EditInline)
	class UNetStatGraph_TA*                            NetStatGraph;                                             // 0x0080(0x0008) (ExportObject, Component, EditInline)
	class UInputBufferGraph_TA*                        InputBufferGraph;                                         // 0x0088(0x0008) (ExportObject, Component, EditInline)
	TArray<class UStatGraph_TA*>                       StatGraphs;                                               // 0x0090(0x0010) (ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UStatGraph_TA*>                       VisibleStatGraphs;                                        // 0x00A0(0x0010) (ExportObject, Component, NeedCtorLink, EditInline)
	int                                                PreallocGraphLines;                                       // 0x00B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatGraphSystem_TA");
		return ptr;
	}


	void __StatGraphSystem_TA__SetGraphLevel_2E060E49407A9A72F85D9CA22CDD9CF9(class UStatGraph_TA* G);
	void PacketReceived(float Latency);
	void Graphtime(float Seconds);
	void StatGraphNext();
	float GetGraphSampleTime(TEnumAsByte<EStatGraphLevel> Level);
	TArray<class UStatGraph_TA*> GetDisplayGraphs(TEnumAsByte<EStatGraphLevel> Level, TArray<class UStatGraph_TA*>* ArrayInitializer_1859CE1D414F062A4FC53C872FD6C8A5, TArray<class UStatGraph_TA*>* ArrayInitializer_D5EE4F22427AF9D350B9CCA57E1E8128, TArray<class UStatGraph_TA*>* ArrayInitializer_FF54841146F7217E30FC1EB35C39E198);
	void SetGraphLevel(TEnumAsByte<EStatGraphLevel> Level);
	void Construct(TArray<class UStatGraph_TA*>* ArrayInitializer_087B7C814EBD14BCA9BB65A85DBFF360);
};


// Class TAGame.StatGroup_TA
// 0x0000 (0x0060 - 0x0060)
class UStatGroup_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatGroup_TA");
		return ptr;
	}

};


// Class TAGame.StaticMeshComponent_TA
// 0x0004 (0x030C - 0x0308)
class UStaticMeshComponent_TA : public UStaticMeshComponent
{
public:
	unsigned long                                      bIgnoreScriptAttach : 1;                                  // 0x0308(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StaticMeshComponent_TA");
		return ptr;
	}


	void SetBoundsScale(float Value);
	void OnDetached();
	void OnAttached();
};


// Class TAGame.BallIndicator_TA
// 0x0024 (0x0330 - 0x030C)
class UBallIndicator_TA : public UStaticMeshComponent_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x030C(0x0004) MISSED OFFSET
	float                                              MinTranslationX;                                          // 0x0310(0x0004) (Edit)
	float                                              MaxTranslationX;                                          // 0x0314(0x0004) (Edit)
	float                                              MinDistance;                                              // 0x0318(0x0004) (Edit)
	float                                              MaxDistance;                                              // 0x031C(0x0004) (Edit)
	float                                              ZTranslationOffset;                                       // 0x0320(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0324(0x0004) MISSED OFFSET
	class AActor*                                      Ball;                                                     // 0x0328(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallIndicator_TA");
		return ptr;
	}


	void HandleBallRemoved(class UBallCamTarget_TA* BallObject);
	void HandleBallAdded(class UBallCamTarget_TA* BallObject);
	void OnDetached();
	void OnAttached();
};


// Class TAGame.NameplateMeshComponent_TA
// 0x0038 (0x0344 - 0x030C)
class UNameplateMeshComponent_TA : public UStaticMeshComponent_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x030C(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           DistanceScaleCurve;                                       // 0x0310(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           FOVScaleCurve;                                            // 0x0328(0x0018) (Edit, NeedCtorLink)
	float                                              PlayerOptionsScale;                                       // 0x0340(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NameplateMeshComponent_TA");
		return ptr;
	}


	void TickNameplate();
	void SetPlayerIndex(int Index);
	void SetRenderTexture(class UTextureRenderTarget2D* InTex);
	void HandleNameplateScaleModifierUpdated(class UGameViewportClient_TA* ViewportClient);
	void OnDetached();
	void OnAttached();
};


// Class TAGame.Team_TA
// 0x01D0 (0x0460 - 0x0290)
class ATeam_TA : public ATeamInfo
{
public:
	class UCarColorSet_TA*                             CarColorSet;                                              // 0x0290(0x0008) (Edit)
	class UCarColorSet_TA*                             CarColorSet_v1;                                           // 0x0298(0x0008) (Edit)
	class UCarColorSet_TA*                             CarColorSet_v2;                                           // 0x02A0(0x0008) (Edit)
	struct FLinearColor                                FontColor;                                                // 0x02A8(0x0010) (Edit)
	struct FLinearColor                                ColorBlindFontColor;                                      // 0x02B8(0x0010) (Edit)
	class UCrossplayConfig_X*                          Crossplay;                                                // 0x02C8(0x0008)
	struct FColor                                      TeamControllerColor;                                      // 0x02D0(0x0004) (Transient)
	struct FColor                                      TeamScoreStrobeColor;                                     // 0x02D4(0x0004) (Transient)
	class UTeamColorScriptedTexture_TA*                TeamScriptedTexture;                                      // 0x02D8(0x0008)
	TArray<struct FLinearColor>                        DefaultColorList;                                         // 0x02E0(0x0010) (NeedCtorLink)
	TArray<struct FLinearColor>                        ColorBlindColorList;                                      // 0x02F0(0x0010) (NeedCtorLink)
	TArray<struct FLinearColor>                        CurrentColorList;                                         // 0x0300(0x0010) (Transient, NeedCtorLink)
	class AGameEvent_Team_TA*                          GameEvent;                                                // 0x0310(0x0008) (Net, Transient)
	TArray<class APRI_TA*>                             Members;                                                  // 0x0318(0x0010) (Transient, NeedCtorLink)
	struct FString                                     CustomTeamName;                                           // 0x0328(0x0010) (Net, Transient, NeedCtorLink)
	struct FString                                     SanitizedTeamName;                                        // 0x0338(0x0010) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0348(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.Team_TA.ClubID
	class UProductAsset_Logo_TA*                       Logo;                                                     // 0x0350(0x0008)
	struct FReplicatedLogoData                         LogoData;                                                 // 0x0358(0x0008) (Net, Transient)
	struct FClubColorSet                               ClubColors;                                               // 0x0360(0x0008) (Net, Transient)
	class AVoteActor_TA*                               ForfeitVoteArchetype;                                     // 0x0368(0x0008) (Edit)
	class AVoteActor_TA*                               ForfeitVote;                                              // 0x0370(0x0008) (Transient)
	class AVoteActor_TA*                               PartyUpVote;                                              // 0x0378(0x0008) (Transient)
	unsigned long                                      bForfeit : 1;                                             // 0x0380(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0384(0x0004) MISSED OFFSET
	TArray<struct FTemporarySpawnSpot>                 TemporarySpawnSpots;                                      // 0x0388(0x0010) (Transient, NeedCtorLink)
	int                                                Difficulty;                                               // 0x0398(0x0004) (Net, Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventMemberAdded__Delegate;                             // 0x03A0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x039C(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventMemberRemoved__Delegate;                           // 0x03B8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x03B8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventColorsChanged__Delegate;                           // 0x03D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x03D0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventScoreUpdated__Delegate;                            // 0x03E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x03E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventNameChanged__Delegate;                             // 0x0400(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0400(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventLogoChanged__Delegate;                             // 0x0418(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0418(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventForfeit__Delegate;                                 // 0x0430(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0430(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __Difficulty__ChangeNotify;                               // 0x0448(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0448(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Team_TA");
		return ptr;
	}


	struct FUniqueNetId __Team_TA__GetPartyFollowerIds_8C7F259B4CD46BE44DEC57900385A2EA(class APRI_TA* Follower);
	bool __Team_TA__GetHumanPlayers_2A49B70D43E32CACC49A0DBC71041277(class APRI_TA* PRI);
	bool __Team_TA__GetHumanPrimaryPlayers_5DD9939F4476DF9A8A61AB98CCA1D2E7(class APRI_TA* PRI);
	bool __Team_TA__GetHumanPartyLeaders_524B9882446A6F5D886D68BD41D3D1FC(class APRI_TA* PRI);
	bool __Team_TA__GetNumOfMembersThatCanStartForfeit_3045E0D445D0EE3B2022389F9B8D70DF(class APRI_TA* P);
	void __Team_TA__EnableAllMembersStartVoteToForfeit_157A1EEC4FB51ACEBABE9899E6ABF8E2(class APRI_TA* Member);
	void __Difficulty__ChangeNotifyFunc();
	void UpdateGameShaderParamColors(int TeamIdx, TArray<struct FLinearColor> NewColors);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void OnClubColorsChanged();
	void SetClubColors(const struct FClubColorSet& Colors);
	void Forfeit();
	void HandleForfeitVoteDestroyed(class AVoteActor_TA* VoteActor);
	void EnableAllMembersStartVoteToForfeit();
	void EnableAllMembersStartVoteToForfeitIfNecessary();
	void HandleForfeitVoteFinished(class AVoteActor_TA* VoteActor);
	int GetNumOfMembersThatCanStartForfeit(TArray<class APRI_TA*>* FilterLocal_5D51862F4C1333E7954495A19539AA1A);
	void VoteToForfeit(class APRI_TA* PRI);
	void GetColors(struct FLinearColor* OutFontColor, TArray<struct FLinearColor>* OutColors);
	void NotifyKismetTeamColorChanged();
	void UpdateColors();
	void SetLogo(int LogoID, bool bSwapColors);
	struct FString GetTeamName();
	void HandleTeamNameSanitized(const struct FString& Original, const struct FString& Sanitized);
	void HandleClubDetails(class UClubDetails_X* Club);
	void SetClubID();
	void SetCustomTeamName(const struct FString& NewName);
	void SetDefaultColors();
	void SetColorList(TArray<struct FLinearColor> ColorList, bool bAllowMaxBrightness);
	bool IsSingleParty();
	bool PlatformsAllowedToFormParty();
	bool PlayersAllowedToFormParty(const struct FUniqueNetId& Player1, const struct FUniqueNetId& Player2);
	TArray<class APRI_TA*> GetHumanPartyLeaders(TArray<class APRI_TA*>* ArrayResultLocal_B58B23694DB8DD969636398900E47B26, TArray<class APRI_TA*>* FilterLocal_7B1CC7174B22F21E7120E7B20B971DE1);
	TArray<class APRI_TA*> GetHumanPrimaryPlayers(TArray<class APRI_TA*>* FilterLocal_F9F2E45A444F90575C3A61AE22AFC9C2);
	TArray<class APRI_TA*> GetHumanPlayers(TArray<class APRI_TA*>* FilterLocal_8B9315554F0C49CBB45D278D9FA7A794);
	TArray<struct FUniqueNetId> GetPartyFollowerIds(class APRI_TA* PRI, TArray<class APRI_TA*>* ArrayResultLocal_BE8C620A4E619A65D2A279BE889384F1, TArray<class APRI_TA*>* FilterLocal_289A996D461E168E656EB1B729A50CA1, TArray<struct FUniqueNetId>* MapLocal_45248B68404FC0C230503F9A6F4C1A9C);
	class APRI_TA* GetTeamMemberNamed(const struct FString& PlayerName);
	int GetNumBots();
	int GetNumHumans();
	void OnScoreUpdated();
	void ResetScore();
	void RemovePoints(int Points);
	void SetScore(int Points);
	void ScorePoint(int AdditionalScore);
	void Destroyed();
	void MuteOtherTeam(class ATeam_TA* OtherTeam, bool bMute);
	void MutePlayer(class AController* Other);
	bool GetPlayerReplacementSpot(struct FVector* OutLoc, struct FRotator* OutRot, struct FVector* OutVel);
	void ClearTemporarySpawnSpots();
	void ExpireTemporarySpawnSpots();
	void AddTemporarySpawnSpot(class AActor* AtActor);
	void RemoveFromTeam(class AController* Other);
	bool AddToTeam(class AController* Other);
	void OnGameEventSet();
	void SetGameEvent(class AGameEvent_Team_TA* InGameEvent);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventForfeit(class ATeam_TA* Team);
	void EventLogoChanged(class ATeam_TA* Team);
	void EventNameChanged(class ATeam_TA* Team);
	void EventScoreUpdated(class ATeam_TA* Team);
	void EventColorsChanged(class ATeam_TA* Team);
	void EventMemberRemoved(class ATeam_TA* Team, class APRI_TA* Member);
	void EventMemberAdded(class ATeam_TA* Team, class APRI_TA* Member);
};


// Class TAGame.TeamColorScriptedTexture_TA
// 0x0014 (0x01C4 - 0x01B0)
class UTeamColorScriptedTexture_TA : public UScriptedTexture
{
public:
	TArray<struct FLinearColor>                        PixelColorList;                                           // 0x01B0(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bMaxBrightness : 1;                                       // 0x01C0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TeamColorScriptedTexture_TA");
		return ptr;
	}


	void RenderColorArray(TArray<struct FLinearColor> ColorArray);
	void OnRender(class UCanvas* Canvas);
	struct FLinearColor STATIC_GetFullBrightColor(const struct FLinearColor& C, float ValueScale);
	void SetColorsArray(TArray<struct FLinearColor> ColorList, bool bAllowMaxBrightness);
};


// Class TAGame.ThrottleShakeComponent_TA
// 0x000C (0x01C4 - 0x01B8)
class UThrottleShakeComponent_TA : public UShakeComponent_X
{
public:
	float                                              ThrottleRiseSpeed;                                        // 0x01B8(0x0004) (Edit)
	float                                              ThrottleFallSpeed;                                        // 0x01BC(0x0004) (Edit)
	float                                              Throttle;                                                 // 0x01C0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ThrottleShakeComponent_TA");
		return ptr;
	}

};


// Class TAGame.ThumbnailRenderer_TA
// 0x01D8 (0x0238 - 0x0060)
class UThumbnailRenderer_TA : public UObject
{
public:
	struct FRotator                                    CameraRotation;                                           // 0x0060(0x000C) (Edit)
	struct FVector                                     CameraTranslation;                                        // 0x006C(0x000C) (Edit)
	float                                              CameraFOV;                                                // 0x0078(0x0004) (Edit)
	unsigned long                                      bAutoZoomCamera : 1;                                      // 0x007C(0x0004) (Edit)
	unsigned long                                      bDisableLightEnvironment : 1;                             // 0x007C(0x0004) (Edit)
	unsigned long                                      CompressionNone : 1;                                      // 0x007C(0x0004) (Edit)
	unsigned long                                      bSkipBackground : 1;                                      // 0x007C(0x0004) (Edit)
	unsigned long                                      bSkipScene : 1;                                           // 0x007C(0x0004) (Edit)
	struct FRotator                                    ProductRotation;                                          // 0x0080(0x000C) (Edit)
	struct FVector                                     ProductTranslation;                                       // 0x008C(0x000C) (Edit)
	class UPrefab*                                     ScenePrefab;                                              // 0x0098(0x0008) (Edit)
	class UPostProcessChain*                           ScenePostProcessChain;                                    // 0x00A0(0x0008) (Edit)
	struct FPostProcessSettings                        ScenePostProcessSettings;                                 // 0x00A8(0x0168) (Edit, NeedCtorLink)
	struct FLinearColor                                BackgroundColor;                                          // 0x0210(0x0010) (Edit, Config)
	int                                                RenderWidth;                                              // 0x0220(0x0004) (Edit, Config)
	int                                                RenderHeight;                                             // 0x0224(0x0004) (Edit, Config)
	int                                                TextureWidth;                                             // 0x0228(0x0004) (Edit, Config)
	int                                                TextureHeight;                                            // 0x022C(0x0004) (Edit, Config)
	TEnumAsByte<ETextureMipGenSettings>                MipGenSettings;                                           // 0x0230(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0231(0x0003) MISSED OFFSET
	int                                                LODBias;                                                  // 0x0234(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ThumbnailRenderer_TA");
		return ptr;
	}


	class UTexture2D* RenderScene(class UThumbnailScene_TA* Scene, const struct FString& TextureName, class UPackage* InPackage);
	class UThumbnailScene_TA* BuildScene();
};


// Class TAGame.ThumbnailScene_TA
// 0x0044 (0x00A4 - 0x0060)
class UThumbnailScene_TA : public UObject
{
public:
	TArray<struct FThumbnailComponent>                 SceneComponents;                                          // 0x0060(0x0010) (Component, NeedCtorLink)
	struct FVector                                     ViewTranslation;                                          // 0x0070(0x000C)
	struct FRotator                                    ViewRotation;                                             // 0x007C(0x000C)
	unsigned long                                      bForceAllUsedMipsResident : 1;                            // 0x0088(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	class UTexture2D*                                  Background;                                               // 0x0090(0x0008)
	struct FPointer                                    RenderScene;                                              // 0x0098(0x0008) (Const, Native, Transient)
	float                                              CameraFOV;                                                // 0x00A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ThumbnailScene_TA");
		return ptr;
	}


	void HideAllMeshes();
	class UActorComponent* GetSceneComponent(class UClass* ComponentClass, const struct FName& Tag);
};


// Class TAGame.TickNotifyDelegate_TA
// 0x0020 (0x0080 - 0x0060)
class UTickNotifyDelegate_TA : public UObject
{
public:
	struct FPointer                                    VfTable_IITickNotify_TA;                                  // 0x0060(0x0008) (Const, Native, NoExport)
	struct FScriptDelegate                             __EventPrePhysicsStep__Delegate;                          // 0x0068(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TickNotifyDelegate_TA");
		return ptr;
	}


	void Stop();
	void Start();
	class UTickNotifyDelegate_TA* OnPrePhysicsStep(const struct FScriptDelegate& Callback);
	class UTickNotifyDelegate_TA* STATIC_Create();
	void EventPrePhysicsStep(float DeltaTime);
};


// Class TAGame.VanityQuery_TA
// 0x0058 (0x00C8 - 0x0070)
class UVanityQuery_TA : public UComponent
{
public:
	int                                                MaxNumberQueriesAllowed;                                  // 0x0070(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	TArray<struct FVanityQuerySet>                     ActiveQueries;                                            // 0x0078(0x0010) (Transient, NeedCtorLink)
	TArray<struct FVanityQueryRequest>                 QueuedRequests;                                           // 0x0088(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __VanitiesUpdated__Delegate;                              // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0098(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __CompleteRequest__Delegate;                              // 0x00B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VanityQuery_TA");
		return ptr;
	}


	void CompleteRequests(TArray<struct FUniqueNetId> PlayerIDs, TEnumAsByte<EVanityType> InType, const struct FScriptDelegate& ProcessQuery, bool bUsedCachedResult, TArray<struct FUniqueNetId>* FilterLocal_642098CA48D18C8E0D72B5A31291B773);
	bool GetQueryInfo(const struct FUniqueNetId& PlayerID, TEnumAsByte<EVanityType> InType, class UGFxShell_X** OutShell, struct FScriptDelegate* OutCallback);
	void FindNewRequests(struct FVanityQueryRequest* InRequest, struct FVanityQuerySet* QuerySet);
	int GetNumActiveQueries();
	void GetNextAvailableIDs(TArray<struct FVanityQuerySet>* QuerySets);
	bool CanStartNewQuery();
	void StartQuery(class UGFxShell_X* Shell, TArray<struct FUniqueNetId> PlayerIDs, TEnumAsByte<EVanityType> InType, const struct FScriptDelegate& Callback, bool bForcedUpdate);
	bool HaveRequestsQueued();
	int FindQueryIndex(const struct FUniqueNetId& InPlayerId, TEnumAsByte<EVanityType> InVanityType);
	void CompleteRequest(TArray<struct FUniqueNetId> PlayerIDs, class UGFxShell_X* Shell, const struct FScriptDelegate& Callback);
	void VanitiesUpdated(TArray<struct FUniqueNetId> PlayerIDs);
};


// Class TAGame.VanitySet_TA
// 0x0018 (0x0078 - 0x0060)
class UVanitySet_TA : public UObject
{
public:
	class UPlayerAvatar_TA*                            Avatar;                                                   // 0x0060(0x0008) (ExportObject, Component, EditInline)
	class UPlayerBanner_TA*                            Banner;                                                   // 0x0068(0x0008) (ExportObject, Component, EditInline)
	class UPlayerAvatarBorder_TA*                      Border;                                                   // 0x0070(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VanitySet_TA");
		return ptr;
	}

};


// Class TAGame.VanitySetManager_TA
// 0x0078 (0x00D8 - 0x0060)
class UVanitySetManager_TA : public UObject
{
public:
	class UOnlineGame_X*                               OnlineGame;                                               // 0x0060(0x0008)
	struct FMap_Mirror                                 VanityMap;                                                // 0x0068(0x0050) (Native)
	class UVanityQuery_TA*                             VanityQuery;                                              // 0x00B8(0x0008) (ExportObject, Component, EditInline)
	struct FScriptDelegate                             __VanitiesUpdated__Delegate;                              // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VanitySetManager_TA");
		return ptr;
	}


	bool __VanitySetManager_TA__HandlePsyNetReadBanner_A86B595E4077A78A3E3281B2EA08338A(int Type);
	bool __VanitySetManager_TA__HandlePsyNetReadBorder_7049E7A04C6919ED2F36D7921E3D6596(int Type);
	void SetBorder(class UPlayerAvatarBorder_TA* InBorder);
	void HandleLoadedAvatarBorderAsset(const struct FUniqueNetId& InPlayerId, TEnumAsByte<EVanityType> VanityType, TArray<struct FUniqueNetId>* ArrayInitializer_09BA28A247EF89AFE355D798745CAC37);
	void HandlePsyNetReadBorder(class URPC_PsyNetGetVanities_TA* RPC);
	void RequestsBorders(TArray<struct FUniqueNetId> PlayerIDs, bool bForcedUpdate, class URPC_PsyNetGetVanities_TA** RPC, TArray<struct FUniqueNetId>* FilterLocal_881839BC4C103A22606736950AF81848);
	void ProcessBorders(TArray<struct FUniqueNetId> PlayerIDs, class UGFxShell_X* Shell, const struct FScriptDelegate& Callback);
	void ReadBorders(class UGFxShell_X* Shell, TArray<struct FUniqueNetId> PlayerIDs, const struct FScriptDelegate& Callback, bool bForceUpdate);
	class UPlayerAvatarBorder_TA* GetAvatarBorder(const struct FUniqueNetId& PlayerID);
	void SetBanner(class UPlayerBanner_TA* InBanner);
	void HandleLoadedBannerAsset(const struct FUniqueNetId& InPlayerId, TEnumAsByte<EVanityType> VanityType, TArray<struct FUniqueNetId>* ArrayInitializer_56387C4F436F2CC565826AAB33C33914);
	void HandlePsyNetReadBanner(class URPC_PsyNetGetVanities_TA* RPC);
	void RequestBanners(TArray<struct FUniqueNetId> PlayerIDs, bool bForcedUpdate, class URPC_PsyNetGetVanities_TA** RPC, TArray<struct FUniqueNetId>* FilterLocal_44B158814969049192092DB44A86A9D6);
	void ProcessBanners(TArray<struct FUniqueNetId> PlayerIDs, class UGFxShell_X* Shell, const struct FScriptDelegate& Callback);
	void ReadBanners(class UGFxShell_X* Shell, TArray<struct FUniqueNetId> PlayerIDs, const struct FScriptDelegate& Callback, bool bForcedUpdate);
	class UPlayerBanner_TA* GetBanner(const struct FUniqueNetId& PlayerID);
	void SetAvatar(class UPlayerAvatar_TA* InAvatar);
	void HandleLoadedAvatarAsset(const struct FUniqueNetId& InPlayerId, TEnumAsByte<EVanityType> VanityType, TArray<struct FUniqueNetId>* ArrayInitializer_33C98CBE41399C279E9BDE8E84E4113F);
	void HandleSubSystemReadAvatar(const struct FUniqueNetId& PlayerID, class UTexture* Avatar, const struct FString& OnlinePlayerName, TArray<struct FUniqueNetId>* ArrayInitializer_E764D73541A87789E428E2871B6B6BE6);
	void RequestAvatars(TArray<struct FUniqueNetId> PlayerIDs, bool bForcedUpdate, class URPC_PsyNetGetVanities_TA** RPC, TArray<struct FUniqueNetId>* FilterLocal_2EBE1F05492C5A05177525A6E6D586DB);
	void ProcessAvatars(TArray<struct FUniqueNetId> PlayerIDs, class UGFxShell_X* Shell, const struct FScriptDelegate& Callback);
	void ReadAvatars(class UGFxShell_X* Shell, TArray<struct FUniqueNetId> PlayerIDs, const struct FScriptDelegate& Callback, bool bForceUpdate);
	class UPlayerAvatar_TA* GetAvatar(const struct FUniqueNetId& PlayerID);
	void HandlePsyNetLoggedIn();
	void ReadVanity_Internal(class UGFxShell_X* Shell, TArray<struct FUniqueNetId> PlayerIDs, TEnumAsByte<EVanityType> InType, const struct FScriptDelegate& Callback, bool bForcedUpdate, TArray<struct FUniqueNetId>* FilterLocal_B7CCBAC940D147CA0AFFFF9B83AB4CB9);
	void TryProcessVanity(TEnumAsByte<EVanityType> InType, TArray<struct FUniqueNetId>* PlayerIDs);
	void UpdateQueries(float DeltaTime);
	class UVanitySet_TA* GetOrCreateVanity(const struct FUniqueNetId& PlayerID);
	void AddToMap(const struct FUniqueNetId& PlayerID, class UVanitySet_TA* Vanity);
	class UVanitySet_TA* GetVanitySet(const struct FUniqueNetId& PlayerID);
	void VanitiesUpdated(TArray<struct FUniqueNetId> PlayerIDs);
};


// Class TAGame.VehiclePartStaticMeshComponent_TA
// 0x0008 (0x0310 - 0x0308)
class UVehiclePartStaticMeshComponent_TA : public UStaticMeshComponent
{
public:
	class URB_BodySetup*                               BodySetupOverride;                                        // 0x0308(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePartStaticMeshComponent_TA");
		return ptr;
	}

};


// Class TAGame.VehiclePickup_TA
// 0x0088 (0x02F0 - 0x0268)
class AVehiclePickup_TA : public AActor
{
public:
	float                                              RespawnDelay;                                             // 0x0268(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x026C(0x0004) MISSED OFFSET
	class AFXActor_X*                                  FXActorArchetype;                                         // 0x0270(0x0008) (Edit)
	class AFXActor_X*                                  FXActor;                                                  // 0x0278(0x0008) (Edit, EditConst, DuplicateTransient)
	class UFXActorEvent_X*                             PickedUpEvent;                                            // 0x0280(0x0008)
	class UFXActorEvent_X*                             LocalPickedUpEvent;                                       // 0x0288(0x0008)
	class UCylinderComponent*                          CylinderComponent;                                        // 0x0290(0x0008) (ExportObject, Component, EditInline)
	struct FPickupData                                 ReplicatedPickupData;                                     // 0x0298(0x0010) (Net, Transient)
	struct FPickupData2                                NewReplicatedPickupData;                                  // 0x02A8(0x0010) (Net, Transient)
	unsigned long                                      bNetRelevant : 1;                                         // 0x02B8(0x0004)
	unsigned long                                      bNoPickup : 1;                                            // 0x02B8(0x0004) (Net, Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventSpawned__Delegate;                                 // 0x02C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x02BC(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPickedUp__Delegate;                                // 0x02D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x02D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePickup_TA");
		return ptr;
	}


	void PlayPickedUpFX();
	bool IsTouchingAVehicle();
	void UpdateTickDisabled();
	bool IsPickedUp();
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void SetNetRelevant(bool bRelevant);
	void Respawn();
	void UpdatePickupState();
	void SetPickedUpDeprecated(bool bNewPickedUp, class ACar_TA* InInstigator);
	void Pickup(class ACar_TA* Car);
	bool CanPickup(class ACar_TA* Car);
	void OnTouch(class ACar_TA* Car);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnPickUp();
	void OnSpawn();
	void SetNoPickup();
	void SetupReplicateNoPickup();
	void InitFX();
	void PostBeginPlay();
	void PreBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventPickedUp(class AVehiclePickup_TA* Pickup);
	void EventSpawned(class AVehiclePickup_TA* Pickup);
};


// Class TAGame.VehicleSim_TA
// 0x00C7 (0x0164 - 0x009D)
class UVehicleSim_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	TArray<class UWheel_TA*>                           Wheels;                                                   // 0x00A0(0x0010) (Edit, Const, ExportObject, Component, NeedCtorLink, EditInline)
	struct FInterpCurveFloat                           SteerAngleCurve;                                          // 0x00B0(0x0018) (Edit, NeedCtorLink)
	float                                              DriveTorque;                                              // 0x00C8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           DriveTorqueCurve;                                         // 0x00D0(0x0018) (Edit, NeedCtorLink)
	float                                              BrakeTorque;                                              // 0x00E8(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           HandbrakeSteerAngleCurve;                                 // 0x00F0(0x0018) (Edit, NeedCtorLink)
	struct FInputRate                                  HandbrakeRate;                                            // 0x0108(0x0008) (Edit)
	float                                              StopThreshold;                                            // 0x0110(0x0004) (Edit)
	float                                              IdleBrakeFactor;                                          // 0x0114(0x0004) (Edit)
	float                                              OppositeBrakeFactor;                                      // 0x0118(0x0004) (Edit)
	unsigned long                                      bUseAckermannSteering : 1;                                // 0x011C(0x0004) (Edit)
	unsigned long                                      bWasAttached : 1;                                         // 0x011C(0x0004) (Const, Transient)
	float                                              OutputThrottle;                                           // 0x0120(0x0004) (Transient)
	float                                              OutputSteer;                                              // 0x0124(0x0004) (Transient)
	float                                              OutputBrake;                                              // 0x0128(0x0004) (Transient)
	float                                              OutputHandbrake;                                          // 0x012C(0x0004) (Transient)
	class AVehicle_TA*                                 Vehicle;                                                  // 0x0130(0x0008) (Transient)
	class ACar_TA*                                     Car;                                                      // 0x0138(0x0008) (Transient)
	struct FPointer                                    BulletVehicle;                                            // 0x0140(0x0008) (Const, Native, Transient)
	float                                              SteeringSensitivity;                                      // 0x0148(0x0004) (Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	TArray<float>                                      TireFrictionScales;                                       // 0x0150(0x0010) (Const, NeedCtorLink)
	float                                              TireFrictionScale;                                        // 0x0160(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehicleSim_TA");
		return ptr;
	}


	void RemoveTireFrictionScale(float InScale);
	void AddTireFrictionScale(float InScale);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	struct FTurningCircle GetMaxTurningCircle(float SteerAmt, float AtSpeed, const struct FVector& AtLocation, const struct FRotator& AtRotation);
	struct FTurningCircle GetMaxTurningCircleAt(float SteerAmt, float AtSpeed, const struct FVector& AtLocation, const struct FRotator& AtRotation);
	void OnDetached();
	void SetupWheelPreset(class UWheel_TA* Wheel, const struct FVehicleAxleData& PresetAxle, const struct FVehicleWheelSettings& WheelSettings);
	void SetupPresetAxle(class UWheel_TA* LeftWheel, class UWheel_TA* RightWheel, const struct FVehicleAxleSettings& VisualAxle, const struct FVehicleAxleData& PresetAxle);
	void SetupWheelBone(class UWheel_TA* Wheel, const struct FVehicleAxleSettings& Axle, const struct FVehicleWheelSettings& WheelSettings);
	void SetupBoneAxle(class UWheel_TA* LeftWheel, class UWheel_TA* RightWheel, const struct FVehicleAxleSettings& Axle);
	void OnAttached();
};


// Class TAGame.VoteActor_TA
// 0x0118 (0x0380 - 0x0268)
class AVoteActor_TA : public AActor
{
public:
	TEnumAsByte<EVoteSubject>                          Subject;                                                  // 0x0268(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0269(0x0003) MISSED OFFSET
	int                                                TimeRemaining;                                            // 0x026C(0x0004) (Edit)
	unsigned long                                      bUnanimousVote : 1;                                       // 0x0270(0x0004) (Edit)
	unsigned long                                      bAllowSplitscreenVoters : 1;                              // 0x0270(0x0004) (Edit)
	unsigned long                                      bFinished : 1;                                            // 0x0270(0x0004) (Net, Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0274(0x0004) MISSED OFFSET
	TArray<struct FVoter>                              Voters;                                                   // 0x0278(0x0010) (Transient, NeedCtorLink)
	struct FVoter                                      ReplicatedVoters[0x8];                                    // 0x0288(0x0010) (Net, Transient)
	struct FScriptDelegate                             __EventStarted__Delegate;                                 // 0x0308(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0308(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventVotersChanged__Delegate;                           // 0x0320(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0320(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTimeRemainingChanged__Delegate;                    // 0x0338(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0338(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventFinished__Delegate;                                // 0x0350(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0350(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventDestroyed__Delegate;                               // 0x0368(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0368(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VoteActor_TA");
		return ptr;
	}


	void Destroyed();
	void DestroySelf();
	bool Failed();
	bool Passed();
	int RequiredVotes();
	int NoVotes();
	int YesVotes();
	void FinishVote();
	void CheckFinished();
	void SetVoteStatus(class APRI_TA* PRI, TEnumAsByte<EVoteStatus> Status);
	void OnVotersChanged();
	void RemoveVoter(class APRI_TA* PRI);
	void AddVoter(class APRI_TA* PRI);
	void UpdateTimeRemaining();
	void AddTeam(class ATeam_TA* Team);
	void AddGameEvent(class AGameEvent_TA* GameEvent);
	void ReplicatedEvent(const struct FName& VarName);
	void PostBeginPlay();
	void EventDestroyed(class AVoteActor_TA* VoteActor);
	void EventFinished(class AVoteActor_TA* VoteActor);
	void EventTimeRemainingChanged(class AVoteActor_TA* VoteActor);
	void EventVotersChanged(class AVoteActor_TA* VoteActor);
	void EventStarted(class AVoteActor_TA* VoteActor);
};


// Class TAGame.WebBrowser_TA
// 0x0050 (0x00B0 - 0x0060)
class UWebBrowser_TA : public UObject
{
public:
	unsigned long                                      bBrowserLoading : 1;                                      // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventWebBrowserOpened__Delegate;                        // 0x0068(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0064(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventWebBrowserClosed__Delegate;                        // 0x0080(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0080(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventWebBrowserLoaded__Delegate;                        // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0098(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.WebBrowser_TA");
		return ptr;
	}


	void STATIC_PageLoaded(const struct FString& PageTitle, const struct FString& URL);
	void STATIC_Close();
	void STATIC_OpenURL(const struct FString& URL, int BrowserWidth, int BrowserHeight);
	void EventWebBrowserLoaded(const struct FString& PageTitle, const struct FString& URL);
	void EventWebBrowserClosed();
	void EventWebBrowserOpened(const struct FString& URL);
};


// Class TAGame.Wheel_TA
// 0x0170 (0x01E0 - 0x0070)
class UWheel_TA : public UComponent
{
public:
	float                                              SteerFactor;                                              // 0x0070(0x0004) (Edit)
	float                                              WheelRadius;                                              // 0x0074(0x0004) (Edit)
	float                                              SuspensionStiffness;                                      // 0x0078(0x0004) (Edit)
	float                                              SuspensionDampingCompression;                             // 0x007C(0x0004) (Edit)
	float                                              SuspensionDampingRelaxation;                              // 0x0080(0x0004) (Edit)
	float                                              SuspensionTravel;                                         // 0x0084(0x0004) (Edit)
	float                                              SuspensionMaxRaise;                                       // 0x0088(0x0004) (Edit)
	float                                              ContactForceDistance;                                     // 0x008C(0x0004) (Edit)
	float                                              PushForceConstant;                                        // 0x0090(0x0004) (Edit)
	float                                              SpinSpeedDecayRate;                                       // 0x0094(0x0004) (Edit)
	struct FInterpCurveFloat                           LatFrictionCurve;                                         // 0x0098(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           LongFrictionCurve;                                        // 0x00B0(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           HandbrakeLatFrictionCurve;                                // 0x00C8(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           HandbrakeLongFrictionCurve;                               // 0x00E0(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           WallFrictionCurve;                                        // 0x00F8(0x0018) (Edit, NeedCtorLink)
	struct FName                                       BoneName;                                                 // 0x0110(0x0008) (Edit)
	struct FName                                       PhysicsBoneName;                                          // 0x0118(0x0008) (Edit)
	struct FVector                                     BoneOffset;                                               // 0x0120(0x000C) (Edit)
	struct FVector                                     PresetRestPosition;                                       // 0x012C(0x000C) (Edit)
	struct FVector                                     LocalSuspensionRayStart;                                  // 0x0138(0x000C) (Const, Transient)
	struct FVector                                     LocalRestPosition;                                        // 0x0144(0x000C) (Const, Transient)
	class UVehicleSim_TA*                              VehicleSim;                                               // 0x0150(0x0008) (ExportObject, Transient, Component, EditInline)
	int                                                WheelIndex;                                               // 0x0158(0x0004) (Const, Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x015C(0x0004) MISSED OFFSET
	struct FWheelContactData                           Contact;                                                  // 0x0160(0x0050) (Const, Transient, Component)
	unsigned long                                      bDrawDebug : 1;                                           // 0x01B0(0x0004)
	unsigned long                                      bHadContact : 1;                                          // 0x01B0(0x0004) (Const, Transient)
	float                                              FrictionCurveInput;                                       // 0x01B4(0x0004) (Const, Transient)
	float                                              AerialThrottleToVelocityFactor;                           // 0x01B8(0x0004) (Edit)
	float                                              AerialAccelerationFactor;                                 // 0x01BC(0x0004) (Edit)
	float                                              SpinSpeed;                                                // 0x01C0(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventContactChanged__Delegate;                          // 0x01C8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x01C4(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Wheel_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	struct FVector GetRefWheelLocation();
	float GetSuspensionDistance();
	float GetSteer();
	struct FVector GetLinearVelocity();
	void EventContactChanged(class UWheel_TA* Wheel);
};


// Class TAGame.WheelAssetGenerator_TA
// 0x0010 (0x0080 - 0x0070)
class UWheelAssetGenerator_TA : public UComponent
{
public:
	TArray<class UWheelAssetSettings_TA*>              Wheels;                                                   // 0x0070(0x0010) (Edit, ExportObject, EditConst, Component, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.WheelAssetGenerator_TA");
		return ptr;
	}


	void Generate();
	void Copy(class UWheelAssetGenerator_TA* Other);
};


// Class TAGame.WheelAssetGenerator_1Wheel_TA
// 0x0010 (0x0090 - 0x0080)
class UWheelAssetGenerator_1Wheel_TA : public UWheelAssetGenerator_TA
{
public:
	TEnumAsByte<EMeshMirrorMode>                       MirrorMode;                                               // 0x0080(0x0001) (Edit)
	TEnumAsByte<EMeshMirrorMode>                       ParticleMirrorMode;                                       // 0x0081(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0082(0x0006) MISSED OFFSET
	class UWheelAssetSettings_TA*                      FrontRight;                                               // 0x0088(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.WheelAssetGenerator_1Wheel_TA");
		return ptr;
	}


	void Generate();
	void Copy(class UWheelAssetGenerator_TA* Other);
};


// Class TAGame.WheelAssetGenerator_4Wheels_TA
// 0x0020 (0x00A0 - 0x0080)
class UWheelAssetGenerator_4Wheels_TA : public UWheelAssetGenerator_TA
{
public:
	class UWheelAssetSettings_TA*                      FrontLeft;                                                // 0x0080(0x0008) (Edit, ExportObject, Component, EditInline)
	class UWheelAssetSettings_TA*                      FrontRight;                                               // 0x0088(0x0008) (Edit, ExportObject, Component, EditInline)
	class UWheelAssetSettings_TA*                      BackLeft;                                                 // 0x0090(0x0008) (Edit, ExportObject, Component, EditInline)
	class UWheelAssetSettings_TA*                      BackRight;                                                // 0x0098(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.WheelAssetGenerator_4Wheels_TA");
		return ptr;
	}


	void Generate();
	void Copy(class UWheelAssetGenerator_TA* Other);
};


// Class TAGame.WheelAssetGenerator_FrontWheels_TA
// 0x0010 (0x0090 - 0x0080)
class UWheelAssetGenerator_FrontWheels_TA : public UWheelAssetGenerator_TA
{
public:
	class UWheelAssetSettings_TA*                      FrontRight;                                               // 0x0080(0x0008) (Edit, ExportObject, Component, EditInline)
	class UWheelAssetSettings_TA*                      FrontLeft;                                                // 0x0088(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.WheelAssetGenerator_FrontWheels_TA");
		return ptr;
	}


	void Generate();
	void Copy(class UWheelAssetGenerator_TA* Other);
};


// Class TAGame.WheelAssetGenerator_RightWheels_TA
// 0x0018 (0x0098 - 0x0080)
class UWheelAssetGenerator_RightWheels_TA : public UWheelAssetGenerator_TA
{
public:
	TEnumAsByte<EMeshMirrorMode>                       MirrorMode;                                               // 0x0080(0x0001) (Edit)
	TEnumAsByte<EMeshMirrorMode>                       ParticleMirrorMode;                                       // 0x0081(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0082(0x0006) MISSED OFFSET
	class UWheelAssetSettings_TA*                      FrontRight;                                               // 0x0088(0x0008) (Edit, ExportObject, Component, EditInline)
	class UWheelAssetSettings_TA*                      BackRight;                                                // 0x0090(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.WheelAssetGenerator_RightWheels_TA");
		return ptr;
	}


	void Generate();
	void Copy(class UWheelAssetGenerator_TA* Other);
};


// Class TAGame.WheelAssetSettings_TA
// 0x0050 (0x00C0 - 0x0070)
class UWheelAssetSettings_TA : public UComponent
{
public:
	class UStaticMesh*                                 StaticMesh;                                               // 0x0070(0x0008) (Edit)
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0078(0x0008) (Edit)
	class UAnimTree*                                   AnimTree;                                                 // 0x0080(0x0008) (Edit)
	TArray<class UAttachmentBehavior_TA*>              Behaviors;                                                // 0x0088(0x0010) (Edit, NeedCtorLink, EditInline)
	TArray<struct FWheelAttachment>                    Attachments;                                              // 0x0098(0x0010) (Edit, Component, NeedCtorLink)
	struct FVector                                     Scale3D;                                                  // 0x00A8(0x000C) (Edit)
	struct FRotator                                    Rotation;                                                 // 0x00B4(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.WheelAssetSettings_TA");
		return ptr;
	}

};


// Class TAGame.WheelSpeedComponent_TA
// 0x002C (0x00D0 - 0x00A4)
class UWheelSpeedComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class AVehicle_TA*                                 Car;                                                      // 0x00A8(0x0008) (Transient)
	float                                              WheelForwardSpeedInterpRate;                              // 0x00B0(0x0004) (Edit)
	float                                              WheelSideSpeedInterpRate;                                 // 0x00B4(0x0004) (Edit)
	float                                              MaxWheelSpeed;                                            // 0x00B8(0x0004) (Edit)
	float                                              AvgWheelForwardSpeed;                                     // 0x00BC(0x0004) (Transient)
	float                                              AvgWheelSideSpeed;                                        // 0x00C0(0x0004) (Transient)
	float                                              AvgWheelSpinSpeed;                                        // 0x00C4(0x0004) (Transient)
	float                                              OldWheelRotation;                                         // 0x00C8(0x0004) (Transient)
	float                                              WheelTurnSpeed;                                           // 0x00CC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.WheelSpeedComponent_TA");
		return ptr;
	}


	void Detached();
	void Attached();
};


// Class TAGame.BuildInfo_TA
// 0x0038 (0x0098 - 0x0060)
class UBuildInfo_TA : public UObject
{
public:
	struct FString                                     VersionString;                                            // 0x0060(0x0010) (Const, NeedCtorLink)
	int                                                Changelist;                                               // 0x0070(0x0004) (Const)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	struct FString                                     Branch;                                                   // 0x0078(0x0010) (Const, NeedCtorLink)
	struct FString                                     Label;                                                    // 0x0088(0x0010) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BuildInfo_TA");
		return ptr;
	}

};


// Class TAGame.RLBot_PreTickActor
// 0x0000 (0x0268 - 0x0268)
class ARLBot_PreTickActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RLBot_PreTickActor");
		return ptr;
	}

};


// Class TAGame.RLBot_PostTickActor
// 0x0000 (0x0268 - 0x0268)
class ARLBot_PostTickActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RLBot_PostTickActor");
		return ptr;
	}

};


// Class TAGame.DeprecatedProperty
// 0x0000 (0x0070 - 0x0070)
class UDeprecatedProperty : public UField
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DeprecatedProperty");
		return ptr;
	}

};


// Class TAGame.SkippableProperty
// 0x0018 (0x0088 - 0x0070)
class USkippableProperty : public UDeprecatedProperty
{
public:
	unsigned char                                      UnknownData00[0x18];                                      // 0x0070(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkippableProperty");
		return ptr;
	}

};


// Class TAGame.ReplayPackageMap_TA
// 0x01A0 (0x02B8 - 0x0118)
class UReplayPackageMap_TA : public UPackageMapLevel
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0118(0x0008) MISSED OFFSET
	class UReplay_TA*                                  Replay;                                                   // 0x0120(0x0008)
	unsigned char                                      UnknownData01[0x20];                                      // 0x0128(0x0020) MISSED OFFSET
	TArray<class UObject*>                             ObjectTable;                                              // 0x0148(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x160];                                     // 0x0158(0x0160) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ReplayPackageMap_TA");
		return ptr;
	}

};


// Class TAGame.MergePartyEvent_TA
// 0x0028 (0x0088 - 0x0060)
class UMergePartyEvent_TA : public UObject
{
public:
	class AStayAsPartyVoter_TA*                        Leader;                                                   // 0x0060(0x0008)
	TArray<struct FUniqueNetId>                        InviteeIDs;                                               // 0x0068(0x0010) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        ConfirmedInvitees;                                        // 0x0078(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MergePartyEvent_TA");
		return ptr;
	}


	struct FString ToTestString();
	bool PlayerIsFollower(struct FUniqueNetId* PlayerID);
	bool FromReplicatedData(struct FMergePartyReplicatedData* InputData);
	void ToReplicatedData(struct FMergePartyReplicatedData* OutputData);
	bool AllInviteesConfirmed();
	void AddInviteeConfirmation(class APRI_TA* PRI);
	bool RemoveInvitee(struct FUniqueNetId* PlayerID);
	void AddInvitees(TArray<struct FUniqueNetId>* Ids);
	void AddInvitee(struct FUniqueNetId* Id);
	class UMergePartyEvent_TA* Copy(class UMergePartyEvent_TA** ObjectInitializer_F7E3219A4673320BB95E17894B469C8D);
};


// Class TAGame.GameEvent_Soccar_TA
// 0x04C0 (0x0C28 - 0x0768)
class AGameEvent_Soccar_TA : public AGameEvent_Team_TA
{
public:
	class ACar_TA*                                     TestCarArchetype;                                         // 0x0768(0x0008) (Edit)
	class ABall_TA*                                    BallArchetype;                                            // 0x0770(0x0008) (Edit)
	class AGoalIndicator_TA*                           GoalIndicatorArchetype;                                   // 0x0778(0x0008)
	class AActor*                                      BallSpawnPoint;                                           // 0x0780(0x0008) (Edit)
	class AStatFactory_TA*                             StatFactoryArchetype;                                     // 0x0788(0x0008) (Edit)
	struct FName                                       InitialEventState;                                        // 0x0790(0x0008) (Edit)
	int                                                SeriesLength;                                             // 0x0798(0x0004) (Edit, Net)
	int                                                GameTime;                                                 // 0x079C(0x0004) (Edit, Net)
	int                                                WarmupTime;                                               // 0x07A0(0x0004) (Edit)
	int                                                MaxScore;                                                 // 0x07A4(0x0004) (Edit, Net)
	int                                                AutoBalanceDifference;                                    // 0x07A8(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x07AC(0x0004) MISSED OFFSET
	class UOvertimeComponent_TA*                       OvertimeComponent;                                        // 0x07B0(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FInterpCurveFloat                           ScoreSlomoCurve;                                          // 0x07B8(0x0018) (Edit, NeedCtorLink)
	float                                              ScoreSlomoTime;                                           // 0x07D0(0x0004) (Transient)
	float                                              GameTimeRemaining;                                        // 0x07D4(0x0004) (Transient)
	int                                                SecondsRemaining;                                         // 0x07D8(0x0004) (Net, Transient)
	int                                                WaitTimeRemaining;                                        // 0x07DC(0x0004) (Net, Transient)
	float                                              TotalGameTimePlayed;                                      // 0x07E0(0x0004) (Transient)
	float                                              OvertimeTimePlayed;                                       // 0x07E4(0x0004) (Transient)
	class UMessage_TA*                                 GoalScoredMessage;                                        // 0x07E8(0x0008)
	class UMessage_TA*                                 OvertimeMessage;                                          // 0x07F0(0x0008)
	class UMessage_TA*                                 TwoMinRemainingMessage;                                   // 0x07F8(0x0008)
	class UMessage_TA*                                 OneMinRemainingMessage;                                   // 0x0800(0x0008)
	class UMessage_TA*                                 ThirtySecondsRemainingMessage;                            // 0x0808(0x0008)
	class UMessage_TA*                                 StopMessage;                                              // 0x0810(0x0008)
	class UMessage_TA*                                 GamePausedMessage;                                        // 0x0818(0x0008)
	class UMessage_TA*                                 GameUnPausedMessage;                                      // 0x0820(0x0008)
	unsigned long                                      bRoundActive : 1;                                         // 0x0828(0x0004) (Transient)
	unsigned long                                      bPlayReplays : 1;                                         // 0x0828(0x0004) (Edit)
	unsigned long                                      bBallHasBeenHit : 1;                                      // 0x0828(0x0004) (Net, Transient)
	unsigned long                                      bOverTime : 1;                                            // 0x0828(0x0004) (Net, Transient)
	unsigned long                                      bUnlimitedTime : 1;                                       // 0x0828(0x0004) (Net)
	unsigned long                                      bNoContest : 1;                                           // 0x0828(0x0004) (Net, Transient)
	unsigned long                                      bDisableGoalDelay : 1;                                    // 0x0828(0x0004) (Transient)
	unsigned long                                      bShowNoScorerGoalMessage : 1;                             // 0x0828(0x0004) (Const)
	unsigned long                                      bMatchEnded : 1;                                          // 0x0828(0x0004) (Net, Transient)
	unsigned long                                      bShowIntroScene : 1;                                      // 0x0828(0x0004) (Net)
	unsigned long                                      bClubMatch : 1;                                           // 0x0828(0x0004) (Net)
	unsigned long                                      bCanDropOnlineRewards : 1;                                // 0x0828(0x0004) (Net)
	int                                                NextSpawnIndex;                                           // 0x082C(0x0004) (Transient)
	class AReplayDirector_TA*                          ReplayDirectorArchetype;                                  // 0x0830(0x0008) (Edit)
	class AReplayDirector_TA*                          ReplayDirector;                                           // 0x0838(0x0008) (Net, Transient)
	TArray<class ABall_TA*>                            GameBalls;                                                // 0x0840(0x0010) (Transient, NeedCtorLink)
	int                                                TotalGameBalls;                                           // 0x0850(0x0004) (Edit)
	float                                              PostGoalTime;                                             // 0x0854(0x0004) (Edit)
	class AStatFactory_TA*                             StatFactory;                                              // 0x0858(0x0008) (Transient)
	TArray<class UGoal_TA*>                            Goals;                                                    // 0x0860(0x0010) (ExportObject, Transient, Component, NeedCtorLink, EditInline)
	int                                                SecondsRemainingCountdown;                                // 0x0870(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0874(0x0004) MISSED OFFSET
	class UMessage_TA*                                 SecondsRemainingMessage;                                  // 0x0878(0x0008) (Edit)
	struct FVector                                     FieldCenter;                                              // 0x0880(0x000C) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x088C(0x0004) MISSED OFFSET
	class ATeam_TA*                                    GameWinner;                                               // 0x0890(0x0008) (Net, Transient)
	class ATeam_TA*                                    MatchWinner;                                              // 0x0898(0x0008) (Net, Transient)
	TEnumAsByte<ETieBreakDecision>                     TieBreakDecision;                                         // 0x08A0(0x0001) (Net, Transient)
	unsigned char                                      ReplicatedScoredOnTeam;                                   // 0x08A1(0x0001) (Net, Transient)
	TEnumAsByte<EConnectionQualityState>               ReplicatedServerPerformanceState;                         // 0x08A2(0x0001) (Net)
	unsigned char                                      UnknownData03[0x5];                                       // 0x08A3(0x0005) MISSED OFFSET
	class APRI_TA*                                     MVP;                                                      // 0x08A8(0x0008) (Net, Transient)
	class APRI_TA*                                     FastestGoalPlayer;                                        // 0x08B0(0x0008) (Transient)
	class APRI_TA*                                     SlowestGoalPlayer;                                        // 0x08B8(0x0008) (Transient)
	class APRI_TA*                                     FurthestGoalPlayer;                                       // 0x08C0(0x0008) (Transient)
	float                                              FastestGoalSpeed;                                         // 0x08C8(0x0004) (Transient)
	float                                              SlowestGoalSpeed;                                         // 0x08CC(0x0004) (Transient)
	float                                              FurthestGoal;                                             // 0x08D0(0x0004) (Transient)
	int                                                RoundNum;                                                 // 0x08D4(0x0004) (Net, Transient)
	float                                              AssistMaxTime;                                            // 0x08D8(0x0004) (Edit)
	float                                              BallHasBeenHitStartDelay;                                 // 0x08DC(0x0004)
	float                                              BallRespawnTime;                                          // 0x08E0(0x0004) (Transient)
	unsigned char                                      UnknownData04[0x4];                                       // 0x08E4(0x0004) MISSED OFFSET
	class UGameEvent_Soccar_SubRules_TA*               DefaultSubRules;                                          // 0x08E8(0x0008) (Edit)
	class UGameEvent_Soccar_SubRules_TA*               SubRulesArchetype;                                        // 0x08F0(0x0008) (Net, Transient)
	class UGameEvent_Soccar_SubRules_TA*               SubRules;                                                 // 0x08F8(0x0008) (Transient)
	class USpawnPointCluster_TA*                       SpawnPointsPodium;                                        // 0x0900(0x0008)
	float                                              PodiumDelay;                                              // 0x0908(0x0004)
	float                                              PodiumTime;                                               // 0x090C(0x0004)
	class USpawnPointCluster_TA*                       SpawnPointsLobby;                                         // 0x0910(0x0008)
	TArray<class UStatCategory_TA*>                    StatCategories;                                           // 0x0918(0x0010) (NeedCtorLink)
	class ABall_Trajectory_TA*                         BallTrajectory;                                           // 0x0928(0x0008)
	class ABall_Trajectory_TA*                         BallTrajectoryArchetype;                                  // 0x0930(0x0008)
	class UCountdownObject_TA*                         UnpauseCountdown;                                         // 0x0938(0x0008) (Transient)
	class APlayerController_TA*                        Pauser;                                                   // 0x0940(0x0008) (Transient)
	TArray<struct FOnlinePlayerMatchData>              PlayerMatchData;                                          // 0x0948(0x0010) (Transient, NeedCtorLink)
	class UEndRoundComponent_TA*                       EndRoundComponentArchetype;                               // 0x0958(0x0008) (Edit, ExportObject, Component, EditInline)
	class UEndRoundComponent_TA*                       EndRoundComponent;                                        // 0x0960(0x0008) (ExportObject, Component, EditInline)
	class UMatchBroadcastComponent_TA*                 MatchBroadcast;                                           // 0x0968(0x0008) (ExportObject, Component, EditInline)
	class UStatEvent_TA*                               ReplicatedStatEvent;                                      // 0x0970(0x0008) (Net, Transient)
	TArray<class UStatEvent_TA*>                       ImportantStatEvents;                                      // 0x0978(0x0010) (Edit, NeedCtorLink)
	class UGameObserver_TA*                            GameObserver;                                             // 0x0988(0x0008) (Edit, ExportObject, Component, EditInline)
	class UFpsBucketRecorder_TA*                       ActiveFpsRecorder;                                        // 0x0990(0x0008) (Edit, ExportObject, Component, EditInline)
	class UFpsBucketRecorder_TA*                       InactiveFpsRecorder;                                      // 0x0998(0x0008) (Edit, ExportObject, Component, EditInline)
	class UServerPerformanceTracker_TA*                ServerPerformanceTracker;                                 // 0x09A0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UMatchSeries_TA*                             MatchSeries;                                              // 0x09A8(0x0008) (Edit)
	class UCrowdSoundManager_TA*                       CrowdSound;                                               // 0x09B0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UBotDetection_TA*                            BotDetection;                                             // 0x09B8(0x0008) (ExportObject, Transient, Component, EditInline)
	struct FVector                                     LobbyTagOffset;                                           // 0x09C0(0x000C) (Const)
	float                                              BallSpacing;                                              // 0x09CC(0x0004) (Const)
	struct FScriptDelegate                             __EventActiveRoundChanged__Delegate;                      // 0x09D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x09D0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventStartNewRound__Delegate;                           // 0x09E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x09E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventBallAdded__Delegate;                               // 0x0A00(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0A00(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventBallRemoved__Delegate;                             // 0x0A18(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0A18(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventFirstBallHit__Delegate;                            // 0x0A30(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0A30(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventGoalScored__Delegate;                              // 0x0A48(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0A48(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventGameTimeUpdated__Delegate;                         // 0x0A60(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0A60(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventOvertimeUpdated__Delegate;                         // 0x0A78(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0A78(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventGameEnded__Delegate;                               // 0x0A90(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData13[0x8];                                       // 0x0A90(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventMatchEnded__Delegate;                              // 0x0AA8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData14[0x8];                                       // 0x0AA8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventEndGameCountDown__Delegate;                        // 0x0AC0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData15[0x8];                                       // 0x0AC0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventReplayDirectorSet__Delegate;                       // 0x0AD8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData16[0x8];                                       // 0x0AD8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventGameWinnerSet__Delegate;                           // 0x0AF0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData17[0x8];                                       // 0x0AF0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventMatchWinnerSet__Delegate;                          // 0x0B08(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData18[0x8];                                       // 0x0B08(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPlayerScored__Delegate;                            // 0x0B20(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData19[0x8];                                       // 0x0B20(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventReplicatedGoalScored__Delegate;                    // 0x0B38(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData20[0x8];                                       // 0x0B38(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventStatFactoryInitialized__Delegate;                  // 0x0B50(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData21[0x8];                                       // 0x0B50(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventReplicatedStatEvent__Delegate;                     // 0x0B68(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData22[0x8];                                       // 0x0B68(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventMaxScoreChanged__Delegate;                         // 0x0B80(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData23[0x8];                                       // 0x0B80(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __WaitTimeRemaining__ChangeNotify;                        // 0x0B98(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData24[0x8];                                       // 0x0B98(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __bShowIntroScene__ChangeNotify;                          // 0x0BB0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData25[0x8];                                       // 0x0BB0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __bClubMatch__ChangeNotify;                               // 0x0BC8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData26[0x8];                                       // 0x0BC8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __bCanDropOnlineRewards__ChangeNotify;                    // 0x0BE0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData27[0x8];                                       // 0x0BE0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __TieBreakDecision__ChangeNotify;                         // 0x0BF8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData28[0x8];                                       // 0x0BF8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __ReplicatedServerPerformanceState__ChangeNotify;         // 0x0C10(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData29[0x8];                                       // 0x0C10(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Soccar_TA");
		return ptr;
	}


	void CheckStart();
	int GetPlayerCarCount();
	void ReplicateSkillTiers();
	void SpawnLobbyCar(class AController* NewPlayer);
	bool CanSpawnBots();
	void StartRound();
	void EndRound();
	void SetBallEventListeners(class ABall_TA* Ball, bool bListen);
	bool CanAwardPoints();
	void HandleCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<EBallHitType> HitType);
	void SetBallHasBeenHit();
	int DetermineScoreTouchIndex(class ABall_TA* Ball, class UGoal_TA* Goal);
	int DetermineAssistTouchIndex(class ABall_TA* Ball, int ScoreIdx);
	void UpdateTotalGameTimePlayed(float DeltaTime);
	void UpdateGameTime(float DeltaTime);
	void WaitForEndRound();
	bool CanUpdateGameTime();
	void AddControllerToRespawnList(class AController* InController);
	void StartReplay();
	void HandleReplayFinished(class AReplayDirector_TA* InReplay);
	void GotoPodiumSpotlight();
	int MemberTitleSort(const struct FMemberTitleStat& A, const struct FMemberTitleStat& B);
	void UpdateSpotlight();
	void SpawnPodiumCars();
	bool CanEnableCarPodiumMovement();
	void FinishEvent();
	bool __GameEvent_Soccar_TA__InitClubMatch_9526810348FAC231C819B8AE0E83D351(const struct FReservationData& P);
	bool __GameEvent_Soccar_TA__InitClubMatch_DA02373545AE8C62D358348FDD10555D(const struct FReservationData& P);
	struct FFPSBucketMetrics __GameEvent_Soccar_TA__ReportFps_847D01E7401E79ED25611E971762DD43(const struct FFpsBucketData& Bucket, struct FFPSBucketMetrics* StructInitializer_DBEDB39B4492F0D19C2E0A8986F5CE31);
	bool __GameEvent_Soccar_TA__UpdateTeamScores_089BE71449F828F3CF12138FED4D6D36(class ATeam_TA* T);
	void __GameEvent_Soccar_TA__SubmitMatchComplete_7D691B6C4AEE5D61022ED4A5FEF7B528(class APRI_TA* PRI);
	void __GameEvent_Soccar_TA__CheckStart_9281D2F24A7CB247F44BB0B2C99D3D82(class ATeam_TA* T);
	bool __GameEvent_Soccar_TA__CanUpdateGameTime_7DA4E75D4C4BA928A7293FB8DFB4AB52(class ATeam_TA* Team);
	bool __GameEvent_Soccar_TA__CanSpawnBots_DCA3ED6640D56D582145CAB96044DC6E(class ATeam_TA* Team);
	void __GameEvent_Soccar_TA__EndState_A24608724D68DD7A1D6277A673525B94(class ATeam_TA* T);
	int __GameEvent_Soccar_TA__GetIsSeriesComplete_AA81AB7448C84C2281023090748960D8(class ATeam_Soccar_TA* T);
	void __ReplicatedServerPerformanceState__ChangeNotifyFunc();
	void __TieBreakDecision__ChangeNotifyFunc();
	void __bCanDropOnlineRewards__ChangeNotifyFunc();
	void __bClubMatch__ChangeNotifyFunc();
	void __bShowIntroScene__ChangeNotifyFunc();
	void __WaitTimeRemaining__ChangeNotifyFunc();
	void OnMaxScoreChanged();
	class UGoal_TA* GetGoalByTeamIndex(int TeamIndex);
	bool GetIsSeriesComplete(TArray<class ATeam_Soccar_TA*>* OfTypeLocal_0869338D486B7C83676839AE73D3359B, TArray<int>* MapLocal_DA87166F4BCC7C7C99989DABC6C7CAA4);
	void CheckJoinInProgress(class APRI_TA* PRI);
	bool AllowDynamicCrowd();
	void HandleTrajectoryEnabledChanged(class ABall_TA* InBall);
	void DestroyBallTrajectory();
	void AddBallTrajectory(class ABall_TA* InBall);
	struct FString STATIC_LocalizeInGamePresence(const struct FString& PlaylistName, const struct FString& MapName);
	void GetPresenceStatus(struct FString* Out_PresenceString, struct FString* Out_GameDataString);
	bool ShowScorerGoalMessage();
	bool CanUseBallCam();
	bool RestartPlayer(class AController* NewPlayer);
	bool DisableStatXP();
	void SetDisableGoalDelay(bool bInDisableGoalDelay, float InBallRespawnTime);
	void ForceMatchStart();
	void RemoveLocalPlayer(class APlayerController_TA* Player);
	void AddLocalPlayer(class APlayerController_TA* Player);
	void DestroyGoalIndicators(class APlayerController_TA* Player);
	class AGoalIndicator_TA* SpawnGoalIndicator(class APlayerController_TA* Player, class UGoal_TA* Goal, class AActor* OrientationActor);
	void CreateGoalIndicators(class APlayerController_TA* Player);
	void HandleMatchCompleteDataReceived(class URPC_MatchComplete_TA* RPC);
	void BeginHighlightsReplay();
	bool ShouldCountUp();
	bool ShouldAllowVoteToForfeit();
	bool ShouldHaveLeaveMatchPenalty();
	void RemovePlayer(class AController* Player);
	void HandleUnpauseTimer(class UCountdownObject_TA* CountdownObject, int CountValue);
	void SetPaused(class APlayerController_TA* InPauser, bool bInPaused);
	bool ShouldCountdownResumeFromPause();
	void SetScoreAndTime(class APlayerController_TA* PC, int NewScoreTeam0, int NewScoreTeam1, int InGameTimeRemaining, bool bInOvertime, bool bRestartRound);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void SaveLocalPlayerStats();
	bool ShouldPlayReplay();
	bool ShouldRecordReplay();
	void OnBallHasBeenHit();
	class ABall_TA* SpawnBall(const struct FVector& SpawnLoc, bool bWake, bool bSpawnCannon, const struct FString& BallArch);
	struct FName GetScoreStatus(unsigned char TeamNum);
	int GetTotalScore();
	struct FName GetDesiredSoundState();
	void HandleCarSet(class APRI_TA* InPRI);
	void RemovePRI(class APRI_TA* PRI);
	void AddPRI(class APRI_TA* PRI);
	void AddPlayerToTeam(class ATeam_TA* NewTeam, class AController* NewPlayer);
	class ATeam_TA* PickTeamForSeries(class AController* C);
	class ATeam_TA* PickTeam(class AController* C);
	bool AutoSelectTeam(class AController* C);
	void OnMatchWinnerSet(class UMatchWinner_TA** ObjectInitializer_40689D634132A060366DF88202B8D427);
	void OnGameWinnerSet();
	class APRI_TA* GetMVP(class ATeam_TA* WinningTeam, TArray<class APRI_TA*>* SortLocal_ACA5CF154CC11CFFC7109F8CBDACC95A);
	int MVPSort(class APRI_TA* A, class APRI_TA* B);
	void HandleHitGoal(class ABall_TA* Ball, class UGoal_TA* Goal);
	void ClearReplicatedScoredOnTeam();
	void TriggerScoreChangedEvent();
	void HandleScoreUpdated(class ATeam_TA* Team);
	void OnAllTeamsCreated();
	void TriggerGoalScoreEvent(int TeamScoredOn, class ACar_TA* Scorer);
	void SetTotalGameBalls(int TotalBalls);
	void RecordRecentPlayers();
	void UpdateStats();
	void AddStatData(const struct FName& StatId, const struct FUniqueNetId& PlayerID, int Value, TArray<struct FUploadStatDataSet>* DataSet);
	void NotifyKismetOfCurrentTime();
	bool EnoughTimePassedToForfeit();
	void OnGameTimeUpdated();
	void OnOvertimeUpdated();
	void ForceOvertime();
	void StartOvertime();
	bool OnMyHalf(const struct FVector& TestLocation, unsigned char TeamNum);
	class ATeam_TA* GetWinningTeam();
	void SetMatchWinner(class ATeam_TA* Team, TEnumAsByte<ETieBreakDecision> InTieBreakDecision);
	void OnBallSpawned(class ABall_TA* NewBall);
	void ResetBalls();
	bool GetBallSpawnOrientation(struct FVector* out_Location, struct FRotator* out_Rotation);
	float CalcuateBallRadius();
	void FreezePawns();
	void DestroyBalls();
	void RemoveGameBall(class ABall_TA* Ball);
	void AddGameBall(class ABall_TA* Ball);
	void StartNewRound();
	void CheckForAutoBalance();
	bool HasWinner();
	void CheckForForfeit(class AController* RemovedPlayer, class ATeam_TA* Team);
	void SubmitMatch();
	void CommitPlayerMatchData(class APRI_TA* PRI, bool bCompletedMatch, TArray<struct FReservationData>* FilterLocal_DF4151D5460851DFEAC3E59A3E58364B, struct FStatData* StructInitializer_9CBCCD3A41B6B8E905785F887C94819E);
	void SubmitMatchComplete();
	void GenerateItemDrops();
	void OnMatchEnded();
	bool ShouldDoPodiumSpotlight();
	struct FName GetEndMatchState();
	void EndGame();
	void UpdateTeamScores();
	void StartNewGame();
	void ResetToDefaultTime();
	void ResetGame();
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
	void ClearReplicatedStatEvent();
	void HandleGaveStat(class AStatFactory_TA* Factory, class APRI_TA* ToPRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim);
	void ReportFps(class UFpsBucketRecorder_TA* Recorder, bool bIsActiveFpsReport, TArray<struct FFPSBucketMetrics>* MapLocal_B1E7471E44D917319332CA96EB73EB28);
	void Destroyed();
	void InitBotDetection();
	void InitCrowdManager();
	void InitField();
	void InitGameObserver();
	void OnInit();
	void InitMutators();
	void OnClubMatch();
	void InitClubMatch(TArray<struct FReservationData>* FilterLocal_7C1F8192450B62A2D94643813DCD12BC, TArray<struct FReservationData>* FilterLocal_21780EB340C4E4AC1628B096790E4280);
	bool CanInitClubMatch();
	void SetSeriesScore(TArray<class ATeam_Soccar_TA*>* OfTypeLocal_D73836504B21658AF3E13DAD1D4B9AD6);
	void AssignCustomTeamSettings();
	void InitGame(const struct FString& Options);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventMaxScoreChanged(class AGameEvent_Soccar_TA* GameEvent);
	void EventReplicatedStatEvent(class AGameEvent_Soccar_TA* GameEvent, class UStatEvent_TA* StatEvent);
	void EventStatFactoryInitialized(class AGameEvent_Soccar_TA* GameEvent);
	void EventReplicatedGoalScored(class AGameEvent_Soccar_TA* GameEvent, unsigned char ScoredOnTeam);
	void EventPlayerScored(class AGameEvent_Soccar_TA* GameEvent, class APRI_TA* Scorer);
	void EventMatchWinnerSet(class AGameEvent_Soccar_TA* GameEvent);
	void EventGameWinnerSet(class AGameEvent_Soccar_TA* GameEvent);
	void EventReplayDirectorSet(class AGameEvent_Soccar_TA* GameEvent);
	void EventEndGameCountDown(class AGameEvent_Soccar_TA* GameEvent, int TimeRemaining);
	void EventMatchEnded(class AGameEvent_Soccar_TA* GameEvent);
	void EventGameEnded(class AGameEvent_Soccar_TA* GameEvent);
	void EventOvertimeUpdated(class AGameEvent_Soccar_TA* GameEvent);
	void EventGameTimeUpdated(class AGameEvent_Soccar_TA* GameEvent);
	void EventGoalScored(class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIdx);
	void EventFirstBallHit(class AGameEvent_Soccar_TA* GameEvent);
	void EventBallRemoved(class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball);
	void EventBallAdded(class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball);
	void EventStartNewRound(class AGameEvent_Soccar_TA* GameEvent);
	void EventActiveRoundChanged(class AGameEvent_Soccar_TA* GameEvent);
};


// Class TAGame.PRI_TA
// 0x06A8 (0x0AF0 - 0x0448)
class APRI_TA : public APRI_X
{
public:
	int                                                MatchScore;                                               // 0x0448(0x0004) (Net, Transient)
	int                                                MatchGoals;                                               // 0x044C(0x0004) (Net, Transient)
	int                                                MatchOwnGoals;                                            // 0x0450(0x0004) (Transient)
	int                                                MatchAssists;                                             // 0x0454(0x0004) (Net, Transient)
	int                                                MatchSaves;                                               // 0x0458(0x0004) (Net, Transient)
	int                                                MatchShots;                                               // 0x045C(0x0004) (Net, Transient)
	int                                                MatchDemolishes;                                          // 0x0460(0x0004) (Transient)
	int                                                MatchBonusXP;                                             // 0x0464(0x0004) (Transient)
	int                                                MatchBreakoutDamage;                                      // 0x0468(0x0004) (Net, Transient)
	unsigned long                                      bMatchMVP : 1;                                            // 0x046C(0x0004) (Net, Transient)
	unsigned long                                      bMatchAdmin : 1;                                          // 0x046C(0x0004) (Net, Transient)
	unsigned long                                      bLoadoutSet : 1;                                          // 0x046C(0x0004) (Transient)
	unsigned long                                      bOnlineLoadoutSet : 1;                                    // 0x046C(0x0004) (Net, Transient)
	unsigned long                                      bLoadoutsSet : 1;                                         // 0x046C(0x0004) (Transient)
	unsigned long                                      bOnlineLoadoutsSet : 1;                                   // 0x046C(0x0004) (Transient)
	unsigned long                                      bTeamPaintSet : 1;                                        // 0x046C(0x0004) (Transient)
	unsigned long                                      bReady : 1;                                               // 0x046C(0x0004) (Net, Transient)
	unsigned long                                      bIsDistracted : 1;                                        // 0x046C(0x0004) (Net, Transient)
	unsigned long                                      bUsingSecondaryCamera : 1;                                // 0x046C(0x0004) (Transient)
	unsigned long                                      bUsingBehindView : 1;                                     // 0x046C(0x0004) (Transient)
	unsigned long                                      bUsingFreecam : 1;                                        // 0x046C(0x0004) (Transient)
	unsigned long                                      bIsInSplitScreen : 1;                                     // 0x046C(0x0004) (Net)
	unsigned long                                      bStartVoteToForfeitDisabled : 1;                          // 0x046C(0x0004) (Net, Transient)
	unsigned long                                      bUsingItems : 1;                                          // 0x046C(0x0004) (Net, Transient)
	unsigned long                                      PlayerHistoryValid : 1;                                   // 0x046C(0x0004) (Net)
	class AGameEvent_TA*                               GameEvent;                                                // 0x0470(0x0008) (Transient)
	class AGameEvent_TA*                               ReplicatedGameEvent;                                      // 0x0478(0x0008) (Net, Transient)
	class ACar_TA*                                     Car;                                                      // 0x0480(0x0008) (Transient)
	struct U_Types_TA_FLoadoutData                     FullLoadouts[0x2];                                        // 0x0488(0x0040) (Transient, NeedCtorLink)
	struct FLoadoutAttributesArray                     FullLoadoutAttributes[0x2];                               // 0x0508(0x0010) (Transient, NeedCtorLink)
	struct FClientLoadoutOnlineData                    FullOnlineLoadout[0x2];                                   // 0x0528(0x0010) (Transient, NeedCtorLink)
	struct FClientLoadoutData                          ClientLoadout;                                            // 0x0548(0x0010) (Net, Transient, NeedCtorLink)
	struct FClientLoadoutOnlineData                    ClientLoadoutOnline;                                      // 0x0558(0x0010) (Net, Transient, NeedCtorLink)
	struct FClientLoadoutDatas                         ClientLoadouts;                                           // 0x0568(0x0020) (Net, Transient, NeedCtorLink)
	struct FClientLoadoutOnlineDatas                   ClientLoadoutsOnline;                                     // 0x0588(0x0028) (Net, Transient, NeedCtorLink)
	TArray<struct FOnlineProductStat>                  OnlineProductStats;                                       // 0x05B0(0x0010) (Transient, NeedCtorLink)
	struct FLoadoutTeamPaint                           TeamPaint;                                                // 0x05C0(0x0010) (Transient)
	TArray<struct FTAPlayerStat>                       MatchStats;                                               // 0x05D0(0x0010) (Transient, NeedCtorLink)
	int                                                WaitingStartTime;                                         // 0x05E0(0x0004) (Transient)
	float                                              TotalGameTimePlayed;                                      // 0x05E4(0x0004) (Transient)
	class ACameraSettingsActor_TA*                     PersistentCamera;                                         // 0x05E8(0x0008) (Net, Transient)
	class ACameraSettingsActor_TA*                     Camera;                                                   // 0x05F0(0x0008) (Transient)
	struct FProfileCameraSettings                      CameraSettings;                                           // 0x05F8(0x001C) (Transient)
	unsigned char                                      CameraPitch;                                              // 0x0614(0x0001) (Transient)
	unsigned char                                      CameraYaw;                                                // 0x0615(0x0001) (Transient)
	TEnumAsByte<EPawnType>                             PawnType;                                                 // 0x0616(0x0001) (Net)
	unsigned char                                      PlayerHistoryKey[0x40];                                   // 0x0617(0x0001) (Net)
	TEnumAsByte<EConnectionQualityState>               ReplicatedWorstNetQualityBeyondLatency;                   // 0x0657(0x0001) (Net)
	TArray<class UProductStat_TA*>                     ProductStats;                                             // 0x0658(0x0010) (Transient, NeedCtorLink)
	TArray<struct FProductStat>                        PendingProductStatValues;                                 // 0x0668(0x0010) (Transient, NeedCtorLink)
	struct FUniqueNetId                                PartyLeader;                                              // 0x0678(0x0038) (Net)
	struct FName                                       Title;                                                    // 0x06B0(0x0008) (Net, Transient)
	struct FSkillTierData                              SkillTier;                                                // 0x06B8(0x0008) (Net, Transient)
	float                                              DodgeInputThreshold;                                      // 0x06C0(0x0004)
	float                                              SteeringSensitivity;                                      // 0x06C4(0x0004) (Net, Transient)
	float                                              AirControlSensitivity;                                    // 0x06C8(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x06CC(0x0004) MISSED OFFSET
	TArray<struct FStatCooldown>                       StatCooldowns;                                            // 0x06D0(0x0010) (Transient, NeedCtorLink)
	int                                                TimeTillItem;                                             // 0x06E0(0x0004) (Net, Transient)
	int                                                MaxTimeTillItem;                                          // 0x06E4(0x0004) (Net, Transient)
	int                                                BoostPickups;                                             // 0x06E8(0x0004) (Transient)
	int                                                BallTouches;                                              // 0x06EC(0x0004) (Transient)
	int                                                CarTouches;                                               // 0x06F0(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x06F4(0x0004) MISSED OFFSET
	class APlayerReplicatedEventInfo_TA*               PREI;                                                     // 0x06F8(0x0008) (Net)
	class APRI_TA*                                     ReplacingBotPRI;                                          // 0x0700(0x0008) (Net, Transient)
	struct FMemberTitleStat                            PrimaryTitle;                                             // 0x0708(0x0020) (Net)
	struct FMemberTitleStat                            SecondaryTitle;                                           // 0x0728(0x0020) (Net)
	class UProductAsset_GoalExplosion_TA*              PlayerGoalExplosion;                                      // 0x0748(0x0008) (Transient)
	class UPlayerBanner_TA*                            PlayerBanner;                                             // 0x0750(0x0008) (ExportObject, Component, EditInline)
	class UPlayerAvatar_TA*                            PlayerAvatar;                                             // 0x0758(0x0008) (ExportObject, Component, EditInline)
	class UPlayerAvatarBorder_TA*                      PlayerBorder;                                             // 0x0760(0x0008) (ExportObject, Component, EditInline)
	class UAkSoundCue*                                 GoalScoredStinger;                                        // 0x0768(0x0008)
	class UAkSoundCue*                                 EpicSaveStinger;                                          // 0x0770(0x0008)
	struct FName                                       BotProductName;                                           // 0x0778(0x0008) (Net, Transient)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0780(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.PRI_TA.ClubID
	struct FString                                     PublicIP;                                                 // 0x0788(0x0010) (NeedCtorLink)
	int                                                SpectatorShortcut;                                        // 0x0798(0x0004) (Net, Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x079C(0x0004) MISSED OFFSET
	class UCarDistanceTracker_TA*                      CarDistanceTracker;                                       // 0x07A0(0x0008)
	class AStayAsPartyVoter_TA*                        StayAsPartyVoter;                                         // 0x07A8(0x0008) (Net)
	class AStayAsPartyVoteYes_TA*                      StayAsPartyVoteYes;                                       // 0x07B0(0x0008) (Net)
	class UProductsConfig_TA*                          ProductsConfig;                                           // 0x07B8(0x0008)
	struct FScriptDelegate                             __EventGameEventChanged__Delegate;                        // 0x07C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x07C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventStatEvent__Delegate;                               // 0x07D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x07D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRequestedLoadout__Delegate;                        // 0x07F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x07F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSelectedLoadout__Delegate;                         // 0x0808(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0808(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventVanityChanged__Delegate;                           // 0x0820(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0820(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventStatTickerMessage__Delegate;                       // 0x0838(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0838(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventInvalidPsyonixID__Delegate;                        // 0x0850(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0850(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventReadyChanged__Delegate;                            // 0x0868(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0868(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventCarPreUpdate__Delegate;                            // 0x0880(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0880(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventCarSet__Delegate;                                  // 0x0898(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData13[0x8];                                       // 0x0898(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSplitScreenStatusChanged__Delegate;                // 0x08B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData14[0x8];                                       // 0x08B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventDistracted__Delegate;                              // 0x08C8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData15[0x8];                                       // 0x08C8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPersistentCameraSet__Delegate;                     // 0x08E0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData16[0x8];                                       // 0x08E0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventCameraChanged__Delegate;                           // 0x08F8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData17[0x8];                                       // 0x08F8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPartyLeaderChanged__Delegate;                      // 0x0910(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData18[0x8];                                       // 0x0910(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventScorePoint__Delegate;                              // 0x0928(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData19[0x8];                                       // 0x0928(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventWonMVP__Delegate;                                  // 0x0940(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData20[0x8];                                       // 0x0940(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventStatTitlesSet__Delegate;                           // 0x0958(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData21[0x8];                                       // 0x0958(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPawnTypeChanged__Delegate;                         // 0x0970(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData22[0x8];                                       // 0x0970(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventCommittedStats__Delegate;                          // 0x0988(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData23[0x8];                                       // 0x0988(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventStartVoteToForfeitDisabledChanged__Delegate;       // 0x09A0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData24[0x8];                                       // 0x09A0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTitleChanged__Delegate;                            // 0x09B8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData25[0x8];                                       // 0x09B8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSkillTierChanged__Delegate;                        // 0x09D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData26[0x8];                                       // 0x09D0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventServerChangeTeamFailed__Delegate;                  // 0x09E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData27[0x8];                                       // 0x09E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventScoredGoal__Delegate;                              // 0x0A00(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData28[0x8];                                       // 0x0A00(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventReplacingBotChanged__Delegate;                     // 0x0A18(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData29[0x8];                                       // 0x0A18(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventMatchAdmin__Delegate;                              // 0x0A30(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData30[0x8];                                       // 0x0A30(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventServerUnlockedAchievement__Delegate;               // 0x0A48(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData31[0x8];                                       // 0x0A48(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventServerAchievementProgression__Delegate;            // 0x0A60(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData32[0x8];                                       // 0x0A60(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSpectatorShortcutChanged__Delegate;                // 0x0A78(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData33[0x8];                                       // 0x0A78(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventOwnerChanged__Delegate;                            // 0x0A90(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData34[0x8];                                       // 0x0A90(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __ReplicatedWorstNetQualityBeyondLatency__ChangeNotify;   // 0x0AA8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData35[0x8];                                       // 0x0AA8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __PREI__ChangeNotify;                                     // 0x0AC0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData36[0x8];                                       // 0x0AC0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __ClubID__ChangeNotify;                                   // 0x0AD8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData37[0x8];                                       // 0x0AD8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PRI_TA");
		return ptr;
	}


	void __PRI_TA__PostBeginPlay_1D07A5924B3B6BBD11178CB36F22257B(class UOnlineClubCache_X* C, class UClubDetails_X* D);
	bool __PRI_TA__RemoveIrrelevantAttributes_62A9F6FE403EE31ED40469A8902DFCFF(class UProductAttribute_TA* A);
	bool STATIC___PRI_TA__InitClientLoadoutOnlineData_32268E0E4C05BEF63498CF904A4BE14F(class UProductAttribute_TA* A);
	bool __PRI_TA__InitFromAttributes_6B7738BE4678408360B321AC23A27B00(class UProductAttribute_TA* A);
	void __PRI_TA__UpdatePlayerBanner_EA4AC6174CCF67B4869F7595C321D3E6(const struct FUniqueNetId& P, TEnumAsByte<EVanityType> V);
	void __PRI_TA__UpdatePlayerAvatarBorder_CB8F1D784E94476472217BAE818FCBBF(const struct FUniqueNetId& P, TEnumAsByte<EVanityType> V);
	void __ClubID__ChangeNotifyFunc();
	void __PREI__ChangeNotifyFunc();
	void __ReplicatedWorstNetQualityBeyondLatency__ChangeNotifyFunc();
	void Destroyed();
	void ClientStayAsPartyLeader(const struct FMergePartyReplicatedData& EventData);
	void ServerInviteeConfirmedMerge();
	void ClientStayAsPartyFollower(const struct FUniqueNetId& NewLeader, class UStayAsPartyLeader_TA** ObjectInitializer_0DE8DFC8498DD9DF038A9380DFFB1E06);
	void OnSpectatorShortcutChanged();
	void SetSpectatorShortcut(int InShortcut);
	void ServerSetPublicIP(const struct FString& IP);
	void OnClubsUpdated(struct FUniqueNetId* StructInitializer_A38097A844D8350494D666A0A33EE4F2);
	void OnUniqueIdChanged();
	void HandleSubSystemReadAvatar(const struct FUniqueNetId& InPlayerId, class UTexture* InAvatar, const struct FString& InOnlinePlayerName);
	void UpdatePlayerAvatarBorder();
	void UpdatePlayerAvatar(TArray<struct FUniqueNetId>* ArrayInitializer_D3DDD51844B52F4739AC45B37825697B);
	void UpdatePlayerBanner();
	struct FString GetBotName();
	void SetBotProductName(const struct FName& InBotProductName);
	void ClientAchievementProgression(int AchievementId, TEnumAsByte<EAchievementType> AchievementType, float Progress, float MaxProgress);
	void ClientUnlockAchievement(int AchievementId, TEnumAsByte<EAchievementType> AchievementType);
	void ServerSetPlayerActivatedFX(class AFXActor_X* FX);
	void UpdateCarLocalPlayer();
	void OnReplacingBotPRIChanged();
	void OnTeamChanged();
	void ClearBotReplacement();
	void SetBotReplacement(class AAIController_TA* C);
	void ReportCheater(const struct FString& Reason);
	bool ValidateLoadoutTeamPaints();
	bool ValidateLoadoutSlots();
	void ValidateLoadoutDLC();
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	struct FString GetDebugName();
	void OnStartVoteToForfeitDisabledChanged();
	void SetStartVoteToForfeitDisabled(bool bDisabled);
	void ServerVoteToForfeit();
	class UOnlineGame_Base_X* GetOnlineGameBase();
	class UOnlineGame_X* GetOnlineGame();
	void SetUserCarPreferences(float NewDodgeThreshold, float NewSteeringSensitivity, float NewAirControlSensitivity);
	void ServerSetUserCarPreferences(float NewDodgeThreshold, float NewSteeringSensitivity, float NewAirControlSensitivity);
	int ValidateUserInt(const struct FString& Reason, int NewValue, int Min, int Max);
	float ValidateUserFloat(const struct FString& Reason, float NewValue, float Min, float Max);
	void OnPawnTypeChanged();
	void SetWaitingPlayer(bool B);
	void SetPawnType(TEnumAsByte<EPawnType> NewPawnType);
	bool IsPlayer();
	bool IsEditor();
	bool IsSpectator();
	void ServerSpectate();
	void ClientChangeTeamFailed(int TeamNum);
	void ServerChangeTeam(int TeamNum);
	void ServerSetVoteStatus(class AVoteActor_TA* VoteActor, TEnumAsByte<EVoteStatus> NewVote);
	void SetPodiumTitle(int Index, const struct FMemberTitleStat& InTitle);
	void ReplicatePodiumTitles();
	void ClearPodiumTitle(struct FMemberTitleStat* StructInitializer_4157BAE64EDC2AEBF2AFC8A5A9E5B5DC, struct FMemberTitleStat* StructInitializer_04AEEE0844A6CDCD66D39BA21015A974);
	void OnMatchAdmin();
	void OnMVPChange();
	void NotifyWonMVP();
	bool IsInvalidName();
	bool IsInGameState(const struct FName& StateName);
	bool IsInWarmUpMode();
	void SetReady(bool bNewReady);
	void ServerMatchAdminSetPaused(bool bPause);
	void ServerMatchAdminSetScoreAndTime(int NewScoreTeam0, int NewScoreTeam1, int SecondsRemaining, bool bOverTime, bool bRestartRound);
	void SetMatchAdmin(bool bIsMatchAdmin);
	void ServerReadyUp();
	bool ShouldBroadCastWelcomeMessage(bool bExiting);
	void ClientUpdateOnlineProductStats(const struct FClientOnlineProductStat& ClientStat);
	void UpdateOnlineProductStats();
	void ClientGiveOnlineCurrencyDrop(const struct FCurrency& Drop);
	void ClientGenerateItemDrop();
	void ClientGiveRewardDrop(const struct U_Types_TA_FOnlineXPReward& Drop);
	void ClientGiveOnlineReward(const struct FOnlineProductData& Product);
	void HandleOnlineCurrencyDrops(TArray<struct FCurrency>* CurrencyDrops);
	void HandleRewardDrops(TArray<struct U_Types_TA_FOnlineXPReward>* RewardDrops);
	void HandleOnlineProductDrops(TArray<struct FOnlineProductData>* ProductDrops);
	void GenerateItemDrop();
	void SetWaitingStartTime();
	void ClientNotifyStatTickerMessage(class APRI_TA* Receiver, class APRI_TA* Victim, class UStatEvent_TA* StatEvent);
	void HandleNetStatsPolled(class UClientConnectionTracker_TA* InTracker, const struct FClientConnectionStats& InStats);
	void OnRep_RepStatTitles();
	void ClientScoredGoal(const struct FVector& BallHitLocation);
	void OnScoredGoal(const struct FVector& BallHitLocation);
	void OnRep_SteeringSensitivity();
	void OnRep_ClientScorePoint();
	void ResetScore();
	void RemovePoints(int Points);
	void ScorePoint(int AdditionalScore);
	void SetStatCount(class UStatEvent_TA* StatEvent, int ForceCount);
	void IncrementStat(class UStatEvent_TA* StatEvent, int Count);
	void ClientNotifyGainedStat(class UStatEvent_TA* StatEvent, int Count);
	void OnGainedStat(class UStatEvent_TA* StatEvent, int Count);
	void GiveScore(class UStatEvent_TA* StatEvent, int Count);
	bool TryAwardTimeRestrictedStat(class UStatEvent_TA* Stat, struct FStatCooldown* StructInitializer_06D3782A4BC4527DE758C9A63B4F38DE);
	void ResetAllStatCooldowns();
	int GetMatchStatCount(const struct FName& StatName);
	void CommitMatchStats(class UProfile_TA* Profile);
	void CommitProductStats(class UProfile_TA* Profile);
	int GetMatchXP();
	void CommitStats();
	void InitMusicStingers(class UProductLoader_TA* Loadout);
	void InitGoalExplosion(class UProductLoader_TA* Loadout);
	void InitProductStats(class UProductLoader_TA* Loadout);
	void HandleLoadoutLoaded(class UProductLoader_TA* Loadout);
	void UpdateFromLoadout();
	void UpdateUserCarPreferences(class ACarComponent_AirControl_TA* AirControlComponent);
	void HandleAirControl(class ACarComponent_AirControl_TA* AirControlComp);
	void SetCar(class ACar_TA* NewCar);
	bool IsClientPlayerPRI();
	bool IsLocalPlayerPRI();
	void Unregister();
	void AddLocalPlayerToGameEvent();
	void SetReplayGameEvent(class AGameEvent_TA* InGameEvent);
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	void ValidateReplicatedLoadout(int TeamIndex);
	void OnLoadoutsSetInternal();
	bool AreLoadoutsSet();
	void OnLoadoutsOnlineSet();
	void OnLoadoutsSet();
	void Deprecated_OnLoadoutSetInternal();
	bool Deprecated_IsLoadoutSet();
	void Deprecated_OnLoadoutOnlineSet();
	void Deprecated_OnLoadoutSet();
	void SetTestLoadout(const struct U_Types_TA_FLoadoutData& NewLoadout);
	TArray<struct FOnlineProductData> GetMatchCompleteLoadout();
	void InitCertifiedProductStat(int ProductID, class UProductAttribute_Certified_TA* Certified);
	void RemoveCertifiedProductStat();
	void InitFromAttributes(struct U_Types_TA_FLoadoutData* Loadout, struct FLoadoutAttributesArray* LoadoutAttributes);
	void STATIC_InitClientLoadoutOnlineData(struct FLoadoutAttributesArray* LoadoutAttributes, struct FClientLoadoutOnlineData* OutClientData, TArray<class UProductAttribute_TA*>* FilterLocal_72B4276A46BE53D45956E6921B2C08B0);
	bool STATIC_ValidateTitleIDAttribute(class UProductAttribute_TitleID_TA* Current, class UProductAttribute_TitleID_TA* Actual);
	bool STATIC_ValidatePaintedAttribute(class UProductAttribute_Painted_TA* Current, class UProductAttribute_Painted_TA* Actual);
	bool STATIC_ValidateCertifiedAttribute(const struct FOnlineProductStat& ProductStat, class UProductAttribute_Certified_TA* Actual);
	bool ValidateOnlineLoadout(struct U_Types_TA_FLoadoutData* OutLoadout, struct FLoadoutAttributesArray* OutAttributes, struct FClientLoadoutOnlineData* OutOnlineLoadout, TArray<class UOnlineProduct_TA*>* OnlineProducts, struct FClientLoadoutOnlineProduct* StructInitializer_B9DA91074BDCF475E73C98B8744927C5, struct FProductAttributesArray* StructInitializer_674950914095B8A17700319FA7BF8E56, struct FClientLoadoutOnlineProduct* StructInitializer_B710CF62478D8B4257B7458E88A9CA70, struct FProductAttributesArray* StructInitializer_744ECB6F4F93C21093A204869646A745);
	void HandleOnlineLoadoutReceived(class URPC_ProductsLoadoutGet_TA* RPC);
	void RemoveIrrelevantAttributes(struct U_Types_TA_FLoadoutData* Loadout, struct FLoadoutAttributesArray* OutLoadoutAttributes, TArray<class UProductAttribute_TA*>* FilterLocal_D05D5A8A4FADA57977078097496EC424);
	void InitLoadoutAttributesForTeam(class APRI_X* PRI);
	void ValidateLoadout();
	void SetLoadouts(struct U_Types_TA_FLoadoutData* Loadouts, struct FLoadoutAttributesArray* LoadoutAttributes);
	void ServerSetTeamLoadout(unsigned char TeamIndex, const struct FServerSetLoadoutTeam& Params);
	bool ShouldValidateOnlineProducts();
	void OnSplitScreenStatusChanged();
	void HandleLocalPlayerLeave(class ULocalPlayer* OldPlayer);
	void HandleLocalPlayerJoin(class ULocalPlayer* NewPlayer);
	void ServerSplitScreenStatusChanged(bool bInSplitScreen);
	void UpdateSplitScreenStatus();
	void OnPartyLeaderChanged();
	void ServerSetPartyLeader(const struct FUniqueNetId& InPartyLeader);
	void SetPartyLeader(const struct FUniqueNetId& InPartyLeader);
	void HandlePartyChanged(class UOnlineGameParty_X* Party);
	void UpdatePartyStatus();
	void OnSkillTierChanged();
	void ReplicateSkillTier(int NewTier);
	void OnTitleChanged();
	void SetTitle(const struct FName& NewTitle);
	void HandlePlayerTitle(class UOnlineGamePlayerTitles_TA* TitlesObj, const struct FUniqueNetId& InPlayerId);
	void SyncPlayerTitle();
	void UpdateTitleFromLoadout();
	void UpdateTitle();
	void HandleCameraChanged(class ACameraSettingsActor_TA* Actor);
	void SetCamera(class ACameraSettingsActor_TA* Actor);
	void OnOwnerChanged();
	void GetNewFriendKey();
	void SetPlayerHistoryKey(TArray<unsigned char> HistoryKeyArray);
	void ServerSetDistracted(bool Value);
	void ServerSetPlayerHistoryKey(unsigned char HistoryKeyArray);
	void OnNewPlayerHistoryKey();
	void AddPlayerHistoryKey(class UOnlineRecentPlayersList* PlayersList);
	struct FString GetSanitizedPlayerName();
	void HandlePlayerNameChanged(class APRI_X* InPRI, struct FUniqueNetId* StructInitializer_08B6BA4848B57F99C73201B8912DA4D2);
	void OnRep_UniqueId();
	void ClientInitialize(class AController* C);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventOwnerChanged(class APRI_TA* PRI);
	void EventSpectatorShortcutChanged(class APRI_TA* PRI);
	void EventServerAchievementProgression(class APRI_TA* PRI, int AchievementId, TEnumAsByte<EAchievementType> AchievementType, float Progress, float MaxProgress);
	void EventServerUnlockedAchievement(class APRI_TA* PRI, int AchievementId, TEnumAsByte<EAchievementType> AchievementType);
	void EventMatchAdmin(class APRI_TA* PRI);
	void EventReplacingBotChanged(class APRI_TA* PRI);
	void EventScoredGoal(class APRI_TA* PRI, const struct FVector& BallHitLocation);
	void EventServerChangeTeamFailed(int TeamIndex);
	void EventSkillTierChanged(class APRI_TA* PRI);
	void EventTitleChanged(class APRI_TA* PRI);
	void EventStartVoteToForfeitDisabledChanged(class APRI_TA* PRI);
	void EventCommittedStats(class APRI_TA* PRI);
	void EventPawnTypeChanged(class APRI_TA* PRI);
	void EventStatTitlesSet(class APRI_TA* PRI);
	void EventWonMVP(class APRI_TA* PRI);
	void EventScorePoint(class APRI_TA* PRI, int Points);
	void EventPartyLeaderChanged(class APRI_TA* PRI);
	void EventCameraChanged(class APRI_TA* PRI);
	void EventPersistentCameraSet(class APRI_TA* PRI);
	void EventDistracted(class APRI_TA* PRI);
	void EventSplitScreenStatusChanged(class APRI_TA* PRI);
	void EventCarSet(class APRI_TA* PRI);
	void EventCarPreUpdate(class APRI_TA* PRI);
	void EventReadyChanged(class APRI_TA* PRI);
	void EventInvalidPsyonixID();
	void EventStatTickerMessage(class APRI_TA* Receiver, class APRI_TA* Victim, class UStatEvent_TA* StatEvent);
	void EventVanityChanged(TEnumAsByte<EVanityType> InVanityType);
	void EventSelectedLoadout(class APRI_TA* PRI);
	void EventRequestedLoadout(struct U_Types_TA_FLoadoutData* OutLoadout, struct FLoadoutAttributesArray* OutAttributes);
	void EventStatEvent(class APRI_TA* PRI, class UStatEvent_TA* StatEvent, int Count);
	void EventGameEventChanged(class APRI_TA* PRI);
};


// Class TAGame.ProductAsset_Logo_TA
// 0x0038 (0x0118 - 0x00E0)
class UProductAsset_Logo_TA : public UProductAsset_TA
{
public:
	class UTexture*                                    Texture;                                                  // 0x00E0(0x0008) (Edit)
	struct FLinearColor                                TeamColor;                                                // 0x00E8(0x0010) (Edit)
	struct FLinearColor                                CustomColor;                                              // 0x00F8(0x0010) (Edit)
	TArray<class UProduct_TA*>                         Bots2;                                                    // 0x0108(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Logo_TA");
		return ptr;
	}


	struct FLinearColor GetFontColor(bool bSwapColors);
	TArray<struct FLinearColor> GetStadiumColors(bool bSwapColors);
	struct FString GetTeamName();
};


// Class TAGame.ProductAttribute_InheritCarSetting_TA
// 0x0010 (0x0090 - 0x0080)
class UProductAttribute_InheritCarSetting_TA : public UProductAttribute_TA
{
public:
	TArray<struct FInheritedParameter>                 Parameters;                                               // 0x0080(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_InheritCarSetting_TA");
		return ptr;
	}


	void ApplySettings(const struct FName& DestinationParamName, const struct FName& ParentParamName, class UMeshComponent* Parent, const TScriptInterface<class UISetParameter>& Child);
	void Inherit(class UMeshComponent* Parent, class UObject* ChildObject);
};


// Class TAGame.Car_TA
// 0x0240 (0x0AD0 - 0x0890)
class ACar_TA : public AVehicle_TA
{
public:
	TArray<class ACarComponent_TA*>                    DefaultCarComponents;                                     // 0x0890(0x0010) (Edit, NeedCtorLink)
	class UEngineAudioComponent_TA*                    EngineAudio;                                              // 0x08A0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UEngineAudioREVComponent_TA*                 EngineAudioRev;                                           // 0x08A8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UThrottleShakeComponent_TA*                  ThrottleShake;                                            // 0x08B0(0x0008) (Edit, ExportObject, Component, EditInline)
	class ACarComponent_FlipCar_TA*                    FlipComponent;                                            // 0x08B8(0x0008) (Transient)
	TEnumAsByte<EDemolishTarget>                       DemolishTarget;                                           // 0x08C0(0x0001) (Transient)
	TEnumAsByte<EDemolishSpeed>                        DemolishSpeed;                                            // 0x08C1(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x6];                                       // 0x08C2(0x0006) MISSED OFFSET
	class UProductLoader_TA*                           Loadout;                                                  // 0x08C8(0x0008) (ExportObject, Component, EditInline)
	unsigned long                                      bLoadoutSet : 1;                                          // 0x08D0(0x0004)
	unsigned long                                      bDemolishOnOpposingGround : 1;                            // 0x08D0(0x0004) (Transient)
	unsigned long                                      bWasOnOpposingGround : 1;                                 // 0x08D0(0x0004) (Transient)
	unsigned long                                      bDemolishOnGoalZone : 1;                                  // 0x08D0(0x0004) (Transient)
	unsigned long                                      bWasInGoalZone : 1;                                       // 0x08D0(0x0004) (Transient)
	unsigned long                                      bOverrideHandbrakeOn : 1;                                 // 0x08D0(0x0004) (Net, Transient)
	unsigned long                                      bOverrideBoostOn : 1;                                     // 0x08D0(0x0004) (Net, Transient)
	unsigned long                                      bUseDefaultLoadout : 1;                                   // 0x08D0(0x0004) (Config)
	unsigned char                                      UnknownData01[0x4];                                       // 0x08D4(0x0004) MISSED OFFSET
	class AFXActor_X*                                  ExitFXArchetype;                                          // 0x08D8(0x0008) (Edit)
	class ADemolishExplosion_TA*                       DemolishExplosionArchetype;                               // 0x08E0(0x0008) (Edit)
	class ADemolishExplosion_TA*                       DemolishExplosion;                                        // 0x08E8(0x0008) (Transient)
	class UBallIndicator_TA*                           BallIndicatorArchetype;                                   // 0x08F0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UBallIndicator_TA*                           BallIndicator;                                            // 0x08F8(0x0008) (ExportObject, Transient, Component, EditInline)
	float                                              MaxTimeForDodge;                                          // 0x0900(0x0004) (Edit)
	float                                              LastWheelsHitBallTime;                                    // 0x0904(0x0004) (Transient)
	struct FLoadoutTeamPaint                           TeamPaint;                                                // 0x0908(0x0010) (Net, Transient)
	struct FClubColorSet                               ClubColors;                                               // 0x0918(0x0008) (Net, Transient)
	float                                              ReplicatedCarScale;                                       // 0x0920(0x0004) (Net)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0924(0x0004) MISSED OFFSET
	struct FDemolishData                               ReplicatedDemolish;                                       // 0x0928(0x0028) (Net, Transient)
	struct FDemolishData2                              ReplicatedDemolish_CustomFX;                              // 0x0950(0x0030) (Net, Transient)
	class AFXActor_X*                                  BodyFXActor;                                              // 0x0980(0x0008) (Transient)
	class APRI_TA*                                     AttackerPRI;                                              // 0x0988(0x0008)
	struct FVector                                     MouseAccel;                                               // 0x0990(0x000C) (Transient)
	struct FVector                                     MouseAirAccel;                                            // 0x099C(0x000C) (Transient)
	class ASpecialPickup_TA*                           AttachedPickup;                                           // 0x09A8(0x0008) (Net, Transient)
	struct FVector                                     ReplayFocusOffset;                                        // 0x09B0(0x000C) (Transient)
	float                                              AddedBallForceMultiplier;                                 // 0x09BC(0x0004) (Edit, Net)
	float                                              AddedCarForceMultiplier;                                  // 0x09C0(0x0004) (Edit, Net)
	unsigned char                                      UnknownData03[0x4];                                       // 0x09C4(0x0004) MISSED OFFSET
	class UCarTrajectoryComponent_TA*                  CarTrajectoryComponent;                                   // 0x09C8(0x0008) (ExportObject, Component, EditInline)
	class AGameEvent_TA*                               GameEvent;                                                // 0x09D0(0x0008) (Transient)
	class UNameplateComponentCar_TA*                   NameplateComponentCar;                                    // 0x09D8(0x0008) (ExportObject, Component, EditInline)
	struct FScriptDelegate                             __EventVehicleSetup__Delegate;                            // 0x09E0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x09E0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventBumpedCar__Delegate;                               // 0x09F8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x09F8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventDemolished__Delegate;                              // 0x0A10(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0A10(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTeamSet__Delegate;                                 // 0x0A28(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0A28(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTeamPaintChanged__Delegate;                        // 0x0A40(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0A40(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventHitBall__Delegate;                                 // 0x0A58(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0A58(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventLanded__Delegate;                                  // 0x0A70(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0A70(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSuperSonicChanged__Delegate;                       // 0x0A88(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0A88(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventAttachedPickup__Delegate;                          // 0x0AA0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0AA0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventHitWorld__Delegate;                                // 0x0AB8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData13[0x8];                                       // 0x0AB8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Car_TA");
		return ptr;
	}


	void __Car_TA__HandleAssetLoaded_59E43E314004256D4240028C622CAE72(class UObject* Mutator);
	float GetMaxDriveBackwardsSpeed();
	float GetMaxDriveForwardSpeed();
	struct FVector GetReplayFocusLocation();
	void OnPickupChanged(class ASpecialPickup_TA* InPickup);
	void SetAttachedPickup(class ASpecialPickup_TA* InPickup);
	void EnablePodiumMode();
	void ServerEquipProduct(const struct FName& ProductName);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void CopyPushFactorCurve();
	void ClearAttackerPRI();
	void SetAttackerPRI(class APRI_TA* Attacker);
	void UpdateBallIndicator();
	struct FString GetReplicatedLoadoutString();
	void OnSuperSonicChanged();
	void OnGroundChanged();
	void FellOutOfWorld();
	class UNetConnection* GetNetConnection();
	class APlayerController* GetTopPlayerController();
	void DemolishDestroyTimer();
	void ClearFX();
	void FinishDemo();
	void OnDemolished(const struct FDemolishData& Data, class AFXActor_X* CustomDemoFX, class UDemolishedCar_TA** ObjectInitializer_2F98BFE74E03DA7EE546A3A684BF6EE1);
	void OnDemolished_CustomFX(const struct FDemolishData2& Data);
	void Demolish(class ARBActor_TA* Demolisher, class AFXActor_X* InCustomDemoFX);
	void SetSoundMode(const struct FName& NewModeValue, const struct FName& NewModeGroup);
	bool Teleport(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, bool bStopVelocity, bool bUpdateRotation, float ExtraForce);
	void OnTeleport(class USeqAct_Teleport* Action);
	void OnJumpReleased();
	void OnJumpPressed();
	void SetVehicleInput(const struct FVehicleInputs& NewInput);
	bool CanDemolish(class ACar_TA* HitCar);
	bool ShouldDemolish(class ACar_TA* HitCar, const struct FVector& HitLocation, const struct FVector& HitNormal, TEnumAsByte<ECarImpactResult>* Result);
	TEnumAsByte<ECarImpactResult> ApplyCarImpactForces(class ACar_TA* OtherCar, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool IsBumperHit(class ACar_TA* OtherCar, const struct FVector& HitLocation);
	void ApplyBallImpactForces(class ABall_TA* Ball, const struct FVector& HitLocation);
	bool IsDodging();
	void OnHitBall(class ABall_TA* Ball, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void ApplyHitWallAdjustmentForces(const struct FAccumulatedRigidBodyCollision& Collision, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnRigidBodyCollision(const struct FAccumulatedRigidBodyCollision& Collision);
	bool AnyWheelTouchingGround();
	class ACarComponent_TA* GiveCarComponent(class ACarComponent_TA* ComponentArchetype, class APRI_TA* Activator);
	void AddDefaultCarComponents();
	void NotifyWhenVehicleSetup(const struct FScriptDelegate& Callback);
	void HandleVisualAssetLoaded(class UProductAsset_TA* Asset);
	void DetachPrimitiveComponent(class UPrimitiveComponent* Component);
	void HandleWheelBallHit(class UWheel_TA* Wheel);
	void HandleAssetLoaded(class UProductLoader_TA* Loader, class UProductAsset_TA* Asset);
	void RespawnInPlace();
	void SetCarScale(float NewScale);
	void OnClubColorsChanged();
	void HandleTeamChanged(class APRI_X* MyPRI);
	bool UpdateTeamLoadout();
	void InitTeamPaint();
	int GetLoadoutTeamIndex();
	int GetPreviewTeamIndex();
	bool HasTeam();
	void HandleLoadoutSelected(class APRI_TA* MyPRI);
	void SetLoadout(struct FClientLoadoutData* Data);
	void HandleGameStateChanged(class AGameEvent_TA* InGameEvent);
	void HandleGameEventChanged(class APRI_TA* MyPRI);
	void OnPRIChanged();
	void OnControllerChanged();
	void Destroyed();
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
	void EventHitWorld(class ACar_TA* Car, class AActor* HitActor, const struct FVector& HitNormal);
	void EventAttachedPickup(class ACar_TA* Car, class ASpecialPickup_TA* NewPickup);
	void EventSuperSonicChanged(class ACar_TA* Car);
	void EventLanded(class ACar_TA* Car);
	void EventHitBall(class ACar_TA* Car, class ABall_TA* Ball, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void EventTeamPaintChanged(class ACar_TA* Car);
	void EventTeamSet(class ACar_TA* Car);
	void EventDemolished(class ACar_TA* Victim, const struct FDemolishData& Data);
	void EventBumpedCar(class ACar_TA* Car, class ACar_TA* HitCar);
	void EventVehicleSetup(class ACar_TA* Car);
};


// Class TAGame.AchievementManager_TA
// 0x044C (0x04D8 - 0x008C)
class UAchievementManager_TA : public UTickableStateObject_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	class APlayerControllerBase_TA*                    PC;                                                       // 0x0090(0x0008) (Transient)
	TArray<int>                                        UnlockedAchievements;                                     // 0x0098(0x0010) (Transient, NeedCtorLink)
	TArray<struct FName>                               DLC1Cars;                                                 // 0x00A8(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               DLC2Cars;                                                 // 0x00B8(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               ClassicCars;                                              // 0x00C8(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               RequiredMyWorldIsFireProducts;                            // 0x00D8(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               RequiredDontLookBackProducts;                             // 0x00E8(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               RequiredRideOrDieDecalProducts;                           // 0x00F8(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               RequiredRideOrDiePaintProducts;                           // 0x0108(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               RequiredAnInchAnd62MilesProducts;                         // 0x0118(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               SARPBCArenas;                                             // 0x0128(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               RequiredLevelsToPlay;                                     // 0x0138(0x0010) (Const, NeedCtorLink)
	class UMapSet_TA*                                  RequiredRocketLabsArenas;                                 // 0x0148(0x0008) (Const)
	TArray<struct FName>                               RocketLabsArenaNames;                                     // 0x0150(0x0010) (NeedCtorLink)
	TArray<class UMapData_TA*>                         BraveTheElementsBaseLevels;                               // 0x0160(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               RequiredRumbleActivation;                                 // 0x0170(0x0010) (Const, NeedCtorLink)
	float                                              MaxBoostTime;                                             // 0x0180(0x0004) (Const)
	float                                              MaxTimeOnWall;                                            // 0x0184(0x0004) (Const)
	float                                              MaxDriveDistanceKM;                                       // 0x0188(0x0004) (Const)
	float                                              MaxHandbrakeRadius;                                       // 0x018C(0x0004) (Const)
	float                                              MinHandbrakeDotAngleForComplete;                          // 0x0190(0x0004) (Const)
	int                                                DunksScored;                                              // 0x0194(0x0004)
	int                                                RocketBoostFills;                                         // 0x0198(0x0004)
	int                                                SpinnerProductID;                                         // 0x019C(0x0004)
	int                                                CristianoProductID;                                       // 0x01A0(0x0004)
	int                                                TotalDLC0BoostTime;                                       // 0x01A4(0x0004)
	int                                                GoalsScoredInCurrentGame;                                 // 0x01A8(0x0004)
	int                                                SavesInCurrentGame;                                       // 0x01AC(0x0004)
	int                                                AssistsInCurrentGame;                                     // 0x01B0(0x0004)
	int                                                DLC2PsychoMasterExplodeCount;                             // 0x01B4(0x0004)
	int                                                TotalBreakoutGoals;                                       // 0x01B8(0x0004) (Const)
	int                                                MaxRocketBoostFills;                                      // 0x01BC(0x0004) (Const)
	int                                                TotalBreakoutPlatformsToDamage;                           // 0x01C0(0x0004) (Const)
	int                                                TotalDLC0WheelDriveDistanceKM;                            // 0x01C4(0x0004) (Const)
	int                                                Winner_GameEventsWon;                                     // 0x01C8(0x0004) (Const)
	int                                                SuperVictorious_GameEventsWon;                            // 0x01CC(0x0004) (Const)
	int                                                PitchVeteran_GameEventsPlayed;                            // 0x01D0(0x0004) (Const)
	int                                                PickMeUp_RandomItemDrops;                                 // 0x01D4(0x0004) (Const)
	int                                                DropsInTheBucket_RandomItemDrops;                         // 0x01D8(0x0004) (Const)
	int                                                RidersBlock_GoalSaves;                                    // 0x01DC(0x0004) (Const)
	int                                                Savage_Goals;                                             // 0x01E0(0x0004) (Const)
	int                                                Spectacular_Goals;                                        // 0x01E4(0x0004) (Const)
	int                                                Ruthless_Goals;                                           // 0x01E8(0x0004) (Const)
	int                                                RocketGenocider_Goals;                                    // 0x01EC(0x0004) (Const)
	int                                                MadScientist_Maps;                                        // 0x01F0(0x0004) (Const)
	int                                                ComingOnStrong_GoalsOrAssists;                            // 0x01F4(0x0004) (Const)
	int                                                PeoplePerson_CompletedMatches;                            // 0x01F8(0x0004) (Const)
	int                                                MetaAchievementPointMax;                                  // 0x01FC(0x0004) (Const)
	unsigned long                                      bBoostWasFull : 1;                                        // 0x0200(0x0004)
	unsigned long                                      bPlayerInited : 1;                                        // 0x0200(0x0004)
	unsigned long                                      bHandbrakePressed : 1;                                    // 0x0200(0x0004)
	unsigned long                                      bCheckMinuteToWinIt : 1;                                  // 0x0200(0x0004)
	unsigned long                                      bDidInitialCheckForMinuteToWinIt : 1;                     // 0x0200(0x0004)
	unsigned long                                      bCheckBuzzerBeater : 1;                                   // 0x0200(0x0004)
	unsigned long                                      bDidInitialCheckForBuzzerBeater : 1;                      // 0x0200(0x0004)
	unsigned long                                      bQualifiesForDLC1Throwback : 1;                           // 0x0200(0x0004)
	struct FVector                                     HandbrakeStartDir;                                        // 0x0204(0x000C)
	struct FVector                                     HandbrakeStartLocation;                                   // 0x0210(0x000C)
	unsigned char                                      UnknownData01[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	struct FString                                     WastelandMapName;                                         // 0x0220(0x0010) (Const, NeedCtorLink)
	struct FString                                     AquaticMapName;                                           // 0x0230(0x0010) (Const, NeedCtorLink)
	struct FString                                     UtopiaMapName;                                            // 0x0240(0x0010) (Const, NeedCtorLink)
	struct FString                                     ArcMapName;                                               // 0x0250(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               ProductNames_Body_MuscleCar;                              // 0x0260(0x0010) (Const, NeedCtorLink)
	struct FName                                       ProductName_Body_GearsCar;                                // 0x0270(0x0008) (Const)
	struct FName                                       ProductName_Body_Import;                                  // 0x0278(0x0008) (Const)
	struct FName                                       ProductName_Body_Interceptor;                             // 0x0280(0x0008) (Const)
	struct FName                                       ProductName_Body_Warthog;                                 // 0x0288(0x0008) (Const)
	struct FName                                       ProductName_Body_WastelandTruck;                          // 0x0290(0x0008) (Const)
	struct FName                                       ProductName_Boost_Bubble;                                 // 0x0298(0x0008) (Const)
	struct FName                                       ProductName_Boost_MusicalNotes;                           // 0x02A0(0x0008) (Const)
	struct FName                                       ProductName_Hat_SharkFin;                                 // 0x02A8(0x0008) (Const)
	struct FName                                       ProductName_Skin_Scarab_Hearts;                           // 0x02B0(0x0008) (Const)
	struct FName                                       ProductName_Skin_Zippy_Hearts;                            // 0x02B8(0x0008) (Const)
	struct FName                                       ProductName_Hat_Halo;                                     // 0x02C0(0x0008) (Const)
	TArray<struct FName>                               ProductNames_Wheel_Spinner;                               // 0x02C8(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               ProductNames_Wheel_SoccerBall;                            // 0x02D8(0x0010) (Const, NeedCtorLink)
	TArray<struct FName>                               ProductNames_Hat_Mohawk;                                  // 0x02E8(0x0010) (Const, NeedCtorLink)
	struct FName                                       StatName_BoostTimeMinutes;                                // 0x02F8(0x0008) (Const)
	struct FName                                       StatName_Certifiable;                                     // 0x0300(0x0008) (Const)
	struct FName                                       StatName_DistanceDrivenKm;                                // 0x0308(0x0008) (Const)
	struct FName                                       StatName_ItemCollected;                                   // 0x0310(0x0008) (Const)
	struct FName                                       StatName_LeftWingRightWing;                               // 0x0318(0x0008) (Const)
	struct FName                                       StatName_MadScientist;                                    // 0x0320(0x0008) (Const)
	struct FName                                       StatName_MatchComplete;                                   // 0x0328(0x0008) (Const)
	struct FName                                       StatName_WallTimeMinutes;                                 // 0x0330(0x0008) (Const)
	struct FName                                       StatName_RocketGenocider;                                 // 0x0338(0x0008) (Const)
	struct FName                                       StatName_BraveTheElements;                                // 0x0340(0x0008) (Const)
	struct FName                                       StatName_FullCourse;                                      // 0x0348(0x0008) (Const)
	struct FName                                       StatName_BuckminsterX10;                                  // 0x0350(0x0008) (Const)
	struct FName                                       StatName_ComingOnStrong;                                  // 0x0358(0x0008) (Const)
	struct FName                                       StatName_PeoplePerson;                                    // 0x0360(0x0008) (Const)
	struct FName                                       HockeyEventType;                                          // 0x0368(0x0008) (Const)
	class USaveData_TA*                                BaseSaveData;                                             // 0x0370(0x0008)
	class UAchievementSave_TA*                         SaveData;                                                 // 0x0378(0x0008)
	class APRI_TA*                                     LastPRI;                                                  // 0x0380(0x0008) (Transient)
	class AGameInfo_Replay_TA*                         LastGame;                                                 // 0x0388(0x0008) (Transient)
	class AGameEvent_TA*                               LastGameEvent;                                            // 0x0390(0x0008) (Transient)
	class ACar_TA*                                     LastCar;                                                  // 0x0398(0x0008) (Transient)
	struct FGuid                                       PendingTradeGuid;                                         // 0x03A0(0x0010) (Transient)
	class UProfileLoadoutSave_TA*                      LoadoutSave;                                              // 0x03B0(0x0008) (Transient)
	struct FScriptDelegate                             __EventNewMVPScore__Delegate;                             // 0x03B8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x03B8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventGoalAmountScored__Delegate;                        // 0x03D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x03D0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventDrivenDistance__Delegate;                          // 0x03E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x03E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventShotAmountBlocked__Delegate;                       // 0x0400(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0400(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventGameEventAmountWon__Delegate;                      // 0x0418(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0418(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventChampionshipAmountChanged__Delegate;               // 0x0430(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0430(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRandomItemAmountDropped__Delegate;                 // 0x0448(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0448(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRegularSeasonAmountChanged__Delegate;              // 0x0460(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0460(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventAchievementUnlocked__Delegate;                     // 0x0478(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0478(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventStatIncremented__Delegate;                         // 0x0490(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0490(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventReceiveServerProgress__Delegate;                   // 0x04A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData12[0x8];                                       // 0x04A8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSaveDataSet__Delegate;                             // 0x04C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData13[0x8];                                       // 0x04C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AchievementManager_TA");
		return ptr;
	}


	void __AchievementManager_TA__OnInit_41419B224AD69F0DAD123C974DA7D426(class UShopsManager_TA* InShopManager);
	bool __AchievementManager_TA__HandleShopPurchase_58F67256422ACD7B503658AA7908640A(const struct FOnlineProductData& P);
	void __AchievementManager_TA__HandleProfileSet_7DEA8E9740E4B43A790389ACDBFF75CB(class UProfileLoadoutSave_TA* Save);
	bool __AchievementManager_TA__CheckAllCarSlotsCustomized_B347AA964A977E085DD4AF9B994D73C7(class UProductSlot_TA* Slot);
	bool __AchievementManager_TA__GetEquippedOnlineProducts_644DF8D84FAC17815EB0CD90BCA68377(class UOnlineProduct_TA* P);
	void GetAchievementProgress(int AchievementId, TEnumAsByte<EAchievementType> AchievementType, float* Out_Progress, float* Out_MaxProgress);
	void GetClampedAchievementProgress(int AchievementId, TEnumAsByte<EAchievementType> AchievementType, float* Out_Progress, float* Out_MaxProgress);
	void CheckBestOfTheBunch();
	void CheckSquadGoals(class AGameEvent_Soccar_TA* GameEvent);
	void CheckPeoplePerson(class AGameEvent_Soccar_TA* GameEvent);
	void CheckNewChallenger(class AGameEvent_Soccar_TA* GameEvent);
	void CheckTogetherIsBetter(class AGameEvent_Soccar_TA* GameEvent);
	void CheckJoinTheClub();
	void HandleClubChanged(class UOnlineClubManager_X* Manager);
	void HandleSkillTierChanged(class APRI_TA* PRI);
	void HandleTradeInComplete(class UGFxData_ProductTradeIn_TA* GFxData, TArray<class UOnlineProduct_TA*> Given, TArray<class UOnlineProduct_TA*> Received);
	void HandleTradeComplete(class UOnlineGameParty_TA* P, class URPC_ProductsTradePlayerStatus_TA* RPC);
	void HandleTradeStart(class UOnlineGameParty_TA* P, const struct FGuid& TradeId);
	bool IsInCrossPlatformParty();
	bool IsPlayingWithClubmates(class APRI_TA* PRI, class AGameEvent_Soccar_TA* GameEvent);
	bool IsTournamentMatch();
	bool IsOnlineMatch();
	void CheckUnlockGoodTimes();
	class UMapData_TA* GetMapData();
	TEnumAsByte<EWeatherVariant> GetWeatherVariant();
	bool IsTurbulentWeather();
	bool HasItemQualityEquipped(TEnumAsByte<EProductQuality> Quality);
	TArray<class UOnlineProduct_TA*> GetEquippedOnlineProducts(TArray<class UOnlineProduct_TA*>* MapLocal_33DAB7E54D32B942BC3E5AA4DDF733BA, TArray<class UOnlineProduct_TA*>* FilterLocal_F3D8AD9F4D1529008213C2BDDD947EEA);
	void CheckUnlockStormTrooper();
	void Save();
	bool AddToIntList(int Number, TArray<int>* Out_IntList);
	bool AddToNameList(const struct FName& NewName, TArray<struct FName>* Out_NameList);
	bool AddToStringList(const struct FString& NewName, TArray<struct FString>* Out_StringList);
	void ResetTemporaryVaribles();
	bool PlayerIsOnATeam();
	bool NotifyKeyInput(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	bool UpdateGoalsScoredAgainstBots(class AGameEvent_TA* GameEvent, int MaxGoals, const struct FName& RequiredProduct, float BotSkillLevel, int* Out_UpdatedGoals);
	void HandleScoredGoal(class APRI_TA* PRI, const struct FVector& BallHitLocation);
	void HandlePlayerDemolished(class ACar_TA* Victim, const struct FDemolishData& Data);
	void SetHandbrakeStartData();
	bool OtherTeamIsAllBots(class AGameEvent_TA* GameEvent);
	bool ProductIsInAnyOpponentLoadout(class AGameEvent_TA* GameEvent, const struct FName& ProductName);
	bool IsPlayingSnowDay(class AGameEvent_Soccar_TA* SoccarEvent);
	bool QualifiesForDLC1Throwback();
	bool OrginalBattleCarIsInLoadout();
	bool DLC1CarIsInLoadout();
	void OnBreakoutPlatformDamaged(int Count);
	void HandleUsedAllMapVotes(class UMapPrefsSave_TA* MapPrefsSave);
	void UpdateBraveTheElementsLevelsPlayed();
	void CheckUnlockedBraveTheElements();
	void CheckUnlockedDamageControl(class AGameEvent_Soccar_TA* GameEvent);
	void CheckDLC0PowerSlide();
	bool Handbrake180Completed();
	int GetTotalProductStats(TArray<struct FName>* ProductNames);
	void CheckDLC0WheelDriveDistance();
	void CheckDLC0BoostTime();
	void HandleStatsCommited(class APRI_TA* PRI);
	bool PaintFinishIsInLoadout(const struct FName& ProductName);
	bool AtleastOneProductInLoadout(TArray<struct FName> ProductNames);
	bool ProductIsInLoadout(const struct FName& ProductName);
	bool IsWearingHat();
	bool HasRideOrDieRequiredProducts();
	bool PlayingMapOrVariant(const struct FName& MapName);
	bool PlayingMap(const struct FString& MapName);
	void CheckAllCarSlotsCustomized(int ProductID, TArray<class UProductSlot_TA*>* ArrayInitializer_F54904574849AA34428F7AA57995CCCC, TArray<class UProductSlot_TA*>* FilterLocal_AA9E9A324E21567F833C7B94DDAEFA62);
	void HandleReplayStarted(class AGameInfo_Replay_TA* Game);
	void OnProductEquipped(int ProductID);
	void HandleOnlineProductEquipped();
	void HandleProductEquipped(int ProductID);
	void ListenForRegisteredVoter();
	void HandleProfileSet(class ULocalPlayer_TA* LocalPlayer);
	bool AllSeasonGamesPlayedWithDLC0Cars(class AGameEvent_Season_TA* GameEvent);
	void HandleWonChampionship(class AGameEvent_Season_TA* GameEvent);
	void UpdateDriveTime();
	void CheckBoosting(float DeltaTime);
	void CheckWallDriveTime(float DeltaTime);
	void Tick(float DeltaTime);
	void HandleBoostAmountChanged(class ACarComponent_Boost_TA* Boost);
	void CheckTrainingModesPlayed();
	void CheckGameProgress();
	void UpdateTrainingModesPlayed(class AGameEvent_TA* GameEvent);
	bool PlayedAllLevels(TArray<struct FName>* RequiredLevels);
	void UpdateLevelsPlayed();
	void IncrementComingOnStrong();
	void HandleStatEvent(class APRI_TA* PRI, class UStatEvent_TA* StatEvent, int Count);
	void CheckTrifecta();
	void CheckUnlockedCars();
	void HandleCertifiedStatRankedUp(class UProductAttribute_Certified_TA* CertifiedAttribute);
	void HandleNewOnlineProduct(class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct);
	void HandleNewOfflineProducts(class USaveData_TA* Data, int Count);
	void CheckForNewOfflineProducts();
	void CheckCollectedProducts();
	void BroadcastRandomItemsDropped();
	void IncrementCollectedProducts(int Count);
	void HandleShopPurchase(TArray<struct FOnlineProductData> PurchasedProducts, TArray<struct FCurrency> PurchasedCurrencies);
	void HandleNewProductUnlocked(class USaveData_TA* Data, int ProductID);
	bool IsPlayingWithAFriend(class APRI_TA* PlayerPRI);
	bool PlayedAnyCar(TArray<struct FName> CarsToCheck);
	bool PlayedCar(const struct FName& CarToCheck);
	bool PlayedAllCars(TArray<struct FName> CarsToCheck);
	void UpdateCarsPlayed();
	void CheckPlayedWithFriends(class AGameEvent_Soccar_TA* GameEvent);
	void HandleMatchEnded(class AGameEvent_Soccar_TA* GameEvent);
	void CheckBotTeamsPlayed(class AGameEvent_Soccar_TA* GameEvent);
	void UpdateBotTeamsPlayed(class AGameEvent_Soccar_TA* GameEvent);
	void NotifyGameEventWon();
	void HandleMatchWinnerSet(class AGameEvent_Soccar_TA* GameEvent);
	void HandlePlayerCarSet(class APRI_TA* PRI);
	void HandleNewPlayerAdded(class AGameEvent_TA* GameEvent, class APRI_TA* PRI);
	void HandleOvertimeUpdated(class AGameEvent_Soccar_TA* GameEvent);
	bool GameEventHasPlayers(class AGameEvent_TA* GameEvent);
	bool IsTiedOrTrailingOtherTeam(class AGameEvent_Soccar_TA* GameEvent);
	void HandleGameTimeUpdated(class AGameEvent_Soccar_TA* GameEvent);
	void HandleCarAddComponent(class UObject* O);
	void SetupDriftKingForUnlock();
	void InitCar();
	void HandlePickupActivated(class ACar_TA* InCar, class ASpecialPickup_TA* ActivatedPickup);
	void CheckAllRumbleActivations(class ASpecialPickup_TA* ActivatedPickup);
	struct FName GetRumbleItemName(class ASpecialPickup_TA* Pickup);
	void HandleCarSet(class APRI_TA* InPRI);
	void HandleTeamChanged(class APRI_X* InPRI);
	void HandleGameEventChanged(class APRI_TA* PRI);
	void UpdatePRI(class APRI_TA* PRI);
	void HandleReceivedPRI(class APlayerController_X* InPC);
	void OnInit();
	void SetAchievementSave(class UAchievementSave_TA* Save);
	void SetBaseSaveData(class USaveData_TA* MySaveData);
	void HandleBaseSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError* Error);
	void HandlePCDestroyed(class APlayerController_X* InPC);
	void HandlePlayerReceived(class APlayerControllerBase_TA* InPC);
	void Init(class APlayerControllerBase_TA* InPC);
	void SyncPS4Achievements(TArray<unsigned long> SyncedAchievements);
	void CheckPS4AchievementsSynced();
	struct FUniqueNetId GetUniqueNetId(struct FUniqueNetId* StructInitializer_805687EF4B58E9E007E4E28CF10F8968);
	void SyncSteamAchievements(int TitleId);
	void OnFirstExecution();
	void IncrementStat(int AchievementId, TEnumAsByte<EAchievementType> AchievementType, int Progress);
	bool STATIC_AchievementTypeExistsOnPlatform(TEnumAsByte<EAchievementType> AchievementType);
	int STATIC_GetAchievementTypeMax(TEnumAsByte<EAchievementType> AchievementType);
	int GetAchievementIconID(int InAchievementID, TEnumAsByte<EAchievementType> AchievementType);
	void GetAchievementIDAndType(int GlobalAchievementID, int* Out_AchievementID, TEnumAsByte<EAchievementType>* Out_AchievementType);
	int STATIC_GetGlobalAchievementID(int InAchievementID, TEnumAsByte<EAchievementType> AchievementType);
	bool IsUnlocked(int AchievementId, TEnumAsByte<EAchievementType> AchievementType, bool bIgnoreAuthority);
	void SetAchievementUnlocked(int AchievementId, bool bUnlocked);
	void UnlockAchievement(int AchievementId, TEnumAsByte<EAchievementType> AchievementType, bool bIgnoreAuthority, class UAchievementUnlockedEvent_TA** ObjectInitializer_0FC36DA944D4A9BED09314A852B60E7C);
	void OnProgressionChanged(int AchievementId, TEnumAsByte<EAchievementType> AchievementType);
	void HandleServerAchievementProgression(class APRI_TA* PRI, int AchievementId, TEnumAsByte<EAchievementType> AchievementType, float Progress, float MaxProgress);
	void HandleServerUnlockedAchievement(class APRI_TA* PRI, int AchievementId, TEnumAsByte<EAchievementType> AchievementType);
	void Construct();
	void EventSaveDataSet(class UAchievementManager_TA* Manager);
	void EventReceiveServerProgress(class UAchievementManager_TA* Manager, int AchievementId, TEnumAsByte<EAchievementType> AchievementType, float Progress, float MaxProgress);
	void EventStatIncremented(class UAchievementManager_TA* Manager, int AchievementId, TEnumAsByte<EAchievementType> AchievementType);
	void EventAchievementUnlocked(class UAchievementManager_TA* Manager, int AchievementId, TEnumAsByte<EAchievementType> AchievementType);
	void EventRegularSeasonAmountChanged(class UAchievementManager_TA* Manager, int Amount);
	void EventRandomItemAmountDropped(class UAchievementManager_TA* Manager, int Amount);
	void EventChampionshipAmountChanged(class UAchievementManager_TA* Manager, int Wins);
	void EventGameEventAmountWon(class UAchievementManager_TA* Manager, int GamesWon);
	void EventShotAmountBlocked(class UAchievementManager_TA* Manager, int bLocked);
	void EventDrivenDistance(class UAchievementManager_TA* Manager, float Distance);
	void EventGoalAmountScored(class UAchievementManager_TA* Manager, int Score);
	void EventNewMVPScore(class UAchievementManager_TA* Manager, int Score);
};


// Class TAGame.GameInfoBase_TA
// 0x0010 (0x04D8 - 0x04C8)
class AGameInfoBase_TA : public AGameInfo_X
{
public:
	TArray<class UGFxSoundPack_X*>                     SoundPacks;                                               // 0x04C8(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfoBase_TA");
		return ptr;
	}


	class UClass* STATIC_SetGameType(const struct FString& MapName, const struct FString& Options, const struct FString& Portal);
};


// Class TAGame.GameInfo_Replay_TA
// 0x0068 (0x0540 - 0x04D8)
class AGameInfo_Replay_TA : public AGameInfoBase_TA
{
public:
	class UReplay_TA*                                  Replay;                                                   // 0x04D8(0x0008) (Transient)
	struct FString                                     ReplayPath;                                               // 0x04E0(0x0010) (Transient, NeedCtorLink)
	class AGameEvent_TA*                               GameEvent;                                                // 0x04F0(0x0008) (Transient)
	float                                              PrevTime;                                                 // 0x04F8(0x0004) (Transient)
	float                                              ReplayStartTime;                                          // 0x04FC(0x0004) (Transient)
	struct FString                                     ReplayKismetLevelName;                                    // 0x0500(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventReplayStarted__Delegate;                           // 0x0510(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0510(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventGameEventSet__Delegate;                            // 0x0528(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0528(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Replay_TA");
		return ptr;
	}


	void HandleReplayTimeSkip(class UReplay_TA* InReplay);
	void TriggerTimeEvents();
	void OnLoadReplayCancel(class UGFxModal_X* Modal);
	void OnLoadReplayRetry(class UGFxModal_X* Modal);
	void HandleReplayImportError(class UReplay_TA* InReplay, class UError* Error);
	void Tick(float DeltaTime);
	void HandleReplayActorSpawned(class UReplay_TA* InReplay, class AActor* A);
	class ANavigationPoint* FindPlayerStart(class AController* Player, unsigned char InTeam, const struct FString& IncomingName);
	void HandleReplayImported(class UReplayManager_TA* Manager, class UReplay_TA* InReplay, class UError* Error);
	void ImportReplay();
	void Destroyed();
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
	void EventGameEventSet(class AGameInfo_Replay_TA* Game);
	void EventReplayStarted(class AGameInfo_Replay_TA* Game);
};


// Class TAGame.SaveObject_TA
// 0x0068 (0x00C8 - 0x0060)
class USaveObject_TA : public UObject
{
public:
	int                                                Version;                                                  // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventDirtied__Delegate;                                 // 0x0068(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0064(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventLoaded__Delegate;                                  // 0x0080(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0080(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventUnloaded__Delegate;                                // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0098(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             EventPropertyChange;                                      // 0x00B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveObject_TA");
		return ptr;
	}


	void EventPropertyChangeFunc();
	void GetVersionDelegates(TArray<struct FScriptDelegate>* VersionDelegates);
	void UpdateVersion();
	class USaveObject_TA* Reconcile(class USaveObject_TA* Remote);
	void SetDirtyDelayed();
	void SetDirty();
	void OnUnload();
	void Unload();
	void OnLoad();
	void Load();
	void OnCreate();
	class USaveObject_TA* Create();
	void EventUnloaded(class USaveObject_TA* SaveObject);
	void EventLoaded(class USaveObject_TA* SaveObject);
	void EventDirtied(class USaveObject_TA* SaveObject);
};


// Class TAGame.AchievementSave_TA
// 0x016C (0x0234 - 0x00C8)
class UAchievementSave_TA : public USaveObject_TA
{
public:
	TArray<struct FString>                             BotTeamsPlayed;                                           // 0x00C8(0x0010) (NeedCtorLink)
	TArray<struct FString>                             TrainingModesPlayed;                                      // 0x00D8(0x0010) (NeedCtorLink)
	TArray<struct FName>                               LevelsPlayed;                                             // 0x00E8(0x0010) (NeedCtorLink)
	TArray<struct FName>                               LabsMapsPlayed;                                           // 0x00F8(0x0010) (NeedCtorLink)
	TArray<struct FName>                               CarsPlayed;                                               // 0x0108(0x0010) (NeedCtorLink)
	TArray<struct FName>                               RumbleItemsActivated;                                     // 0x0118(0x0010) (NeedCtorLink)
	TArray<struct FName>                               BraveTheElementsLevelsPlayed;                             // 0x0128(0x0010) (NeedCtorLink)
	float                                              TotalBoostTime;                                           // 0x0138(0x0004)
	float                                              TotalTimeOnWall;                                          // 0x013C(0x0004)
	float                                              TotalDriveDistanceKM;                                     // 0x0140(0x0004)
	int                                                GoalShotsAny;                                             // 0x0144(0x0004)
	int                                                GoalShots;                                                // 0x0148(0x0004)
	int                                                GoalSaves;                                                // 0x014C(0x0004)
	int                                                SavageGoals;                                              // 0x0150(0x0004)
	int                                                GameEventsWon;                                            // 0x0154(0x0004)
	int                                                GamesWonInARow;                                           // 0x0158(0x0004)
	int                                                GameEventsPlayed;                                         // 0x015C(0x0004)
	int                                                SpectacularGoals;                                         // 0x0160(0x0004)
	int                                                TotalScoredGoals;                                         // 0x0164(0x0004)
	int                                                TotalShotsBlocked;                                        // 0x0168(0x0004)
	int                                                RandomItemsDropped;                                       // 0x016C(0x0004)
	int                                                HighestMVPScore;                                          // 0x0170(0x0004)
	int                                                ChampionshipsWon;                                         // 0x0174(0x0004)
	int                                                RegularSeasonsCompleted;                                  // 0x0178(0x0004)
	int                                                HighestRecordedCertifiedRank;                             // 0x017C(0x0004)
	int                                                BreakoutGoals;                                            // 0x0180(0x0004)
	int                                                BreakoutPlatformsDamaged;                                 // 0x0184(0x0004)
	unsigned long                                      bPowerSlideCristianoCompleted : 1;                        // 0x0188(0x0004)
	unsigned long                                      bPowerSlideSpinnerCompleted : 1;                          // 0x0188(0x0004)
	unsigned long                                      bRideOrDieDominusCompleted : 1;                           // 0x0188(0x0004)
	unsigned long                                      bRideOrDieTakumiCompleted : 1;                            // 0x0188(0x0004)
	unsigned long                                      bResetWinningIsWinningSeasonList : 1;                     // 0x0188(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x018C(0x0004) MISSED OFFSET
	TArray<struct FName>                               CustomizedSlotNames;                                      // 0x0190(0x0010) (NeedCtorLink)
	TArray<float>                                      CheckDistancesDrivenKM;                                   // 0x01A0(0x0010) (NeedCtorLink)
	TArray<int>                                        CheckScoredGoals;                                         // 0x01B0(0x0010) (NeedCtorLink)
	TArray<int>                                        CheckShotsBlocked;                                        // 0x01C0(0x0010) (NeedCtorLink)
	TArray<int>                                        CheckGameEventsWon;                                       // 0x01D0(0x0010) (NeedCtorLink)
	TArray<int>                                        CheckRandomItemsDropped;                                  // 0x01E0(0x0010) (NeedCtorLink)
	TArray<int>                                        LeftWingRightWingTeamsPlayed;                             // 0x01F0(0x0010) (NeedCtorLink)
	TArray<unsigned long>                              WinningIsWinningPlayedWithDLC0Cars;                       // 0x0200(0x0010) (NeedCtorLink)
	int                                                ExhibitionMatchesPlayed;                                  // 0x0210(0x0004)
	int                                                RankedMatchesPlayed;                                      // 0x0214(0x0004)
	int                                                UnrankedMatchesPlayed;                                    // 0x0218(0x0004)
	int                                                PrivateMatchesPlayed;                                     // 0x021C(0x0004)
	int                                                ReplayEditorOpened;                                       // 0x0220(0x0004)
	int                                                CreditsViewed;                                            // 0x0224(0x0004)
	int                                                GoalsOrAssists;                                           // 0x0228(0x0004)
	int                                                CompletedMatchesWithClubmates;                            // 0x022C(0x0004)
	int                                                NewOfflineProductsUnlocked;                               // 0x0230(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AchievementSave_TA");
		return ptr;
	}


	class USaveObject_TA* Reconcile(class USaveObject_TA* OtherSaveObject);
};


// Class TAGame.AchievementUnlockedEvent_TA
// 0x0008 (0x0068 - 0x0060)
class UAchievementUnlockedEvent_TA : public UObject
{
public:
	TEnumAsByte<EAchievementType>                      Type;                                                     // 0x0060(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	int                                                LocalID;                                                  // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AchievementUnlockedEvent_TA");
		return ptr;
	}

};


// Class TAGame.GameEvent_Season_TA
// 0x0098 (0x0CC0 - 0x0C28)
class AGameEvent_Season_TA : public AGameEvent_Soccar_TA
{
public:
	int                                                PreMatchTime;                                             // 0x0C28(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0C2C(0x0004) MISSED OFFSET
	class USeason_TA*                                  Season;                                                   // 0x0C30(0x0008) (Transient)
	struct FSeasonMatch                                Match;                                                    // 0x0C38(0x001C) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0C54(0x0004) MISSED OFFSET
	class UProfile_TA*                                 Profile;                                                  // 0x0C58(0x0008) (Transient)
	class ATeam_TA*                                    HumanTeam;                                                // 0x0C60(0x0008) (Transient)
	class ATeam_TA*                                    BotTeam;                                                  // 0x0C68(0x0008) (Transient)
	int                                                HumanMatchTeam;                                           // 0x0C70(0x0004) (Transient)
	int                                                BotMatchTeam;                                             // 0x0C74(0x0004) (Transient)
	float                                              SeasonIntroTime;                                          // 0x0C78(0x0004)
	unsigned long                                      bIsChampionShipGame : 1;                                  // 0x0C7C(0x0004)
	unsigned long                                      bIsFirstGameOfSeason : 1;                                 // 0x0C7C(0x0004)
	unsigned long                                      bLastGameOfRegularSeason : 1;                             // 0x0C7C(0x0004)
	class USimilarSeasonLogos_TA*                      SimilarLogoGroups;                                        // 0x0C80(0x0008)
	struct FString                                     TeamOverrides[0x2];                                       // 0x0C88(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventWonChampionShip__Delegate;                         // 0x0CA8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0CA8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Season_TA");
		return ptr;
	}


	void BeginHighlightsReplay();
	void OnMatchWinnerSet();
	bool GiveExtraXP();
	bool AllowSplitScreenPlayer();
	void CheckTeamOverride(int TeamIdx, struct FSeasonTeam* TeamData);
	bool IsLastRegularGameOfSeason();
	bool IsFirstGameOfSeason();
	bool IsChampionshipGame();
	void StartGame();
	void SaveSeasonStats();
	bool ShouldSwapBotColors(class UProductAsset_Logo_TA* PlayerLogo, class UProductAsset_Logo_TA* BotLogo);
	class UProductAsset_Bot_TA* ChooseBotAsset(class AAIController_TA* Bot);
	void InitSeasonTeams();
	void OnAllTeamsCreated();
	void AssignCustomTeamSettings();
	class ATeam_TA* PickTeam(class AController* C);
	void ToggleDropTimers(bool bEnableTimers);
	void PreloadBots();
	void OnInit();
	void InitGame(const struct FString& Options);
	void UpdateStats();
	void EventWonChampionShip(class AGameEvent_Season_TA* GameEvent);
};


// Class TAGame.GameInfo_TA
// 0x0028 (0x0500 - 0x04D8)
class AGameInfo_TA : public AGameInfoBase_TA
{
public:
	unsigned long                                      bShutdownQueued : 1;                                      // 0x04D8(0x0004) (Transient)
	unsigned long                                      bShuttingDown : 1;                                        // 0x04D8(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04DC(0x0004) MISSED OFFSET
	class AGameEvent_TA*                               CurrentGame;                                              // 0x04E0(0x0008) (Transient)
	struct FScriptDelegate                             __EventGameInitialized__Delegate;                         // 0x04E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_TA");
		return ptr;
	}


	void RemoveBot(int Index);
	void SpawnDummyBot(const struct FName& BodyName);
	void PlayerResetTraining();
	void StartGameEvent(const struct FGameEventData& GameData);
	bool AllowPausing(class APlayerController* PC);
	class UGameMode_TA* GetGameMode();
	bool AtCapacity(bool bSpectator);
	void HandleTimeDilationChanged(class AWorldInfo* WI);
	void RestartLevel();
	void NotifyClientsServerShutdown();
	void StartShutdown();
	void QueueShutdown();
	void ShutdownGame();
	struct FVector GetGoodSpawnPointNear(class AActor* A, const struct FVector& PossibleLoc);
	void RestartPlayer(class AController* NewPlayer);
	void GenericPlayerInitialization(class AController* C);
	void AddDefaultInventory(class APawn* P);
	void ChangeName(class AController* Other, const struct FString& S, bool bNameChange);
	struct FString GetFakePlayerName(class AController* Other);
	void Logout(class AController* Exiting);
	class APlayerController* Login(const struct FString& Portal, const struct FString& Options, const struct FUniqueNetId& UniqueId, struct FString* ErrorMessage);
	void PreLogin(const struct FString& Options, const struct FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, struct FString* ErrorMessage);
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
	TScriptInterface<class UIOnlineGameHost_X> GetOnlineGameHost();
	void EventGameInitialized(class AGameInfo_TA* Game);
};


// Class TAGame.GameInfo_Soccar_TA
// 0x0010 (0x0510 - 0x0500)
class AGameInfo_Soccar_TA : public AGameInfo_TA
{
public:
	TArray<struct FGameEventData>                      GameEventArchetypes;                                      // 0x0500(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Soccar_TA");
		return ptr;
	}


	bool HasMoreThanOneRemotePlayer();
	void ForceInactive();
	void KickAllPlayers(const struct FString& Reason);
	void RestartLevel();
	void RestartPlayer(class AController* aPlayer);
	bool PlayerCanRestart(class APlayerController* aPlayer);
	void HandleNewDedicatedServerForPlayers(const struct FString& IP);
	void QueueShutdown();
	void RestartGameEvent();
	bool IsGameEventType(const struct FString& LaunchOption, class UObject* Archetype);
	void HandleMainEventDestroyed(class AGameEvent_TA* GameEvent);
	void OnCreateCurrentGame();
	void InitGameEvent(class AGameEvent_TA* GameEventArchetype, bool bAddAllPlayers);
	void StartGameEvent(const struct FGameEventData& GameData);
	void StartGameEventFromLaunchOption(const struct FString& LaunchOption);
	void StartDefaultGameEvent();
	void PostLogin(class APlayerController* NewPlayer);
	class APlayerController* Login(const struct FString& Portal, const struct FString& Options, const struct FUniqueNetId& UniqueId, struct FString* ErrorMessage);
	void PreLogin(const struct FString& Options, const struct FString& Address, const struct FUniqueNetId& UniqueId, bool bSupportsAuth, struct FString* ErrorMessage);
	void PostBeginPlay();
};


// Class TAGame.GameInfo_Basketball_TA
// 0x0000 (0x0510 - 0x0510)
class AGameInfo_Basketball_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Basketball_TA");
		return ptr;
	}

};


// Class TAGame.SeasonSave_TA
// 0x0010 (0x00D8 - 0x00C8)
class USeasonSave_TA : public USaveObject_TA
{
public:
	TArray<class USeason_TA*>                          Seasons;                                                  // 0x00C8(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeasonSave_TA");
		return ptr;
	}


	class USeason_TA* GetLatestSeason();
};


// Class TAGame.Season_TA
// 0x0078 (0x00D8 - 0x0060)
class USeason_TA : public UObject
{
public:
	int                                                NumTeams;                                                 // 0x0060(0x0004) (DataBinding)
	int                                                TeamSize;                                                 // 0x0064(0x0004) (DataBinding)
	int                                                Difficulty;                                               // 0x0068(0x0004) (DataBinding)
	int                                                NumRegularWeeks;                                          // 0x006C(0x0004) (DataBinding)
	int                                                NumPlayoffsWeeks;                                         // 0x0070(0x0004) (DataBinding)
	int                                                NumPlayoffsTeams;                                         // 0x0074(0x0004) (DataBinding)
	TArray<struct FSeasonTeam>                         Teams;                                                    // 0x0078(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FSeasonPlayer>                       Players;                                                  // 0x0088(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FSeasonPlayerStat>                   PlayerStats;                                              // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	int                                                Year;                                                     // 0x00A8(0x0004) (DataBinding)
	int                                                CurrentWeek;                                              // 0x00AC(0x0004) (DataBinding)
	TArray<struct FSeasonMatch>                        Matches;                                                  // 0x00B0(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __EventWeekSimulated__Delegate;                           // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Season_TA");
		return ptr;
	}


	void PrintRankings(TArray<struct FSeasonTeamRank>* Rankings);
	void SetDifficulty(int NewDifficulty);
	void SetBots(const struct FString& BotID0, const struct FString& BotName0, const struct FString& BotID1, const struct FString& BotName1, const struct FString& BotID2, const struct FString& BotName2);
	void BuildPlayoffsMatches();
	void SelectPlayoffsTeams();
	void SimulateWeek(bool bForceHumansToWin);
	void SaveMatch(const struct FSeasonMatch& Match);
	bool GetMatch(int Team, int Week, bool bReturnByes, struct FSeasonMatch* Match, int* MatchIdx);
	int SortTeamRank(const struct FSeasonTeamRank& A, const struct FSeasonTeamRank& B);
	void GetTeamRankings(int Week, TArray<struct FSeasonTeamRank>* Rankings);
	int GetWins(int Team, int Week);
	int GetTotalSeasonWeeks();
	bool IsFinished(int Week);
	int GetLastWeek();
	bool IsChampionship(int Week);
	bool IsPlayoffs(int Week);
	bool IsPostSeason(int Week);
	bool IsLastRegularSeason(int Week);
	bool IsRegularSeason(int Week);
	bool IsFirstGameOfSeason(int Week);
	void BuildBotTeams();
	void BuildMatches();
	void EventWeekSimulated(class USeason_TA* InSeason);
};


// Class TAGame.Profile_TA
// 0x0500 (0x0560 - 0x0060)
class UProfile_TA : public UObject
{
public:
	int                                                LocalID;                                                  // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FString                                     ProfileName;                                              // 0x0068(0x0010) (NeedCtorLink)
	class USaveData_TA*                                SaveData;                                                 // 0x0078(0x0008) (Transient)
	int                                                ControllerId;                                             // 0x0080(0x0004) (Transient)
	unsigned long                                      bMetric : 1;                                              // 0x0084(0x0004) (Const)
	unsigned long                                      bMuteStatEvents : 1;                                      // 0x0084(0x0004) (Const)
	unsigned long                                      bDisableDivisions : 1;                                    // 0x0084(0x0004) (Const)
	unsigned long                                      bAlternateNameplates : 1;                                 // 0x0084(0x0004) (Const)
	unsigned long                                      bAlwaysShowNameplates : 1;                                // 0x0084(0x0004) (Const)
	unsigned long                                      bPushToTalk : 1;                                          // 0x0084(0x0004) (Const)
	unsigned long                                      bUseBallIndicator : 1;                                    // 0x0084(0x0004) (Const)
	unsigned long                                      bUseBallCamIndicator : 1;                                 // 0x0084(0x0004) (Const)
	unsigned long                                      bInvertSwivelPitch : 1;                                   // 0x0084(0x0004) (Const)
	unsigned long                                      bInvertSpectatorPitch : 1;                                // 0x0084(0x0004) (Const)
	unsigned long                                      bPrefersSecondaryCamera : 1;                              // 0x0084(0x0004) (Const)
	unsigned long                                      bToggleSecondaryCamera : 1;                               // 0x0084(0x0004) (Const)
	unsigned long                                      bToggleRearCamera : 1;                                    // 0x0084(0x0004) (Const)
	unsigned long                                      bFreecam : 1;                                             // 0x0084(0x0004) (Const)
	unsigned long                                      bLockSpecatorBallCam : 1;                                 // 0x0084(0x0004) (Const)
	unsigned long                                      bEnableCameraShake : 1;                                   // 0x0084(0x0004) (Const)
	unsigned long                                      bEnableHorizontalSplitscreen : 1;                         // 0x0084(0x0004) (Const)
	unsigned long                                      bDisableCrossPlay : 1;                                    // 0x0084(0x0004) (Const)
	unsigned long                                      bAimAssistEnabled : 1;                                    // 0x0084(0x0004) (Const)
	unsigned long                                      bBallTrajectoryEnabled : 1;                               // 0x0084(0x0004) (Const)
	unsigned long                                      bAirPitchSafetyEnabled : 1;                               // 0x0084(0x0004) (Const)
	unsigned long                                      bShouldRandomizeLoadoutEachGame : 1;                      // 0x0084(0x0004)
	TArray<struct FUISavedKeyValue>                    UISavedValues;                                            // 0x0088(0x0010) (NeedCtorLink)
	TArray<struct FPlaylistMapPrefs>                   MapPrefs;                                                 // 0x0098(0x0010) (Const, NeedCtorLink)
	class UTutorialSave_TA*                            Tutorial;                                                 // 0x00A8(0x0008)
	TEnumAsByte<EForceFeedbackType>                    ForceFeedbackType;                                        // 0x00B0(0x0001) (Const)
	TEnumAsByte<EMatchmakingViewTab>                   MatchmakingViewTab;                                       // 0x00B1(0x0001) (Const)
	TEnumAsByte<ECameraSettingsPreset>                 CameraSettingsPreset;                                     // 0x00B2(0x0001)
	unsigned char                                      UnknownData01[0x1];                                       // 0x00B3(0x0001) MISSED OFFSET
	struct FName                                       ControlsPresetName;                                       // 0x00B4(0x0008) (Const)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	TArray<struct FPlayerBinding>                      PCBindings;                                               // 0x00C0(0x0010) (NeedCtorLink)
	float                                              MouseSensitivity;                                         // 0x00D0(0x0004)
	float                                              MouseXDeadZone;                                           // 0x00D4(0x0004) (Const)
	float                                              MouseYDeadZone;                                           // 0x00D8(0x0004) (Const)
	float                                              MouseXDeadZoneAir;                                        // 0x00DC(0x0004) (Const)
	float                                              MouseYDeadZoneAir;                                        // 0x00E0(0x0004) (Const)
	float                                              KeyboardAxisBlendTime;                                    // 0x00E4(0x0004)
	TArray<struct FName>                               QuickMatchPlaylists;                                      // 0x00E8(0x0010) (Const, NeedCtorLink)
	TArray<struct FString>                             QuickMatchRegions;                                        // 0x00F8(0x0010) (Const, NeedCtorLink)
	struct FProfileCameraSettings                      Camera;                                                   // 0x0108(0x001C) (Const)
	struct FProfileAutoCamSettings                     AutoCam;                                                  // 0x0124(0x0028) (Const)
	unsigned char                                      UnknownData03[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	TArray<struct FName>                               QuickChatBindings;                                        // 0x0150(0x0010) (NeedCtorLink)
	int                                                TotalXP;                                                  // 0x0160(0x0004) (Const)
	struct FName                                       PlayerTitle;                                              // 0x0164(0x0008)
	int                                                PreviewTeamIndex;                                         // 0x016C(0x0004)
	TArray<class ULoadoutSet_TA*>                      LoadoutSets;                                              // 0x0170(0x0010) (NeedCtorLink)
	class ULoadoutSet_TA*                              EquippedLoadoutSet;                                       // 0x0180(0x0008)
	struct FTourSearchSettings                         TourSearchSettings;                                       // 0x0188(0x0060) (Const, NeedCtorLink)
	struct FTourCreateSettings                         TourCreateSettings;                                       // 0x01E8(0x0038) (Const, NeedCtorLink)
	TArray<class USeason_TA*>                          Seasons;                                                  // 0x0220(0x0010) (NeedCtorLink)
	TArray<struct FPlayerBinding>                      GamepadBindings;                                          // 0x0230(0x0010) (NeedCtorLink)
	float                                              ControllerDeadzone;                                       // 0x0240(0x0004)
	float                                              DodgeInputThreshold;                                      // 0x0244(0x0004) (Const)
	float                                              SteeringSensitivity;                                      // 0x0248(0x0004) (Const)
	float                                              AirControlSensitivity;                                    // 0x024C(0x0004) (Const)
	class UPlayerBannerSave_TA*                        PlayerBannerData;                                         // 0x0250(0x0008)
	class ULoadout_TA*                                 Loadout;                                                  // 0x0258(0x0008)
	struct U_Types_X_FCustomMatchSettings              PrivateMatchSettings;                                     // 0x0260(0x0090) (NeedCtorLink)
	struct U_Types_X_FCustomMatchSettings              SplitscreenMatchSettings;                                 // 0x02F0(0x0090) (NeedCtorLink)
	struct U_Types_X_FCustomMatchSettings              ServerBrowserSettings;                                    // 0x0380(0x0090) (NeedCtorLink)
	struct U_Types_X_FCustomMatchSettings              CustomMatchSettings;                                      // 0x0410(0x0090) (Const, NeedCtorLink)
	TArray<struct FKeyValuePair>                       CustomMatchGameTags;                                      // 0x04A0(0x0010) (NeedCtorLink)
	struct FString                                     CustomMatchRegion;                                        // 0x04B0(0x0010) (NeedCtorLink)
	TArray<class UGameTags_TA*>                        GameTags;                                                 // 0x04C0(0x0010) (NeedCtorLink)
	TArray<struct FStatValue>                          StatValues;                                               // 0x04D0(0x0010) (Const, NeedCtorLink)
	TArray<struct FProductStat>                        ProductStats;                                             // 0x04E0(0x0010) (Const, NeedCtorLink)
	int                                                AimAssistLevelOverride;                                   // 0x04F0(0x0004) (Const)
	int                                                MaxAimAssistLevelOverride;                                // 0x04F4(0x0004) (Const)
	struct FString                                     BugReportEmail;                                           // 0x04F8(0x0010) (NeedCtorLink)
	int                                                ProfileVersion;                                           // 0x0508(0x0004)
	int                                                EditLoadoutSetIndex;                                      // 0x050C(0x0004) (Transient)
	class UObjectProvider*                             SaveObjectProvider;                                       // 0x0510(0x0008) (ExportObject, Transient, Component, EditInline)
	TArray<class USaveObject_TA*>                      SaveObjects;                                              // 0x0518(0x0010) (NeedCtorLink)
	class UProfileLoadoutSave_TA*                      LoadoutSave;                                              // 0x0528(0x0008) (Transient)
	struct FScriptDelegate                             __EventPreEquipProductToLoadouts__Delegate;               // 0x0530(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0530(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventActiveBindingsChanged__Delegate;                   // 0x0548(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0548(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Profile_TA");
		return ptr;
	}


	void __Profile_TA__CommonInit_5EA62DBF4830380957E035AE338E9D4A(class USaveObject_TA* S);
	void __Profile_TA__Unload_A31C1B76495AAE1EB383CFA08D9756DF(class USaveObject_TA* S);
	bool __Profile_TA__GetUniqueNetId_5EC1A6F34B783FDCA5588DAABCC65A50(class ULocalPlayer* P);
	void __Profile_TA__InstantiateSaveObjects_68F4C038435974D19603D59F6040080C(class UClass* T);
	class USaveObject_TA* __Profile_TA__InstantiateSaveObjects_7BECA4F245C11CC563B03FB6552F2792(class UClass* T);
	bool __Profile_TA__InstantiateSaveObjects_E9826AF04FFEDE50892765AB4E4BC15C(class UClass* T);
	bool IsProductEquipped(const struct FProductHashID& HashID);
	void UpdateSaveObjectReference(class USaveObject_TA* NewObject);
	void InstantiateSaveObjects(TArray<class UClass*>* ArrayInitializer_6F4E60A747E79BC258F1F5A1B1963090, TArray<class UClass*>* FilterLocal_F5FD723A49071430FA9DC49370535CF2, TArray<class USaveObject_TA*>* MapLocal_93BBC9E144AA977F1A59F6B503825B51);
	struct FUniqueNetId GetUniqueNetId();
	TArray<struct FProfileProduct> GetProfileProducts(struct FProfileProduct* StructInitializer_0EBCC0F3424340F714DCFFB211D4E54D, struct FProfileProduct* StructInitializer_9CDED3F442C450A463F5BC8234B8C0DF, struct FProfileProduct* StructInitializer_A800557F41FC6950B27AADB2F0447A06);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	bool GetBallTrajectoryEnabled();
	void ResetAllSavedControlBindings(TArray<struct FPlayerBinding>* ArrayInitializer_0B8308E64371729EEBD77D85FC22CFCB, TArray<struct FPlayerBinding>* ArrayInitializer_361CDF1345689C9D875EDBACD5166AF5);
	void SetControlsPreset(const struct FName& PresetName);
	void STATIC_AddLoadoutProductData(int SlotIndex, int ProductID, class UOnlineProduct_TA* OnlineProduct, TArray<class UProductAttribute_TA*> Attributes, TArray<struct FLoadoutProductData>* OutProducts);
	void InitServerSetLoadoutParams(const struct U_Types_TA_FLoadoutData& Loadouts, TArray<struct FProfileProduct> ProfileProducts, struct FServerSetLoadoutParams* OutParams);
	struct FServerSetLoadoutParams BuildServerSetLoadoutParams();
	void SetEditingLoadoutSet(int Index, TArray<class ULoadoutSet_TA*>* ArrayResultLocal_59CEA80D47ECC6A1C50A6A80EF7A33E6);
	class ULoadoutSet_TA* GetEditingLoadoutSet();
	class ULoadout_TA* GetEditingLoadout(int TeamIndex);
	void SetCustomMatchSettings(TEnumAsByte<ECustomMatchSettingsType> Type, struct U_Types_X_FCustomMatchSettings* Settings);
	struct U_Types_X_FCustomMatchSettings GetCustomMatchSettings(TEnumAsByte<ECustomMatchSettingsType> Type);
	class UGameTags_TA* GetGameTags(TEnumAsByte<ECustomMatchSettingsType> Type);
	void ValidateLoadoutSet(class ULoadoutSet_TA* InLoadoutSet);
	void ValidateLoadoutsWithProduct(TArray<class ULoadoutSet_TA*>* ArrayResultLocal_8288756144B7239A1B01A58629D77FD9, TArray<class ULoadoutSet_TA*>* FilterLocal_86DA3B05477599D274E784B6A839EE08);
	void ValidateLoadouts(TArray<class ULoadoutSet_TA*>* ArrayResultLocal_3C34BC9643D74BB91FDFC485208868A9);
	void RemoveGameSettingsTag(const struct FString& GameSettingName);
	void OnLoaded(class USaveData_TA* InSaveData);
	void Save();
	void Unload();
	void ValidateVanityObjects();
	void HandleProfileLoadoutSaveLoaded(class UProfileLoadoutSave_TA* Save, TArray<class ULoadoutSet_TA*>* ArrayResultLocal_E01FF67243E02A8545BBF5A713FC95F5);
	void HandleRemovedOnlineProduct(class USaveData_TA* PlayerSaveData, class UOnlineProduct_TA* OnlineProduct);
	void CommonInit();
	void Init(class USaveData_TA* InSaveData, const struct FString& InProfileName, int InLocalID);
	void EventActiveBindingsChanged(class UProfile_TA* Profile);
	void EventPreEquipProductToLoadouts(class UProfile_TA* Profile, int ProductID);
};


// Class TAGame.SaveData_TA
// 0x0320 (0x0380 - 0x0060)
class USaveData_TA : public UObject
{
public:
	class USaveGameManager_TA*                         SaveManager;                                              // 0x0060(0x0008) (Transient)
	unsigned long                                      bFromPreviousSave : 1;                                    // 0x0068(0x0004)
	unsigned long                                      bShowLightShafts : 1;                                     // 0x0068(0x0004)
	unsigned long                                      bTranslucentArenaShaders : 1;                             // 0x0068(0x0004)
	unsigned long                                      bVsync : 1;                                               // 0x0068(0x0004)
	unsigned long                                      bShowWeatherFX : 1;                                       // 0x0068(0x0004) (Const)
	unsigned long                                      bColorBlind : 1;                                          // 0x0068(0x0004) (Const)
	unsigned long                                      bEnableOnlineData : 1;                                    // 0x0068(0x0004) (Transient, Config)
	float                                              MasterVolume;                                             // 0x006C(0x0004) (Const)
	float                                              SoundVolume;                                              // 0x0070(0x0004) (Const)
	float                                              MusicVolume;                                              // 0x0074(0x0004) (Const)
	float                                              AmbientVolume;                                            // 0x0078(0x0004) (Const)
	float                                              VoiceVolume;                                              // 0x007C(0x0004) (Const)
	TEnumAsByte<EAkOutputType>                         OutputType;                                               // 0x0080(0x0001) (Const)
	TEnumAsByte<EControllerSoundMode>                  ControllerSoundMode;                                      // 0x0081(0x0001) (Const)
	TEnumAsByte<EVoiceFilter>                          VoiceFilter;                                              // 0x0082(0x0001) (Const)
	TEnumAsByte<EVoiceFilter>                          ChatFilter;                                               // 0x0083(0x0001) (Const)
	float                                              ControllerVolume;                                         // 0x0084(0x0004) (Const)
	TArray<int>                                        UnlockedProducts;                                         // 0x0088(0x0010) (Const, NeedCtorLink)
	TArray<int>                                        MatchCompleteCarBodies;                                   // 0x0098(0x0010) (Const, NeedCtorLink)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00A8(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.SaveData_TA.NewProductIDs
	unsigned char                                      UnknownData01[0x10];                                      // 0x00B8(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.SaveData_TA.UnseenContainerProducts
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SaveData_TA.LastUnlockDisplayId
	TArray<int>                                        NewProducts;                                              // 0x00D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x10];                                      // 0x00E0(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.SaveData_TA.NewOnlineProducts
	TArray<struct FUISavedKeyValue>                    UISavedValues;                                            // 0x00F0(0x0010) (NeedCtorLink)
	TArray<struct FPlaylistSkillData>                  SkillData;                                                // 0x0100(0x0010) (Const, NeedCtorLink)
	struct FString                                     Resolution;                                               // 0x0110(0x0010) (Const, NeedCtorLink)
	int                                                WindowMode;                                               // 0x0120(0x0004) (Const)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	TArray<struct FOptionsValue>                       VideoOptions;                                             // 0x0128(0x0010) (Const, NeedCtorLink)
	int                                                MaxFPS;                                                   // 0x0138(0x0004)
	float                                              SafeZoneRatio;                                            // 0x013C(0x0004)
	float                                              UIScale;                                                  // 0x0140(0x0004) (Const)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	class UMusicPlayerSave_TA*                         MusicPlayerSave;                                          // 0x0148(0x0008)
	class UAchievementSave_TA*                         AchievementData;                                          // 0x0150(0x0008)
	class UBlogTileCache_TA*                           BlogTileCache;                                            // 0x0158(0x0008)
	struct FName                                       SelectedFreeplayMap;                                      // 0x0160(0x0008) (Const)
	struct FString                                     RankedReconnectBeacon;                                    // 0x0168(0x0010) (Const, NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0178(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SaveData_TA.RankedReconnectEpochTime
	TArray<class UOnlineProduct_TA*>                   OnlineProducts;                                           // 0x0180(0x0010) (NeedCtorLink)
	class UOnlineProductStoreSet_TA*                   OnlineProductSet;                                         // 0x0190(0x0008) (ExportObject, Transient, Component, EditInline)
	class UProductTransactions_TA*                     ProductTransactions;                                      // 0x0198(0x0008) (ExportObject, Transient, Component, EditInline)
	TArray<class UProfile_TA*>                         Profiles;                                                 // 0x01A0(0x0010) (Edit, NeedCtorLink)
	TArray<float>                                      XPGainPercentage;                                         // 0x01B0(0x0010) (Const, NeedCtorLink)
	int                                                CurrentLevel;                                             // 0x01C0(0x0004) (Transient)
	unsigned char                                      UnknownData07[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET
	TArray<struct FName>                               WinSeasonModeRewards;                                     // 0x01C8(0x0010) (Const, Transient, NeedCtorLink)
	TArray<struct FName>                               KonamiCodeRewards;                                        // 0x01D8(0x0010) (Const, Transient, NeedCtorLink)
	int                                                SchematicResources;                                       // 0x01E8(0x0004) (Transient)
	int                                                SaveDataVersion;                                          // 0x01EC(0x0004)
	class UInitialUserSettingsSender_TA*               InitialUserSettingsSender;                                // 0x01F0(0x0008)
	class UOnlineStorageMetadata_TA*                   OnlineStorageMetadata;                                    // 0x01F8(0x0008)
	class UObjectProvider*                             SaveObjectProvider;                                       // 0x0200(0x0008) (ExportObject, Transient, Component, EditInline)
	TArray<class USaveObject_TA*>                      SaveObjects;                                              // 0x0208(0x0010) (NeedCtorLink)
	class UAsyncTask*                                  SyncOnlineStorageTask;                                    // 0x0218(0x0008) (Transient)
	class UOnlineStorageSyncManager_TA*                StorageSyncManager;                                       // 0x0220(0x0008) (Transient)
	class UOnlineProductExpirationHelper_TA*           ExpirationHelper;                                         // 0x0228(0x0008) (Transient)
	class UCachedUnlockedProducts_TA*                  CachedUnlockedProducts;                                   // 0x0230(0x0008) (Transient)
	TArray<class UOnlineProduct_TA*>                   NewProductNotificationQueue;                              // 0x0238(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventNewProductUnlocked__Delegate;                      // 0x0248(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0248(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventNewGarageSlotUnlocked__Delegate;                   // 0x0260(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0260(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventNewOfflineProductsUnlocked__Delegate;              // 0x0278(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0278(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventOnlineXPInitialized__Delegate;                     // 0x0290(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0290(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventDLCChange__Delegate;                               // 0x02A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData12[0x8];                                       // 0x02A8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventNewOnlineProduct__Delegate;                        // 0x02C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData13[0x8];                                       // 0x02C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRemovedOnlineProduct__Delegate;                    // 0x02D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData14[0x8];                                       // 0x02D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventOnlineProductsSynced__Delegate;                    // 0x02F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData15[0x8];                                       // 0x02F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventOnlineSavedDataSynced__Delegate;                   // 0x0308(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData16[0x8];                                       // 0x0308(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSchematicResourcesChanged__Delegate;               // 0x0320(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData17[0x8];                                       // 0x0320(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRedeemedOnlineProducts__Delegate;                  // 0x0338(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData18[0x8];                                       // 0x0338(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventReceivedUnseenContainerProduct__Delegate;          // 0x0350(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData19[0x8];                                       // 0x0350(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnlineProducts__ChangeNotify;                           // 0x0368(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData20[0x8];                                       // 0x0368(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveData_TA");
		return ptr;
	}


	void __SaveData_TA__HandleDataLoaded_216C9F214A5A13C57600968DBBCD837E(class UClass* T);
	void __SaveData_TA__HandleDataLoaded_2A9B53754F16D4033811FE9A85189FB2(class UOnlineProduct_TA* Op);
	void __SaveData_TA__HandleProductsOfflineSaveLoaded_27136C5744FFBA4C2725DE955488C346(class UProductsOfflineSave_TA* Save, int ProductID);
	void __SaveData_TA__HandleProductsOfflineSaveLoaded_00CC264A4429C1658DC3F7988F8FCD96(class UProductsOfflineSave_TA* Save, int ProductID);
	void __SaveData_TA__HandleProfileSet_ABC217984FE216AD9FCA299F38542D72(class USaveObject_TA* S);
	void __SaveData_TA__ValidateLoadouts_B6343DAA4DFF68F18C0CE99F138CBCB8(class UProfile_TA* P);
	bool __SaveData_TA__GetNewProducts_755197B44E219A2CC2C49182462EBFB2(class UProduct_TA* P);
	bool __SaveData_TA__GiveXPDrops_A9D1FDA549DC2F24F69B7F8BE4EA2AF3(const struct U_Types_TA_FOnlineXPReward& Drop);
	bool __SaveData_TA__GetOnlineProductQuantity_70740A1A4F016A914BED6EA7C0D9A50F(const struct FProfileProduct& PP);
	bool __SaveData_TA__GetOnlineProductQuantity_1E0BDE7A422FED61820E008D5004D136(const struct FProfileProduct& P);
	int __SaveData_TA__GetUniqueSeriesIDs_9A7C968642840FF6434E01A9C42ECDFC(class UOnlineProduct_TA* P);
	class USaveObject_TA* __SaveData_TA__InstantiateSaveObjects_44F274994A1FF64EE793398AAA462104(class UClass* T);
	bool __SaveData_TA__InstantiateSaveObjects_AD2953F74649992BBA0A80A2112F41A6(class UClass* T);
	bool __SaveData_TA__CheckForNewGarageSlots_5F72C82148836AB70AAA1899EAF5BBC9(class UProductSlot_TA* Slot);
	bool __SaveData_TA__GetEquippedOnlineProducts_5DD3DFF54BF1E569333E75AC46473026();
	void __OnlineProducts__ChangeNotifyFunc();
	void GetEquippedInstanceIDs();
	TArray<class UOnlineProduct_TA*> GetEquippedOnlineProducts(TArray<class UOnlineProduct_TA*>* MapLocal_3092E81441F7CADDF0A77EB974363703);
	void FilterEquippedOnlineProducts(TArray<class UOnlineProduct_TA*>* OutOnlineProducts, TArray<class UOnlineProduct_TA*>* FilterLocal_1119629644F0B661874A009F51337C58);
	void ValidateMatchesPlayed(TArray<class UProductSlot_TA*>* FilterLocal_77F767924F5C0FF755D2A893D106D16F, TArray<class UProductSlot_TA*>* FilterLocal_7A9BC6A64B60ADBFDF37B593D93CEDD2, TArray<class UProductSlot_TA*>* DifferenceLocal_D25BA5754AD127DC9DEC0999B592F984);
	void HandleOnlineSaveDataSynced(class UOnlineStorageSyncManager_TA* OnlineStorageSyncManager);
	void CheckForNewGarageSlots(TArray<class UProductSlot_TA*>* FilterLocal_89D6666D4D44830A826D5F87A95FB279, TArray<class UProductSlot_TA*>* FilterLocal_0D1D5413454B8DDCAA6FC1BC825C24C1);
	bool IsGarageSlotUnlocked(class UProductSlot_TA* ProductSlot, int MatchesPlayed);
	class UOnlinePlayer_TA* GetOnlinePlayer();
	void HandleGameplaySettingsSync(class UGameplaySettingsSave_TA* GameplaySave);
	void UpdateVideoSettings(class UVideoSettingsSave_TA* Settings);
	void HandleVideoSettingsSync(class UVideoSettingsSave_TA* VideoSave);
	void UpdateSaveObjectReference(class USaveObject_TA* NewObject);
	TArray<class UClass*> InstantiateSaveObjects(TArray<class UClass*>* ArrayInitializer_04CD327647794C3D42AAD8BD832E3C79, TArray<class UClass*>* FilterLocal_F879797E426705D3624490A38CADD1DC, TArray<class USaveObject_TA*>* MapLocal_3F590DC943C882D0198278AEF7B804A8);
	void SortByTradeHold(bool bIsAscending, TArray<class UOnlineProduct_TA*>* OutItemList);
	TArray<int> GetUniqueSeriesIDs(TArray<int>* MapLocal_7EC695104F9A0FFA1AF6A6AFAD142DA7, TArray<int>* DistinctLocal_464404AC427EF004895CF78EFFC7AAFB);
	void HandleKonamiCode();
	class UOnlineProduct_TA* FindFirstOnlineProduct(int InProductID);
	TArray<class UOnlineProduct_TA*> GetUniqueOnlineProducts();
	TArray<class UOnlineProduct_TA*> GetAllOnlineProducts();
	int GetOnlineProductQuantity(class UOnlineProduct_TA* Product, bool bIgnoreEquipped, TArray<struct FProfileProduct>* ArrayResultLocal_84C085E54F8C2AB1EF11EA836680CCE5, TArray<struct FProfileProduct>* FilterLocal_EFBD7E91422F4C968A05439E1DFE80C8, TArray<class UOnlineProduct_TA*>* FilterLocal_47CA98EF4AB06011D53125842DC6EDE1, TArray<class UOnlineProduct_TA*>* FilterLocal_5AFEF97E4322CAEAA8DACBB43028BB22);
	TArray<struct FOnlineProductData> InstanceReplicatedOnlineProductData();
	TArray<class UOnlineProduct_TA*> GetOnlineProducts(int InProductID);
	void RemoveNewProducts();
	void TickNewProductNotificationQueue(float _);
	void HandleOnlineProductsReceived(class URPC_ProductsPlayerGet_TA* RPC);
	void FetchOnlineProducts();
	void ClearOfflineProducts();
	void ClearOnlineProducts();
	void SetSchematicResouces(int Total);
	void HandleSchematicResourcesReceived(class URPC_SchematicResourcesGet_TA* RPC);
	void SyncSchematicResources();
	void SyncOnlineProducts();
	void GiveXPDrops(TArray<struct U_Types_TA_FOnlineXPReward>* XPDrops, TArray<struct U_Types_TA_FOnlineXPReward>* FilterLocal_31E80D98467B4CF80F3F36BB19623A12);
	void GiveAchievementDrop(const struct FOnlineReward& AchievementReward);
	int STATIC_SortChallengeDrops(const struct FOnlineReward& LHS, const struct FOnlineReward& RHS);
	void GiveChallengeDrop(const struct FOnlineReward& ChallengeReward);
	void GiveRewardDrop(const struct U_Types_TA_FOnlineXPReward& Drop);
	void HandleRewardDropNotification(class UPsyNetService_RewardDropReceived_TA* Service, TArray<struct FOnlineReward>* SortLocal_A73D72314BBD8248D62B55BA1D7E9DEF);
	void HandleOnlineXPInitialized(class URPC_XPRequest_TA* RPC);
	bool CanSyncOnlineData(const struct FUniqueNetId& PlayerID);
	void MarkReplayEditorOpened();
	void MarkCreditsViewed();
	float GetUnlockProgress();
	float GetGameModeUnlockProgress();
	float GetItemUnlockProgress();
	void UpdateGameProgress();
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	TArray<int> GetSeasonRewards(class UProfile_TA* Profile, class AGameEvent_TA* GameEvent);
	int UnlockRandomDrop(class UProfile_TA* Profile, class AGameEvent_TA* GameEvent);
	void ValidateLastUnlockDisplayId();
	void SetGrageSlotDropDisplayed(class UItemDropGroup_TA* ItemDropGroup);
	void SetOfflineDropDisplayed();
	void SetOnlineDropDisplayed();
	void SetItemDropDisplayed();
	bool OnNewOnlineProductNoNotify(class UOnlineProduct_TA* OnlineProduct);
	void OnNewOnlineProduct(class UOnlineProduct_TA* OnlineProduct);
	class UOnlineProduct_TA* RemoveOnlineProductIdNoNotify();
	void RemoveOnlineProductId();
	bool GiveOnlineProductHelper(class UOnlineProduct_TA* OnlineProduct);
	void GiveOnlineProduct(class UOnlineProduct_TA* OnlineProduct);
	void GiveOnlineProductNoNotify(class UOnlineProduct_TA* OnlineProduct);
	class UOnlineProduct_TA* GiveUnseenContainerProductData(const struct FOnlineProductData& NewProductData);
	class UOnlineProduct_TA* GiveOnlineProductDataNoNotify(const struct FOnlineProductData& NewProductData);
	class UOnlineProduct_TA* GiveOnlineProductData(const struct FOnlineProductData& NewProductData);
	TArray<class UOnlineProduct_TA*> GiveOnlineProductDatas(TArray<struct FOnlineProductData> NewProductDatas, TArray<class UOnlineProduct_TA*>* MapLocal_DA168AD34CB6A7EE193EC09FC5B5261E);
	TArray<class UProduct_TA*> GetNewProducts(TArray<class UProduct_TA*>* MapLocal_F5118C604D231F29288455BBB403EDD5, TArray<class UProduct_TA*>* FilterLocal_D65BB8944FAC3685A4B309B69E556C49, TArray<class UProduct_TA*>* DistinctLocal_7451D9304AB31BE9972EF7B6707712C3);
	class UProduct_TA* GetProductFromOnlineID();
	int GetProductIDFromOnlineID();
	TArray<class UOnlineProduct_TA*> GetOnlineProductsForSlot(class UProductSlot_TA* Slot);
	bool HasAnyOnlineProductsForSlot(class UProductSlot_TA* Slot);
	class UOnlineProduct_TA* GetFirstOnlineProduct(int ProductID);
	class UOnlineProduct_TA* GetOnlineProduct();
	struct FProductHashID GetLastOnlineProductID();
	bool IsProductOwned(const struct FProductHashID& HashID);
	bool IsInstanceOwned();
	void ValidateLoadoutsWithProduct();
	void ValidateLoadouts();
	void HandleProductUnlockedForMultiItem(int ProductID);
	void HandleProductUnlocked(int ProductID);
	void ValidateProfiles();
	void RemoveAllProfiles();
	struct FString GetProfileName(int LocalID);
	class UProfile_TA* GetProfileForByLocalID(int LocalID);
	class UProfile_TA* GetProfileForPlayer(const struct FUniqueNetId& PlayerID);
	void GetDLCProducts(TArray<class UProduct_TA*>* Unlocked, TArray<class UProduct_TA*>* Locked);
	void HandleUnlockedDLCChanged();
	void HandleOnlineGameInitialized();
	void SetUseLensFlares(bool Value);
	void SetUseVsync(bool Value);
	void SetUseTranslucentArenaShaders(bool Value);
	void HandleReceivePlayerController(class UPlayer* PlayerRef);
	void HandleProfileSet(class ULocalPlayer_TA* Player);
	void Save();
	void HandleMapChange(const struct FString& MapName);
	void UploadSaveObject(class USaveObject_TA* SaveObject);
	void SetLocalDirty(class USaveObject_TA* SaveObject);
	void HandleSaveObjectDirty(class USaveObject_TA* SaveObject);
	void OnUnLoadSaveObject(class USaveObject_TA* SaveObject);
	void OnLoadSaveObject(class USaveObject_TA* SaveObject);
	void Unload();
	void HandleProductsOfflineSaveLoaded(class UProductsOfflineSave_TA* ProductsOfflineSave);
	void FixupUnlockedGarageFolders();
	void FixupUnlockedEngineAudio();
	void HandleDataLoaded(class USaveGameManager_TA* Manager, class UError* Error, TArray<class UClass*>* ArrayResultLocal_04224DE3449F184A877876A595A83F32);
	void Construct();
	void EventReceivedUnseenContainerProduct(class USaveData_TA* Data, class UOnlineProduct_TA* ContainerProduct);
	void EventRedeemedOnlineProducts(class USaveData_TA* Data, TArray<class UOnlineProduct_TA*>* RedeemedOnlineProducts);
	void EventSchematicResourcesChanged(class USaveData_TA* Data);
	void EventOnlineSavedDataSynced(class USaveData_TA* Data);
	void EventOnlineProductsSynced(class USaveData_TA* Data);
	void EventRemovedOnlineProduct(class USaveData_TA* Data, class UOnlineProduct_TA* RemovedProduct);
	void EventNewOnlineProduct(class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct);
	void EventDLCChange(class USaveData_TA* Data);
	void EventOnlineXPInitialized(class USaveData_TA* Data);
	void EventNewOfflineProductsUnlocked(class USaveData_TA* Data, int Count);
	void EventNewGarageSlotUnlocked(class USaveData_TA* Data, class UProductSlot_TA* Slot);
	void EventNewProductUnlocked(class USaveData_TA* Data, int ProductID);
};


// Class TAGame.GameInfo_Breakout_TA
// 0x0000 (0x0510 - 0x0510)
class AGameInfo_Breakout_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Breakout_TA");
		return ptr;
	}

};


// Class TAGame.GameEvent_Tutorial_TA
// 0x0240 (0x0E68 - 0x0C28)
class AGameEvent_Tutorial_TA : public AGameEvent_Soccar_TA
{
public:
	struct FVector                                     TotalFieldExtent;                                         // 0x0C28(0x000C) (Const)
	int                                                TeamNum;                                                  // 0x0C34(0x0004)
	int                                                BallGoalNum;                                              // 0x0C38(0x0004)
	unsigned long                                      bOnlyScoreInBallGoalNum : 1;                              // 0x0C3C(0x0004)
	unsigned long                                      bRedoRound : 1;                                           // 0x0C3C(0x0004)
	unsigned long                                      bAllowSuperBoost : 1;                                     // 0x0C3C(0x0004)
	unsigned long                                      bDisplayedRedoPenaltyMessage : 1;                         // 0x0C3C(0x0004)
	unsigned long                                      bShowBoostMeter : 1;                                      // 0x0C3C(0x0004)
	TEnumAsByte<EDifficulty>                           Difficulty;                                               // 0x0C40(0x0001)
	TEnumAsByte<ERotationType>                         DebugRotationType;                                        // 0x0C41(0x0001)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0C42(0x0006) MISSED OFFSET
	struct FDifficultyInfo                             DifficultyList[0x3];                                      // 0x0C48(0x0028) (Edit, NeedCtorLink)
	TArray<int>                                        WaveIndexesLeft;                                          // 0x0CC0(0x0010) (NeedCtorLink)
	float                                              GoalDepth;                                                // 0x0CD0(0x0004)
	int                                                GameEventRounds;                                          // 0x0CD4(0x0004) (Edit)
	float                                              EventStartTime;                                           // 0x0CD8(0x0004)
	struct FVector                                     BallInitialVelocity;                                      // 0x0CDC(0x000C)
	int                                                SpawnIndexTypeOverride;                                   // 0x0CE8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0CEC(0x0004) MISSED OFFSET
	class ACannon_TA*                                  Cannon;                                                   // 0x0CF0(0x0008)
	int                                                WaveIndex;                                                // 0x0CF8(0x0004) (Transient)
	int                                                WaveSpawnCount;                                           // 0x0CFC(0x0004) (Transient)
	int                                                RandomSpawnIndex;                                         // 0x0D00(0x0004) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0D04(0x0004) MISSED OFFSET
	class UTutorial_TA*                                Tutorial;                                                 // 0x0D08(0x0008)
	struct FString                                     StartMessageArchetype;                                    // 0x0D10(0x0010) (Const, NeedCtorLink)
	struct FVector                                     BallSpawnLocation;                                        // 0x0D20(0x000C)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0D2C(0x0004) MISSED OFFSET
	TArray<struct FCarSpawnData>                       CarSpawns;                                                // 0x0D30(0x0010) (NeedCtorLink)
	int                                                PointsScoredThisRound;                                    // 0x0D40(0x0004)
	int                                                BallSpawnCount;                                           // 0x0D44(0x0004)
	float                                              BallBounceScale;                                          // 0x0D48(0x0004)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0D4C(0x0004) MISSED OFFSET
	class ACannon_TA*                                  CannonArchetype;                                          // 0x0D50(0x0008)
	class ADynamicSpawnPoint_TA*                       DynamicSpawnPoint;                                        // 0x0D58(0x0008) (Transient)
	int                                                CurrentDebugStepX;                                        // 0x0D60(0x0004)
	int                                                CurrentDebugStepY;                                        // 0x0D64(0x0004)
	int                                                CurrentDebugStepZ;                                        // 0x0D68(0x0004)
	int                                                RedoCount;                                                // 0x0D6C(0x0004)
	int                                                RedoTotal;                                                // 0x0D70(0x0004)
	unsigned char                                      UnknownData05[0x4];                                       // 0x0D74(0x0004) MISSED OFFSET
	class UGFxModal_X*                                 ResetModal;                                               // 0x0D78(0x0008)
	struct FFieldSpawnInfo                             BallSpawnInfo;                                            // 0x0D80(0x003C)
	unsigned char                                      UnknownData06[0x4];                                       // 0x0DBC(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventRoundFinished__Delegate;                           // 0x0DC0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0DBC(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventVehicleSetup__Delegate;                            // 0x0DD8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0DD8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventScoreUpdated__Delegate;                            // 0x0DF0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0DF0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventDifficultyUpdated__Delegate;                       // 0x0E08(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0E08(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventShowBoostMeterChanged__Delegate;                   // 0x0E20(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData11[0x8];                                       // 0x0E20(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventUseActionsChanged__Delegate;                       // 0x0E38(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData12[0x8];                                       // 0x0E38(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTutorialTipChanged__Delegate;                      // 0x0E50(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData13[0x8];                                       // 0x0E50(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Tutorial_TA");
		return ptr;
	}


	void InitIntro();
	void OnLoadingMovieClosed();
	void StartTimers();
	void UpdateMVP();
	bool AllowDynamicCrowd();
	void SetTutorialTip(const struct FString& NewTip);
	void SetShowBoostMeter(bool bShow);
	struct FName GetDesiredSoundState();
	struct FVector GetDebugSpawnLocation(const struct FFieldSpawnInfo& SpawnInfo);
	float GetStepLoc(int Steps, float TotalDist, bool bIncrement, int* Out_CurrentStep);
	struct FVector GetDebugLocationInExtent(const struct FVector& Extent);
	void InitDebugSetup(class ACar_TA* Car);
	void SkipTutorial();
	void UpdateBotCount();
	void InitMutators();
	bool IsPrimaryPlayer(class ACar_TA* Car);
	bool CanAwardPoints();
	void OnResetRoundCancel(class UGFxModal_X* Modal);
	void OnResetRoundConfirm(class UGFxModal_X* Modal);
	void ShowResetRoundMessage();
	void Destroyed();
	bool EndTutorial();
	bool StartTutorial(class APlayerController_TA* PC, const struct FString& TutorialName, class USequenceAction* KNode, bool bSkipFadeIn);
	void CommitRedoRound();
	void RedoRound();
	bool CanRedoRound();
	void StartNewRound();
	void HandleTutorialComplete(class UTutorial_TA* InTutorial);
	void SaveLocalPlayerStats();
	class ATeam_TA* GetWinningTeam();
	void CleanupRoundActors();
	struct FVector DetermineBallInitialVelocity(const struct FVector& BallSpawnLoc, class ACar_TA* Car, const struct FFieldSpawnInfo& SpawnInfo);
	bool CanQueSaveReplay();
	void ResetBalls();
	struct FName GetScoreStatus(unsigned char InTeamNum);
	int GetScore();
	void StartRound();
	int GetGameEventRounds();
	int GetTotalRounds();
	void ResetRoundTime();
	void OnPlayerRestarted(class ACar_TA* PlayerCar);
	void ResetOrientation(class AController* Controller, const struct FVector& Loc, const struct FRotator& Rot);
	struct FVector GetBallInitialVelocity(const struct FVector& BallSpawnLoc, class ACar_TA* Car, const struct FFieldSpawnInfo& SpawnInfo);
	TEnumAsByte<ETrainingType> GetTrainingType();
	struct FString GetDifficulty();
	struct FString GetTrainingName();
	void EndGame();
	class ATeam_TA* PickTeam(class AController* C);
	struct FVector GetRandomLocationInExtent(const struct FVector& Extent);
	bool Chance(int Chances);
	int GetOppositeTeamNum();
	struct FVector GetDirectionToGoal(int GoalNum);
	bool IsGameEventComplete();
	struct FVector ClampPointToExtent(const struct FVector& ExtentCenter, const struct FVector& Point, const struct FVector& Extent);
	struct FFieldSpawnInfo GetRandomBallSpawnInfo();
	struct FFieldSpawnInfo GetRandomPlayerSpawnInfo();
	struct FVector PredictInitialVelocity(const struct FVector& StartLoc, const struct FVector& EndLoc, float Z);
	class ABall_TA* GetGameBall();
	class ACar_TA* GetGamePawn();
	void ResetGameEvent();
	void CheckForReset();
	float STATIC_GetGoalViewWidth(class UGoal_TA* Goal, const struct FVector& ViewerLoc);
	bool STATIC_IsBallMovingTowardsGoal(class UGoal_TA* Goal, class ABall_TA* Ball, float MinVelocityForDestroy, float InGoalDepth);
	void SetGoalDepth();
	int GetShuffledSpawnIndex();
	struct FCarSpawnData GetCarSpawnData(class AController* Controller);
	void AddToCarSpawnData(class AController* Controller, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
	struct FRotator GetCarSpawnRotation(const struct FFieldSpawnInfo& SpawnInfo, const struct FVector& CarSpawnLocation);
	struct FVector GetCarSpawnLocation(const struct FFieldSpawnInfo& SpawnInfo);
	void DestroyCannon();
	void SetCannonOrientation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	class ABall_TA* SpawnBall(const struct FVector& SpawnLoc, bool bWake, bool bSpawnCannon, const struct FString& BallArch);
	void InitBallEffects();
	void InitBallVelocity();
	struct FVector GetRandomGoalAimLocation(int InTeamNum, const struct FVector& BallLoc);
	struct FVector STATIC_GetGoalExtent(class UGoal_TA* Goal);
	void SetBallVelocity(const struct FVector& InitialVelocity, class ABall_TA* Ball);
	struct FVector GetSpawnLocation(const struct FFieldSpawnInfo& SpawnInfo);
	struct FVector GetMaxFieldExtent(const struct FFieldSpawnInfo& SpawnInfo);
	void InitGameSetup(class ACar_TA* Car);
	bool ShouldAllowSuperBoost();
	void OnVehicleSetup(class ACar_TA* Car);
	void HandleVehicleSetup(class ACar_TA* Car);
	void InitCrowdManager();
	void HandleScoreUpdated(class ATeam_TA* Team);
	void SetDifficulty(int InDifficulty);
	void UpdateStats();
	void AddLocalPlayer(class APlayerController_TA* Player);
	void HandlePlayerResetTraining(class AGameEvent_TA* GameEvent);
	void OnInit();
	void EventTutorialTipChanged(class AGameEvent_Tutorial_TA* GameEvent, const struct FString& NewTip);
	void EventUseActionsChanged(class AGameEvent_Tutorial_TA* GameEvent);
	void EventShowBoostMeterChanged(class AGameEvent_Tutorial_TA* GameEvent);
	void EventDifficultyUpdated(class AGameEvent_Tutorial_TA* GameEvent);
	void EventScoreUpdated(class AGameEvent_Tutorial_TA* GameEvent);
	void EventVehicleSetup(class AGameEvent_Tutorial_TA* GameEvent, class ACar_TA* Car);
	void EventRoundFinished(class AGameEvent_Tutorial_TA* GameEvent);
};


// Class TAGame.GameEvent_Training_TA
// 0x0018 (0x0E80 - 0x0E68)
class AGameEvent_Training_TA : public AGameEvent_Tutorial_TA
{
public:
	struct FScriptDelegate                             __EventTrainingCompleted__Delegate;                       // 0x0E68(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0E68(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Training_TA");
		return ptr;
	}


	void BeginHighlightsReplay();
	void EventTrainingCompleted(class AGameEvent_Training_TA* Training);
};


// Class TAGame.ProfileLoadoutSave_TA
// 0x00A0 (0x0168 - 0x00C8)
class UProfileLoadoutSave_TA : public USaveObject_TA
{
public:
	TArray<class ULoadoutSet_TA*>                      LoadoutSets;                                              // 0x00C8(0x0010) (NeedCtorLink)
	class ULoadoutSet_TA*                              EquippedLoadoutSet;                                       // 0x00D8(0x0008)
	struct FName                                       PlayerTitle;                                              // 0x00E0(0x0008)
	int                                                PreviewTeamIndex;                                         // 0x00E8(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventEquippedLoadoutChanged__Delegate;                  // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00EC(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventProductEquipped__Delegate;                         // 0x0108(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0108(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventOnlineProductEquipped__Delegate;                   // 0x0120(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0120(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPreviewTeamChanged__Delegate;                      // 0x0138(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0138(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __PlayerTitle__ChangeNotify;                              // 0x0150(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0150(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProfileLoadoutSave_TA");
		return ptr;
	}


	void __PlayerTitle__ChangeNotifyFunc();
	void GetAllLoadoutOnlineProducts();
	TArray<int> GetAllLoadoutProducts();
	void HandleOnlineProductEquipped(class ULoadoutSet_TA* LoadoutSet);
	void HandleProductEquipped(class ULoadoutSet_TA* LoadoutSet, int ProductID);
	void OnEquippedLoadOutChanged();
	void HandleEquippedLoadoutChanged(class ULoadoutSet_TA* InLoadoutSet, class ULoadout_TA* InLoadout);
	void HandleLoadoutChanged(class ULoadoutSet_TA* LoadoutSet, class ULoadout_TA* Loadout);
	void SetPreviewTeam(int TeamIndex);
	void RenamePreset(int Index, const struct FString& NewName);
	void EquipLoadoutSet(class ULoadoutSet_TA* InLoadoutSet);
	struct FString STATIC_GetNextPresetName(TArray<class ULoadoutSet_TA*>* InLoadoutSets);
	void DeletePreset(int Index);
	void CreatePreset(class UProfile_TA* Profile);
	void SetLoadoutSets(TArray<class ULoadoutSet_TA*>* InLoadoutSets);
	TArray<class ULoadoutSet_TA*> GetLoadoutSets();
	class ULoadoutSet_TA* GetLoadoutSet(int SetIndex);
	class ULoadout_TA* GetLoadout(int TeamIndex, int SetIndex);
	void OnLoad();
	void OnCreate();
	void EventPreviewTeamChanged(class UProfileLoadoutSave_TA* InLoadoutSave);
	void EventOnlineProductEquipped();
	void EventProductEquipped(int ProductID);
	void EventEquippedLoadoutChanged(class ULoadout_TA* InLoadout);
};


// Class TAGame.LoadoutSet_TA
// 0x0068 (0x00C8 - 0x0060)
class ULoadoutSet_TA : public UObject
{
public:
	struct FString                                     LoadoutSetName;                                           // 0x0060(0x0010) (NeedCtorLink)
	class ULoadout_TA*                                 Loadouts[0x2];                                            // 0x0070(0x0008)
	struct FScriptDelegate                             __EventChanged__Delegate;                                 // 0x0080(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventProductEquipped__Delegate;                         // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0098(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventOnlineProductEquipped__Delegate;                   // 0x00B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutSet_TA");
		return ptr;
	}


	void __LoadoutSet_TA__AddListeners_36DE17E442C97655C3C23D94DDD4A3EF();
	void __LoadoutSet_TA__AddListeners_6AC96CAA4C81FE8EAD7D7AA5341ECD48(int ProductID);
	void __LoadoutSet_TA__AddListeners_B3540EA64FF3FE0C67CA3E90F5579175(class ULoadout_TA* Loadout);
	void EnsureConsistentBodies();
	void Validate();
	bool HasOnlineProduct();
	class UProductAsset_Body_TA* LoadBodyAsset();
	int GetBodyProductID();
	bool HasProducts();
	bool HasProduct(int ProductID);
	void AddListeners();
	void CopyFromLoadoutSet(class ULoadoutSet_TA* LoadoutSetToCopy);
	void InitLoadouts(class UProfile_TA* InProfile);
	class ULoadoutSet_TA* STATIC_CreateEmptyLoadoutSet(class UObject* InOuter, const struct FString& InName);
	class ULoadoutSet_TA* STATIC_CreateLoadoutSet(class UProfile_TA* InProfile, const struct FString& InName);
	void EventOnlineProductEquipped(class ULoadoutSet_TA* LoadoutSet);
	void EventProductEquipped(class ULoadoutSet_TA* LoadoutSet, int ProductID);
	void EventChanged(class ULoadoutSet_TA* LoadoutSet, class ULoadout_TA* Loadout);
};


// Class TAGame.Loadout_TA
// 0x00C8 (0x0128 - 0x0060)
class ULoadout_TA : public UObject
{
public:
	TArray<int>                                        Products;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0070(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.Loadout_TA.OnlineProducts
	struct FLoadoutTeamPaint                           TeamPaint;                                                // 0x0080(0x0010)
	struct FLoadoutTeamPaint                           TeamPaints[0x2];                                          // 0x0090(0x0010) (Const)
	struct FName                                       PlayerTitle;                                              // 0x00B0(0x0008)
	int                                                GaragePreviewTeam;                                        // 0x00B8(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	class UProfile_TA*                                 Profile;                                                  // 0x00C0(0x0008) (Transient)
	struct FScriptDelegate                             __EventChanged__Delegate;                                 // 0x00C8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPreviewTeamChanged__Delegate;                      // 0x00E0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00E0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventProductEquipped__Delegate;                         // 0x00F8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00F8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventOnlineProductEquipped__Delegate;                   // 0x0110(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0110(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Loadout_TA");
		return ptr;
	}


	bool STATIC___Loadout_TA__ApplyCompatibleAttributeProducts_26A4CAC24EB5B1297E2936B699178BFB(class UProduct_TA* B);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	class UProductAsset_Body_TA* LoadBodyAsset();
	int GetBodyProductID();
	bool IsProductEquipped(class UProductSlot_TA* Slot, int ProductID);
	void SetGaragePreviewTeam(int PreviewTeam);
	void SetData(struct U_Types_TA_FLoadoutData* Data);
	struct U_Types_TA_FLoadoutData GetData();
	void STATIC_ApplyCompatibleAttributeProducts(int ProductID, struct U_Types_TA_FLoadoutData* Data);
	void STATIC_ApplyRequiredProducts(int ProductID, struct U_Types_TA_FLoadoutData* Data);
	void STATIC_ValidateForcedProducts(int TeamIndex, struct U_Types_TA_FLoadoutData* Data, TArray<int>* ArrayResultLocal_42F04164486D8A3B65568EBE2CE0BB47, TArray<class UProduct_TA*>* MapLocal_02C40972426E8C0DD8AE23A5CF3ACE97, TArray<class UProduct_TA*>* FilterLocal_563AA0784E982DA80C43159FF6F4938D, TArray<int>* MapLocal_35E7AB8347E8581A4D2031ADF8102042);
	bool STATIC_IsCustomFinishDisabled(class UProductAsset_Body_TA* BodyAsset, class UProductAsset_Skin_TA* SkinAsset);
	bool STATIC_IsTeamFinishDisabled(class UProductAsset_Body_TA* BodyAsset, class UProductAsset_Skin_TA* SkinAsset);
	void STATIC_ValidateProductID(class UProfile_TA* ForProfile, const struct FString& SlotName, int* ProductID);
	void STATIC_StaticValidate(class UProfile_TA* ForProfile, struct FLoadoutTeamPaint* Paint, TArray<int>* OutProducts);
	void Validate();
	struct U_Types_TA_FLoadoutData STATIC_EquipProduct(class ULoadout_TA* ForLoadout, int SlotIndex);
	void InitProfile(class UProfile_TA* InProfile);
	void Init(class UProfile_TA* InProfile, int TeamIndex);
	void EventOnlineProductEquipped();
	void EventProductEquipped(int ProductID);
	void EventPreviewTeamChanged(class ULoadout_TA* Loadout);
	void EventChanged(class ULoadout_TA* Loadout);
};


// Class TAGame.ProfileStatsSave_TA
// 0x0038 (0x0100 - 0x00C8)
class UProfileStatsSave_TA : public USaveObject_TA
{
public:
	TArray<struct FStatValue>                          StatValues;                                               // 0x00C8(0x0010) (NeedCtorLink)
	TArray<struct FProductStat>                        ProductStats;                                             // 0x00D8(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __EventStatValuesChanged__Delegate;                       // 0x00E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProfileStatsSave_TA");
		return ptr;
	}


	void OnStatValuesChanged();
	void AddProductStatValue(int ProductID, int delta);
	int GetProductStatValue(int ProductID);
	int GetStatValue(TEnumAsByte<ETAStatType> StatType, const struct FName& Id);
	void IncrementStatValue(TEnumAsByte<ETAStatType> StatType, const struct FName& Id, int Amount);
	void SetStatValue(TEnumAsByte<ETAStatType> StatType, const struct FName& Id, int Value);
	void EventStatValuesChanged(class UProfileStatsSave_TA* StatsSave);
};


// Class TAGame.PlayerInput_TA
// 0x0050 (0x04C8 - 0x0478)
class UPlayerInput_TA : public UPlayerInput_X
{
public:
	float                                              GamepadLookScale;                                         // 0x0478(0x0004) (Config)
	float                                              aTargetSelect;                                            // 0x047C(0x0004) (Input)
	float                                              TargetSelectDeadZone;                                     // 0x0480(0x0004)
	unsigned long                                      bTargetSelected : 1;                                      // 0x0484(0x0004)
	unsigned long                                      bIsUsingMouseSteer : 1;                                   // 0x0484(0x0004) (Transient)
	unsigned long                                      bIsUsingMouseThrottle : 1;                                // 0x0484(0x0004) (Transient)
	unsigned long                                      bIsUsingPositiveMouseAirYaw : 1;                          // 0x0484(0x0004) (Transient)
	unsigned long                                      bIsUsingNegativeMouseAirYaw : 1;                          // 0x0484(0x0004) (Transient)
	unsigned long                                      bIsUsingPositiveMouseAirPitch : 1;                        // 0x0484(0x0004) (Transient)
	unsigned long                                      bIsUsingNegativeMouseAirPitch : 1;                        // 0x0484(0x0004) (Transient)
	unsigned long                                      bIsUsingPositiveMouseAirRoll : 1;                         // 0x0484(0x0004) (Transient)
	unsigned long                                      bIsUsingNegativeMouseAirRoll : 1;                         // 0x0484(0x0004) (Transient)
	unsigned long                                      bAllowMouseSwivel : 1;                                    // 0x0484(0x0004) (Const, Config)
	float                                              aPositiveYaw;                                             // 0x0488(0x0004) (Input, Transient)
	float                                              aNegativeYaw;                                             // 0x048C(0x0004) (Input, Transient)
	float                                              aPositivePitch;                                           // 0x0490(0x0004) (Input, Transient)
	float                                              aNegativePitch;                                           // 0x0494(0x0004) (Input, Transient)
	float                                              aPositiveRoll;                                            // 0x0498(0x0004) (Input, Transient)
	float                                              aNegativeRoll;                                            // 0x049C(0x0004) (Input, Transient)
	float                                              aLookRoll;                                                // 0x04A0(0x0004) (Input, Transient)
	unsigned char                                      bRoll;                                                    // 0x04A4(0x0001) (Input, Transient)
	unsigned char                                      bPitch;                                                   // 0x04A5(0x0001) (Input, Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x04A6(0x0002) MISSED OFFSET
	float                                              aLookDown;                                                // 0x04A8(0x0004) (Input)
	float                                              aTurnRight;                                               // 0x04AC(0x0004) (Input)
	float                                              aTurnLeft;                                                // 0x04B0(0x0004) (Input)
	float                                              aMouseForward;                                            // 0x04B4(0x0004) (Input)
	float                                              aMouseStrafe;                                             // 0x04B8(0x0004) (Input)
	float                                              aDodgeForward;                                            // 0x04BC(0x0004) (Input)
	class UProfile_TA*                                 Profile;                                                  // 0x04C0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_TA");
		return ptr;
	}


	void __PlayerInput_TA__Construct_6438438B49B561CDD2488F9C6F38AE60(class UPlayerInput_X* _);
	void __PlayerInput_TA__Construct_4279EEB44EDD538BAC0BE08FBADEE4EF(class UPlayerInput_X* _);
	TArray<struct FBindingAction> STATIC_GetDefaultActions(struct FBindingAction* StructInitializer_37E4543941385CE0FB70CEAE5383F3BB, struct FBindingAction* StructInitializer_A3DA5D354A3E1D5097B92E98AB67CEB5, struct FBindingAction* StructInitializer_2FBE823142A814D58C6B149ADE4856A6, struct FBindingAction* StructInitializer_98E7EB3D4C289BFC2DA487A8550583B9, struct FBindingAction* StructInitializer_BCFD4571451482C7054408B5C0C17CB0, struct FBindingAction* StructInitializer_E458C95347D4DDF0D4A06CB3B70F594F, struct FBindingAction* StructInitializer_199722174BA99BF5EFFDC79A71E3D035, struct FBindingAction* StructInitializer_70D0DDBC47FA13B9DC15B5A15AC59D3E, struct FBindingAction* StructInitializer_440558DE4FF0EA07E275D39B1A0065EB, struct FBindingAction* StructInitializer_71F4A3B94539149A81C65BA81A4280C4, struct FBindingAction* StructInitializer_A4ED440444ADDE720A185ABDFB78BD75, struct FBindingAction* StructInitializer_2EF77E6146C9821F71C540AF2AE47563, struct FBindingAction* StructInitializer_62AD71A14944DB867107978513A1518E, struct FBindingAction* StructInitializer_D2B49F5C48904F763D4A1B8CF9E248A1, struct FBindingAction* StructInitializer_774376CF43F71DD324B65B9E39BBF80B, struct FBindingAction* StructInitializer_F388123646C8E693812C43B42972A6D4, struct FBindingAction* StructInitializer_368DB08E41896A69A3F06385615AF03B, struct FBindingAction* StructInitializer_3A0C306546022A33B0858AB2F6EC907D, struct FBindingAction* StructInitializer_430688F7462B89BD48225C87286FEAA8, struct FBindingAction* StructInitializer_FB43622C40842C85480D90B2D7E7AF7C, struct FBindingAction* StructInitializer_369C90354A0DA2F4C8E8FFB89961D249, struct FBindingAction* StructInitializer_D748DC5A45A47A3C1F156C99710B0D24, struct FBindingAction* StructInitializer_D70AC2184F3A3B7C19D0809DDBDCE680, struct FBindingAction* StructInitializer_6BA50A0B46E3F5A4E6165EA04BD0812A, struct FBindingAction* StructInitializer_834EE16449C4714A6DC80C8E94D5ED2C, struct FBindingAction* StructInitializer_11DBFD934382CEFA6BB6A0BD7FF0F986, struct FBindingAction* StructInitializer_7B15875C4E56BC0412A877921A3A1F40, struct FBindingAction* StructInitializer_98D6ED41419824A3D4833CA4F1FF6627, struct FBindingAction* StructInitializer_982CECFE457FC92DA9B2249E66B8D6BE, struct FBindingAction* StructInitializer_627219624D5E3DE2ECF758BD1A3D3545, struct FBindingAction* StructInitializer_A4128A3C4A53A506A4049CBF697AB836, struct FBindingAction* StructInitializer_C1E9365146438E45CB5D66B53E7CFDCB, struct FBindingAction* StructInitializer_64CB120545E23D624E2A039DE7AB4315, struct FBindingAction* StructInitializer_D308FD5E4EB9DA4A8B2408B63DEB2C34, struct FBindingAction* StructInitializer_FFBDCA0F4B56DA8FC003A6892DDB65A0, struct FBindingAction* StructInitializer_8D95B9704216409BF082369FD145460D, struct FBindingAction* StructInitializer_48D92CCF4137360D1D6B7FBAB64C091A, struct FBindingAction* StructInitializer_DF65D4DD4ADE2B965CE8DF83DF019A0D, struct FBindingAction* StructInitializer_38F5A63A47938ACE925C808F32DA9A5D, struct FBindingAction* StructInitializer_97EFD9F94086B48CDA6A36A30AEC74A3, struct FBindingAction* StructInitializer_8E0AD401492037AC8B8BA3BC28B72B50, struct FBindingAction* StructInitializer_9F1C7DC54EDE34C8D58C109E2B2F9C48, struct FBindingAction* StructInitializer_76744EAA43DF2C395511DA9C680E143A, struct FBindingAction* StructInitializer_8C72245E40FC26FBA0CE0186A96091DC, struct FBindingAction* StructInitializer_FA065AC845D38D3D8516FBA9F09D01F0, struct FBindingAction* StructInitializer_26760F2C44A5DFB502F068960EDE879B, struct FBindingAction* StructInitializer_3D7932DD4995C4656D971CB8CD7D8A9E, struct FBindingAction* StructInitializer_D8E575454FFEB1C0A9C39FA9248964F3, struct FBindingAction* StructInitializer_AF5C61974EA0D2D045F3D2A20C1F588F, struct FBindingAction* StructInitializer_88475204405B5500ABBC74AF0575E0CD, struct FBindingAction* StructInitializer_795A16A14098D088720070B5BB1C395C, struct FBindingAction* StructInitializer_48D6119544A78239E1FF1990D40BF025, struct FBindingAction* StructInitializer_6580DB344D66282688462EBFBF13D7A4, struct FBindingAction* StructInitializer_39F47F2F448E7C7ED19938848D31D907, struct FBindingAction* StructInitializer_AB35B91B4BF2A65A0935629B23372469, struct FBindingAction* StructInitializer_AED60D8E4264D2C113469B92D31FBCDE, struct FBindingAction* StructInitializer_7D41427B46089B3E58D080A904979757, struct FBindingAction* StructInitializer_554A5ACC4D1645FD629B8B958F3A3E37, struct FBindingAction* StructInitializer_D12301784661F1C980BB2EB5DB05399C, struct FBindingAction* StructInitializer_810C26E2426CEECD6307A3A498A785CA, struct FBindingAction* StructInitializer_2CA7E7A546453E3C9B4DE9A278FB1CC8, struct FBindingAction* StructInitializer_C398141A48983F1CBED37FACEE095D9A, struct FBindingAction* StructInitializer_44FB649C475758F08B2AC49945F096F8, struct FBindingAction* StructInitializer_78EFCFC540881A83C67EBAA5904ED130, struct FBindingAction* StructInitializer_C4B5491646971809E322CFBE088CC1A2, struct FBindingAction* StructInitializer_69BD7FC645C8438C849E4CB6F0AAB9EE, struct FBindingAction* StructInitializer_387FC2B34A92EB3F21A23FBFA8616A2B, struct FBindingAction* StructInitializer_BE885ABE4F515ACE3F8EDF939192BF0B, struct FBindingAction* StructInitializer_EA559CAA48A093BA242503BEE37DAD85, struct FBindingAction* StructInitializer_3A5B90074A37F9C6A0C0379AFF263724, struct FBindingAction* StructInitializer_AE22F7054573FDDF9B990198C52BAC67, struct FBindingAction* StructInitializer_C43751A94991B9F59CDA9E9DA41AD8AA, struct FBindingAction* StructInitializer_C7E75AB04B481B28FA1A4996ACC19D99, struct FBindingAction* StructInitializer_35823E244DAA6BBA95766797AED55C28, struct FBindingAction* StructInitializer_603610CE4D5C04C1A9469AA6DE43A260, struct FBindingAction* StructInitializer_B4B762D94BAFFA1A212B94920F3F9B75, struct FBindingAction* StructInitializer_871310EA4FBC28569DA07BA5782242D7, struct FBindingAction* StructInitializer_FEBE80CB4D2C69E753D5888AD9092379, struct FBindingAction* StructInitializer_0B9BF11841A4534890603D8F4236DA97, struct FBindingAction* StructInitializer_6D544D854EC7777615E0B7A8F7222D7D, struct FBindingAction* StructInitializer_0A68E16D4F94C89D684DD1A971540D30, struct FBindingAction* StructInitializer_431054CC4BF1A1D6BA10EA80E52B7B5B, struct FBindingAction* StructInitializer_F9935BE64A7C0B2D15F4158B54B4ABEA, struct FBindingAction* StructInitializer_EC6775E84ABEF67D271BDAA5CC19977B, struct FBindingAction* StructInitializer_77CD57F048E3447E4D8D04985E6A1CAA, struct FBindingAction* StructInitializer_E4331FEB44139794B0918E81086AA4D7, struct FBindingAction* StructInitializer_0D445C88434D5C48F8E1BF89EF53D15F, struct FBindingAction* StructInitializer_258DBD0F411F8C0C800FC9B8AD5A568F, struct FBindingAction* StructInitializer_DF2EA3974757E7EDC8713288D634CD7F, struct FBindingAction* StructInitializer_81B2ED7040C00022ACC0EC80E18F35CF, struct FBindingAction* StructInitializer_5583AA8A493E4C1E73FE9D9239BFFA1E, struct FBindingAction* StructInitializer_C9D3127B477853D73881E0B2D90FE5A4, struct FBindingAction* StructInitializer_16D18BDF410121A1883B0E9B694BEE69, struct FBindingAction* StructInitializer_8DA1382B49CAE7651615B6ADC89158FF, struct FBindingAction* StructInitializer_2F51371A4294A1B58CF7AE82CAED3726, struct FBindingAction* StructInitializer_CD5CA2DA42842E73395321A4943E8E3E, struct FBindingAction* StructInitializer_EE0068A547492CF4B7564995BE4A7A05, struct FBindingAction* StructInitializer_81B6B4534803F19953586C9B57CD095D, struct FBindingAction* StructInitializer_6CBE6D94497AE074046901BFDB342456, struct FBindingAction* StructInitializer_3C3E8048403089D54B2355AE46FB4DF6, struct FBindingAction* StructInitializer_72FF347247154C5CA241E9A6E96DF236);
	void UpdateTargetSelect(class APlayerController_TA* PC);
	struct FName GetKeyForAction(const struct FName& Action, bool bGamepad);
	struct FString GetUIKeyForAction(const struct FName& Action, bool bGamepad);
	bool IsUsingMouseInput(const struct FName& Action, const struct FName& Key);
	void RemoveBindingsFromArray(const struct FName& Category, TArray<struct FPlayerBinding>* OutBindings);
	void RemoveBindings(const struct FName& Category);
	bool IsKeyPressed(const struct FName& Key);
	void PlayerInput(float DeltaTime);
	void BuildBindings(TArray<struct FPlayerBinding>* PC, TArray<struct FPlayerBinding>* Gamepad);
	void UpdateControlPreset();
	void HandleProfileControlsSave(class UProfileControlsSave_TA* ControlsSave);
	void OnActiveBindingsChanged();
	void HandleSetBindingsToUserBindings(class UPlayerInput_X* PlayerInput);
	void HandleGameplaySettingsLoaded(class UGameplaySettingsSave_TA* GameplaySettingsSave);
	void HandleProfileGamepadSave(class UProfileGamepadSave_TA* GamepadSave);
	void HandleProfilePCSave(class UProfilePCSave_TA* ProfilePCSave);
	void InitFromProfile(class UProfile_TA* InProfile);
	void ShutdownInputSystem();
	void Construct();
};


// Class TAGame.ShopsManager_TA
// 0x00A8 (0x0108 - 0x0060)
class UShopsManager_TA : public UObject
{
public:
	class UShopsService_TA*                            ServiceArchetype;                                         // 0x0060(0x0008) (Edit)
	class UShopsService_TA*                            Service;                                                  // 0x0068(0x0008) (Edit)
	int                                                ActiveShopID;                                             // 0x0070(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventShopItemTextureLoaded__Delegate;                   // 0x0078(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0074(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnGetAllShopsResult__Delegate;                          // 0x0090(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0090(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnGetCatalogueResult__Delegate;                         // 0x00A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00A8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnGetCrateShopResult__Delegate;                         // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnPurchaseResultSuccess__Delegate;                      // 0x00D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x00D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnFailed__Delegate;                                     // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x00F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ShopsManager_TA");
		return ptr;
	}


	class ULocalPlayer_X* GetPlayer();
	void HandlePurchaseSuccess(TArray<struct FOnlineProductData> PurchasedProducts, TArray<struct FCurrency> PurchasedCurrencies);
	class UAsyncTask* Purchase(int CostID, int ShopID, int DiscountID, int Count, const struct FScriptDelegate& SuccessCallback, const struct FScriptDelegate& FailedCallback);
	class UAsyncTask* GetCrateShop(int CrateID, const struct FScriptDelegate& Callback, const struct FScriptDelegate& FailedCallback);
	class UAsyncTask* GetShopCatalogue(int ShopID, const struct FScriptDelegate& Callback, const struct FScriptDelegate& FailedCallback);
	class UAsyncTask* GetAllShops(const struct FScriptDelegate& Callback, const struct FScriptDelegate& FailedCallback);
	void InitServiceProvider();
	void Init();
	void OnFailed(class UError* Error);
	void OnPurchaseResultSuccess(TArray<struct FOnlineProductData> PurchasedProducts, TArray<struct FCurrency> PurchasedCurrency);
	void OnGetCrateShopResult(TArray<struct FShopItem> Catalogue, int ShopID);
	void OnGetCatalogueResult(TArray<struct FShopItem> Catalogue);
	void OnGetAllShopsResult(TArray<struct FShopData> Data);
	void EventShopItemTextureLoaded(int ShopID, int ShopItemIndex, class UTexture* LoadedTexture);
};


// Class TAGame.__AchievementManager_TA__HandleTradeInComplete_00B0167D4C407670B331C3BFEDC6E9F5
// 0x0001 (0x0061 - 0x0060)
class U__AchievementManager_TA__HandleTradeInComplete_00B0167D4C407670B331C3BFEDC6E9F5 : public UObject
{
public:
	TEnumAsByte<EProductQuality>                       PrevQuality;                                              // 0x0060(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__AchievementManager_TA__HandleTradeInComplete_00B0167D4C407670B331C3BFEDC6E9F5");
		return ptr;
	}


	bool __AchievementManager_TA__HandleTradeInComplete_00B0167D4C407670B331C3BFEDC6E9F5(class UOnlineProduct_TA* P);
};


// Class TAGame.GFxData_ProductTradeIn_TA
// 0x0050 (0x00E8 - 0x0098)
class UGFxData_ProductTradeIn_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct UGFxData_ProductTradeIn_TA_FTradeIn> TradeIns;                                                 // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	class UProductTransactions_TA*                     ProductTransactions;                                      // 0x00A8(0x0008) (ExportObject, Transient, Component, EditInline)
	class UGFxModal_X*                                 ModalProcessing;                                          // 0x00B0(0x0008) (Transient)
	struct FString                                     InvalidProductString;                                     // 0x00B8(0x0010) (Const, Localized, NeedCtorLink)
	int                                                MaxTradeIns;                                              // 0x00C8(0x0004) (Const)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventTradeInComplete__Delegate;                         // 0x00D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00CC(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductTradeIn_TA");
		return ptr;
	}


	bool __GFxData_ProductTradeIn_TA__HasBlueprintTradeIns_04AF82D846E36C7A5303CC9E92D45B65(class UOnlineProduct_TA* P);
	bool HasBlueprintTradeIns();
	class UProfile_TA* GetProfile();
	void OnTradeInFailed();
	void OnTradeInComplete();
	void HandleTradeInComplete(class URPC_ProductsTradeIn_TA* RPC, TArray<class UOnlineProduct_TA*>* MapLocal_0C235A84459CC847D96A2DB2EAC2540B);
	void PerformTradeIn();
	void ClearTradeIns();
	void CancelTradeIn();
	void UpdateTradeInQuantity(const struct FProductHashID& HashID, int DesiredQuantity, TArray<struct UGFxData_ProductTradeIn_TA_FTradeIn>* FilterLocal_8BDDBA8A46E5D81D85C13088F09C3138, TArray<struct UGFxData_ProductTradeIn_TA_FTradeIn>* FilterLocal_26A4B67641B29E10BE2F96998CFEC9DF);
	void SetTransactionQuantity(const struct FProductHashID& HashID, int Quantity);
	bool IsProcessingTrade();
	void OnRemoved();
	void OnShellSet();
	void EventTradeInComplete(class UGFxData_ProductTradeIn_TA* GFxData, TArray<class UOnlineProduct_TA*> Given, TArray<class UOnlineProduct_TA*> Received);
};


// Class TAGame.RPC_ProductsTradePlayerStatus_TA
// 0x0080 (0x0180 - 0x0100)
class URPC_ProductsTradePlayerStatus_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	struct FGuid                                       TradeId;                                                  // 0x0138(0x0010)
	unsigned long                                      bIsComplete : 1;                                          // 0x0148(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	TArray<struct FOnlineProductData>                  ProductData;                                              // 0x0150(0x0010) (Transient, NeedCtorLink)
	TArray<struct FCurrency>                           CurrencyData;                                             // 0x0160(0x0010) (Transient, NeedCtorLink)
	TArray<struct FCurrency>                           WalletCurrencies;                                         // 0x0170(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsTradePlayerStatus_TA");
		return ptr;
	}


	bool HasCompleted();
	class URPC_ProductsTradePlayerStatus_TA* SetTradeId(const struct FGuid& InTradeId);
	class URPC_ProductsTradePlayerStatus_TA* SetLocalPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.OnlineGameParty_TA
// 0x0178 (0x05C0 - 0x0448)
class UOnlineGameParty_TA : public UOnlineGameParty_X
{
public:
	TArray<struct FPartyMemberLoadout>                 PartyLoadouts;                                            // 0x0448(0x0010) (Transient, Component, NeedCtorLink)
	int                                                MaxPartyMessages;                                         // 0x0458(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x045C(0x0004) MISSED OFFSET
	struct FString                                     PlayerJoinPartyString;                                    // 0x0460(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PlayerLeavePartyString;                                   // 0x0470(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     LocalPlayerLeavePartyString;                              // 0x0480(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PlayerNewLeaderPartyString;                               // 0x0490(0x0010) (Const, Localized, NeedCtorLink)
	class UProductAssetCache_TA*                       AssetCache;                                               // 0x04A0(0x0008) (ExportObject, Component, EditInline)
	unsigned char                                      UnknownData01[0x10];                                      // 0x04A8(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.OnlineGameParty_TA.PendingLocalProductOffers
	TArray<struct FProductHashID>                      PendingArchivedProductOffers;                             // 0x04B8(0x0010) (NeedCtorLink)
	TArray<struct FProductHashID>                      PendingFavoritedProductOffers;                            // 0x04C8(0x0010) (NeedCtorLink)
	struct FGuid                                       PendingTradeId;                                           // 0x04D8(0x0010)
	struct FScriptDelegate                             __EventPartyMemberLoadoutChange__Delegate;                // 0x04E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x04E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPartyMemberLoadoutRemoved__Delegate;               // 0x0500(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0500(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTradeProductUpdate__Delegate;                      // 0x0518(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0518(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTradeCurrencyUpdate__Delegate;                     // 0x0530(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0530(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTradeVerify__Delegate;                             // 0x0548(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0548(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTradeVerifyTimeOut__Delegate;                      // 0x0560(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0560(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTradePlayerError__Delegate;                        // 0x0578(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0578(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTradePlayerStart__Delegate;                        // 0x0590(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0590(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTradePlayerComplete__Delegate;                     // 0x05A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData10[0x8];                                       // 0x05A8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameParty_TA");
		return ptr;
	}


	void __OnlineGameParty_TA__OnInit_9FBB1F0241E5153856E80DA4393AE0F2(class UOnlineMessageComponent_X* _, class UPartyMessage_Chat_TA* M);
	void __OnlineGameParty_TA__HandleProfileSet_ADAD276D4AC63BFB1257EE88C40FCD22(class APlayerControllerBase_TA* NewController);
	void __OnlineGameParty_TA__HandleProfileSet_0F064A6C48ADCD8FCABACCA2692DBCD0(class UAccountSettingsComponent_TA* Settings);
	void __OnlineGameParty_TA__HandleProfileSet_CD0DAC9E4ED81A3E544EB9BEFDF8F27E(class UProfileLoadoutSave_TA* LoadoutSave);
	struct FCurrency __OnlineGameParty_TA__HandleTradePlayerComplete_E7C77CEB48DCADC45CAA0AB9BF99D609(const struct FCurrency& C, struct FCurrency* StructInitializer_2525F69A47B44DBE37F42FA4B7BCD1B1);
	void HandleCrossPlatformChatStateChanged();
	bool CanBroadcastMatchmakingMessages();
	bool AllowSplitScreenPlayer(int ControllerId, class UError** OutError);
	bool CanPlayersCrossTextChat(int SenderIndex);
	int FindLocalPartyPlayer();
	void HandleChatMessage(const struct FUniqueNetId& PlayerID, const struct FString& Text);
	void SendPartyLobbyMessage(const struct FString& Message);
	void HandleTradeClose(class UOnlineGameParty_X* PartyObject, bool bWasCanceled);
	void HandleTradePlayerComplete(class URPC_ProductsTradePlayerStatus_TA* RPC, TArray<struct FCurrency>* MapLocal_E4901A7C420BDE67A8DD8BA1A81031E4);
	void CheckTradeStatus();
	void HandleStartTradePlayerComplete(class URPC_ProductsTradePlayer_TA* RPC);
	void RestoreArchivedAndFavoritedPendingProductOffers();
	void StoreArchivedAndFavoritedPendingProductOffers();
	void SendTradeToBackEnd(TArray<struct FCurrency>* LocalCurrencyOffers, TArray<struct FCurrency>* RemoteCurrencyOffers, TArray<class ULocalPlayer_TA*>* OfTypeLocal_8BB0A8F84F1D804F59DB6DBEF2364C3E);
	void HandleVerifyTrade(class URPC_ProductsLoadoutGet_TA* RPC);
	void HandleVerifyTradeTimeOut();
	void SendVerifyTradeToBackEnd();
	void SetNotReadyToTrade(int PartyMemberIndex);
	void HandleTradeCurrencyUpdate(class UOnlineMessageComponent_X* Component, class UObject* Message);
	void HandleTradeProductUpdate(class UOnlineMessageComponent_X* Component, class UObject* Message);
	void SetPartyMessageHandlerTradeProductUpdate(bool bAddHandler);
	void TradeCurrencyUpdate(const struct FCurrency& CurrencyData);
	void TradeProductUpdate(const struct FOnlineProductData& ProductData, bool bAddProduct);
	bool IsProcessingTrade();
	bool CanAcceptTrade();
	void UpdateOnlineProducts(struct FPartyMemberLoadout* Loadout);
	void HandleCrossplayEnabledChanged(class UAccountSettingsComponent_TA* AccountSettings);
	void UpdateAssetCache();
	void HandleGameEventFinished(class AGameEvent_TA* GameEvent);
	bool ClearServersForPostGameRankedMatch();
	bool WantsToFollowTheLeaderOutOfGame();
	int BuildMatchmakingRestrictions();
	void HandlePrimaryPlayerSet(class APlayerController_Menu_TA* PC);
	void RequestRejoinPartyInfo();
	void BroadcastPlayerLoadout(const struct FPartyMemberLoadout& MemberLoadout);
	struct FPartyMemberLoadout CreatePartyMemberLoadout(class ULocalPlayer_TA* Player);
	void BroadcastLocalPlayerLoadoutsDelayed();
	void BroadcastLocalPlayerLoadouts();
	void BroadcastAllLocalPlayers();
	void HandlePlayerRejoined(class UOnlineMessageComponent_X* Component, class UObject* Message);
	void HandleLoadoutMessage(class UOnlineMessageComponent_X* Component, class UObject* Message);
	void HandlePreviewTeamChange(class UProfileLoadoutSave_TA* LoadoutSave);
	void BroadcastPendingLocalPlayerLoadouts();
	void BroadcastPartyInfo();
	void HandleLoadoutChange(class ULoadout_TA* Loadout);
	void RemovePartyMemberByLocalPlayer(class ULocalPlayer* Player);
	void OnPartyLeaderChanged();
	void OnNewLobby();
	void RemovePartyMemberByIDWithNotify(const struct FUniqueNetId& MemberId);
	void RemovePartyMemberByID(const struct FUniqueNetId& MemberId);
	bool LeaveParty(const struct FString& Reason);
	void HandleLocalPlayerLeave(class ULocalPlayer* Player);
	void OnEditExistingPartyMember(int MemberIdx);
	void OnAddNewPartyMember(int MemberIdx);
	void RefreshLoadouts(int MemberIdx);
	void RefreshLoadoutForPlayer(class ULocalPlayer_TA* LocalPlayer);
	void ClearPartyChat();
	void AddPartyServiceLobbyMessage(const struct FString& Message);
	void AddPlayerPartyServiceLobbyMessage(const struct FPartyMember& Member, const struct FString& Message);
	int LocalPlayerSort(const struct FPartyMemberLoadout& Left, const struct FPartyMemberLoadout& Right);
	void SetLoadout(class ULocalPlayer* Player, struct FPartyMemberLoadout* Loadout);
	void HandleProfileSet(class ULocalPlayer_TA* P);
	void OnInit();
	void EventTradePlayerComplete(class UOnlineGameParty_TA* PartyObject, class URPC_ProductsTradePlayerStatus_TA* RPC);
	void EventTradePlayerStart(class UOnlineGameParty_TA* P, const struct FGuid& TradeId);
	void EventTradePlayerError(class UOnlineGameParty_TA* PartyObject, class UError* Error, struct FGuid* TradeId);
	void EventTradeVerifyTimeOut(class UOnlineGameParty_X* PartyObject);
	void EventTradeVerify(class UOnlineGameParty_X* PartyObject, TArray<class UOnlineProduct_TA*> ProductData);
	void EventTradeCurrencyUpdate(class UOnlineGameParty_TA* PartyObject, const struct FCurrency& CurrencyData);
	void EventTradeProductUpdate(class UOnlineGameParty_TA* PartyObject, const struct FOnlineProductData& ProductData, bool bAddProduct);
	void EventPartyMemberLoadoutRemoved();
	void EventPartyMemberLoadoutChange();
};


// Class TAGame.__AchievementManager_TA__IsPlayingWithClubmates_72AE61DE49B0B789E4DAE0A4F293E335
// 0x0008 (0x0068 - 0x0060)
class U__AchievementManager_TA__IsPlayingWithClubmates_72AE61DE49B0B789E4DAE0A4F293E335 : public UObject
{
public:
	class APRI_TA*                                     PRI;                                                      // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__AchievementManager_TA__IsPlayingWithClubmates_72AE61DE49B0B789E4DAE0A4F293E335");
		return ptr;
	}


	bool __AchievementManager_TA__IsPlayingWithClubmates_72AE61DE49B0B789E4DAE0A4F293E335(class APRI_TA* P);
};


// Class TAGame.MatchType_TA
// 0x0038 (0x0098 - 0x0060)
class UMatchType_TA : public UObject
{
public:
	class AGameEvent_TA*                               GameEvent;                                                // 0x0060(0x0008)
	TArray<struct FComponentTemplate>                  Components;                                               // 0x0068(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bPreAssignedTeams : 1;                                    // 0x0078(0x0004) (Edit)
	int                                                ForfeitVoteWaitGameTime;                                  // 0x007C(0x0004)
	int                                                WaitForPlayersTime;                                       // 0x0080(0x0004)
	float                                              WaitingForPlayersStartTime;                               // 0x0084(0x0004)
	struct FName                                       MatchTypeName;                                            // 0x0088(0x0008)
	float                                              LobbyTime;                                                // 0x0090(0x0004) (Const)
	int                                                LobbyEndCountdown;                                        // 0x0094(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_TA");
		return ptr;
	}


	class ATeam_TA* PickTeamFromReservations(class AController* C);
	void OnInitGameEvent();
	bool ChooseTeam(int TeamIndex, class APlayerController_TA* Player);
	bool CanRestartPlayer(class AController* NewPlayer);
	bool AutoSelectTeam(class AController* NewPlayer);
	bool AutoSpectate(class AController* NewPlayer);
	bool ShouldShowWaitingForPlayersTime();
	bool ShouldSubmitMatchComplete();
	bool CanCheckForBannedPlayers();
	bool CanCheckForForfeitSeries();
	bool UseCustomMatchSettings();
	bool CanIncreaseMaxTeamSize();
	bool IsOnlineMultiplayer();
	bool ShouldSetGameOwner();
	bool CanCheckForForfeit();
	bool ShouldCancelMatch();
	bool ShouldStartMatch();
	bool AllowMatchAdmin();
	bool RecordPlayedMap();
	bool AllowSpectators();
	bool CanStayAsParty();
	bool CanRematchVote();
	bool CanUpdateStats();
	bool CanChangeTeam();
	bool GiveExtraXP();
	struct FName GetMatchTypeName();
	void OnStartWaitingForPlayers();
	void OnPlayerAddedToTeam();
	bool CanSkipPreMatchLobby();
	class ATeam_TA* PickTeam(class AController* C);
	int GetMaxTeamSize();
	int GetWaitTimeRemaining();
	class UOnlineGameLanServer_X* STATIC_GetOnlineGameLanServer();
	class UOnlineGameDedicatedServer_TA* GetOnlineGameDedicatedServer();
	class UOnlineGame_Base_X* GetOnlineGame();
	bool PlayerNeedsCar(class AController* Player);
	bool AllPlayersHaveACar();
	void InitCustomMatchSettings(const struct U_Types_X_FCustomMatchSettings& Settings);
	void Init(class AGameEvent_TA* InGameEvent, const struct FString& Options);
};


// Class TAGame.MatchType_Public_TA
// 0x0008 (0x00A0 - 0x0098)
class UMatchType_Public_TA : public UMatchType_TA
{
public:
	class UOnlineGameReservations_X*                   Reservations;                                             // 0x0098(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_Public_TA");
		return ptr;
	}


	bool ChooseTeam(int TeamIndex, class APlayerController_TA* Player);
	bool CanRestartPlayer(class AController* NewPlayer);
	bool AutoSelectTeam(class AController* NewPlayer);
	bool CanCheckForBannedPlayers();
	bool ShouldSubmitMatchComplete();
	bool IsOnlineMultiplayer();
	bool CanUpdateStats();
	bool CanStayAsParty();
	bool CanRematchVote();
	bool CanSkipPreMatchLobby();
	class ATeam_TA* PickTeamFromReservations(class AController* C);
	bool IsWaitingForPlayersTimeExpired();
	bool CanCheckForForfeit();
	bool TeamsHaveEnoughHumans();
	bool ShouldCancelMatch();
	bool ShouldStartMatch();
	void OnStartWaitingForPlayers();
	bool GiveExtraXP();
};


// Class TAGame.MatchType_PublicRanked_TA
// 0x0000 (0x00A0 - 0x00A0)
class UMatchType_PublicRanked_TA : public UMatchType_Public_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_PublicRanked_TA");
		return ptr;
	}


	bool ShouldCancelMatch();
	bool ShouldStartMatch();
};


// Class TAGame.MatchType_Tournament_TA
// 0x0010 (0x00B0 - 0x00A0)
class UMatchType_Tournament_TA : public UMatchType_PublicRanked_TA
{
public:
	class UOnlineGameDedicatedServer_TA*               DedicatedServer;                                          // 0x00A0(0x0008) (Edit)
	class UOnlineGameTourServer_TA*                    TourServer;                                               // 0x00A8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_Tournament_TA");
		return ptr;
	}


	bool CanCheckForBannedPlayers();
	bool UseCustomMatchSettings();
	bool ShouldSubmitMatchComplete();
	bool CanCancelMatch();
	bool CanRematchVote();
	bool HasBotTeams();
	bool ShouldShowWaitingForPlayersTime();
	bool CanCheckForForfeitSeries();
	bool CanCheckForForfeit();
	bool ShouldCancelMatch();
	bool ShouldStartMatch();
	int GetMaxTeamSize();
	bool PlayerHasTeam(class AController* Player);
	bool PlayerNeedsCar(class AController* Player);
	bool AutoSpectate(class AController* NewPlayer);
	bool CanRestartPlayer(class AController* NewPlayer);
	class ATeam_TA* PickTeam(class AController* C);
	bool AutoSelectTeam(class AController* NewPlayer);
	void OnStartWaitingForPlayers();
	void OnInitGameEvent();
};


// Class TAGame.__AchievementManager_TA__HasItemQualityEquipped_E0C57CC6419028CC26273595C4D06CB0
// 0x0001 (0x0061 - 0x0060)
class U__AchievementManager_TA__HasItemQualityEquipped_E0C57CC6419028CC26273595C4D06CB0 : public UObject
{
public:
	TEnumAsByte<EProductQuality>                       Quality;                                                  // 0x0060(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__AchievementManager_TA__HasItemQualityEquipped_E0C57CC6419028CC26273595C4D06CB0");
		return ptr;
	}


	bool __AchievementManager_TA__HasItemQualityEquipped_E0C57CC6419028CC26273595C4D06CB0(class UOnlineProduct_TA* P);
};


// Class TAGame.MapPrefsSave_TA
// 0x0030 (0x00F8 - 0x00C8)
class UMapPrefsSave_TA : public USaveObject_TA
{
public:
	TArray<struct FPlaylistMapPrefs>                   MapPrefs;                                                 // 0x00C8(0x0010) (NeedCtorLink)
	struct FName                                       SelectedFreeplayMap;                                      // 0x00D8(0x0008)
	struct FScriptDelegate                             __EventUsedAllMapVotes__Delegate;                         // 0x00E0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00E0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapPrefsSave_TA");
		return ptr;
	}


	void ClearRemovedMapPrefs(const struct FName& PlaylistId, TArray<class UMapData_TA*> PlaylistMaps);
	void RecordMapPrefsMetrics();
	void SetMapPrefs(const struct FPlaylistMapPrefs& Prefs, bool bUsedAllVotes);
	struct FPlaylistMapPrefs GetMapPrefs(const struct FName& Playlist);
	void EventUsedAllMapVotes(class UMapPrefsSave_TA* MapPrefsSave);
};


// Class TAGame.GameEvent_Breakout_TA
// 0x0020 (0x0C48 - 0x0C28)
class AGameEvent_Breakout_TA : public AGameEvent_Soccar_TA
{
public:
	unsigned long                                      bOnlyResetScoredOnTeam : 1;                               // 0x0C28(0x0004)
	unsigned long                                      bResetOvertime : 1;                                       // 0x0C28(0x0004)
	unsigned char                                      LastScoredOnTeam;                                         // 0x0C2C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0C2D(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __EventPlatformDamaged__Delegate;                         // 0x0C30(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0C2D(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Breakout_TA");
		return ptr;
	}


	void SavePreReplayState();
	void RestorePreReplayState();
	void HandleDamageStateChanged(class ABreakOutActor_Platform_TA* Platform, const struct FBreakoutDamageState& InState);
	void HandlePlatformDamaged(class ABreakOutActor_Platform_TA* Platform, class APRI_TA* PRI, class ABall_TA* Ball);
	void HandleGoalScored(class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIndex);
	void ResetAllBreakoutMeshes();
	bool ShouldResetPlatform(class ABreakOutActor_Platform_TA* BOM);
	void PostBeginPlay();
	void EventPlatformDamaged(class ABreakOutActor_Platform_TA* Platform, class APRI_TA* PRI, class ABall_TA* Ball);
};


// Class TAGame.CarDistanceTracker_TA
// 0x0018 (0x00A4 - 0x008C)
class UCarDistanceTracker_TA : public UTickableStateObject_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	struct FVector                                     LastCarLocation;                                          // 0x0090(0x000C)
	float                                              TotalDriveDistanceKM;                                     // 0x009C(0x0004)
	float                                              CurrentDriveDistanceKM;                                   // 0x00A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarDistanceTracker_TA");
		return ptr;
	}


	float ConsumeCurrentDriveDistance();
	float ConvertUnrealToKM(float Distance);
	void Tick(float DeltaTime);
	void HandlePawnTypeChanged(class APRI_TA* PRI);
	void Construct();
};


// Class TAGame.XPManager_TA
// 0x0028 (0x0088 - 0x0060)
class UXPManager_TA : public UObject
{
public:
	int                                                LevelCap;                                                 // 0x0060(0x0004) (Edit, Const)
	int                                                Level_Max;                                                // 0x0064(0x0004) (Edit, Const)
	int                                                Level_XPBaseStep;                                         // 0x0068(0x0004) (Edit, Const)
	int                                                Level_XPBucketSize;                                       // 0x006C(0x0004) (Edit, Const)
	float                                              Level_XPIncrementAmt;                                     // 0x0070(0x0004) (Edit, Const)
	int                                                Level_XPBaseRequirement;                                  // 0x0074(0x0004) (Edit, Const)
	TArray<struct FTitleInfo>                          Titles;                                                   // 0x0078(0x0010) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.XPManager_TA");
		return ptr;
	}


	int STATIC_GetTotalXPRequiredForLevel(int Level);
	struct FString DetermineLevelTitle(int Level);
	int STATIC_CalculateRequiredXPForLevel(int Level);
	int STATIC_CalculatePlayerLevel(int XP, bool bShowLog);
	bool AllProductsUnlocked(class UProfile_TA* Profile, TArray<class UProductSlot_TA*>* ArrayResultLocal_044B916C486DC503057C8FA50D1E4297);
	void PruneSkinsForLockedCars(class UProductSlot_TA* ProductSlot, class UProfile_TA* Profile, TArray<int>* LockedProductIDs);
	int PickRandomItemFromSlot(class UProductSlot_TA* ProductSlot, class UProfile_TA* Profile);
	bool SlotContainsLockedProducts(class UProductSlot_TA* ProductSlot, class UProfile_TA* Profile);
	bool SlotContainsLockedDropProducts(class UProductSlot_TA* ProductSlot, class UProfile_TA* Profile);
	class UProductSlot_TA* PickRandomSlot(class UProfile_TA* Profile, TArray<class UProductSlot_TA*>* ArrayResultLocal_FFF4AD484126433B200B2694C9EFDE4A, TArray<class UProductSlot_TA*>* FilterLocal_8F35F22049FC20C638BEAD86A15F5700);
	int GetRandomLockedProductID(class UProfile_TA* Profile);
};


// Class TAGame.RandomItemsDroppedEvent_TA
// 0x0000 (0x0060 - 0x0060)
class URandomItemsDroppedEvent_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RandomItemsDroppedEvent_TA");
		return ptr;
	}

};


// Class TAGame.VersionHelper_TA
// 0x0030 (0x0090 - 0x0060)
class UVersionHelper_TA : public UObject
{
public:
	struct FScriptDelegate                             __VersionDelegate__Delegate;                              // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __VersionChangedDelegate__Delegate;                       // 0x0078(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VersionHelper_TA");
		return ptr;
	}


	void STATIC_Update(class UObject* VersionObject, const struct FScriptDelegate& VersionChangedCallback, int VersionMax, TArray<struct FScriptDelegate>* VersionDelegates, int* Version);
	void VersionChangedDelegate();
	void VersionDelegate(class UObject* VersionObject);
};


// Class TAGame.ReconcileUtil_TA
// 0x0000 (0x0060 - 0x0060)
class UReconcileUtil_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ReconcileUtil_TA");
		return ptr;
	}


	void STATIC_ReconcileUniqueArrayName(TArray<struct FName>* Destination, TArray<struct FName>* Source);
	void STATIC_ReconcileUniqueArrayString(TArray<struct FString>* Destination, TArray<struct FString>* Source);
	void STATIC_ReconcileQMax();
	void STATIC_ReconcileMax(int* Left, int* Right);
	void STATIC_ReconcileFMax(float* Left, float* Right);
};


// Class TAGame.ActivityFeedManager_TA
// 0x0000 (0x0060 - 0x0060)
class UActivityFeedManager_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ActivityFeedManager_TA");
		return ptr;
	}


	void __ActivityFeedManager_TA__Construct_8BBEF3A64F968578D68C8793E946EEE6(class UAchievementManager_TA* AM);
	void __ActivityFeedManager_TA__Construct_F243152B497B75EB51BCD5914F10CFF1(class USaveData_TA* SaveData);
	TArray<struct FString> GetFriendsPlayedAgainst(class APRI_TA* OwnerPRI, class AGameEvent_TA* GameEvent);
	void CheckFriendsPlayedAgainst(class APRI_TA* OwnerPRI, class AGameEvent_Soccar_TA* GameEvent);
	void HandleMatchWinnerSet(class AGameEvent_Soccar_TA* GameEvent);
	void HandleProductUnlocked(class USaveData_TA* Data, int ProductID);
	void HandleChampionshipAmountChanged(class UAchievementManager_TA* Manager, int Wins);
	void HandleRegularSeasonAmountChanged(class UAchievementManager_TA* Manager, int Amount);
	void HandleNewMVPScore(class UAchievementManager_TA* Manager, int Score);
	void HandleGameEventAmountWon(class UAchievementManager_TA* Manager, int GamesWon);
	void HandleShotAmountBlocked(class UAchievementManager_TA* Manager, int bLocked);
	void HandleGoalAmountScored(class UAchievementManager_TA* Manager, int Score);
	void HandleDistanceDriven(class UAchievementManager_TA* Manager, float Distance);
	void PostActivtyFeedSingleString(TEnumAsByte<EActivityFeedType> ActivityFeedID, const struct FString& ReplaceString, TArray<struct FString>* ArrayInitializer_9595D47D4B588797BDF2C28FEB04D5CF);
	void PostActivityFeedMessage(TEnumAsByte<EActivityFeedType> ActivityFeedID, TArray<struct FString> StringReplaceList);
	void Construct();
};


// Class TAGame.OnlinePlayer_TA
// 0x00B8 (0x02C0 - 0x0208)
class UOnlinePlayer_TA : public UOnlinePlayer_X
{
public:
	class UAchievementManager_TA*                      AchievementManagerArchetype;                              // 0x0208(0x0008)
	class UAchievementManager_TA*                      AchievementManager;                                       // 0x0210(0x0008)
	class UNotificationManager_TA*                     NotificationManager;                                      // 0x0218(0x0008)
	class UPlayerProgressionManager_TA*                PlayerProgressionManager;                                 // 0x0220(0x0008)
	class UPlayerProgressionManager_TA*                PlayerProgressionManagerArchetype;                        // 0x0228(0x0008)
	class UStatusTriggerManager_TA*                    TriggerManager;                                           // 0x0230(0x0008)
	class UChallengeManager_TA*                        ChallengeManager;                                         // 0x0238(0x0008)
	class UWallet_TA*                                  WalletArchetype;                                          // 0x0240(0x0008)
	class UWallet_TA*                                  WalletCNArchetype;                                        // 0x0248(0x0008)
	class UWallet_TA*                                  Wallet;                                                   // 0x0250(0x0008)
	class UShopsManager_TA*                            ShopsManagerArchetype;                                    // 0x0258(0x0008)
	class UShopsManager_TA*                            ShopsManager;                                             // 0x0260(0x0008)
	class UChatHistory_TA*                             ChatHistory;                                              // 0x0268(0x0008)
	class UOnlinePlayerMTX_TA*                         MTX;                                                      // 0x0270(0x0008)
	class UObjectProvider*                             RewardDrops;                                              // 0x0278(0x0008) (ExportObject, Component, EditInline)
	class UAccountSettingsComponent_TA*                AccountSettings;                                          // 0x0280(0x0008) (ExportObject, Component, EditInline)
	struct FUniqueNetId                                StayAsPartyLeaderID;                                      // 0x0288(0x0038) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlinePlayer_TA");
		return ptr;
	}


	void __OnlinePlayer_TA__InitPlayer_78D3310A41062FF2CA7D03BEB5003DCA(const struct FString& MapName);
	void __PsyNetPresence__ChangeNotifyFunc();
	bool IsTutorialActive();
	void GetPlayersLikesDislikes(class UGameSettingPlaylist_X* Playlist, TArray<struct FName>* PlayerLikes, TArray<struct FName>* PlayerDislikes);
	void HandleReceivedController(class UPlayer* PlayerRef);
	void InitPlayer();
	void Construct();
};


// Class TAGame.AdManager_TA
// 0x0050 (0x00B0 - 0x0060)
class UAdManager_TA : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.AdManager_TA.CacheDuration
	TArray<struct FCachedAdImageData>                  CachedAdImages;                                           // 0x0068(0x0010) (Transient, NeedCtorLink)
	TArray<struct FBillboardData>                      BillboardZoneMapping;                                     // 0x0078(0x0010) (NeedCtorLink)
	TArray<struct FBillboardUpdateRequestData>         BillboardMeshUpdateRequests;                              // 0x0088(0x0010) (Transient, Component, NeedCtorLink)
	class UOnlineImageDownloaderWeb*                   ImageDownloader;                                          // 0x0098(0x0008) (Transient)
	int                                                CurrentAdIndex;                                           // 0x00A0(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class URPC_AdsGet_TA*                              CurrentRPC;                                               // 0x00A8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AdManager_TA");
		return ptr;
	}


	void AddBillboardMeshRequest(class UStaticMeshComponent* Mesh);
	void RequestBillboardMeshUpdate(class UStaticMeshComponent* Mesh);
	void CompleteBillboardMeshRequests();
	class UTexture2DDynamic* GetCachedAdForZoneID(int ZoneID);
	void HandleOnlineImageDownloaded(class UTexture2DDynamic* Texture, class UError* Error);
	void GetNextImage();
	void HandleGetImageURLResponse(class URPC_AdsGet_TA* RPC);
	void ConstructAdRequest();
	void ClearAllRequests(const struct FString& MapName);
	void ClearExpiredImages();
	void Construct();
};


// Class TAGame.RPC_AdsGet_TA
// 0x0020 (0x0120 - 0x0100)
class URPC_AdsGet_TA : public URPC_X
{
public:
	struct FString                                     Language;                                                 // 0x0100(0x0010) (NeedCtorLink)
	TArray<struct FAdInfo>                             Ads;                                                      // 0x0110(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_AdsGet_TA");
		return ptr;
	}


	class URPC_AdsGet_TA* SetLanguage(const struct FString& InLanguage);
};


// Class TAGame.AIProxy_TA
// 0x005C (0x00BC - 0x0060)
class UAIProxy_TA : public UObject
{
public:
	class AActor*                                      Actor;                                                    // 0x0060(0x0008) (Transient)
	struct FVector                                     Location;                                                 // 0x0068(0x000C) (Transient)
	struct FVector                                     Velocity;                                                 // 0x0074(0x000C) (Transient)
	struct FRotator                                    Rotation;                                                 // 0x0080(0x000C) (Transient)
	struct FVector                                     Forward;                                                  // 0x008C(0x000C) (Transient)
	struct FVector                                     Right;                                                    // 0x0098(0x000C) (Transient)
	struct FVector                                     Up;                                                       // 0x00A4(0x000C) (Transient)
	float                                              Speed;                                                    // 0x00B0(0x0004) (Transient)
	float                                              Speed2D;                                                  // 0x00B4(0x0004) (Transient)
	float                                              ForwardSpeed;                                             // 0x00B8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AIProxy_TA");
		return ptr;
	}


	void Update();
	void InitProxy(class AAIManager_TA* AIManager, class AActor* InActor);
};


// Class TAGame.AttachmentAnim_TA
// 0x0014 (0x0088 - 0x0074)
class UAttachmentAnim_TA : public UAttachmentBehavior_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	class UAnimSet*                                    AnimSet;                                                  // 0x0078(0x0008) (Edit)
	struct FName                                       AnimName;                                                 // 0x0080(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AttachmentAnim_TA");
		return ptr;
	}


	void OnInit();
};


// Class TAGame.BallCamTarget_TA
// 0x0020 (0x00C4 - 0x00A4)
class UBallCamTarget_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FVector                                     LocalTranslation;                                         // 0x00A8(0x000C) (Edit)
	struct FVector                                     WorldTranslation;                                         // 0x00B4(0x000C) (Edit)
	int                                                Priority;                                                 // 0x00C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallCamTarget_TA");
		return ptr;
	}


	void Detached();
	void Attached();
	struct FVector GetFocus();
};


// Class TAGame.ProductAttribute_MapProductAssetOverride_TA
// 0x0018 (0x0078 - 0x0060)
class UProductAttribute_MapProductAssetOverride_TA : public UProductAssetAttribute_TA
{
public:
	class UMapSet_TA*                                  MapsToUseDefaultProduct;                                  // 0x0060(0x0008) (Edit)
	TArray<class UClass*>                              GameTypesToUseDefaultProduct;                             // 0x0068(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_MapProductAssetOverride_TA");
		return ptr;
	}


	bool ShouldUseDefaultProductasset(class AWorldInfo* CurWorldInfo);
};


// Class TAGame.Ball_Tutorial_TA
// 0x0000 (0x0A00 - 0x0A00)
class ABall_Tutorial_TA : public ABall_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Ball_Tutorial_TA");
		return ptr;
	}


	void PostBeginPlay();
};


// Class TAGame.SeqEvent_BallInRange_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_BallInRange_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_BallInRange_TA");
		return ptr;
	}

};


// Class TAGame.BTAction_BlockGoal
// 0x0008 (0x01C4 - 0x01BC)
class UBTAction_BlockGoal : public UBTAction_MoveTo
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x01BC(0x0004) MISSED OFFSET
	float                                              GoalRadius;                                               // 0x01C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_BlockGoal");
		return ptr;
	}


	TEnumAsByte<EBTStatus> OnTargetExecute();
	void OnInit();
};


// Class TAGame.BTAction_DivertBall
// 0x0000 (0x01E0 - 0x01E0)
class UBTAction_DivertBall : public UBTAction_HitBall
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_DivertBall");
		return ptr;
	}


	void OnInit();
};


// Class TAGame.BTAction_Jump
// 0x000C (0x016C - 0x0160)
class UBTAction_Jump : public UBTAction_Target
{
public:
	float                                              MinJumpTime;                                              // 0x0160(0x0004) (Edit)
	float                                              TargetRadiusHeightScale;                                  // 0x0164(0x0004) (Edit)
	float                                              StateStartTime;                                           // 0x0168(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_Jump");
		return ptr;
	}


	float GetImpactTime();
	float GetStateTime();
	void GotoJumpState(const struct FName& StateName);
	TEnumAsByte<EBTStatus> OnStart();
};


// Class TAGame.BTAction_DodgeHit
// 0x0024 (0x0190 - 0x016C)
class UBTAction_DodgeHit : public UBTAction_Jump
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x016C(0x0004) MISSED OFFSET
	float                                              FlipAmount;                                               // 0x0170(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0174(0x0004) MISSED OFFSET
	class UBTTarget*                                   AimTarget;                                                // 0x0178(0x0008) (Edit)
	struct FVector                                     DodgeDirection;                                           // 0x0180(0x000C) (Transient)
	float                                              DodgeTime;                                                // 0x018C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_DodgeHit");
		return ptr;
	}


	struct FVector CalculateDodgeDirection();
	void SetInputs();
	struct FVector GetDodgeVelocity(const struct FVector& DodgeInput);
	TEnumAsByte<EBTStatus> OnStart();
	float GetImpactTime();
};


// Class TAGame.BTAction_Face
// 0x001C (0x017C - 0x0160)
class UBTAction_Face : public UBTAction_Target
{
public:
	float                                              ReachAngle;                                               // 0x0160(0x0004) (Edit)
	float                                              MaxSpeed;                                                 // 0x0164(0x0004) (Edit)
	float                                              MaxTravel;                                                // 0x0168(0x0004) (Edit)
	unsigned long                                      bMovingForward : 1;                                       // 0x016C(0x0004) (Transient)
	struct FVector                                     StartLocation;                                            // 0x0170(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_Face");
		return ptr;
	}


	TEnumAsByte<EBTStatus> OnTargetExecute();
	void SetMovingForward(bool bForward);
	TEnumAsByte<EBTStatus> OnStart();
};


// Class TAGame.BTAction_PowerSlide
// 0x0018 (0x0178 - 0x0160)
class UBTAction_PowerSlide : public UBTAction_Target
{
public:
	unsigned long                                      bReverse : 1;                                             // 0x0160(0x0004) (Edit)
	float                                              Delay;                                                    // 0x0164(0x0004) (Edit)
	class UBTTarget*                                   TurnTarget;                                               // 0x0168(0x0008) (Edit)
	float                                              Steer;                                                    // 0x0170(0x0004) (Transient)
	int                                                startYaw;                                                 // 0x0174(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_PowerSlide");
		return ptr;
	}


	TEnumAsByte<EBTStatus> OnTargetExecute();
	TEnumAsByte<EBTStatus> OnStart();
};


// Class TAGame.BTAction_Test
// 0x001C (0x01D8 - 0x01BC)
class UBTAction_Test : public UBTAction_MoveTo
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x01BC(0x0004) MISSED OFFSET
	struct FVector                                     TargetLocation;                                           // 0x01C0(0x000C) (Transient)
	struct FVector                                     AimLocation;                                              // 0x01CC(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_Test");
		return ptr;
	}


	bool GetAimDir(const struct FVector& Destination, struct FVector* AimDir);
	TEnumAsByte<EBTStatus> OnTargetExecute();
	TEnumAsByte<EBTStatus> OnStart();
	struct FVector GetRandomFieldLocation();
};


// Class TAGame.BTAction_WallBounce
// 0x0004 (0x00C0 - 0x00BC)
class UBTAction_WallBounce : public UBTAction
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTAction_WallBounce");
		return ptr;
	}

};


// Class TAGame.BTC_AreaClear
// 0x0010 (0x01E0 - 0x01D0)
class UBTC_AreaClear : public UBTC_TargetBase
{
public:
	class UBTTarget*                                   Source;                                                   // 0x01D0(0x0008) (Edit)
	float                                              SourcePredictionTime;                                     // 0x01D8(0x0004) (Edit)
	float                                              Radius;                                                   // 0x01DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_AreaClear");
		return ptr;
	}


	bool GetResult();
	void OnInit();
};


// Class TAGame.BTC_Between
// 0x0018 (0x0100 - 0x00E8)
class UBTC_Between : public UBTC_ProxyBase
{
public:
	class UBTTarget*                                   Start;                                                    // 0x00E8(0x0008) (Edit)
	class UBTTarget*                                   End;                                                      // 0x00F0(0x0008) (Edit)
	float                                              AngleLessThan;                                            // 0x00F8(0x0004) (Edit)
	float                                              AngleGreaterThan;                                         // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Between");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_Boost
// 0x000C (0x00F4 - 0x00E8)
class UBTC_Boost : public UBTC_ProxyBase
{
public:
	float                                              BoostAmountLessThan;                                      // 0x00E8(0x0004) (Edit)
	float                                              BoostAmountGreaterThan;                                   // 0x00EC(0x0004) (Edit)
	unsigned long                                      bFull : 1;                                                // 0x00F0(0x0004) (Edit)
	unsigned long                                      bNotFull : 1;                                             // 0x00F0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Boost");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_BounceHeight
// 0x0008 (0x01D8 - 0x01D0)
class UBTC_BounceHeight : public UBTC_TargetBase
{
public:
	float                                              HeightLessThan;                                           // 0x01D0(0x0004) (Edit)
	float                                              HeightGreaterThan;                                        // 0x01D4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_BounceHeight");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_CanJumpTo
// 0x0000 (0x01D8 - 0x01D8)
class UBTC_CanJumpTo : public UBTC_BounceHeight
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_CanJumpTo");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_ClosestTime
// 0x0008 (0x0220 - 0x0218)
class UBTC_ClosestTime : public UBTC_Target
{
public:
	float                                              TimeGreaterThan;                                          // 0x0218(0x0004) (Edit)
	float                                              TimeLessThan;                                             // 0x021C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_ClosestTime");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_ClosestTo
// 0x000C (0x01DC - 0x01D0)
class UBTC_ClosestTo : public UBTC_TargetBase
{
public:
	class UBTTarget*                                   Targets;                                                  // 0x01D0(0x0008) (Edit)
	float                                              ExtraDistance;                                            // 0x01D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_ClosestTo");
		return ptr;
	}


	bool GetResult();
	void OnInit();
};


// Class TAGame.BTC_JumpHit
// 0x0004 (0x01D4 - 0x01D0)
class UBTC_JumpHit : public UBTC_TargetBase
{
public:
	float                                              MinImpactTime;                                            // 0x01D0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_JumpHit");
		return ptr;
	}


	bool GetResult();
	void PredictJump(float Time);
};


// Class TAGame.BTC_DodgeHit
// 0x000C (0x01E0 - 0x01D4)
class UBTC_DodgeHit : public UBTC_JumpHit
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	float                                              FlipAmount;                                               // 0x01D8(0x0004) (Edit)
	float                                              JumpTime;                                                 // 0x01DC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_DodgeHit");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_Facing
// 0x0000 (0x0218 - 0x0218)
class UBTC_Facing : public UBTC_Target
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Facing");
		return ptr;
	}

};


// Class TAGame.BTC_FieldDistance
// 0x0108 (0x02D8 - 0x01D0)
class UBTC_FieldDistance : public UBTC_TargetBase
{
public:
	class UBTTarget*                                   Goal;                                                     // 0x01D0(0x0008) (Edit)
	class UBTTarget*                                   OtherGoal;                                                // 0x01D8(0x0008) (Edit)
	float                                              ForwardGreaterThan;                                       // 0x01E0(0x0004) (Edit)
	float                                              ForwardLessThan;                                          // 0x01E4(0x0004) (Edit)
	float                                              SideGreaterThan;                                          // 0x01E8(0x0004) (Edit)
	float                                              SideLessThan;                                             // 0x01EC(0x0004) (Edit)
	float                                              AbsSideGreaterThan;                                       // 0x01F0(0x0004) (Edit)
	float                                              AbsSideLessThan;                                          // 0x01F4(0x0004) (Edit)
	unsigned long                                      bUseGoalOrientation : 1;                                  // 0x01F8(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01FC(0x0004) MISSED OFFSET
	struct FAIProxyData                                GoalData;                                                 // 0x0200(0x0048) (Transient)
	struct FAIProxyData                                OtherGoalData;                                            // 0x0248(0x0048) (Transient)
	struct FAIProxyData                                MidFieldData;                                             // 0x0290(0x0048) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_FieldDistance");
		return ptr;
	}


	bool GetResult();
	struct FVector GetRelativeOffset(const struct FVector& InLocation);
	void OnInit();
};


// Class TAGame.BTC_GameState
// 0x000C (0x0098 - 0x008C)
class UBTC_GameState : public UBTCondition
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	struct FName                                       StateName;                                                // 0x0090(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_GameState");
		return ptr;
	}


	bool GetResult();
	void HandleGameStateChanged(class AGameEvent_TA* GameEvent);
	void OnInit();
};


// Class TAGame.BTC_HitLanding
// 0x0000 (0x01D0 - 0x01D0)
class UBTC_HitLanding : public UBTC_TargetBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_HitLanding");
		return ptr;
	}


	bool GetResult();
	void OnInit();
};


// Class TAGame.BTC_Impact
// 0x0008 (0x0220 - 0x0218)
class UBTC_Impact : public UBTC_Target
{
public:
	float                                              TimeGreaterThan;                                          // 0x0218(0x0004) (Edit)
	float                                              TimeLessThan;                                             // 0x021C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Impact");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_InCone
// 0x0018 (0x0100 - 0x00E8)
class UBTC_InCone : public UBTC_ProxyBase
{
public:
	class UBTTarget*                                   Source;                                                   // 0x00E8(0x0008) (Edit)
	class UBTTarget*                                   Destination;                                              // 0x00F0(0x0008) (Edit)
	float                                              AngleLessThan;                                            // 0x00F8(0x0004) (Edit)
	float                                              AngleGreaterThan;                                         // 0x00FC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_InCone");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_Landing
// 0x0008 (0x0220 - 0x0218)
class UBTC_Landing : public UBTC_Target
{
public:
	float                                              LandTimeLessThan;                                         // 0x0218(0x0004) (Edit)
	float                                              LandTimeGreaterThan;                                      // 0x021C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Landing");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_Lock
// 0x0010 (0x009C - 0x008C)
class UBTC_Lock : public UBTCondition
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	struct FName                                       LockName;                                                 // 0x0090(0x0008) (Edit)
	int                                                NumLocks;                                                 // 0x0098(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Lock");
		return ptr;
	}


	bool GetResult();
	void HandleLockRemoved(const struct FName& InLockName);
	void HandleLockAdded(const struct FName& InLockName);
	void ListenForLocks(class UBTLockCollection* Locks);
	void OnInit();
};


// Class TAGame.BTC_SegmentDistance
// 0x0028 (0x0110 - 0x00E8)
class UBTC_SegmentDistance : public UBTC_ProxyBase
{
public:
	class UBTTarget*                                   Start;                                                    // 0x00E8(0x0008) (Edit)
	class UBTTarget*                                   End;                                                      // 0x00F0(0x0008) (Edit)
	float                                              StartGreaterThan;                                         // 0x00F8(0x0004) (Edit)
	float                                              StartLessThan;                                            // 0x00FC(0x0004) (Edit)
	float                                              EndGreaterThan;                                           // 0x0100(0x0004) (Edit)
	float                                              EndLessThan;                                              // 0x0104(0x0004) (Edit)
	float                                              AbsSideGreaterThan;                                       // 0x0108(0x0004) (Edit)
	float                                              AbsSideLessThan;                                          // 0x010C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_SegmentDistance");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTC_Skill
// 0x000C (0x0098 - 0x008C)
class UBTC_Skill : public UBTCondition
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	float                                              SkillGreaterThan;                                         // 0x0090(0x0004) (Edit)
	float                                              SkillLessThan;                                            // 0x0094(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Skill");
		return ptr;
	}


	bool GetResult();
	void HandleSkillChanged(class AAIController_TA* InAI);
	void OnInit();
};


// Class TAGame.BTC_SoccarState
// 0x0010 (0x00A8 - 0x0098)
class UBTC_SoccarState : public UBTC_GameState
{
public:
	unsigned long                                      bKickoff : 1;                                             // 0x0098(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	class AGameEvent_Soccar_TA*                        SoccarGame;                                               // 0x00A0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_SoccarState");
		return ptr;
	}


	bool GetResult();
	void HandleBallHit(class AGameEvent_Soccar_TA* G);
	void OnInit();
};


// Class TAGame.BTC_Stuck
// 0x0004 (0x0090 - 0x008C)
class UBTC_Stuck : public UBTCondition
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Stuck");
		return ptr;
	}


	bool IsTouchingOtherCar();
	bool GetResult();
};


// Class TAGame.BTC_TeamSize
// 0x000C (0x0098 - 0x008C)
class UBTC_TeamSize : public UBTCondition
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	int                                                MinTeamSize;                                              // 0x0090(0x0004) (Edit)
	int                                                MaxTeamSize;                                              // 0x0094(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_TeamSize");
		return ptr;
	}


	bool GetResult();
	void HandleMembersChanged(class ATeam_TA* Team, class APRI_TA* PRI);
	void OnInit();
};


// Class TAGame.BTC_TimeSinceBallHit
// 0x0020 (0x00AC - 0x008C)
class UBTC_TimeSinceBallHit : public UBTCondition
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	TEnumAsByte<EAITeam>                               CheckTeam;                                                // 0x0090(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0091(0x0003) MISSED OFFSET
	float                                              TimeGreaterThan;                                          // 0x0094(0x0004) (Edit)
	float                                              TimeLessThan;                                             // 0x0098(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	class ABall_TA*                                    Ball;                                                     // 0x00A0(0x0008) (Transient)
	float                                              LastHitTime;                                              // 0x00A8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_TimeSinceBallHit");
		return ptr;
	}


	bool GetResult();
	void HandleCarTouch(class ABall_TA* InBall, class ACar_TA* HitCar, TEnumAsByte<EBallHitType> HitType);
	void HandleBallChanged(class AAIController_Soccar_TA* InAI);
	void OnInit();
};


// Class TAGame.BTC_Traits
// 0x0004 (0x0090 - 0x008C)
class UBTC_Traits : public UBTCondition
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Traits");
		return ptr;
	}

};


// Class TAGame.BTC_Vehicle
// 0x0014 (0x00FC - 0x00E8)
class UBTC_Vehicle : public UBTC_ProxyBase
{
public:
	unsigned long                                      bOnBack : 1;                                              // 0x00E8(0x0004) (Edit)
	unsigned long                                      bNotOnBack : 1;                                           // 0x00E8(0x0004) (Edit)
	unsigned long                                      bWheelsOnGround : 1;                                      // 0x00E8(0x0004) (Edit)
	unsigned long                                      bWheelsNotOnGround : 1;                                   // 0x00E8(0x0004) (Edit)
	float                                              GroundNormalGreaterThan;                                  // 0x00EC(0x0004) (Edit)
	float                                              GroundNormalLessThan;                                     // 0x00F0(0x0004) (Edit)
	float                                              ForwardSpeedGreaterThan;                                  // 0x00F4(0x0004) (Edit)
	float                                              ForwardSpeedLessThan;                                     // 0x00F8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_Vehicle");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.BTMoveModifier_Boost
// 0x0020 (0x0094 - 0x0074)
class UBTMoveModifier_Boost : public UBTMoveModifier
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	float                                              MinDistanceFromDestination;                               // 0x0078(0x0004) (Edit)
	float                                              MaxAngleFromCar;                                          // 0x007C(0x0004) (Edit)
	float                                              MaxAngleFromDestination;                                  // 0x0080(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	class AVehiclePickup_Boost_TA*                     BoostPickup;                                              // 0x0088(0x0008) (Transient)
	float                                              LastCheckTime;                                            // 0x0090(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTMoveModifier_Boost");
		return ptr;
	}


	class AVehiclePickup_Boost_TA* FindBoostPickup(const struct FVector& Destination);
	void HandleBoostPickedUp(class AVehiclePickup_TA* Pickup);
	void SetBoostPickup(class AVehiclePickup_Boost_TA* NewPickup);
	void AdjustDestination(const struct FVector& Goal, struct FVector* Destination);
};


// Class TAGame.VehiclePickup_Boost_TA
// 0x0011 (0x0301 - 0x02F0)
class AVehiclePickup_Boost_TA : public AVehiclePickup_TA
{
public:
	float                                              BoostAmount;                                              // 0x02F0(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02F4(0x0004) MISSED OFFSET
	class UAkSoundCue*                                 LocalPickupSound;                                         // 0x02F8(0x0008) (Edit)
	TEnumAsByte<EBoostType>                            BoostType;                                                // 0x0300(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePickup_Boost_TA");
		return ptr;
	}


	void PlayPickedUpFX();
	void Pickup(class ACar_TA* Car);
	bool CanPickup(class ACar_TA* Car);
};


// Class TAGame.ReplayDirector_TA
// 0x0178 (0x03E0 - 0x0268)
class AReplayDirector_TA : public AActor
{
public:
	float                                              SlomoPreScoreTime;                                        // 0x0268(0x0004) (Edit)
	float                                              SlomoPostScoreTime;                                       // 0x026C(0x0004) (Edit)
	float                                              SlomoDefendTime;                                          // 0x0270(0x0004) (Edit)
	float                                              SlomoDefendDistance;                                      // 0x0274(0x0004) (Edit)
	float                                              SlomoTimeDilation;                                        // 0x0278(0x0004) (Edit)
	float                                              MinReplayTime;                                            // 0x027C(0x0004) (Edit)
	float                                              MaxReplayTime;                                            // 0x0280(0x0004) (Edit)
	float                                              ReplayPadding;                                            // 0x0284(0x0004) (Edit)
	class UAkSoundCue*                                 ReplayStartSound;                                         // 0x0288(0x0008) (Edit)
	class UAkSoundCue*                                 SlomoStartSound;                                          // 0x0290(0x0008) (Edit)
	class UAkSoundCue*                                 SlomoStopSound;                                           // 0x0298(0x0008) (Edit)
	struct FName                                       LiveReplayStateGroup;                                     // 0x02A0(0x0008)
	struct FName                                       LiveReplay_PreScore;                                      // 0x02A8(0x0008)
	struct FName                                       LiveReplay_Slomo;                                         // 0x02B0(0x0008)
	struct FName                                       LiveReplay_PostGoal;                                      // 0x02B8(0x0008)
	struct FName                                       LiveReplay_None;                                          // 0x02C0(0x0008)
	float                                              HighlightReplayDuration;                                  // 0x02C8(0x0004) (Edit)
	float                                              TimeBeforeHighlightReplay;                                // 0x02CC(0x0004) (Edit)
	class UReplay_Soccar_TA*                           Replay;                                                   // 0x02D0(0x0008) (Transient)
	class AActor*                                      FocusCar;                                                 // 0x02D8(0x0008) (Net, Transient)
	float                                              FocusCarChangeTime;                                       // 0x02E0(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02E4(0x0004) MISSED OFFSET
	class AActor*                                      FocusBall;                                                // 0x02E8(0x0008) (Net, Transient)
	TArray<struct FBallHitInfo>                        BallTouches;                                              // 0x02F0(0x0010) (Transient, NeedCtorLink)
	struct FName                                       BallName;                                                 // 0x0300(0x0008) (Transient)
	float                                              ScoreTime;                                                // 0x0308(0x0004) (Transient)
	int                                                ScoreHitIndex;                                            // 0x030C(0x0004) (Transient)
	class UGoal_TA*                                    ScoredGoal;                                               // 0x0310(0x0008) (ExportObject, Net, Transient, Component, EditInline)
	unsigned long                                      bSlomo : 1;                                               // 0x0318(0x0004) (Transient)
	unsigned long                                      bReplicatedSlomo : 1;                                     // 0x0318(0x0004) (Net, Transient)
	unsigned long                                      bSlomoForDefender : 1;                                    // 0x0318(0x0004) (Transient)
	unsigned long                                      bAutoSave : 1;                                            // 0x0318(0x0004) (Transient)
	int                                                FocusHitIndex;                                            // 0x031C(0x0004) (Transient)
	TArray<struct FReplayFocusCar>                     FocusCars;                                                // 0x0320(0x0010) (Transient, NeedCtorLink)
	int                                                FocusCarIdx;                                              // 0x0330(0x0004) (Transient)
	float                                              ReplayStartGameTime;                                      // 0x0334(0x0004) (Transient)
	float                                              BallSpawnTime;                                            // 0x0338(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	class AGameEvent_Soccar_TA*                        SoccarGame;                                               // 0x0340(0x0008) (Net, Transient)
	unsigned char                                      ScoredOnTeam;                                             // 0x0348(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0349(0x0007) MISSED OFFSET
	struct FReplayScoreData                            ScoreData;                                                // 0x0350(0x0020) (Net, Transient)
	int                                                PreviousScores[0x2];                                      // 0x0370(0x0004) (Net, Transient)
	int                                                ForceCutToFocusActors;                                    // 0x0378(0x0004) (Net, Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x037C(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventReplayFinished__Delegate;                          // 0x0380(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x037C(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventScoreDataChanged__Delegate;                        // 0x0398(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0398(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventAutoSaveChanged__Delegate;                         // 0x03B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x03B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventFocusCarChanged__Delegate;                         // 0x03C8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x03C8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ReplayDirector_TA");
		return ptr;
	}


	void HandleStatEvent(class APRI_TA* PRI, class UStatEvent_TA* StatEvent, int Count);
	void HandleReplayFinished(class UReplay_TA* InReplay);
	bool ShouldSlomo();
	void UpdateSlomo();
	void UpdateFocusActors();
	void PlayRandomHighlight();
	int GetNextHighlightFrame();
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void SetAutoSave();
	void SaveUserKeyframe();
	void BuildFocusCars();
	void SetSlomo(bool bNewSlomo);
	void Tick(float DeltaTime);
	void Destroyed();
	class AActor* GetReplayProxy(const struct FName& ReplayActorName);
	float GetReplayTimeSeconds();
	void SetFocusActors(class AActor* NewCar, class AActor* NewBall);
	float GetReplayStartTime();
	void SetSlomoForDefender(class ABall_TA* Ball, int DefendingTeam);
	void OnScoreDataChanged();
	void GoalScored(class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIndex, struct FReplayScoreData* StructInitializer_B9902E014E710CC9E62A418EC5A830A4);
	void HandleScoreUpdated(class ATeam_TA* Team);
	void HandleAllTeamsCreated(class AGameEvent_Team_TA* TeamGame);
	void RecordPlayers();
	void HandleGameStateChanged(class AGameEvent_TA* G);
	void OnSoccarGameSet();
	void SetGameEvent(class AGameEvent_Soccar_TA* InGameEvent);
	void ReplicatedEvent(const struct FName& VarName);
	void EventFocusCarChanged(class AActor* NewFocusCar);
	void EventAutoSaveChanged(class AReplayDirector_TA* Director);
	void EventScoreDataChanged(class AReplayDirector_TA* Director);
	void EventReplayFinished(class AReplayDirector_TA* Director);
};


// Class TAGame.Camera_MainMenu_TA
// 0x0020 (0x06E8 - 0x06C8)
class ACamera_MainMenu_TA : public ACamera_X
{
public:
	struct FVector                                     HandheldCamFrequency;                                     // 0x06C8(0x000C) (Edit)
	struct FVector                                     HandheldCamAmplitude;                                     // 0x06D4(0x000C) (Edit)
	class UCameraState_X*                              CurrentState;                                             // 0x06E0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Camera_MainMenu_TA");
		return ptr;
	}


	void ApplyCameraModifiers(float DeltaTime, struct FTPOV* OutPOV);
	class UCameraState_X* SelectCameraState();
	void SetCameraState(const struct FName& StateName);
	class UCameraState_X* GetCameraStateByName(const struct FName& StateName);
	void InstanceCameraStates();
};


// Class TAGame.CameraState_CarPreview_TA
// 0x0074 (0x0100 - 0x008C)
class UCameraState_CarPreview_TA : public UCameraState_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	TArray<float>                                      SideOffsets;                                              // 0x0090(0x0010) (Edit, NeedCtorLink)
	TArray<struct FCameraOrientation>                  ViewOffsets;                                              // 0x00A0(0x0010) (Edit, NeedCtorLink)
	float                                              BlendRate;                                                // 0x00B0(0x0004) (Edit)
	float                                              MinPitch;                                                 // 0x00B4(0x0004)
	float                                              MaxPitch;                                                 // 0x00B8(0x0004)
	struct FCameraOrientation                          CurrentOrientation;                                       // 0x00BC(0x002C) (Transient)
	float                                              CurrentSideOffset;                                        // 0x00E8(0x0004) (Transient)
	struct FRotator                                    RotationOffset;                                           // 0x00EC(0x000C) (Transient)
	class UCameraState_PremiumGarage_TA*               PrevPremiumGarageState;                                   // 0x00F8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_CarPreview_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void AdjustOutPOVCameraRotation(const struct FRotator& AddedRotator, struct FCameraOrientation* OutPOV);
	void OnSnap();
	void PreviewFadeIn();
	void PreviewFadeOut(class UCameraState_CarPreview_TA* InPrevState);
	void BeginCameraState();
	void GetAccumulatedOrientation(struct FVector* out_Location, struct FRotator* out_Rotation, int* NumPreviewActors);
	void GetActorOrientation(struct FCameraOrientation* OutPOV, float* OutSideOffset);
	void GetSingleActorOrientation(class ACarPreviewActor_TA* ViewTarget, struct FVector* OutLoc, struct FRotator* OutRot);
};


// Class TAGame.Camera_TA
// 0x00D8 (0x07A0 - 0x06C8)
class ACamera_TA : public ACamera_X
{
public:
	struct FSwivelExtent                               SwivelExtentSlow;                                         // 0x06C8(0x000C) (Edit)
	struct FSwivelExtent                               SwivelExtentFast;                                         // 0x06D4(0x000C) (Edit)
	float                                              SwivelFastSpeed;                                          // 0x06E0(0x0004) (Edit)
	float                                              SwivelDieRate;                                            // 0x06E4(0x0004) (Edit)
	struct FProfileSliderLimits                        FOVLimits;                                                // 0x06E8(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        HeightLimits;                                             // 0x06F4(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        AngleLimits;                                              // 0x0700(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        DistanceLimits;                                           // 0x070C(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        StiffnessLimits;                                          // 0x0718(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        SwivelSpeedLimits;                                        // 0x0724(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        TransitionSpeedLimits;                                    // 0x0730(0x000C) (Edit, Const)
	unsigned char                                      UnknownData00[0x4];                                       // 0x073C(0x0004) MISSED OFFSET
	TArray<struct FProfileCameraSettings>              CameraPresetSettings;                                     // 0x0740(0x0010) (Edit, Const, NeedCtorLink)
	float                                              HorizontalSplitscreenHeightOffset;                        // 0x0750(0x0004) (Edit, Const)
	float                                              HorizontalSplitscreenFOVOffset;                           // 0x0754(0x0004) (Edit, Const)
	float                                              VerticalSplitscreenFOVOffset;                             // 0x0758(0x0004) (Edit, Const)
	float                                              ClipRate;                                                 // 0x075C(0x0004) (Edit)
	struct FRotator                                    CurrentSwivel;                                            // 0x0760(0x000C) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x076C(0x0004) MISSED OFFSET
	class ARBActor_TA*                                 Demolisher;                                               // 0x0770(0x0008) (Transient)
	unsigned long                                      bDemolished : 1;                                          // 0x0778(0x0004) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x077C(0x0004) MISSED OFFSET
	class ACameraSettingsActor_TA*                     CameraSettings;                                           // 0x0780(0x0008) (Transient)
	struct FScriptDelegate                             __EventCameraTargetChanged__Delegate;                     // 0x0788(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0788(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Camera_TA");
		return ptr;
	}


	void OnViewTargetChanged();
	float ClipToField(float CameraLocationZ);
	void ApplyCameraModifiers(float DeltaTime, struct FTPOV* OutPOV);
	void Demolished(class ARBActor_TA* InDemolisher);
	void ApplyRearCameraView(struct FCameraOrientation* OutPOV);
	void ApplySwivel(struct FCameraOrientation* OutPOV);
	struct FRotator GetDesiredSwivel(float LookUp, float LookRight);
	void UpdateSwivel(float DeltaTime);
	float GetDefaultFOVOffset();
	float GetDefaultViewHeightOffset();
	void UpdateAspectRatio(struct FCameraOrientation* OutPOV);
	void PostProcessCameraState(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateFOV();
	class ACameraSettingsActor_TA* GetCameraSettings();
	void ProcessCameraState(float DeltaTime, struct FCameraOrientation* OutPOV);
	void HandleRemoveLocalFX(class USeqAct_AttachFX_TA* SeqAct);
	void HandleAddLocalFX(class USeqAct_AttachFX_TA* SeqAct);
	void InitializeFor(class APlayerController* PC);
	void EventCameraTargetChanged(class ACamera_TA* Camera, class AActor* Target);
};


// Class TAGame.CameraSettingsActor_TA
// 0x0070 (0x02D8 - 0x0268)
class ACameraSettingsActor_TA : public AReplicationInfo
{
public:
	float                                              UploadCameraDelay;                                        // 0x0268(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x026C(0x0004) MISSED OFFSET
	class APRI_TA*                                     PRI;                                                      // 0x0270(0x0008) (Net, Transient)
	struct FProfileCameraSettings                      ProfileSettings;                                          // 0x0278(0x001C) (Net, Transient)
	unsigned long                                      bUsingSecondaryCamera : 1;                                // 0x0294(0x0004) (Net, Transient)
	unsigned long                                      bUsingBehindView : 1;                                     // 0x0294(0x0004) (Net, Transient)
	unsigned long                                      bUsingFreecam : 1;                                        // 0x0294(0x0004) (Net, Transient)
	unsigned long                                      bUsingSwivel : 1;                                         // 0x0294(0x0004) (Net, Transient)
	unsigned long                                      bMouseCameraToggleEnabled : 1;                            // 0x0294(0x0004) (Net, Transient)
	unsigned long                                      bHoldMouseCamera : 1;                                     // 0x0294(0x0004) (Net, Transient)
	unsigned long                                      bResetCamera : 1;                                         // 0x0294(0x0004) (Net, Transient)
	unsigned long                                      bDirtySecondaryCamera : 1;                                // 0x0294(0x0004)
	unsigned long                                      bDirtyBehindView : 1;                                     // 0x0294(0x0004)
	unsigned char                                      CameraPitch;                                              // 0x0298(0x0001) (Net, Transient)
	unsigned char                                      CameraYaw;                                                // 0x0299(0x0001) (Net, Transient)
	unsigned char                                      UnknownData01[0x2];                                       // 0x029A(0x0002) MISSED OFFSET
	float                                              LastRotationChangeTime;                                   // 0x029C(0x0004)
	float                                              LastReplicateRotationTime;                                // 0x02A0(0x0004)
	unsigned char                                      UnknownData02[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventCameraChanged__Delegate;                           // 0x02A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x02A4(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSecondaryCameraChanged__Delegate;                  // 0x02C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x02C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraSettingsActor_TA");
		return ptr;
	}


	void ReplicateChangesToServer();
	void ServerSetResetCamera(bool bReset);
	void SetResetCamera(bool bReset);
	void ServerSetHoldMouseCamera(bool bHold);
	void SetHoldMouseCamera(bool bHold);
	void ServerSetCameraRotationReliable(unsigned char Pitch, unsigned char Yaw);
	void ServerSetCameraRotation(unsigned char Pitch, unsigned char Yaw);
	void SetCameraRotation(unsigned char Pitch, unsigned char Yaw);
	void ServerSetUsingFreecam(bool bUsing);
	void SetUsingFreecam(bool bUsing);
	void ServerSetUsingBehindView(bool bUsing);
	void SetUsingBehindView(bool bUsing);
	void ServerSetUsingSecondaryCamera(bool bUsing);
	void SetUsingSecondaryCamera(bool bUsing);
	void ServerSetCameraSettings(const struct FProfileCameraSettings& InSettings);
	void SetProfileSettings(const struct FProfileCameraSettings& InSettings);
	void Destroyed();
	void ServerSetUseSwivel(bool bInUsingSwivel);
	void HandleMouseCameraSwivelChanged();
	void ServerSetHoldMouseCameraEnabled(bool bInHoldMouseCameraEnabled);
	void HandleHoldMouseCameraEnabledChanged();
	void HandleProfileSettings(class UProfileCameraSave_TA* Settings);
	void OnOwnerChanged();
	void ReplicatedEvent(const struct FName& VarName);
	void EventSecondaryCameraChanged(class ACameraSettingsActor_TA* Actor);
	void EventCameraChanged(class ACameraSettingsActor_TA* Actor);
};


// Class TAGame.CameraState_TA
// 0x000C (0x0098 - 0x008C)
class UCameraState_TA : public UCameraState_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	unsigned long                                      bShowCarHUD : 1;                                          // 0x0090(0x0004) (Edit)
	unsigned long                                      bAllowRearCamera : 1;                                     // 0x0090(0x0004) (Const)
	float                                              StateStartTime;                                           // 0x0094(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_TA");
		return ptr;
	}


	void BeginCameraState();
};


// Class TAGame.SeqAct_AttachFX_TA
// 0x0008 (0x0168 - 0x0160)
class USeqAct_AttachFX_TA : public USequenceAction
{
public:
	class UParticleSystemComponent*                    PSC;                                                      // 0x0160(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_AttachFX_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.Camera_Replay_TA
// 0x00C0 (0x0860 - 0x07A0)
class ACamera_Replay_TA : public ACamera_TA
{
public:
	TArray<class UCameraState_X*>                      OverrideStates;                                           // 0x07A0(0x0010) (Edit, NeedCtorLink)
	struct FString                                     FocusActorString;                                         // 0x07B0(0x0010) (Transient, NeedCtorLink)
	struct FName                                       CameraMode;                                               // 0x07C0(0x0008)
	struct FName                                       DefaultCameraMode;                                        // 0x07C8(0x0008) (Edit)
	struct FProfileSliderLimits                        DOFDistanceLimits;                                        // 0x07D0(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        DOFInfLimits;                                             // 0x07DC(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        DOFKernelLimits;                                          // 0x07E8(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        GreenScreenLimits;                                        // 0x07F4(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        BloomScaleLimits;                                         // 0x0800(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        FilterOverlayLimits;                                      // 0x080C(0x000C) (Edit, Const)
	unsigned long                                      bReplayTranslucency : 1;                                  // 0x0818(0x0004) (Edit)
	unsigned long                                      bGreenScreen : 1;                                         // 0x0818(0x0004) (Edit)
	float                                              GreenScreenColorIndex;                                    // 0x081C(0x0004) (Edit)
	class UCameraState_Replay_TA*                      CurrentCameraState;                                       // 0x0820(0x0008) (Transient)
	class UCameraState_X*                              PreviousCameraProxyState;                                 // 0x0828(0x0008) (Transient)
	struct FScriptDelegate                             __EventCameraProxyStateChanged__Delegate;                 // 0x0830(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0830(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __CameraMode__ChangeNotify;                               // 0x0848(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0848(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Camera_Replay_TA");
		return ptr;
	}


	bool __Camera_Replay_TA__InstanceCameraStates_2B4D2CAB48753AC9DF8A9EB6A6762307(class UCameraState_X* S);
	void __CameraMode__ChangeNotifyFunc();
	float ClipToField(float CameraLocationZ);
	void UpdateAspectRatio(struct FCameraOrientation* OutPOV);
	void UpdateFOV();
	void ApplySwivel(struct FCameraOrientation* OutPOV);
	void SetFocusActor(const struct FString& InFocusActorString);
	void SetCameraMode(const struct FName& Mode);
	void UpdateCameraState();
	class UCameraState_X* GetCameraStateByName(const struct FName& ModeName);
	void UpdateCamera(float DeltaTime);
	bool ShouldHaveCameraTrackState();
	void InstanceCameraStates(TArray<class UCameraState_X*>* FilterLocal_1F7E26B84414FAFC06DB0D994CE65D01);
	void EventCameraProxyStateChanged(class UCameraState_Replay_TA* NewCameraState, class UCameraState_X* NewProxyState);
};


// Class TAGame.CameraState_Replay_TA
// 0x002C (0x00C4 - 0x0098)
class UCameraState_Replay_TA : public UCameraState_TA
{
public:
	unsigned long                                      bLocalMovement : 1;                                       // 0x0098(0x0004) (Edit)
	unsigned long                                      bClipToField : 1;                                         // 0x0098(0x0004) (Edit)
	unsigned long                                      bUIHighlightFocus : 1;                                    // 0x0098(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FString                                     FocusActorString;                                         // 0x00A0(0x0010) (Transient, NeedCtorLink)
	class AActor*                                      OldFocusActor;                                            // 0x00B0(0x0008) (Transient)
	struct FVector                                     OldFocusActorLocation;                                    // 0x00B8(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Replay_TA");
		return ptr;
	}


	class AActor* GetFocusActor();
	void UpdateFlyPOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateFocusActorPOV(class AActor* FocusActor, float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
	class UCameraState_X* GetProxyCameraState();
	bool ShouldClipToField();
	bool AllowSwivel();
	bool IsDisabled(const struct FName& CameraMode, const struct FString& InFocusActorString);
};


// Class TAGame.CameraState_Director_TA
// 0x0050 (0x0114 - 0x00C4)
class UCameraState_Director_TA : public UCameraState_Replay_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	class AGameEvent_Soccar_TA*                        GameEvent;                                                // 0x00C8(0x0008) (Edit)
	class UCameraStateSelector_TA*                     IdleSelector;                                             // 0x00D0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UCameraStateSelector_TA*                     CountdownSelector;                                        // 0x00D8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UCameraStateSelector_TA*                     KickoffSelector;                                          // 0x00E0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UCameraStateSelector_TA*                     DefaultSelector;                                          // 0x00E8(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FProfileSliderLimits                        MinTransitionTimeLimits;                                  // 0x00F0(0x000C) (Edit, Const)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	class UCameraStateSelector_TA*                     CurrentSelector;                                          // 0x0100(0x0008) (ExportObject, Component, EditInline)
	class UCameraState_X*                              CurrentState;                                             // 0x0108(0x0008)
	unsigned long                                      bInitialized : 1;                                         // 0x0110(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Director_TA");
		return ptr;
	}


	bool IsDisabled(const struct FName& CameraMode, const struct FString& InFocusActorString);
	bool ShouldClipToField();
	void UpdateSelector();
	void SetSelector(class UCameraStateSelector_TA* InSelector);
	class UCameraState_X* GetProxyCameraState();
	void InitCameraState(class UCameraState_X* InState);
	void InitSelector(class UCameraStateSelector_TA* InSelector);
	void InitSelectors();
	void InitDirector();
};


// Class TAGame.CameraState_CarRef_TA
// 0x0010 (0x00A8 - 0x0098)
class UCameraState_CarRef_TA : public UCameraState_TA
{
public:
	class ACar_TA*                                     Car;                                                      // 0x0098(0x0008) (Transient)
	class ACameraSettingsActor_TA*                     CameraSettings;                                           // 0x00A0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_CarRef_TA");
		return ptr;
	}


	struct FProfileCameraSettings GetProfileCameraSettings();
	struct FRotator GetCarRotation();
	struct FVector GetCarLocation();
	bool IsOnGround();
	bool ShouldExecute();
	float TimeSinceSpawn();
	bool UpdateCarRef();
};


// Class TAGame.CameraState_Car_TA
// 0x0118 (0x01C0 - 0x00A8)
class UCameraState_Car_TA : public UCameraState_CarRef_TA
{
public:
	float                                              InterpToAirRate;                                          // 0x00A8(0x0004) (Edit)
	float                                              InterpToGroundRate;                                       // 0x00AC(0x0004) (Edit)
	struct UCameraState_Car_TA_FInterpVector           FocusInterp;                                              // 0x00B0(0x0028) (Edit)
	struct UCameraState_Car_TA_FInterpVector           FocusOffsetInterp;                                        // 0x00D8(0x0028) (Edit)
	struct UCameraState_Car_TA_FInterpVector           DistanceInterp;                                           // 0x0100(0x0028) (Edit)
	float                                              GroundRotationInterpRate;                                 // 0x0128(0x0004) (Edit)
	float                                              GroundRotationInterpRateWall;                             // 0x012C(0x0004) (Edit)
	float                                              AirVelocityInfluence;                                     // 0x0130(0x0004) (Edit)
	float                                              AirVelocityInfluenceMaxSpeed;                             // 0x0134(0x0004) (Edit)
	float                                              DistanceSpeedScale;                                       // 0x0138(0x0004) (Edit)
	float                                              DistanceOffsetMin;                                        // 0x013C(0x0004) (Edit)
	float                                              MaxSpeedFOV;                                              // 0x0140(0x0004) (Edit)
	float                                              FOVInterpSpeed;                                           // 0x0144(0x0004) (Edit)
	float                                              SupersonicFOV;                                            // 0x0148(0x0004) (Edit)
	float                                              SupersonicFOVInterpSpeed;                                 // 0x014C(0x0004) (Edit)
	float                                              BouncyChassisScale;                                       // 0x0150(0x0004) (Edit)
	float                                              RollScale;                                                // 0x0154(0x0004) (Edit)
	float                                              GroundNormalInterpRate;                                   // 0x0158(0x0004) (Edit)
	float                                              AirGroundBlend;                                           // 0x015C(0x0004) (Transient)
	struct FCameraOrientation                          ViewOffset;                                               // 0x0160(0x002C) (Transient)
	unsigned long                                      bFirstExecution : 1;                                      // 0x018C(0x0004) (Transient)
	unsigned long                                      bFullRotationJustChanged : 1;                             // 0x018C(0x0004) (Transient)
	unsigned long                                      bFullRotationActive : 1;                                  // 0x018C(0x0004) (Transient)
	unsigned long                                      bOnGround : 1;                                            // 0x018C(0x0004) (Transient)
	unsigned long                                      bLastHoldMouseCamera : 1;                                 // 0x018C(0x0004)
	struct FVector                                     GroundNormal;                                             // 0x0190(0x000C) (Transient)
	float                                              MouseCameraDeadzone;                                      // 0x019C(0x0004)
	float                                              MouseCameraLockWindowInDegrees;                           // 0x01A0(0x0004)
	int                                                PitchMin;                                                 // 0x01A4(0x0004)
	int                                                PitchMax;                                                 // 0x01A8(0x0004)
	float                                              MouseCameraLockTimeWindow;                                // 0x01AC(0x0004)
	float                                              TimeOfLastCameraInput;                                    // 0x01B0(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01B4(0x0004) MISSED OFFSET
	class UCameraConfig_TA*                            Config;                                                   // 0x01B8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Car_TA");
		return ptr;
	}


	void OverrideBlendParams(struct FViewTargetTransitionParams* Params);
	struct FViewTargetTransitionParams GetEndBlendParams(class UCameraState_X* NewState);
	void UpdateInterpVector(const struct FVector& NewValue, float DeltaTime, struct UCameraState_Car_TA_FInterpVector* Interp);
	void UpdateRotationModifiers(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateFOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateDistance(float DeltaTime, struct FCameraOrientation* OutPOV);
	void ScalePitch(float SpeedScale, struct FRotator* OutRotation);
	void UpdateAirPOV(float DeltaTime, struct FCameraOrientation* OutPOV, struct FRotator* OutRotatorNoBlend);
	void UpdateGroundPOV(float DeltaTime, struct FCameraOrientation* OutPOV, struct FRotator* OutRotatorNoBlend);
	void UpdateAirAndGroundCamera(float DeltaTime, struct FCameraOrientation* OutPOV, struct FRotator* OutRotatorNoBlend);
	void UpdateFocus(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateFocusWorldOffset(float DeltaTime);
	void UpdateAirGroundBlend(float DeltaTime);
	void UpdateViewOffset();
	bool ShouldSetFullRotationToInactive(float CameraPitch, float CameraYaw, const struct FRotator& RotatorNoBlend, const struct FRotator& RotatorPreUpdate);
	void UpdateSwivelRotationAndOffset(float DeltaTime, struct FCameraOrientation* OutPOV, struct FRotator* RotOffset);
	void UpdateValidPOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void HandleSecondaryCameraChanged(class ACameraSettingsActor_TA* Actor);
	void HandleStartNewRound(class AGameEvent_Soccar_TA* GameEvent);
	void ResetView();
	void BeginCameraState();
};


// Class TAGame.CameraConfig_TA
// 0x0004 (0x007C - 0x0078)
class UCameraConfig_TA : public UOnlineConfig_X
{
public:
	unsigned long                                      bFramerateIndependentInterp : 1;                          // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraConfig_TA");
		return ptr;
	}

};


// Class TAGame.CameraState_BallCam_TA
// 0x0080 (0x0240 - 0x01C0)
class UCameraState_BallCam_TA : public UCameraState_Car_TA
{
public:
	float                                              RotationRate;                                             // 0x01C0(0x0004) (Edit)
	float                                              PitchScale;                                               // 0x01C4(0x0004) (Edit)
	float                                              PitchFocusZFactor;                                        // 0x01C8(0x0004) (Edit)
	float                                              PitchExtentMin;                                           // 0x01CC(0x0004) (Edit)
	float                                              PitchExtentMax;                                           // 0x01D0(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	class UBallCamTarget_TA*                           Target;                                                   // 0x01D8(0x0008) (ExportObject, Transient, Component, EditInline)
	struct FCameraOrientation                          BasePOV;                                                  // 0x01E0(0x002C) (Transient)
	struct FVector                                     OldTargetLocation;                                        // 0x020C(0x000C) (Transient)
	unsigned long                                      bWasReverseCam : 1;                                       // 0x0218(0x0004) (Transient)
	unsigned long                                      bActive : 1;                                              // 0x0218(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x021C(0x0004) MISSED OFFSET
	TArray<struct FPlaneSelectData>                    PlaneSelectSettings;                                      // 0x0220(0x0010) (NeedCtorLink)
	TArray<struct FAngleSelectData>                    AngleSelectSettings;                                      // 0x0230(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_BallCam_TA");
		return ptr;
	}


	void UpdateFocus(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateFocusWorldOffset(float DeltaTime);
	void UpdateAirAndGroundCamera(float DeltaTime, struct FCameraOrientation* OutPOV, struct FRotator* OutRotatorNoBlend);
	void UpdateRotationModifiers(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateValidPOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	bool ShouldExecute();
	bool TargetIsWelded();
	bool IsValidTarget(class UBallCamTarget_TA* InTarget);
	bool RotatedPlaneContainsPoint(const struct FVector& Origin, const struct FRotator& PlaneRotation, float YExtent, float ZExtent, const struct FVector& Point, float* Out_DistanceToOrgin);
	class UBallCamTarget_TA* FindClosestTargetInRotatedPlane(float XExtent, float YExtent, float MaxRadius);
	class UBallCamTarget_TA* FindClosestTargetInDirection(const struct FRotator& StartRotation, int YDirection, float MaxRadius);
	class UBallCamTarget_TA* FindClosestTargetByAngle(float MinDotAngle, float MaxRadius);
	class UBallCamTarget_TA* GetBestBallTarget();
	bool ChooseTarget();
	void SetTarget(class UBallCamTarget_TA* NewTarget);
	void HandleRemoveTarget(class UObject* NewTarget);
	void HandleAddTarget(class UBallCamTarget_TA* NewTarget);
	void TargetSelect(class APlayerController_TA* PC, int Direction);
	void EndCameraState();
	void BeginCameraState();
	void Init(class ACamera_X* InCamera);
};


// Class TAGame.CarPreviewActor_TA
// 0x01D0 (0x0438 - 0x0268)
class ACarPreviewActor_TA : public AActor
{
public:
	int                                                ControllerId;                                             // 0x0268(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x026C(0x0004) MISSED OFFSET
	class UProductLoader_TA*                           ProductLoader;                                            // 0x0270(0x0008) (Edit, ExportObject, Component, EditInline)
	class UCarMeshComponent_TA*                        CarMesh;                                                  // 0x0278(0x0008) (Edit, ExportObject, Component, EditInline)
	class ULightEnvironmentComponent*                  LightEnvironment;                                         // 0x0280(0x0008) (Edit, ExportObject, Component, EditInline)
	class USilhouetteComponent*                        CarMeshSilhouette;                                        // 0x0288(0x0008) (Edit, ExportObject, Component, EditInline)
	TArray<class UCarPreviewAnim_TA*>                  AttachmentPreviewAnims;                                   // 0x0290(0x0010) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	TArray<class UCarPreviewAnim_TA*>                  WheelAnims;                                               // 0x02A0(0x0010) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	class UCarPreviewAnim_TA*                          BodyAnim;                                                 // 0x02B0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UCarPreviewAnim_TA*                          EngineAudioAnim;                                          // 0x02B8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UCarPreviewAnim_TA*                          EngineAudioAnimInstance;                                  // 0x02C0(0x0008) (ExportObject, Component, EditInline)
	float                                              SupersonicFakeSpeed;                                      // 0x02C8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02CC(0x0004) MISSED OFFSET
	class ATurnTableActor_TA*                          TurntableActor;                                           // 0x02D0(0x0008) (Edit)
	struct U_Types_TA_FLoadoutData                     Loadout;                                                  // 0x02D8(0x0040) (Transient, NeedCtorLink)
	struct U_Types_TA_FLoadoutData                     OldLoadout;                                               // 0x0318(0x0040) (Transient, NeedCtorLink)
	TArray<class UProductAsset_TA*>                    PreviewProducts;                                          // 0x0358(0x0010) (Transient, NeedCtorLink)
	class AFXActor_Boost_TA*                           BoostFX;                                                  // 0x0368(0x0008) (Transient)
	class UProductSlot_TA*                             PreviewSlot;                                              // 0x0370(0x0008) (Transient)
	class ATeam_TA*                                    TeamArchetype;                                            // 0x0378(0x0008) (Transient)
	struct FString                                     PlayerName;                                               // 0x0380(0x0010) (NeedCtorLink)
	class AFXActor_X*                                  BodyFX;                                                   // 0x0390(0x0008) (Transient)
	class UProductAsset_Boost_TA*                      BoostAsset;                                               // 0x0398(0x0008) (Transient)
	class UProductAsset_SupersonicTrail_TA*            SupersonicAsset;                                          // 0x03A0(0x0008) (Transient)
	unsigned long                                      bLockLoadout : 1;                                         // 0x03A8(0x0004) (Transient)
	unsigned long                                      bSpinWheelsFromBoost : 1;                                 // 0x03A8(0x0004) (Transient)
	unsigned long                                      bAddToCarPreviewList : 1;                                 // 0x03A8(0x0004)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03AC(0x0004) MISSED OFFSET
	TArray<class AFXActor_TA*>                         SupersonicFX;                                             // 0x03B0(0x0010) (Transient, NeedCtorLink)
	class UProductAsset_EngineAudio_TA*                EngineAudioAsset;                                         // 0x03C0(0x0008) (Transient)
	class UEngineAudioPreviewBase_TA*                  EngineAudioPreview;                                       // 0x03C8(0x0008) (Transient)
	class UMusicStingersPreview_TA*                    MusicStingersPreview;                                     // 0x03D0(0x0008) (Transient)
	int                                                PreviewTeam;                                              // 0x03D8(0x0004) (Transient)
	int                                                LinkedControllerId;                                       // 0x03DC(0x0004) (Edit)
	class AFXActor_X*                                  RootFXActor;                                              // 0x03E0(0x0008)
	class UAkParamGroup*                               Ak;                                                       // 0x03E8(0x0008) (ExportObject, Component, EditInline)
	struct FScriptDelegate                             __EventInitializeComponents__Delegate;                    // 0x03F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x03F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __ProductApplicatorDelegate__Delegate;                    // 0x0408(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0408(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventCarSetupFinished__Delegate;                        // 0x0420(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0420(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarPreviewActor_TA");
		return ptr;
	}


	void __CarPreviewActor_TA__PostBeginPlay_91CBE7254F0617FC4BD636B21E189A8B(class UCarMeshComponentBase_TA* _);
	void AddSilhouetteParents();
	void RefreshSilhouette();
	void ShowSilhouette(bool bShow);
	void RefreshLoadout(class UProfile_TA* Profile);
	int GetTeamIndex(class UProfile_TA* Profile);
	void UpdateTeamFXState();
	void SetTeamIndex(class UProfile_TA* Profile, int TeamIndex);
	class ULoadoutSet_TA* GetLoadoutSet(class UProfile_TA* Profile);
	void SetLoadoutSet(class ULoadoutSet_TA* InLoadoutSet, int InTeamIndex);
	void EnableTick(bool bEnable);
	void DestroyTurnTableActor();
	void ResetColors();
	void SetLockLoadout(bool bInLock);
	void BuildOnlineLoadout(struct U_Types_TA_FLoadoutData* InLoadout, struct FClientLoadoutOnlineData* OnlineLoadout, TArray<int>* OutOnlineLoadout);
	void UpdateParticlesFakeVelocity();
	struct FRotator GetSMRotation();
	void SetTurnTableInput(float YawInput, bool bGamepad);
	void ApplyTurntableBase();
	void SetTurnTableActor(class ATurnTableActor_TA* InTurnTableActor, const struct FRotator& StartRotation);
	void FindTurnTableActor();
	void OnOwnerChanged();
	void Tick(float DeltaTime);
	void SetPreviewHidden(bool bHide);
	void SetPlayerName(const struct FString& InPlayerName);
	void AnimateBody();
	void AnimateWheels();
	void AnimateAttachment(class UProductSlot_TA* Slot, class UPrimitiveComponent* AttachmentComponent, const struct FName& CustomAnimName);
	void AnimateAntenna(class UAntennaComponent_TA* AntennaArchetype);
	class UPrimitiveComponent* FindAttachmentComponent(class UProductSlot_TA* Slot, struct FProductAttachment* AttachStruct);
	void AnimateSlotChange(class UProductAsset_TA* Product);
	class UActorComponent* FindAttachmentByArchetype(class UActorComponent* InArchetype);
	class UStaticMeshComponent* FindSMAttachmentByAsset(class UStaticMesh* Mesh);
	class USkeletalMeshComponent* FindSKAttachmentByAsset(class USkeletalMesh* Mesh);
	void UpdateTranslations();
	void ClearBodyFX();
	void ClearBoostFX();
	void ClearComponents();
	void InitMusicStingers();
	void InitSupersonicFX();
	void InitEngineAudioFX();
	void InitBoostFX();
	void InitBodyFX();
	void InitRootFXActor();
	void InitComponents();
	void HandleAllProductsLoaded(class UProductLoader_TA* Loader);
	void SetBoostGlow(float Glow);
	void UpdateBoostGlow();
	void DeactivatePreviewSlot();
	void ActivatePreviewSlot();
	void SetPreviewSlot(class UProductSlot_TA* InSlot);
	bool ChangeCarPart(int SlotIndex, int ProductID, int TeamPaintIndex);
	void STATIC_ForceGarbageCollection();
	void ForceSetLoadout(bool bBuildOnlineLoadout, struct U_Types_TA_FLoadoutData* InLoadout);
	void SetLoadout(struct U_Types_TA_FLoadoutData* InLoadout);
	void Destroyed();
	void PostBeginPlay();
	void EventCarSetupFinished(class ACarPreviewActor_TA* PreviewActor);
	void ProductApplicatorDelegate(class UProductAsset_TA* Asset);
	void EventInitializeComponents(class ACarPreviewActor_TA* PreviewActor);
};


// Class TAGame.CameraState_PremiumGarage_TA
// 0x0078 (0x0178 - 0x0100)
class UCameraState_PremiumGarage_TA : public UCameraState_CarPreview_TA
{
public:
	struct FViewTargetTransitionParams                 BetweenPremiumCameraBlend;                                // 0x0100(0x0010)
	float                                              FadeInFromBlackTime;                                      // 0x0110(0x0004)
	float                                              FadeToBlackTime;                                          // 0x0114(0x0004)
	float                                              PitchDeadzone;                                            // 0x0118(0x0004)
	float                                              PitchSensitivity;                                         // 0x011C(0x0004)
	struct FInterpCurveFloat                           PitchAutocorrectCurve;                                    // 0x0120(0x0018) (NeedCtorLink)
	float                                              PitchMaxSpeed;                                            // 0x0138(0x0004)
	float                                              PitchBlendbackModifier;                                   // 0x013C(0x0004)
	float                                              PitchBlendbackMin;                                        // 0x0140(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           CameraReturnBlendCurve;                                   // 0x0148(0x0018) (NeedCtorLink)
	float                                              LastAdjustTime;                                           // 0x0160(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0164(0x0004) MISSED OFFSET
	class ATurnTableActor_TA*                          TurntableActor;                                           // 0x0168(0x0008) (Transient)
	class UGFxShell_TA*                                Shell;                                                    // 0x0170(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_PremiumGarage_TA");
		return ptr;
	}


	void UpdateAllViewTargetRotation(float DeltaTime);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void AdjustOutPOVCameraRotation(const struct FRotator& AddedRotator, struct FCameraOrientation* OutPOV);
	float GetCameraCurveSpeed();
	void ManuallyAdjustCar(bool bEnable);
	void BeginCameraState();
	struct FViewTargetTransitionParams GetEndBlendParams(class UCameraState_X* NewState);
	void GetActorOrientation(struct FCameraOrientation* OutPOV, float* OutSideOffset);
	void GetAccumulatedOrientation(struct FVector* out_Location, struct FRotator* out_Rotation, int* NumPreviewActors);
};


// Class TAGame.GameInfo_GFxMenu_TA
// 0x0078 (0x0550 - 0x04D8)
class AGameInfo_GFxMenu_TA : public AGameInfoBase_TA
{
public:
	class UCarPreviewSet_TA*                           CarPreviewSet;                                            // 0x04D8(0x0008) (Transient)
	class UPremiumGaragePreviewSet_TA*                 PremiumPreviewSet;                                        // 0x04E0(0x0008) (Transient)
	class UExplosionPreviewer_TA*                      ExplosionPreviewer;                                       // 0x04E8(0x0008) (ExportObject, Transient, Component, EditInline)
	class UMenuSequencer_TA*                           MenuSequencer;                                            // 0x04F0(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FString                                     UIStateNames[0x2];                                        // 0x04F8(0x0010) (Const, NeedCtorLink)
	struct FName                                       UISoundState_MainMenu;                                    // 0x0518(0x0008) (Const)
	struct FScriptDelegate                             __EventIntroCarsInPosition__Delegate;                     // 0x0520(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0520(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventUIStateChanged__Delegate;                          // 0x0538(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0538(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_GFxMenu_TA");
		return ptr;
	}


	bool AllowPausing(class APlayerController* PC);
	bool UIStateIsActive(class UGFxShell_TA* Shell, TEnumAsByte<EUIMenuState> UIState);
	void TriggerUIStateChangeEvents(TEnumAsByte<EUIMenuState> UIState);
	void SetUIState(class ULocalPlayer_TA* Player, TEnumAsByte<EUIMenuState> UIState);
	void HandlePrimaryPlayerIdChanged(class UOnlineGameAccount_X* Account, const struct FUniqueNetId& PlayerID);
	void HandlePrimaryPlayerSet(class APlayerController_Menu_TA* PC);
	bool ShouldSkipTitleScreen(class ULocalPlayer_TA* LocalPlayer);
	void InitShell(class APlayerController_Menu_TA* PC);
	void GenericPlayerInitialization(class AController* C);
	bool CanStartMatch();
	void RestartPlayer(class AController* NewPlayer);
	void Destroyed(TArray<class ULocalPlayer_X*>* OfTypeLocal_376CB31640871263ACC0C0A415D9F35B, TArray<class UGFxShell_X*>* MapLocal_DCD54FB34F0E8F454D2649814AF96DDE);
	void InitMenuSequencer();
	void InitPreviews();
	void PreBeginPlay();
	void EventUIStateChanged(class AGameInfo_GFxMenu_TA* GameInfoMenu, TEnumAsByte<EUIMenuState> UIState);
	void EventIntroCarsInPosition(class AGameInfo_GFxMenu_TA* GameInfoMenu);
};


// Class TAGame.CarPreviewSet_TA
// 0x0068 (0x00C8 - 0x0060)
class UCarPreviewSet_TA : public UObject
{
public:
	TArray<class ACarPreviewActor_TA*>                 CarPreviewActors;                                         // 0x0060(0x0010) (Transient, NeedCtorLink)
	class UOnlineGameParty_TA*                         OnlineParty;                                              // 0x0070(0x0008) (Transient)
	unsigned long                                      bRemotePlayersHidden : 1;                                 // 0x0078(0x0004) (Transient)
	int                                                MaxCars;                                                  // 0x007C(0x0004) (Const)
	struct FScriptDelegate                             __EventPreviewActorsChanged__Delegate;                    // 0x0080(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPreviewActorSetProfile__Delegate;                  // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0098(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSwapFinished__Delegate;                            // 0x00B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarPreviewSet_TA");
		return ptr;
	}


	bool SetRemotePlayersHidden(bool bHidden);
	void HandlePrimaryPlayerSet(class APlayerController_Menu_TA* PC);
	void OnPreviewActorsChanged();
	void HandlePartyMemberLoadoutRemoved();
	void HandlePartyMemberLoadoutChange();
	void HandleReceiveController(class UPlayer* PlayerRef);
	void HandlePlayerJoin(class ULocalPlayer* P);
	void UpdatePreview(int Index);
	void UpdatePreviewForPlayer(class ULocalPlayer* P);
	class ACarPreviewActor_TA* GetMainCarPreview(class ULocalPlayer* P);
	class ACarPreviewActor_TA* GetPlayerCarPreviewActor(class ULocalPlayer* P);
	void UpdateAllPreviews();
	void InitPreviewActors();
	void HandleCarPreviewActorAdded(class UGameShare_TA* GameShare, class ACarPreviewActor_TA* PreviewActor);
	void Cleanup();
	void Init();
	void EventSwapFinished();
	void EventPreviewActorSetProfile(class ACarPreviewActor_TA* Car);
	void EventPreviewActorsChanged(class UCarPreviewSet_TA* G);
};


// Class TAGame.CameraState_Demolished_TA
// 0x002C (0x00C4 - 0x0098)
class UCameraState_Demolished_TA : public UCameraState_TA
{
public:
	float                                              RotationInterpRate;                                       // 0x0098(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	class APawn*                                       DemolishedPawn;                                           // 0x00A0(0x0008) (Transient)
	float                                              StateTime;                                                // 0x00A8(0x0004) (Transient)
	float                                              InitialFOV;                                               // 0x00AC(0x0004) (Edit)
	float                                              FOVBlendTime;                                             // 0x00B0(0x0004) (Edit)
	unsigned long                                      bInterp : 1;                                              // 0x00B4(0x0004) (Transient)
	float                                              MaxZoomInFOV;                                             // 0x00B8(0x0004) (Edit)
	float                                              MaxFOVBlendDistance;                                      // 0x00BC(0x0004) (Edit)
	float                                              Distance;                                                 // 0x00C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Demolished_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void EndCameraState();
	void BeginCameraState();
	bool ShouldKeepExecuting();
	bool ShouldExecute();
	struct FViewTargetTransitionParams GetEndBlendParams(class UCameraState_X* NewState);
};


// Class TAGame.CameraState_Freecam_TA
// 0x0084 (0x012C - 0x00A8)
class UCameraState_Freecam_TA : public UCameraState_CarRef_TA
{
public:
	struct FCameraOrientation                          ViewOffset_Near;                                          // 0x00A8(0x002C) (Edit)
	struct FCameraOrientation                          ViewOffset_Far;                                           // 0x00D4(0x002C) (Edit)
	struct FCameraOrientation                          ViewOffset;                                               // 0x0100(0x002C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Freecam_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	bool ShouldExecute();
};


// Class TAGame.CameraState_LiveReplay_TA
// 0x00A0 (0x012C - 0x008C)
class UCameraState_LiveReplay_TA : public UCameraState_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	struct FVector                                     LocationOffset;                                           // 0x0090(0x000C) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           FocusSpeedOverTime;                                       // 0x00A0(0x0018) (Edit, NeedCtorLink)
	float                                              CarBallFocusBlendDistance;                                // 0x00B8(0x0004) (Edit)
	float                                              Distance;                                                 // 0x00BC(0x0004) (Edit)
	float                                              FOV;                                                      // 0x00C0(0x0004) (Edit)
	float                                              SlomoInterpTime;                                          // 0x00C4(0x0004) (Edit)
	float                                              SlomoDistance;                                            // 0x00C8(0x0004) (Edit)
	float                                              SlomoFOV;                                                 // 0x00CC(0x0004) (Edit)
	struct FVector                                     VelocityPrediction;                                       // 0x00D0(0x000C) (Edit)
	float                                              InterpToFieldCenterRate;                                  // 0x00DC(0x0004) (Edit)
	float                                              InterpToFieldCenterOffset;                                // 0x00E0(0x0004) (Edit)
	float                                              ExplosionFocusDelay;                                      // 0x00E4(0x0004) (Edit)
	float                                              ScorerOffsetInterpSpeed;                                  // 0x00E8(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	class AGameEvent_Soccar_TA*                        SoccarGame;                                               // 0x00F0(0x0008) (Transient)
	class ACar_TA*                                     FocusCar;                                                 // 0x00F8(0x0008) (Transient)
	class AActor*                                      FocusBall;                                                // 0x0100(0x0008) (Transient)
	unsigned long                                      bHasDoneFirstUpdate : 1;                                  // 0x0108(0x0004) (Transient)
	unsigned long                                      bCanUpdate : 1;                                           // 0x0108(0x0004) (Transient)
	unsigned long                                      bSetGoalScorerFocusOffset : 1;                            // 0x0108(0x0004) (Transient)
	float                                              LastFocusChangeTime;                                      // 0x010C(0x0004) (Transient)
	float                                              SlomoTime;                                                // 0x0110(0x0004) (Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	class UGoal_TA*                                    Goal;                                                     // 0x0118(0x0008) (ExportObject, Transient, Component, EditInline)
	struct FVector                                     GoalScorerFocusOffset;                                    // 0x0120(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_LiveReplay_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	struct FVector GetCameraBaseLocation(const struct FVector& CameraFocus);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void Tick(float DeltaTime);
	void UpdateSlomo(float DeltaTime);
	void EndCameraState();
	void BeginCameraState();
	struct FViewTargetTransitionParams GetEndBlendParams(class UCameraState_X* NewState);
	bool ShouldExecute();
};


// Class TAGame.CameraState_ReplayAutoCam_TA
// 0x020C (0x02D0 - 0x00C4)
class UCameraState_ReplayAutoCam_TA : public UCameraState_Replay_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	float                                              FOVInterpSpeed;                                           // 0x00C8(0x0004)
	float                                              StartViewFocusTime;                                       // 0x00CC(0x0004)
	float                                              FocusPitchInterpSpeed;                                    // 0x00D0(0x0004)
	float                                              FocusYawInterpSpeed;                                      // 0x00D4(0x0004)
	float                                              AerialFOV;                                                // 0x00D8(0x0004)
	float                                              CountDownFOV;                                             // 0x00DC(0x0004)
	float                                              CountDownPanSpeed;                                        // 0x00E0(0x0004)
	float                                              CountDownRotateSpeed;                                     // 0x00E4(0x0004)
	float                                              CountDownPanBlendAmount;                                  // 0x00E8(0x0004)
	float                                              CountDownFocusActorStartTime;                             // 0x00EC(0x0004)
	float                                              LocationBlendSpeed;                                       // 0x00F0(0x0004)
	float                                              BallAerialZStartTime;                                     // 0x00F4(0x0004)
	float                                              MinBallAerialZHeight;                                     // 0x00F8(0x0004)
	float                                              MinPlayerAerialZHeight;                                   // 0x00FC(0x0004)
	float                                              MinFocusActorViewTime;                                    // 0x0100(0x0004)
	float                                              BallFloorFocusPercent;                                    // 0x0104(0x0004)
	float                                              LocationAngleInterpSpeed;                                 // 0x0108(0x0004)
	float                                              LastLocationAngleUpdateTime;                              // 0x010C(0x0004)
	float                                              MinStartRadiusForPlayerAerial;                            // 0x0110(0x0004)
	float                                              MaxStartRadiusForPlayerAerial;                            // 0x0114(0x0004)
	float                                              DesiredCameraDistance;                                    // 0x0118(0x0004)
	float                                              ResetToMapDefaultTime;                                    // 0x011C(0x0004)
	float                                              MaxWaitTimeTillBallHit;                                   // 0x0120(0x0004)
	float                                              FocusActorZViewOffset;                                    // 0x0124(0x0004)
	float                                              FloorTraceDistance;                                       // 0x0128(0x0004)
	float                                              BackAwayFromWallDistance;                                 // 0x012C(0x0004)
	float                                              NoCarsNearBallDistance;                                   // 0x0130(0x0004)
	float                                              MinPlayerCameraFloorHeight;                               // 0x0134(0x0004)
	float                                              FocusPointInterpSpeed;                                    // 0x0138(0x0004)
	float                                              MinMaxPitch;                                              // 0x013C(0x0004)
	float                                              LastDesiredLocationBlendSpeed;                            // 0x0140(0x0004)
	float                                              AdditionalFocusZ;                                         // 0x0144(0x0004)
	float                                              TimeSinceIgnoredGoalFocusExtent;                          // 0x0148(0x0004)
	float                                              LastTimeAPlayerWasNearBall;                               // 0x014C(0x0004)
	float                                              AdditionalBackAwayFromBallSpeed;                          // 0x0150(0x0004)
	float                                              GoalScorerFocusDistance;                                  // 0x0154(0x0004)
	float                                              MapResetStartDistance;                                    // 0x0158(0x0004)
	float                                              MapResetStartHeight;                                      // 0x015C(0x0004)
	float                                              GoalScoredDistance;                                       // 0x0160(0x0004)
	float                                              MaxGoalYZoomOutDistance;                                  // 0x0164(0x0004)
	float                                              MaxGoalXZoomOutDistance;                                  // 0x0168(0x0004)
	float                                              MinCameraDistanceToBall;                                  // 0x016C(0x0004)
	unsigned long                                      bSnapFOV : 1;                                             // 0x0170(0x0004)
	unsigned long                                      bSnapToFocus : 1;                                         // 0x0170(0x0004)
	unsigned long                                      bBallHasBeenHit : 1;                                      // 0x0170(0x0004)
	unsigned long                                      bHasGoalScorerFocus : 1;                                  // 0x0170(0x0004)
	unsigned long                                      bHitWallLastFrame : 1;                                    // 0x0170(0x0004)
	struct FVector                                     BallFloorLocation;                                        // 0x0174(0x000C)
	struct FVector                                     BallFloorNormal;                                          // 0x0180(0x000C)
	struct FVector                                     LastCarFocusOffset;                                       // 0x018C(0x000C)
	struct FVector                                     CountDownPanDirection;                                    // 0x0198(0x000C)
	struct FVector                                     CountDownPanStartOffset;                                  // 0x01A4(0x000C)
	struct FVector                                     CountDownRotateOffset;                                    // 0x01B0(0x000C)
	struct FVector                                     LastFocusOffset;                                          // 0x01BC(0x000C)
	struct FVector                                     LastFocusLocation;                                        // 0x01C8(0x000C)
	struct FVector                                     LastDesiredLocation;                                      // 0x01D4(0x000C)
	struct FRotator                                    LocationAngle;                                            // 0x01E0(0x000C)
	struct FRotator                                    DesiredLocationAngle;                                     // 0x01EC(0x000C)
	struct FRotator                                    DesiredRotation;                                          // 0x01F8(0x000C)
	struct FRotator                                    MapResetStartRotation;                                    // 0x0204(0x000C)
	class APRI_TA*                                     FocusActor;                                               // 0x0210(0x0008)
	class APRI_TA*                                     LastScorer;                                               // 0x0218(0x0008)
	TArray<class APRI_TA*>                             AerialPRIs;                                               // 0x0220(0x0010) (NeedCtorLink)
	TArray<class APRI_TA*>                             CountDownPRIs;                                            // 0x0230(0x0010) (NeedCtorLink)
	class UGoal_TA*                                    GoalFocus;                                                // 0x0240(0x0008) (ExportObject, Component, EditInline)
	TEnumAsByte<ECountDownFocus>                       CountDownFocusType;                                       // 0x0248(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0249(0x0007) MISSED OFFSET
	class ABall_TA*                                    Ball;                                                     // 0x0250(0x0008) (Transient)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                               // 0x0258(0x0008) (Transient)
	class UCameraState_X*                              ReplayCameraState;                                        // 0x0260(0x0008)
	struct FProfileSliderLimits                        CameraDistanceLimits;                                     // 0x0268(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        CameraZLimits;                                            // 0x0274(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        CameraMoveSpeedLimits;                                    // 0x0280(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        CameraMoveSpeedZLimits;                                   // 0x028C(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        PlayerCameraDistanceLimits;                               // 0x0298(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        RotateSpeedLimits;                                        // 0x02A4(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        PlayerFocusBlendSpeedLimits;                              // 0x02B0(0x000C) (Edit, Const)
	struct FProfileSliderLimits                        AerialPredictionLimits;                                   // 0x02BC(0x000C) (Edit, Const)
	class UProfileCameraSave_TA*                       CameraSave;                                               // 0x02C8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_ReplayAutoCam_TA");
		return ptr;
	}


	void __CameraState_ReplayAutoCam_TA__Init_F41FA0E848A77F11FB998DBEE0AAAF3B(class UProfileCameraSave_TA* SO);
	void DrawRotatedBox(const struct FVector& Origin, const struct FRotator& BoxRotation, const struct FVector& Extent, const struct FColor& C, bool bPersistent);
	bool RotatedBoxContainsPoint(const struct FVector& Origin, const struct FRotator& BoxRotation, const struct FVector& Extent, const struct FVector& Point);
	struct FVector FlattenPointToPlane(const struct FVector& Center, const struct FRotator& Rot, const struct FVector& Point);
	class AGameEvent_Soccar_TA* GetSoccarGame();
	class UCameraState_X* GetProxyCameraState();
	bool LookingAtWall(const struct FRotator& CameraRotation);
	void HandleBallExploded(class ABall_TA* InBall);
	void ResetCameraToMapDefault();
	float GetDefaultMoveSpeed();
	bool WasJustIgnoringGoalFocusExtent(float MinTimeSince);
	float ModifyByAerialMultiplier(float Min, float Max);
	float GetAerialPredictionMultiplier();
	bool GetFocusOnGoals();
	bool GetCutToAerialCam();
	bool BallIsAboveMinAerialZ();
	bool GetAllowFocusActor();
	bool GetUseReplayCamera();
	float GetFocusActorBlendSpeed();
	float GetDesiredAerialActorDistance();
	float GetDesiredRotateSpeed();
	float GetDesiredMoveSpeedZ();
	float GetDesiredMoveSpeed();
	float GetDesiredCameraZ();
	bool BallHasBeenHit();
	void UpdateDesiredCameraDistance(float DeltaTime);
	float GetDefaultCameraDistance();
	float GetDesiredCameraDistance();
	float GetDesiredCameraFOV();
	void HandleGameStateChanged(class AGameEvent_TA* GameEvent);
	bool ChooseCountDownFocusActor();
	void UpdateCountDownTextureStreaming();
	class APRI_TA* GetNextEligibleCountDownFocusActor();
	bool IsCountDownFocusEligible(class APRI_TA* PRI);
	void ResetCountDownPRIs();
	void HandleFirstBallHit(class AGameEvent_Soccar_TA* GameEvent);
	bool InGameState(const struct FName& StateName);
	class APRI_TA* PredictFirstPlayerToBall();
	bool APlayerIsMovingTowardCenterWithinRadius(const struct FVector& Center, float Radius, float MinDotAngleTowardsBall);
	bool MovingTowardsBall(class APRI_TA* PRI, float MaxDotAngle);
	bool FlyingTowardsBall(class APRI_TA* PRI, float MinZFlyHeight, float MinAcceptableDistanceToBall);
	bool AddToAerialPRIs(class APRI_TA* PRI);
	void ResetFocusActorSettings();
	class APRI_TA* UpdateAerialPRIs(float PickWaitTime);
	bool SetFocusActor(class APRI_TA* PRI);
	bool UpdateFocusActor_PostGoal(const struct FVector& FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV);
	void HandlePlayerScored(class AGameEvent_Soccar_TA* GameEvent, class APRI_TA* Scorer);
	void UpdateFocusActor_POV(const struct FVector& FocusPoint, float DeltaTime, float BlendSpeed, bool bCutToCamera, struct FCameraOrientation* OutPOV);
	bool UpdateFocusActor_Active(const struct FVector& FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV);
	bool UpdateFocusActor_CountDown(const struct FVector& FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV);
	bool UpdateFocusActor(const struct FVector& FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV);
	void AdjustSideLocation(struct FVector* AdjustedLocation);
	bool AdjustDesiredLocationAngleFromHit(const struct FVector& TraceStart, const struct FVector& HitLocation, const struct FVector& HitNormal, float ExtraTraceDistance, struct FVector* Out_AdjustedLocation);
	bool CanFitAtLocation(const struct FVector& DesiredLocation, float ExtraTraceDistance, struct FVector* Out_TraceStart, struct FVector* out_HitLocation, struct FVector* out_HitNormal);
	void AdjustDesiredLocation(struct FVector* AdjustedLocation);
	bool CanMoveCameraToThisAngle(const struct FVector& CameraLocation, const struct FRotator& NewAngle, float DesiredTraceDistance);
	struct FRotator GetBallSideAngle(const struct FVector& CameraLocation);
	void SetDesiredLocationAngle(const struct FRotator& NewAngle);
	bool BallToCloseOrMovingTowardCamera(const struct FVector& CameraLocation);
	bool UpdateLocationAngle(struct FCameraOrientation* POV);
	struct FVector GetBallFloorFocusPoint(float DeltaTime);
	class UGoal_TA* FindGoalWithinRange();
	float GetZAngleFromLocation(const struct FVector& ActorLocation, const struct FRotator& ActorRotation, const struct FVector& TestLocation);
	float GetYAngleFromLocation(const struct FVector& ActorLocation, const struct FRotator& ActorRotation, const struct FVector& TestLocation);
	bool FloorTrace(const struct FVector& TraceStart, float TraceDistance, struct FVector* out_HitLocation, struct FVector* out_HitNormal);
	float GetDesiredZLocation(const struct FVector& OldCameraLocation, const struct FVector& NewCameraLocation, const struct FVector& DesiredLocation, float* Out_MinZHeight);
	void UpdateLocation(const struct FVector& FocusPoint, float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateRotation(const struct FVector& FocusPoint, float YawInterpSpeed, float PitchInterpSpeed, float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void SetFromMapInfo();
	void EndCameraState();
	void BeginCameraState();
	void Init(class ACamera_X* InCamera);
};


// Class TAGame.ProfileCameraSave_TA
// 0x00A0 (0x0168 - 0x00C8)
class UProfileCameraSave_TA : public USaveObject_TA
{
public:
	struct FProfileAutoCamSettings                     AutoCam;                                                  // 0x00C8(0x0028)
	struct FProfileCameraSettings                      Camera;                                                   // 0x00F0(0x001C)
	unsigned long                                      bInvertSwivelPitch : 1;                                   // 0x010C(0x0004)
	unsigned long                                      bInvertSpectatorPitch : 1;                                // 0x010C(0x0004)
	unsigned long                                      bLockSpectatorBallCam : 1;                                // 0x010C(0x0004)
	unsigned long                                      bFreecam : 1;                                             // 0x010C(0x0004)
	unsigned long                                      bPrefersSecondaryCamera : 1;                              // 0x010C(0x0004)
	unsigned long                                      bToggleSecondaryCamera : 1;                               // 0x010C(0x0004)
	unsigned long                                      bToggleRearCamera : 1;                                    // 0x010C(0x0004)
	unsigned long                                      bUseBallIndicator : 1;                                    // 0x010C(0x0004)
	unsigned long                                      bUseBallCamIndicator : 1;                                 // 0x010C(0x0004)
	unsigned long                                      bEnableCameraShake : 1;                                   // 0x010C(0x0004)
	unsigned long                                      bDirectorAllowCameraBlending : 1;                         // 0x010C(0x0004)
	unsigned long                                      bHoldMouseCameraEnabled : 1;                              // 0x010C(0x0004)
	unsigned long                                      bMouseCameraSwivel : 1;                                   // 0x010C(0x0004)
	TEnumAsByte<ECameraSettingsPreset>                 CameraSettingsPreset;                                     // 0x0110(0x0001) (Config)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0111(0x0003) MISSED OFFSET
	float                                              DirectorMinChangeTeamFocusTime;                           // 0x0114(0x0004)
	float                                              DirectorMinSameTeamFocusTime;                             // 0x0118(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __bToggleSecondaryCamera__ChangeNotify;                   // 0x0120(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x011C(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __bHoldMouseCameraEnabled__ChangeNotify;                  // 0x0138(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0138(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __bMouseCameraSwivel__ChangeNotify;                       // 0x0150(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0150(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProfileCameraSave_TA");
		return ptr;
	}


	void __bMouseCameraSwivel__ChangeNotifyFunc();
	void __bHoldMouseCameraEnabled__ChangeNotifyFunc();
	void __bToggleSecondaryCamera__ChangeNotifyFunc();
	void OnLoad();
};


// Class TAGame.MapInfo_TA
// 0x00B4 (0x0114 - 0x0060)
class UMapInfo_TA : public UMapInfo
{
public:
	struct FWorldColorData                             WorldColors;                                              // 0x0060(0x0040) (Edit)
	TEnumAsByte<EMirrorFieldType>                      MirrorFieldType;                                          // 0x00A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	int                                                MirrorFieldXYRotation;                                    // 0x00A4(0x0004) (Edit)
	struct FVector                                     FieldCenter;                                              // 0x00A8(0x000C) (Edit)
	float                                              MinStadiumBrightness;                                     // 0x00B4(0x0004) (Edit)
	struct FRotator                                    MapResetStartRotation;                                    // 0x00B8(0x000C) (Edit)
	float                                              MapResetStartHeight;                                      // 0x00C4(0x0004) (Edit)
	float                                              MapResetStartDistance;                                    // 0x00C8(0x0004) (Edit)
	float                                              MaxWaitTimeTillBallHit;                                   // 0x00CC(0x0004) (Edit)
	float                                              GoalScoredDistance;                                       // 0x00D0(0x0004) (Edit)
	float                                              MaxGoalYZoomOutDistance;                                  // 0x00D4(0x0004) (Edit)
	float                                              MaxGoalXZoomOutDistance;                                  // 0x00D8(0x0004) (Edit)
	float                                              CountDownFOV;                                             // 0x00DC(0x0004) (Edit)
	float                                              BackAwayFromWallDistance;                                 // 0x00E0(0x0004) (Edit)
	struct FVector                                     PylonExtentOverride;                                      // 0x00E4(0x000C) (Edit)
	class UArenaSoundSettings_TA*                      ArenaSoundSettings;                                       // 0x00F0(0x0008) (Edit)
	class UCrowdSounds_TA*                             CrowdSounds;                                              // 0x00F8(0x0008) (Edit)
	TArray<class ACrowdActor_TA*>                      CrowdActors;                                              // 0x0100(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bPlayGlobalCrowdSounds : 1;                               // 0x0110(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapInfo_TA");
		return ptr;
	}

};


// Class TAGame.CameraState_ReplayFly_TA
// 0x0004 (0x00C8 - 0x00C4)
class UCameraState_ReplayFly_TA : public UCameraState_Replay_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_ReplayFly_TA");
		return ptr;
	}

};


// Class TAGame.CameraState_ReplayFollow_TA
// 0x0030 (0x00F4 - 0x00C4)
class UCameraState_ReplayFollow_TA : public UCameraState_Replay_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	float                                              FollowDistance;                                           // 0x00C8(0x0004) (Edit)
	float                                              MinFollowDistance;                                        // 0x00CC(0x0004) (Edit)
	float                                              MaxFollowDistance;                                        // 0x00D0(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           FollowRotationRateCurve;                                  // 0x00D8(0x0018) (Edit, NeedCtorLink)
	unsigned long                                      bFirstExecution : 1;                                      // 0x00F0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_ReplayFollow_TA");
		return ptr;
	}


	void UpdateFocusActorPOV(class AActor* FocusActor, float DeltaTime, struct FCameraOrientation* OutPOV);
	bool IsDisabled(const struct FName& CameraMode, const struct FString& InFocusActorString);
	void BeginCameraState();
};


// Class TAGame.CameraState_ReplaySoftAttach_TA
// 0x0020 (0x00E4 - 0x00C4)
class UCameraState_ReplaySoftAttach_TA : public UCameraState_Replay_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	struct FRotator                                    AttachRotation;                                           // 0x00C8(0x000C) (Edit)
	struct FVector                                     AttachOffset;                                             // 0x00D4(0x000C) (Edit)
	float                                              MaxDistance;                                              // 0x00E0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_ReplaySoftAttach_TA");
		return ptr;
	}


	void ClampPOV(struct FCameraOrientation* OutPOV);
	void UpdateFocusActorPOV(class AActor* FocusActor, float DeltaTime, struct FCameraOrientation* OutPOV);
	bool IsDisabled(const struct FName& CameraMode, const struct FString& InFocusActorString);
};


// Class TAGame.CameraState_ReplayHardAttach_TA
// 0x0004 (0x00E8 - 0x00E4)
class UCameraState_ReplayHardAttach_TA : public UCameraState_ReplaySoftAttach_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_ReplayHardAttach_TA");
		return ptr;
	}


	void UpdateFocusActorPOV(class AActor* FocusActor, float DeltaTime, struct FCameraOrientation* OutPOV);
	bool IsDisabled(const struct FName& CameraMode, const struct FString& InFocusActorString);
};


// Class TAGame.CameraState_ReplayPlayerView_TA
// 0x0024 (0x00E8 - 0x00C4)
class UCameraState_ReplayPlayerView_TA : public UCameraState_Replay_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	class UCameraState_X*                              CarCameraState;                                           // 0x00C8(0x0008) (Edit)
	class UCameraState_X*                              BallCameraState;                                          // 0x00D0(0x0008) (Edit)
	class UCameraState_X*                              CurrentCameraState;                                       // 0x00D8(0x0008) (Transient)
	class UProfileCameraSave_TA*                       CameraSave;                                               // 0x00E0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_ReplayPlayerView_TA");
		return ptr;
	}


	void __CameraState_ReplayPlayerView_TA__Init_6D66E8674E18CE84F62DABBF5A8C6499(class UProfileCameraSave_TA* SO);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	class UCameraState_X* GetProxyCameraState();
	void Init(class ACamera_X* InCamera);
	bool AllowSwivel();
	bool IsDisabled(const struct FName& CameraMode, const struct FString& InFocusActorString);
};


// Class TAGame.CameraState_SeasonIntro_TA
// 0x0014 (0x00A0 - 0x008C)
class UCameraState_SeasonIntro_TA : public UCameraState_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	float                                              RotateSpeed;                                              // 0x0090(0x0004)
	float                                              ZHeightPercent;                                           // 0x0094(0x0004)
	float                                              XOffsetDistance;                                          // 0x0098(0x0004)
	float                                              DefaultFOV;                                               // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_SeasonIntro_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	bool ShouldExecute();
	class AGameEvent_Soccar_TA* GetGameEvent();
};


// Class TAGame.CameraState_Waiting_TA
// 0x000C (0x0218 - 0x020C)
class UCameraState_Waiting_TA : public UCameraState_CamActor_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x020C(0x0004) MISSED OFFSET
	float                                              MinExecutionTime;                                         // 0x0210(0x0004) (Edit)
	float                                              ExecutionTime;                                            // 0x0214(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Waiting_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void Tick(float DeltaTime);
	bool ShouldKeepExecuting();
	struct FViewTargetTransitionParams GetEndBlendParams(class UCameraState_X* NewState);
	bool ShouldExecute();
};


// Class TAGame.Cannon_TA
// 0x0041 (0x02A9 - 0x0268)
class ACannon_TA : public AActor
{
public:
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x0268(0x0008) (ExportObject, Component, EditInline)
	class UAnimTree*                                   CannonAnimTree;                                           // 0x0270(0x0008)
	class UAnimSet*                                    CannonAnimSet;                                            // 0x0278(0x0008)
	class UAnimNodeSlot*                               FullBodyAnimSlot;                                         // 0x0280(0x0008)
	class USkelControlSingleBone*                      PitchControl;                                             // 0x0288(0x0008)
	float                                              Pitch;                                                    // 0x0290(0x0004) (Net)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0294(0x0004) MISSED OFFSET
	class UParticleSystem*                             EngineThrusterParticle;                                   // 0x0298(0x0008)
	class UAkSoundCue*                                 CannonFireSound;                                          // 0x02A0(0x0008)
	unsigned char                                      FireCount;                                                // 0x02A8(0x0001) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Cannon_TA");
		return ptr;
	}


	void Fire();
	void DoSimulatedFire();
	void PlayFullBodyAnim(const struct FName& AnimName, float Rate, float BlendIn, float BlendOut, bool bLoop);
	void SetPitch(float InPitch);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class TAGame.LocalPlayerAudioParamsComponent_TA
// 0x0018 (0x0088 - 0x0070)
class ULocalPlayerAudioParamsComponent_TA : public UComponent
{
public:
	TScriptInterface<class UISetParameter>             ParameterInterface;                                       // 0x0070(0x0010)
	class APlayerController*                           PC;                                                       // 0x0080(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LocalPlayerAudioParamsComponent_TA");
		return ptr;
	}


	void __LocalPlayerAudioParamsComponent_TA__Init_B4E4694B4B7B4C8A8630F28191508463(class AGameEvent_TA* _);
	void __LocalPlayerAudioParamsComponent_TA__Init_C889DB024C274800C06174B70F39F5F2(class ACamera_TA* C, class AActor* T);
	void __LocalPlayerAudioParamsComponent_TA__Init_541CAA454AD342F2505F06BB83AA405C(class ACamera_X* C, class UCameraState_X* CS);
	void UpdateReplayCameraLocalView(class ACamera_Replay_TA* Camera);
	void UpdateNumLocalPlayers(class UGameViewportClient_TA* GVC, int LocalPlayerCount);
	void HandleLocalPlayerChange(class ULocalPlayer* NewPlayer);
	int GetListenerFromSplitScreenPosition(TEnumAsByte<ESplitScreenPosition> InSplitScreenPosition);
	void ApplyParams(bool bIsLocal, TEnumAsByte<ESplitScreenPosition> SplitScreenPosition);
	void UpdateParams();
	void Init(class APlayerController* InPC, const TScriptInterface<class UISetParameter>& InParameterInterface);
};


// Class TAGame.TeamColorPreferences_TA
// 0x0020 (0x0080 - 0x0060)
class UTeamColorPreferences_TA : public UObject
{
public:
	unsigned long                                      bColorBlind : 1;                                          // 0x0060(0x0004)
	unsigned long                                      bForceDefaultColors : 1;                                  // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FScriptDelegate                             EventPropertyChange;                                      // 0x0068(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0064(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TeamColorPreferences_TA");
		return ptr;
	}


	void EventPropertyChangeFunc();
	bool AllowCustomTeamColors();
};


// Class TAGame.ProductAsset_Attachment_TA
// 0x0018 (0x00F8 - 0x00E0)
class UProductAsset_Attachment_TA : public UProductAsset_TA
{
public:
	TArray<struct FProductAttachment>                  Attachments;                                              // 0x00E0(0x0010) (Edit, Component, NeedCtorLink)
	struct FName                                       CustomAnimName;                                           // 0x00F0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Attachment_TA");
		return ptr;
	}


	void ModifyThumbnailMesh(class UMeshComponent* Component, struct FProductAttachment* Attachment, TArray<class UProductAttribute_TA*>* InAttributes);
	class USkeletalMeshComponent* GetSceneSkeletalMesh(class UThumbnailScene_TA* Scene, int AttachmentIdx);
	class UStaticMeshComponent* GetSceneStaticMesh(class UThumbnailScene_TA* Scene, int AttachmentIdx);
	void PrepParticleSystem(class USkeletalMeshComponent* AttachSKC, class UParticleSystemComponent* PSC, const struct FName& SocketName, TArray<class UProductAttribute_TA*>* InAttributes);
	void HandleAttachedParticleSystem(class UParticleSystemComponent* ParticleSystemAttachment, class USkeletalMeshComponent** AttachSKC, class UStaticMeshComponent** AttachSMC, struct FProductAttachment* Attachment, TArray<class UProductAttribute_TA*>* InAttributes);
	void HandleAttachedSkeletalMesh(class USkeletalMeshComponent** AttachSKC, class USkeletalMesh** InSkeletalMesh, struct FProductAttachment* Attachment, TArray<class UProductAttribute_TA*>* InAttributes);
	void HandleAttachedStaticMesh(class UStaticMeshComponent** AttachSMC, class UStaticMesh** InStaticMesh, struct FProductAttachment* Attachment, TArray<class UProductAttribute_TA*>* InAttributes);
	void ModifyThumbnailScene(class UThumbnailScene_TA* Scene, TArray<class UProductAttribute_TA*>* InAttributes);
};


// Class TAGame.__CarMeshComponentBase_TA__ApplyPaintToObject_82A7522448CE226BFFA098A0165A3B9D
// 0x0020 (0x0080 - 0x0060)
class U__CarMeshComponentBase_TA__ApplyPaintToObject_82A7522448CE226BFFA098A0165A3B9D : public UObject
{
public:
	class UProductPaint_TA*                            ProductPaint;                                             // 0x0060(0x0008)
	class UProductAttribute_PaintSettings_TA*          PaintSettings;                                            // 0x0068(0x0008)
	class UObject*                                     ObjectToPaint;                                            // 0x0070(0x0008)
	class UProductAsset_TA*                            Product;                                                  // 0x0078(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__CarMeshComponentBase_TA__ApplyPaintToObject_82A7522448CE226BFFA098A0165A3B9D");
		return ptr;
	}


	void __CarMeshComponentBase_TA__ApplyPaintToObject_82A7522448CE226BFFA098A0165A3B9D();
};


// Class TAGame.__CarMeshComponentBase_TA__AttachOrnament_FF8AEA7B45656225F6FBEF8B2F45EA01
// 0x0008 (0x0068 - 0x0060)
class U__CarMeshComponentBase_TA__AttachOrnament_FF8AEA7B45656225F6FBEF8B2F45EA01 : public UObject
{
public:
	class UAprilConfig_X*                              AprilConfig;                                              // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__CarMeshComponentBase_TA__AttachOrnament_FF8AEA7B45656225F6FBEF8B2F45EA01");
		return ptr;
	}


	void __CarMeshComponentBase_TA__AttachOrnament_E1C37ED64D830F8C245C98BBAB102026(class UPrimitiveComponent* PrimComp);
	void __CarMeshComponentBase_TA__AttachOrnament_FF8AEA7B45656225F6FBEF8B2F45EA01(class UPrimitiveComponent* PrimComp);
};


// Class TAGame.__CarMeshComponentBase_TA__RemoveProductAttributeFromProduct_CD8FED0C4DB94CBAD309B8A9BD2D013C
// 0x0008 (0x0068 - 0x0060)
class U__CarMeshComponentBase_TA__RemoveProductAttributeFromProduct_CD8FED0C4DB94CBAD309B8A9BD2D013C : public UObject
{
public:
	class UClass*                                      AttributeClassToRemove;                                   // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__CarMeshComponentBase_TA__RemoveProductAttributeFromProduct_CD8FED0C4DB94CBAD309B8A9BD2D013C");
		return ptr;
	}


	bool __CarMeshComponentBase_TA__RemoveProductAttributeFromProduct_CD8FED0C4DB94CBAD309B8A9BD2D013C(class UProductAttribute_TA* CurAttribute);
};


// Class TAGame.__CarMeshComponentBase_TA__CreateWheelAttachment_83F6A524413CEB458D03CFBF7131782B
// 0x0010 (0x0070 - 0x0060)
class U__CarMeshComponentBase_TA__CreateWheelAttachment_83F6A524413CEB458D03CFBF7131782B : public UObject
{
public:
	class UProductAsset_Wheel_TA*                      Asset;                                                    // 0x0060(0x0008)
	class UPrimitiveComponent*                         PrimComp;                                                 // 0x0068(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__CarMeshComponentBase_TA__CreateWheelAttachment_83F6A524413CEB458D03CFBF7131782B");
		return ptr;
	}


	void __CarMeshComponentBase_TA__CreateWheelAttachment_83F6A524413CEB458D03CFBF7131782B(class UAttachmentBehavior_TA* Behavior);
};


// Class TAGame.__CarMeshComponentBase_TA__CreateWheelMesh_C3E191BD4D73813C1FBEB6BDB4D8EAAC
// 0x0010 (0x0070 - 0x0060)
class U__CarMeshComponentBase_TA__CreateWheelMesh_C3E191BD4D73813C1FBEB6BDB4D8EAAC : public UObject
{
public:
	class UProductAsset_Wheel_TA*                      Asset;                                                    // 0x0060(0x0008)
	class UMeshComponent*                              WheelMesh;                                                // 0x0068(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__CarMeshComponentBase_TA__CreateWheelMesh_C3E191BD4D73813C1FBEB6BDB4D8EAAC");
		return ptr;
	}


	void __CarMeshComponentBase_TA__CreateWheelMesh_C3E191BD4D73813C1FBEB6BDB4D8EAAC(const struct FWheelAttachment& A);
};


// Class TAGame.__CarMeshComponentBase_TA__AddVisualAsset_F74435CD4599A96A8B8F739D65E38642
// 0x0008 (0x0068 - 0x0060)
class U__CarMeshComponentBase_TA__AddVisualAsset_F74435CD4599A96A8B8F739D65E38642 : public UObject
{
public:
	class UProductAsset_TA*                            Asset;                                                    // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__CarMeshComponentBase_TA__AddVisualAsset_F74435CD4599A96A8B8F739D65E38642");
		return ptr;
	}


	void __CarMeshComponentBase_TA__AddVisualAsset_F74435CD4599A96A8B8F739D65E38642(const struct FProductAttachment& A);
};


// Class TAGame.ThrottleStateComponent_TA
// 0x0024 (0x00C8 - 0x00A4)
class UThrottleStateComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class UAkSoundCue*                                 EngageSound;                                              // 0x00A8(0x0008) (Edit)
	class UAkSoundCue*                                 ReleaseSound;                                             // 0x00B0(0x0008) (Edit)
	class AVehicle_TA*                                 Car;                                                      // 0x00B8(0x0008) (Transient)
	float                                              PrevThrottle;                                             // 0x00C0(0x0004) (Transient)
	unsigned long                                      bPrevCarAccelerating : 1;                                 // 0x00C4(0x0004) (Transient)
	unsigned long                                      bPrevCarIdling : 1;                                       // 0x00C4(0x0004) (Transient)
	unsigned long                                      bCanThrottleEngage : 1;                                   // 0x00C4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ThrottleStateComponent_TA");
		return ptr;
	}


	void StopThrottleSounds();
	void Tick(float DeltaTime);
	void Detached();
	void Attached();
};


// Class TAGame.__ProductLoader_TA__RemoveIncompatibleProducts_A876F8AF42DA85B4D55A6BB2CF2EAC38
// 0x0008 (0x0068 - 0x0060)
class U__ProductLoader_TA__RemoveIncompatibleProducts_A876F8AF42DA85B4D55A6BB2CF2EAC38 : public UObject
{
public:
	class UProductAsset_Body_TA*                       Body;                                                     // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductLoader_TA__RemoveIncompatibleProducts_A876F8AF42DA85B4D55A6BB2CF2EAC38");
		return ptr;
	}


	bool __ProductLoader_TA__RemoveIncompatibleProducts_A876F8AF42DA85B4D55A6BB2CF2EAC38(class UProduct_TA* Product);
};


// Class TAGame.__ProductLoader_TA__GetAssetByID_6A789C0F44EFDFF6B9E23F8688046CE3
// 0x0004 (0x0064 - 0x0060)
class U__ProductLoader_TA__GetAssetByID_6A789C0F44EFDFF6B9E23F8688046CE3 : public UObject
{
public:
	int                                                ProductID;                                                // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductLoader_TA__GetAssetByID_6A789C0F44EFDFF6B9E23F8688046CE3");
		return ptr;
	}


	bool __ProductLoader_TA__GetAssetByID_6A789C0F44EFDFF6B9E23F8688046CE3(class UProductAsset_TA* A);
};


// Class TAGame.__ProductLoader_TA__GetAssetBySlot_F886D6D14417388A305ED68B64492A29
// 0x0008 (0x0068 - 0x0060)
class U__ProductLoader_TA__GetAssetBySlot_F886D6D14417388A305ED68B64492A29 : public UObject
{
public:
	class UProductSlot_TA*                             Slot;                                                     // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductLoader_TA__GetAssetBySlot_F886D6D14417388A305ED68B64492A29");
		return ptr;
	}


	bool __ProductLoader_TA__GetAssetBySlot_F886D6D14417388A305ED68B64492A29(class UProductAsset_TA* A);
};


// Class TAGame.DemolishExplosion_TA
// 0x001C (0x029C - 0x0280)
class ADemolishExplosion_TA : public AExplosion_X
{
public:
	float                                              PartRandomAngle;                                          // 0x0280(0x0004) (Edit)
	float                                              PartRandomSpeedMin;                                       // 0x0284(0x0004) (Edit)
	float                                              PartRandomSpeedMax;                                       // 0x0288(0x0004) (Edit)
	float                                              PartRandomSpeedMinZ;                                      // 0x028C(0x0004) (Edit)
	float                                              PartRandomSpeedMaxZ;                                      // 0x0290(0x0004) (Edit)
	float                                              PartRandomAngularSpeed;                                   // 0x0294(0x0004) (Edit)
	float                                              BodyLifetime;                                             // 0x0298(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DemolishExplosion_TA");
		return ptr;
	}


	struct FVector GetRandomAngularVelocity();
	struct FVector GetRandomVelocity(const struct FRotator& AttackerRotation);
	void SpawnParts(const struct FDemolishData& Data);
	void Init(const struct FDemolishData& Data);
};


// Class TAGame.DemolishedCar_TA
// 0x0028 (0x0088 - 0x0060)
class UDemolishedCar_TA : public UObject
{
public:
	struct FDemolishData                               Data;                                                     // 0x0060(0x0028)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DemolishedCar_TA");
		return ptr;
	}

};


// Class TAGame.CarTrajectoryComponent_TA
// 0x0058 (0x00FC - 0x00A4)
class UCarTrajectoryComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                             // 0x00A8(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<struct FVector>                             Points;                                                   // 0x00B0(0x0010) (NeedCtorLink)
	int                                                TotalDrawPoints;                                          // 0x00C0(0x0004) (Const)
	int                                                FramesBetweenPoints;                                      // 0x00C4(0x0004) (Const)
	float                                              LastAngle;                                                // 0x00C8(0x0004) (Transient)
	struct FRotator                                    VelocityRot;                                              // 0x00CC(0x000C) (Transient)
	struct FVector                                     CurrentVelocity;                                          // 0x00D8(0x000C) (Transient)
	struct FVector                                     LastRotateAxis;                                           // 0x00E4(0x000C) (Transient)
	struct FVector                                     LastVelocity;                                             // 0x00F0(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarTrajectoryComponent_TA");
		return ptr;
	}


	float GetPointInterpSpeed(int PointIndex);
	void Tick(float DeltaTime);
	void Attached();
	void SetEnabled(bool bEnable);
};


// Class TAGame.NameplateComponent_TA
// 0x003C (0x00E0 - 0x00A4)
class UNameplateComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FString                                     PlayerName;                                               // 0x00A8(0x0010) (Edit, NeedCtorLink)
	int                                                Team;                                                     // 0x00B8(0x0004) (Edit)
	unsigned long                                      bIsLocalPlayer : 1;                                       // 0x00BC(0x0004) (Edit)
	unsigned long                                      bIsReady : 1;                                             // 0x00BC(0x0004) (Edit)
	unsigned long                                      bLocalizeName : 1;                                        // 0x00BC(0x0004) (Edit)
	int                                                SpectatorShortcut;                                        // 0x00C0(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventPlayerNameSet__Delegate;                           // 0x00C8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C4(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NameplateComponent_TA");
		return ptr;
	}


	int GetSpectatorShortcut();
	bool IsReady();
	bool IsLocalPlayer(class APRI_TA* LocalPRI);
	int GetPlayerTeam();
	struct FString GetPlayerName();
	class APRI_TA* GetPRI();
	void SetPlayerName(const struct FString& InPlayerName);
	void Detached();
	void Attached();
	void EventPlayerNameSet(class UNameplateComponent_TA* NameplateComponent);
};


// Class TAGame.NameplateComponentCar_TA
// 0x0008 (0x00E8 - 0x00E0)
class UNameplateComponentCar_TA : public UNameplateComponent_TA
{
public:
	class ACar_TA*                                     Car;                                                      // 0x00E0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NameplateComponentCar_TA");
		return ptr;
	}


	int GetSpectatorShortcut();
	bool IsReady();
	bool IsLocalPlayer(class APRI_TA* LocalPRI);
	int GetPlayerTeam();
	struct FString GetPlayerName();
	class APRI_TA* GetPRI();
	void Attached();
};


// Class TAGame.Car_Season_TA
// 0x0000 (0x0AD0 - 0x0AD0)
class ACar_Season_TA : public ACar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Car_Season_TA");
		return ptr;
	}


	int GetLoadoutTeamIndex();
	void HandleLogoChanged(class ATeam_TA* Team);
	void UpdateTeamLogo();
	bool UpdateTeamLoadout();
};


// Class TAGame.ProfileControlsSave_TA
// 0x0048 (0x0110 - 0x00C8)
class UProfileControlsSave_TA : public USaveObject_TA
{
public:
	float                                              WaveformScalar;                                           // 0x00C8(0x0004) (Const)
	TEnumAsByte<EForceFeedbackType>                    ForceFeedbackType;                                        // 0x00CC(0x0001)
	TEnumAsByte<EForceFeedbackMode>                    ForceFeedbackMode;                                        // 0x00CD(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00CE(0x0002) MISSED OFFSET
	float                                              LegacyForceFeedbackScales[0x6];                           // 0x00D0(0x0004) (Const, Transient)
	float                                              ForceFeedbackScale;                                       // 0x00E8(0x0004)
	unsigned long                                      bPushToTalk : 1;                                          // 0x00EC(0x0004)
	struct FName                                       ControlPresetName;                                        // 0x00F0(0x0008)
	struct FScriptDelegate                             __ControlPresetName__ChangeNotify;                        // 0x00F8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00F8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProfileControlsSave_TA");
		return ptr;
	}


	void __ProfileControlsSave_TA__GetVersionDelegates_140F87ED445846D3CA55A68A7A9E3021(class UObject* SaveObj);
	void __ControlPresetName__ChangeNotifyFunc();
	void GetVersionDelegates(TArray<struct FScriptDelegate>* VersionDelegates);
	float GetWaveformScale();
	void OnCreate();
};


// Class TAGame.__CarComponent_Boost_TA__SetUnlimitedBoostDelayed_0E3552ED4944CDBECE4BB4B48F71D002
// 0x0004 (0x0064 - 0x0060)
class U__CarComponent_Boost_TA__SetUnlimitedBoostDelayed_0E3552ED4944CDBECE4BB4B48F71D002 : public UObject
{
public:
	unsigned long                                      Enabled : 1;                                              // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__CarComponent_Boost_TA__SetUnlimitedBoostDelayed_0E3552ED4944CDBECE4BB4B48F71D002");
		return ptr;
	}


	void __CarComponent_Boost_TA__SetUnlimitedBoostDelayed_0E3552ED4944CDBECE4BB4B48F71D002();
};


// Class TAGame.CarPreviewAnim_TA
// 0x0084 (0x0128 - 0x00A4)
class UCarPreviewAnim_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class UProductSlot_TA*                             Slot;                                                     // 0x00A8(0x0008) (Edit)
	TArray<struct FPreviewAnimKeyframe>                KeyFrames;                                                // 0x00B0(0x0010) (Edit, NeedCtorLink)
	float                                              Delay;                                                    // 0x00C0(0x0004) (Edit)
	unsigned long                                      bDelayHidden : 1;                                         // 0x00C4(0x0004) (Edit)
	unsigned long                                      bLoop : 1;                                                // 0x00C4(0x0004) (Edit)
	unsigned long                                      bComponentWasAttached : 1;                                // 0x00C4(0x0004) (Transient)
	struct FName                                       SkelControlName;                                          // 0x00C8(0x0008) (Edit)
	class ACarPreviewActor_TA*                         PreviewActor;                                             // 0x00D0(0x0008) (Transient)
	class UPrimitiveComponent*                         Component;                                                // 0x00D8(0x0008) (ExportObject, Transient, Component, EditInline)
	struct FPreviewAnimKeyframe                        FinalKeyframe;                                            // 0x00E0(0x0038) (Transient)
	float                                              KeyframeTime;                                             // 0x0118(0x0004) (Transient)
	int                                                KeyframeIndex;                                            // 0x011C(0x0004) (Transient)
	class USkelControlSingleBone*                      SkelControl;                                              // 0x0120(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarPreviewAnim_TA");
		return ptr;
	}


	void SetRotation(const struct FRotator& Rotation);
	void SetTranslation(const struct FVector& Translation);
	void UpdateAnim();
	void UpdateKeyframeIndex(float DeltaTime);
	void Tick(float DeltaTime);
	void Detached();
	void Start(class ACarPreviewActor_TA* InOwner, class UPrimitiveComponent* InComponent);
};


// Class TAGame.MusicStingersPreview_TA
// 0x000C (0x006C - 0x0060)
class UMusicStingersPreview_TA : public UObject
{
public:
	class UProductAsset_MusicStingers_TA*              ProductAsset;                                             // 0x0060(0x0008) (Transient)
	int                                                CurrentPlayingID;                                         // 0x0068(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicStingersPreview_TA");
		return ptr;
	}


	void StopPreview();
	void StartPreview();
	void Init(class UProductAsset_MusicStingers_TA* InProductAsset);
};


// Class TAGame.OnlineProductStore_TA
// 0x0018 (0x0088 - 0x0070)
class UOnlineProductStore_TA : public UComponent
{
public:
	TArray<class UOnlineProductStoreSet_TA*>           Sets;                                                     // 0x0070(0x0010) (ExportObject, Component, NeedCtorLink, EditInline)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.OnlineProductStore_TA.CurrentTempInstanceID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineProductStore_TA");
		return ptr;
	}


	bool __OnlineProductStore_TA__HasAnyProducts_CB03B2584AECBEA862643CA683DB642C(class UOnlineProductStoreSet_TA* S);
	bool HasAnyProducts();
	void GetTempInstanceID();
	int GetProductIDFromOnlineID();
	TArray<class UOnlineProduct_TA*> FindProductsFromHash(const struct FProductHashID& HashID, TArray<class UOnlineProduct_TA*>* MapManyLocal_F10D614142E0EDC86F7B3795C8E5D66B);
	class UOnlineProduct_TA* FindProductFromHash(const struct FProductHashID& HashID);
	class UOnlineProduct_TA* FindProduct();
	void RemoveSet(class UOnlineProductStoreSet_TA* Set);
	class UOnlineProductStoreSet_TA* CreateSet();
	class UOnlineProductStore_TA* STATIC_GetInstance();
};


// Class TAGame.TurnTableActor_TA
// 0x008C (0x0358 - 0x02CC)
class ATurnTableActor_TA : public ASkeletalMeshActor
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x02CC(0x0004) MISSED OFFSET
	class URotateComponent_TA*                         RotateComponent;                                          // 0x02D0(0x0008) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      bIsSwapping : 1;                                          // 0x02D8(0x0004) (Transient)
	unsigned long                                      bInReveal : 1;                                            // 0x02D8(0x0004) (Transient)
	unsigned long                                      bCarLocked : 1;                                           // 0x02D8(0x0004) (Transient)
	unsigned long                                      bMultiDrop : 1;                                           // 0x02D8(0x0004) (Transient)
	struct FName                                       SwapCarName;                                              // 0x02DC(0x0008) (Edit)
	struct FName                                       LiftItemName;                                             // 0x02E4(0x0008) (Edit)
	struct FName                                       LockCarName;                                              // 0x02EC(0x0008) (Edit)
	struct FName                                       TriggerRevealCompleteName;                                // 0x02F4(0x0008) (Edit)
	int                                                DelayedPreviewSlot;                                       // 0x02FC(0x0004) (Transient)
	float                                              TurntableRiseDelay;                                       // 0x0300(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0304(0x0004) MISSED OFFSET
	class UOnlineProduct_TA*                           RevealProduct;                                            // 0x0308(0x0008) (Transient)
	struct FScriptDelegate                             __EventCarSwapComplete__Delegate;                         // 0x0310(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0310(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRevealStarted__Delegate;                           // 0x0328(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0328(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRevealComplete__Delegate;                          // 0x0340(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0340(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TurnTableActor_TA");
		return ptr;
	}


	void EnableCollision(bool bEnable);
	void StopMovement();
	struct FRotator GetDiscRotation();
	void SetBoneRotation(const struct FRotator& NewRot);
	void HandleRotationChanged(class URotateComponent_TA* InRotateComponent, const struct FRotator& NewRotation);
	void SetDiscRotation(float InDirectionMag, float DeltaTime);
	bool CanSubstituteCars();
	void LockCar();
	void OnAnimEnd(class UAnimNodeSequence* SeqNode, float PlayedTime, float ExcessTime);
	void TriggerRevealComplete();
	void DelayPreviewSlot(int SlotIndex);
	void OnStartReveal();
	void DoDelayedReveal();
	void DoReveal(class UOnlineProduct_TA* OnlineProduct, bool bMultiProductDrop);
	void TriggerNamedEvent(const struct FName& NamedEvent);
	void SwapCars(bool bReverse);
	void Destroyed();
	void PostBeginPlay();
	void EventRevealComplete(int SlotIndex);
	void EventRevealStarted();
	void EventCarSwapComplete();
};


// Class TAGame.RotateComponent_TA
// 0x00C4 (0x0168 - 0x00A4)
class URotateComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	float                                              Momentum;                                                 // 0x00A8(0x0004)
	float                                              LastMomentum;                                             // 0x00AC(0x0004)
	float                                              RotationSpeed;                                            // 0x00B0(0x0004)
	struct FRotator                                    CurrentRotation;                                          // 0x00B4(0x000C)
	float                                              TurntableDirection;                                       // 0x00C0(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	class UAkSoundCue*                                 SFX_Rotating;                                             // 0x00C8(0x0008) (Edit)
	class UAkSoundCue*                                 SFX_Reversing;                                            // 0x00D0(0x0008) (Edit)
	struct FInterpCurveFloat                           FallOffCurve;                                             // 0x00D8(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           YawSpeedCurveMouse;                                       // 0x00F0(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           YawSpeedCurveGamepad;                                     // 0x0108(0x0018) (Edit, NeedCtorLink)
	unsigned long                                      bGrabbed : 1;                                             // 0x0120(0x0004) (Transient)
	unsigned long                                      bDeterminedSnapRotation : 1;                              // 0x0120(0x0004)
	unsigned long                                      bUsingGamepad : 1;                                        // 0x0120(0x0004)
	struct FRotator                                    SnapRotation;                                             // 0x0124(0x000C)
	float                                              SnapAngle;                                                // 0x0130(0x0004)
	int                                                TotalSnaps;                                               // 0x0134(0x0004)
	struct FRotator                                    SnapStartRotation;                                        // 0x0138(0x000C)
	float                                              MinStopMomentum;                                          // 0x0144(0x0004)
	float                                              SnapBlendSpeed;                                           // 0x0148(0x0004)
	float                                              Input;                                                    // 0x014C(0x0004)
	struct FScriptDelegate                             __EventRotationChanged__Delegate;                         // 0x0150(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0150(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RotateComponent_TA");
		return ptr;
	}


	void DontStartSound();
	void DontPlayReverse();
	bool IsTimerActive(const struct FName& FuncName);
	void SetTimer(float Time, bool bLoop, const struct FName& FuncName);
	void ClearTimer(const struct FName& FuncName);
	float CalculateMomentumFalloff(float DeltaTime);
	void SetGrabbed(bool bGrab);
	float DetermineTurnSpeed(float DeltaTime, float YawInput, bool bGamepad);
	void DetermineSnapRotation(int MoveDirection);
	void UpdateSpin(float DeltaTime, float YawInput, bool bGamepad);
	int STATIC_IncrementSlotIndex(int InTotalSnaps, int CurrentIndex, int AddAmount);
	struct FRotator GetSlotRotation(int SlotIndex);
	int STATIC_GetClosestSlotInRotation(const struct FVector& WorldDirection, const struct FRotator& InRotation, int InTotalSnaps, float InSnapAngle);
	void SetSnap(const struct FRotator& InSnapStartRotation, int InTotalSnaps, float InSnapAngle, float InMinStopMomentum);
	void StopMovement();
	void StopRotatingSound();
	void SetComponentRotation(float InDirectionMag, float DeltaTime);
	void SetCurrentRotation(const struct FRotator& NewRotation);
	void ResetInput();
	void SetInput(float YawInput, bool bGamepad);
	void Tick(float DeltaTime);
	void BeginPlay();
	void EventRotationChanged(class URotateComponent_TA* RotateComponent, const struct FRotator& NewRotation);
};


// Class TAGame.ProductAsset_MusicStingers_TA
// 0x0010 (0x00F0 - 0x00E0)
class UProductAsset_MusicStingers_TA : public UProductAsset_TA
{
public:
	class UAkSoundCue*                                 GoalScoredStinger;                                        // 0x00E0(0x0008) (Edit)
	class UAkSoundCue*                                 EpicSaveStinger;                                          // 0x00E8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_MusicStingers_TA");
		return ptr;
	}

};


// Class TAGame.EngineAudioPreviewRev_TA
// 0x0024 (0x00A8 - 0x0084)
class UEngineAudioPreviewRev_TA : public UEngineAudioPreviewBase_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	class UEngineAudioProfileREV_TA*                   Profile;                                                  // 0x0088(0x0008)
	class UAkRevPhysicsSimulation*                     PhysicsSim;                                               // 0x0090(0x0008)
	struct FAkRevSimFrame                              SimFrame;                                                 // 0x0098(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioPreviewRev_TA");
		return ptr;
	}


	void __EngineAudioPreviewRev_TA__Init_7A0EF27B4B69E4742BF0ACB80733EB4B(class UAkRevPhysicsSimulation* S);
	void Init(class UProductAsset_EngineAudio_TA* InAsset, class UAkParamGroup* InAkParams);
};


// Class TAGame.PlayerController_Menu_TA
// 0x0048 (0x0990 - 0x0948)
class APlayerController_Menu_TA : public APlayerControllerBase_TA
{
public:
	TArray<class UPlayerInputSequence_TA*>             InputSequences;                                           // 0x0948(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bExecutedKonamiCode : 1;                                  // 0x0958(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x095C(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventKonamiCode__Delegate;                              // 0x0960(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x095C(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventBecomePrimaryPlayer__Delegate;                     // 0x0978(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0978(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerController_Menu_TA");
		return ptr;
	}


	void ShowControllerApplet();
	void ShowAccountPicker();
	void MusicTogglePlaylistSelection();
	void MusicNextTrack();
	void KonamiCode();
	void PlayerTick(float DeltaTime);
	void ClientSetOnlineStatus();
	void RemoveInputSequence(const struct FName& SequenceName);
	void RemoveSplashScreenSequences();
	void Destroyed();
	int GetInputSequencePriority(class UPlayerInputSequence_TA* Sequence);
	void HandleCameraSave(class UProfileCameraSave_TA* CameraSettings);
	void ReceivedPlayer();
	void EventBecomePrimaryPlayer(class APlayerController_Menu_TA* Primary);
	void EventKonamiCode();
};


// Class TAGame.OnlineProductStoreSet_TA
// 0x0040 (0x0100 - 0x00C0)
class UOnlineProductStoreSet_TA : public UIdenticalProductCache_TA
{
public:
	class ULocalPlayer*                                Player;                                                   // 0x00C0(0x0008)
	struct FUniqueNetId                                PlayerID;                                                 // 0x00C8(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineProductStoreSet_TA");
		return ptr;
	}


	class UOnlineProduct_TA* AddProductData(struct FOnlineProductData* Data);
	struct FUniqueNetId GetPlayerID();
	void InitRemote(const struct FUniqueNetId& InPlayerId);
	void InitLocal(class ULocalPlayer* InPlayer);
};


// Class TAGame.CarThumbnailActor_TA
// 0x0008 (0x0270 - 0x0268)
class ACarThumbnailActor_TA : public AActor
{
public:
	class UCarMeshComponent_TA*                        Mesh;                                                     // 0x0268(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarThumbnailActor_TA");
		return ptr;
	}

};


// Class TAGame.CheatManagerBase_TA
// 0x0010 (0x00A8 - 0x0098)
class UCheatManagerBase_TA : public UCheatManager_X
{
public:
	int                                                LastEquippedProductID;                                    // 0x0098(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x009C(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.CheatManagerBase_TA.LastEquippedInstanceID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CheatManagerBase_TA");
		return ptr;
	}

};


// Class TAGame.CheatManager_TA
// 0x0020 (0x00C8 - 0x00A8)
class UCheatManager_TA : public UCheatManagerBase_TA
{
public:
	class AInputRecorder_TA*                           InputRecorder;                                            // 0x00A8(0x0008) (Transient)
	struct FColor                                      DebugColor;                                               // 0x00B0(0x0004) (Transient)
	int                                                TestClubColor;                                            // 0x00B4(0x0004) (Transient)
	float                                              BodyHandlingTestTime;                                     // 0x00B8(0x0004)
	int                                                BodyHandlingTestIndex;                                    // 0x00BC(0x0004)
	class UTickNotifyDelegate_TA*                      TickNotifier;                                             // 0x00C0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CheatManager_TA");
		return ptr;
	}

};


// Class TAGame.Constraint2D_TA
// 0x0000 (0x02A0 - 0x02A0)
class AConstraint2D_TA : public ARB_ConstraintActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Constraint2D_TA");
		return ptr;
	}

};


// Class TAGame.CrowdActor_TA
// 0x0070 (0x02D8 - 0x0268)
class ACrowdActor_TA : public AActor
{
public:
	class UAkSoundCue*                                 CrowdSound;                                               // 0x0268(0x0008) (Edit)
	class UCrowdActorSettings_TA*                      Settings;                                                 // 0x0270(0x0008) (Edit)
	class AGameEvent_Soccar_TA*                        GameEvent;                                                // 0x0278(0x0008) (Net, Transient)
	float                                              TargetIdleNoise;                                          // 0x0280(0x0004) (Transient)
	float                                              TargetIdleNoiseRate;                                      // 0x0284(0x0004) (Transient)
	float                                              CurrentIdleNoise;                                         // 0x0288(0x0004) (Transient)
	float                                              ModifiedNoise;                                            // 0x028C(0x0004) (Net, Transient)
	float                                              CurrentNoise;                                             // 0x0290(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0294(0x0004) MISSED OFFSET
	TArray<struct FCrowdNoiseModifierInstance>         NoiseModifiers;                                           // 0x0298(0x0010) (Transient, NeedCtorLink)
	struct FCrowdNoiseModifierInstance                 TimeAlmostOutNoiseInstance;                               // 0x02A8(0x0008) (Transient)
	float                                              CurrentBallGoalDistanceNoise;                             // 0x02B0(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02B4(0x0004) MISSED OFFSET
	class UAkSoundCue*                                 ReplicatedOneShotSound;                                   // 0x02B8(0x0008) (Net, Transient)
	int                                                ReplicatedCountDownNumber;                                // 0x02C0(0x0004) (Net, Transient)
	int                                                ReplicatedRoundCountDownNumber;                           // 0x02C4(0x0004) (Net, Transient)
	float                                              LastBallHitNoiseTime;                                     // 0x02C8(0x0004) (Transient)
	int                                                LastBallHitNoiseLevel;                                    // 0x02CC(0x0004) (Transient)
	class UCrowdSounds_TA*                             Sounds;                                                   // 0x02D0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CrowdActor_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void HandleCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<EBallHitType> HitType);
	void HandleBallRemoved(class AGameEvent_Soccar_TA* G, class ABall_TA* Ball);
	void HandleBallAdded(class AGameEvent_Soccar_TA* G, class ABall_TA* Ball);
	void HandleGaveStat(class AStatFactory_TA* Factory, class APRI_TA* ToPRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim);
	void HandleCountdownTimeUpdated(class AGameEvent_TA* InGameEvent, int Seconds);
	void HandleGameTimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void UpdateTimeAlmostOutNoiseModifier(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleOvertimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleGameStateChanged(class AGameEvent_TA* InGameEvent);
	void PlayRoundCountDownSound(int CountDownNumber);
	void PlayCountDownSound(int CountDownNumber);
	void HandleEndGameCountDown(class AGameEvent_Soccar_TA* G, int TimeRemaining);
	void HandleStingerForfeit(class AGameEvent_Soccar_TA* G);
	void HandleStingerLose(class AGameEvent_Soccar_TA* G);
	void HandleStingerWin(class AGameEvent_Soccar_TA* G);
	void Tick(float DeltaTime);
	void TickBallGoalDistance();
	void SetNoise(float NewNoise);
	void TickNoise(float DeltaTime, float TargetNoise);
	void ClearOneShotSound();
	void PlayOneShotSound(class UAkSoundCue* Sound);
	void AddNoiseModifier(class UCrowdNoiseModifier_TA* Modifier);
	struct FCrowdNoiseModifierInstance CreateNoiseModifierInstance(class UCrowdNoiseModifier_TA* Modifier);
	void TickNoiseModifiers(float DeltaTime);
	void TickIdleNoise(float DeltaTime);
	void UpdateTargetIdleNoise();
	void Init(class AGameEvent_Soccar_TA* InGameEvent);
	void Destroyed();
	void PostBeginPlay();
	float GetRandomValue(const struct FRandomRange& Range);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class TAGame.StatFactory_TA
// 0x01E0 (0x0458 - 0x0278)
class AStatFactory_TA : public AStatFactoryBase_TA
{
public:
	struct FStatEventCollection                        Events;                                                   // 0x0278(0x0150) (Edit, Const)
	TArray<struct FBallInfo>                           BallCache;                                                // 0x03C8(0x0010) (Transient, Component, NeedCtorLink)
	float                                              GoalSizeFudge;                                            // 0x03D8(0x0004) (Edit)
	float                                              ShotMaxTime;                                              // 0x03DC(0x0004) (Edit)
	float                                              ShotArriveTime;                                           // 0x03E0(0x0004) (Edit)
	float                                              ShotMaxDistance;                                          // 0x03E4(0x0004) (Edit)
	float                                              EpicSaveArriveTime;                                       // 0x03E8(0x0004) (Edit)
	float                                              EpicSaveMinSpeed;                                         // 0x03EC(0x0004) (Edit)
	float                                              RedZoneDistance;                                          // 0x03F0(0x0004) (Edit)
	float                                              JuggleMinSpeed;                                           // 0x03F4(0x0004) (Edit)
	float                                              BulletHitSpeed;                                           // 0x03F8(0x0004) (Edit)
	float                                              AerialHitHeight;                                          // 0x03FC(0x0004) (Edit)
	float                                              AerialHitMinRelSpeed;                                     // 0x0400(0x0004) (Edit)
	float                                              BicycleSpinSpeed;                                         // 0x0404(0x0004) (Edit)
	float                                              LongGoalDistance;                                         // 0x0408(0x0004) (Edit)
	int                                                HatTrickThreshold;                                        // 0x040C(0x0004) (Edit)
	int                                                PlaymakerThreshold;                                       // 0x0410(0x0004) (Edit)
	int                                                SaviorThreshold;                                          // 0x0414(0x0004) (Edit)
	int                                                DemolitionThreshold;                                      // 0x0418(0x0004) (Edit)
	unsigned long                                      bGaveFirstTouch : 1;                                      // 0x041C(0x0004) (Transient)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                               // 0x0420(0x0008) (Transient)
	class APRI_TA*                                     ScoringPRI;                                               // 0x0428(0x0008) (Transient)
	TArray<class ACar_TA*>                             CarsIssuedAnyFiveHit;                                     // 0x0430(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventGaveStat__Delegate;                                // 0x0440(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0440(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatFactory_TA");
		return ptr;
	}


	void HandlePlayerRestarted(class AGameEvent_TA* GameEvent, class ACar_TA* PlayerCar);
	void RegisterBalls();
	void RegisterCars();
	void UnregisterCars();
	void HandleBumpedCar(class ACar_TA* Car, class ACar_TA* HitCar);
	TEnumAsByte<EFiveHitType> InitiatorFiveHitType(class ACar_TA* Initiator, class ACar_TA* Receiver);
	void OnBallAdded(class AGameEvent_Soccar_TA* GameEventSoccar, class ABall_TA* Ball);
	void OnMatchEnded(class AGameEvent_Soccar_TA* SoccarEvent);
	void DetermineTouchCounts(class AGameEvent_Soccar_TA* SoccarEvent);
	void DeterminePickupCounts(class AGameEvent_Soccar_TA* SoccarEvent);
	void OnActiveRoundChanged(class AGameEvent_Soccar_TA* InGameEvent);
	void BackflipCars(TArray<class ACar_TA*> CarsToFlip);
	void BackflipCar(class ACar_TA* Car);
	void OnCarDemolished(class ACar_TA* Victim, const struct FDemolishData& Data);
	void OnGameStateChanged(class AGameEvent_TA* InGame);
	void OnGoalScored(class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIndex);
	void OnCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<EBallHitType> HitType);
	void OnBallHitWorld(class ABall_TA* Ball, const struct FVector& HitLoc, const struct FVector& HitNormal);
	void TickBalls(float DeltaTime);
	void Tick(float DeltaTime);
	void UpdateRedZone(int BallIdx);
	class UGoal_TA* CalculateShotGoal(class UGoal_TA* GoalToTest, class ABall_TA* Ball, float ArriveTime);
	void UpdateShotGoal(int BallIdx);
	bool IsBallBehindGoal(class ABall_TA* Ball, class UGoal_TA* Goal);
	class UGoal_TA* FindShotGoal(class ABall_TA* Ball);
	bool IsBulletHit(const struct FBallHitInfo& Hit);
	bool IsBackwardsHit(const struct FBallHitInfo& Hit);
	float GetDeltaSpeed(const struct FBallHitInfo& Hit);
	bool IsTurtleHit(const struct FBallHitInfo& Hit);
	bool IsJuggleHit(const struct FBallHitInfo& Hit);
	bool IsBicycleHit(const struct FBallHitInfo& Hit);
	bool IsLocationFarOffGround(const struct FVector& InLocation, struct FVector* StructInitializer_B9AAE38B47F38903DE5D69B00D511AE0);
	bool IsAerialHit(const struct FBallHitInfo& Hit);
	bool IsInRedZone(class UGoal_TA* Goal, class ABall_TA* Ball);
	bool IsEpicSave(class ABall_TA* Ball, const struct FBallHitInfo& Hit, class UGoal_TA* Goal);
	float GetHitDistanceToGoal(class ABall_TA* Ball, const struct FBallHitInfo& Hit, class UGoal_TA* Goal);
	void BroadcastStatTickerEvent(class APRI_TA* Receiver, class APRI_TA* Victim, class UStatEvent_TA* StatEvent);
	void GiveScore(class APRI_TA* ToPRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim, int Count);
	void UnregisterCar(class APawn_X* Car);
	void RegisterCar(class ACar_TA* Car);
	void UnregisterBall(class APawn_X* Ball);
	void RegisterBall(class ABall_TA* Ball);
	int GetBallIndex(class ABall_TA* Ball);
	void SetGameEvent(class AGameEvent_Soccar_TA* InGameEvent);
	void EventGaveStat(class AStatFactory_TA* Factory, class APRI_TA* ToPRI, class UStatEvent_TA* StatEvent, class ABall_TA* Ball, int BallHitIndex, class APRI_TA* Victim);
};


// Class TAGame._CrowdTypes_TA
// 0x0000 (0x0060 - 0x0060)
class U_CrowdTypes_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame._CrowdTypes_TA");
		return ptr;
	}

};


// Class TAGame.CrowdSounds_TA
// 0x027C (0x02DC - 0x0060)
class UCrowdSounds_TA : public UObject
{
public:
	class UAkSoundCue*                                 Sound;                                                    // 0x0060(0x0008) (Edit)
	struct FCrowdExcitementSounds                      GoalScored;                                               // 0x0068(0x0028) (Edit, NeedCtorLink)
	struct FCrowdExcitementSounds                      ShotAttempt;                                              // 0x0090(0x0028) (Edit, NeedCtorLink)
	struct FCrowdExcitementSounds                      OpenGoal;                                                 // 0x00B8(0x0028) (Edit, NeedCtorLink)
	struct FCrowdExcitementSounds                      Save;                                                     // 0x00E0(0x0028) (Edit, NeedCtorLink)
	struct FCrowdExcitementSounds                      Aerial;                                                   // 0x0108(0x0028) (Edit, NeedCtorLink)
	struct FCrowdExcitementSounds                      LongTimeNearGoal;                                         // 0x0130(0x0028) (Edit, NeedCtorLink)
	struct FCrowdExcitementSounds                      FastBreak;                                                // 0x0158(0x0028) (Edit, NeedCtorLink)
	struct FCrowdExcitementSounds                      Hit0Second;                                               // 0x0180(0x0028) (Edit, NeedCtorLink)
	struct FCrowdExcitementSounds                      AnyDemolition;                                            // 0x01A8(0x0028) (Edit, NeedCtorLink)
	struct FCrowdExcitementSounds                      RelevantDemolition;                                       // 0x01D0(0x0028) (Edit, NeedCtorLink)
	struct FCrowdExcitementSounds                      GameStart;                                                // 0x01F8(0x0028) (Edit, NeedCtorLink)
	struct FCrowdExcitementSounds                      RoundStart;                                               // 0x0220(0x0028) (Edit, NeedCtorLink)
	struct FCrowdExcitementSounds                      KickoffTouch;                                             // 0x0248(0x0028) (Edit, NeedCtorLink)
	struct FCrowdExcitementSounds                      TenseClear;                                               // 0x0270(0x0028) (Edit, NeedCtorLink)
	TArray<struct FCrowdExcitementSounds>              MatchEndCountDown;                                        // 0x0298(0x0010) (Edit, NeedCtorLink)
	class UAkSoundCue*                                 LowEnergyChant;                                           // 0x02A8(0x0008) (Edit)
	class UAkSoundCue*                                 OvertimeStart;                                            // 0x02B0(0x0008) (Edit)
	class UAkSoundCue*                                 Win;                                                      // 0x02B8(0x0008) (Edit)
	class UAkSoundCue*                                 Lose;                                                     // 0x02C0(0x0008) (Edit)
	class UAkSoundCue*                                 Forfeit;                                                  // 0x02C8(0x0008) (Edit)
	class UAkSoundCue*                                 MatchEndedEncore;                                         // 0x02D0(0x0008) (Edit)
	float                                              MatchEndedEncoreDelay;                                    // 0x02D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CrowdSounds_TA");
		return ptr;
	}

};


// Class TAGame.CrowdManager_TA
// 0x0048 (0x02B0 - 0x0268)
class ACrowdManager_TA : public AActor
{
public:
	TArray<class ACrowdActor_TA*>                      CrowdActors;                                              // 0x0268(0x0010) (Edit, NeedCtorLink)
	class UCrowdActorSettings_TA*                      Settings;                                                 // 0x0278(0x0008) (Edit)
	unsigned long                                      bInitialized : 1;                                         // 0x0280(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0284(0x0004) MISSED OFFSET
	TArray<class ACrowdActor_TA*>                      RandomChantCrowdActors;                                   // 0x0288(0x0010) (Transient, NeedCtorLink)
	class UAkSoundCue*                                 ReplicatedGlobalOneShotSound;                             // 0x0298(0x0008) (Net, Transient)
	float                                              DefenseZoneTime;                                          // 0x02A0(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	class AGameEvent_Soccar_TA*                        GameEvent;                                                // 0x02A8(0x0008) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CrowdManager_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void TimerUpdateDefenseChant();
	void StartTimerDefenseChant();
	void PlayRandomChant();
	void SetRandomChantTimer();
	void PlayMatchEndedEncore();
	void HandleMatchEnded(class AGameEvent_Soccar_TA* G);
	void HandleOvertimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleGameStateChanged(class AGameEvent_TA* G);
	void ClearGlobalOneShotSound();
	void PlayGlobalOneShotSound(class UAkSoundCue* Sound);
	void Init(class AGameEvent_Soccar_TA* InGameEvent);
	void PostBeginPlay();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class TAGame.MatchType_Custom_TA
// 0x0008 (0x00A0 - 0x0098)
class UMatchType_Custom_TA : public UMatchType_TA
{
public:
	unsigned long                                      bOnePlayerSelectedTeam : 1;                               // 0x0098(0x0004) (Transient)
	int                                                LargestMaxTeamSize;                                       // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_Custom_TA");
		return ptr;
	}


	bool CanCheckForBannedPlayers();
	bool CanIncreaseMaxTeamSize();
	bool UseCustomMatchSettings();
	bool ShouldSetGameOwner();
	bool AllowMatchAdmin();
	bool AllowSpectators();
	bool RecordPlayedMap();
	class ATeam_TA* PickTeam(class AController* C);
	bool CanRestartPlayer(class AController* NewPlayer);
	bool AutoSelectTeam(class AController* NewPlayer);
	int GetMaxTeamSize();
	bool ChooseTeam(int TeamIndex, class APlayerController_TA* Player);
	bool CanJoinATeam();
	bool CanChangeTeam();
	void OnPlayerAddedToTeam();
	bool ShouldStartMatch();
	void SetGameData();
	void OnInitGameEvent();
};


// Class TAGame.MatchType_Offline_TA
// 0x0000 (0x00A0 - 0x00A0)
class UMatchType_Offline_TA : public UMatchType_Custom_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_Offline_TA");
		return ptr;
	}


	struct FName GetOfflinePlaylistName(class AGameEvent_TA* InGameEvent, const struct FString& Options);
	void OnInitGameEvent();
	void Init(class AGameEvent_TA* InGameEvent, const struct FString& Options);
};


// Class TAGame.MatchType_Tutorial_TA
// 0x0000 (0x00A0 - 0x00A0)
class UMatchType_Tutorial_TA : public UMatchType_Offline_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_Tutorial_TA");
		return ptr;
	}


	bool AllowMatchAdmin();
	void InitCustomMatchSettings(const struct U_Types_X_FCustomMatchSettings& Settings);
	struct FName GetOfflinePlaylistName(class AGameEvent_TA* InGameEvent, const struct FString& Options);
	int GetMaxTeamSize();
};


// Class TAGame.DebugHelpMenu_TA
// 0x0038 (0x0108 - 0x00D0)
class UDebugHelpMenu_TA : public UInteraction
{
public:
	float                                              CategoryTextScale;                                        // 0x00D0(0x0004) (Edit)
	float                                              ItemTextScale;                                            // 0x00D4(0x0004) (Edit)
	float                                              KeyTextScale;                                             // 0x00D8(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	TArray<struct UDebugHelpMenu_TA_FDebugCategory>    HelpCategories;                                           // 0x00E0(0x0010) (Transient, NeedCtorLink)
	int                                                SelectedCategoryIdx;                                      // 0x00F0(0x0004) (Transient)
	int                                                SelectedItemIdx;                                          // 0x00F4(0x0004) (Transient)
	float                                              ItemsWidth;                                               // 0x00F8(0x0004) (Transient)
	float                                              ItemsHeight;                                              // 0x00FC(0x0004) (Transient)
	float                                              Fade;                                                     // 0x0100(0x0004) (Transient)
	unsigned long                                      bClosing : 1;                                             // 0x0104(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DebugHelpMenu_TA");
		return ptr;
	}


	void Close();
	void ExecuteItem(int CatIdx, int ItemIdx);
	bool HandleInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	void DrawItem(class UCanvas* C, int CategoryIdx, int ItemIdx);
	void DrawCategory(class UCanvas* C, int CategoryIdx);
	void PostRender(class UCanvas* C);
	void BuildHelpItems();
	int GetCategoryIndex(const struct FString& CategoryName);
	bool GetHelpValues(const struct FString& Cmd, struct FString* Command, struct FString* Category, struct FString* Description);
};


// Class TAGame.DebugInput_TA
// 0x0000 (0x02F8 - 0x02F8)
class UDebugInput_TA : public UPlayerInput
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DebugInput_TA");
		return ptr;
	}

};


// Class TAGame.DecalBlockingActor_TA
// 0x0000 (0x0288 - 0x0288)
class ADecalBlockingActor_TA : public AStaticMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DecalBlockingActor_TA");
		return ptr;
	}

};


// Class TAGame.DynamicMeshActor_TA
// 0x0008 (0x0270 - 0x0268)
class ADynamicMeshActor_TA : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x0268(0x0008) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DynamicMeshActor_TA");
		return ptr;
	}


	void ToggleBallPosition(bool bAdd);
	void DestroyForMapUnload();
	void Destroyed();
	void PostBeginPlay();
};


// Class TAGame.DynamicSpawnPoint_TA
// 0x0000 (0x0268 - 0x0268)
class ADynamicSpawnPoint_TA : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DynamicSpawnPoint_TA");
		return ptr;
	}

};


// Class TAGame.SystemSettingsManager_TA
// 0x0004 (0x0064 - 0x0060)
class USystemSettingsManager_TA : public UObject
{
public:
	int                                                NumPlayers;                                               // 0x0060(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SystemSettingsManager_TA");
		return ptr;
	}


	void ApplySettings(class UGameViewportClient_TA* GVC);
	void UpdateNumPlayers(class UGameViewportClient_TA* GVC);
	void HandleSplitScreenTypeChanged(class UGameViewportClient_TA* GVC);
	void HandleWorldFullScreenChanged(class UGameViewportClient_TA* GVC);
	void Init();
};


// Class TAGame.SoundSettingsManager_TA
// 0x0018 (0x0078 - 0x0060)
class USoundSettingsManager_TA : public UObject
{
public:
	class USoundSettingsSave_TA*                       SoundSave;                                                // 0x0060(0x0008) (Transient)
	class USoundSettingsControllerSave_TA*             SoundSaveController;                                      // 0x0068(0x0008) (Transient)
	class ULocalPlayer_TA*                             PrimaryPlayer;                                            // 0x0070(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SoundSettingsManager_TA");
		return ptr;
	}


	void __SoundSettingsManager_TA__HandleSoundSettingsLoaded_12999A85408D1BBC499C38BF24580E18();
	void __SoundSettingsManager_TA__HandleSoundSettingsLoaded_BE9EC32D47FCC104B55C23A456C71161();
	void __SoundSettingsManager_TA__HandleSoundSettingsLoaded_840CA4AA4FB90EBDF8C279B2BEBFF3B9();
	void __SoundSettingsManager_TA__HandleSoundSettingsLoaded_E1D2E5524A3B4F1E0023E88F5C128436();
	void __SoundSettingsManager_TA__HandleSoundSettingsLoaded_115EC0754765E2678214139F13862BBD();
	void __SoundSettingsManager_TA__HandleSoundSettingsLoaded_6BECA09F4BE4B7F2FB4EF08C195C6B9E();
	void __SoundSettingsManager_TA__HandleSoundSettingsLoaded_40D0456149C2A74661BF8890D8CE62EE();
	void __SoundSettingsManager_TA__HandleSoundSettingsControllerLoaded_F1C2A16E4BBBCD0B2093BF8600007884();
	void __SoundSettingsManager_TA__HandleSoundSettingsControllerLoaded_3A1EB35F48C815A01DCE41BA4F39EBDE();
	void SetControllerSoundMode(TEnumAsByte<EControllerSoundMode> NewValue);
	void HandleLocalPlayerCountChange(class ULocalPlayer* Player);
	void SetControllerVolume(float NewValue);
	void SetDynamicRange(TEnumAsByte<EAkDynamicRangeType> NewValue);
	void SetOutputType(TEnumAsByte<EAkOutputType> NewValue);
	void SetVoiceVolume(float NewValue);
	void SetCrowdVolume(float NewValue);
	void SetAmbientVolume(float NewValue);
	void SetMusicVolume(float NewValue);
	void SetSoundVolume(float NewValue);
	void ApplyControllerSoundSettings();
	void HandleSoundSettingsControllerUnloaded(class USoundSettingsControllerSave_TA* InSoundSave);
	void HandleSoundSettingsControllerLoaded(class USoundSettingsControllerSave_TA* InSoundSave);
	void ApplySoundSettings();
	void HandleSoundSettingsUnloaded(class USoundSettingsSave_TA* InSoundSave);
	void HandleSoundSettingsLoaded(class USoundSettingsSave_TA* InSoundSave);
	void InitFromPlayer(class ULocalPlayer_TA* Player);
	void HandlePrimaryPlayerChange(class ULocalPlayer* Old, class ULocalPlayer_TA* NewPlayer);
	void HandleLocalPlayerLeave(class ULocalPlayer_TA* Player);
	void HandleLocalPlayerJoin(class ULocalPlayer_TA* Player);
	void Init();
};


// Class TAGame.AppMetrics_TA
// 0x0000 (0x0080 - 0x0080)
class UAppMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AppMetrics_TA");
		return ptr;
	}


	void AppStart();
};


// Class TAGame.__OnlineProductStore_TA__FindProductsFromHash_98975B584FCD5EA383C7DE8655597FA3
// 0x0004 (0x0064 - 0x0060)
class U__OnlineProductStore_TA__FindProductsFromHash_98975B584FCD5EA383C7DE8655597FA3 : public UObject
{
public:
	struct FProductHashID                              HashID;                                                   // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineProductStore_TA__FindProductsFromHash_98975B584FCD5EA383C7DE8655597FA3");
		return ptr;
	}


	TArray<class UOnlineProduct_TA*> __OnlineProductStore_TA__FindProductsFromHash_98975B584FCD5EA383C7DE8655597FA3(class UOnlineProductStoreSet_TA* Set);
};


// Class TAGame.FloppyBits_TA
// 0x001C (0x0090 - 0x0074)
class UFloppyBits_TA : public UAttachmentBehavior_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	class UPhysicsAsset*                               PhysAsset;                                                // 0x0078(0x0008) (Edit)
	struct FRBCollisionChannelContainer                CollisionChannels;                                        // 0x0080(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	class USkeletalMeshComponent*                      SkelMesh;                                                 // 0x0088(0x0008) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FloppyBits_TA");
		return ptr;
	}


	void InitPhysics();
	void HandleAttached(class UCarMeshComponent_TA* CarMesh);
	void OnInit();
};


// Class TAGame.BeamTraceComponent_TA
// 0x003C (0x00E0 - 0x00A4)
class UBeamTraceComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	TArray<class UParticleSystemComponent*>            BeamSystems;                                              // 0x00A8(0x0010) (Edit, ExportObject, Component, NeedCtorLink, EditInline)
	float                                              TraceDistance;                                            // 0x00B8(0x0004) (Edit)
	float                                              MinRetraceRate;                                           // 0x00BC(0x0004) (Edit)
	float                                              MaxRetraceRate;                                           // 0x00C0(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	TArray<struct FBeamTraceProps>                     Beams;                                                    // 0x00C8(0x0010) (Transient, Component, NeedCtorLink)
	class AFXActor_X*                                  FXOwner;                                                  // 0x00D8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BeamTraceComponent_TA");
		return ptr;
	}


	void Tick(float DeltaTime);
	void Detached();
	void Attached();
};


// Class TAGame.__FXActor_TA__ApplyPaintToAttachment_354D7CB149BBF6AA0D8DD1B1DE44E8DC
// 0x0010 (0x0070 - 0x0060)
class U__FXActor_TA__ApplyPaintToAttachment_354D7CB149BBF6AA0D8DD1B1DE44E8DC : public UObject
{
public:
	class UProductAttribute_PaintSettings_TA*          PaintSettings;                                            // 0x0060(0x0008)
	class UProductPaint_TA*                            Paint;                                                    // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__FXActor_TA__ApplyPaintToAttachment_354D7CB149BBF6AA0D8DD1B1DE44E8DC");
		return ptr;
	}


	void __FXActor_TA__ApplyPaintToAttachment_354D7CB149BBF6AA0D8DD1B1DE44E8DC(class UParticleSystemComponent* BeamPSC);
};


// Class TAGame.__FXActor_TA__ApplyPaint_4217B4F44898A56D3F6DEE80D9D45A9F
// 0x0010 (0x0070 - 0x0060)
class U__FXActor_TA__ApplyPaint_4217B4F44898A56D3F6DEE80D9D45A9F : public UObject
{
public:
	class UProductAttribute_PaintSettings_TA*          PaintSettings;                                            // 0x0060(0x0008)
	class UProductPaint_TA*                            Paint;                                                    // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__FXActor_TA__ApplyPaint_4217B4F44898A56D3F6DEE80D9D45A9F");
		return ptr;
	}


	void __FXActor_TA__ApplyPaint_4217B4F44898A56D3F6DEE80D9D45A9F(const struct FFXAttachment& FXAttach);
};


// Class TAGame.__FXActor_Boost_TA__DuplicateAttachment_D6336EDF455741677E173FA410CDD9BB
// 0x0014 (0x0074 - 0x0060)
class U__FXActor_Boost_TA__DuplicateAttachment_D6336EDF455741677E173FA410CDD9BB : public UObject
{
public:
	TArray<class UActorComponent*>                     ComponentsToUse;                                          // 0x0060(0x0010) (ExportObject, Component, NeedCtorLink, EditInline)
	int                                                AttachmentIdx;                                            // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__FXActor_Boost_TA__DuplicateAttachment_D6336EDF455741677E173FA410CDD9BB");
		return ptr;
	}


	void __FXActor_Boost_TA__DuplicateAttachment_D6336EDF455741677E173FA410CDD9BB(const struct FName& X);
};


// Class TAGame.FunctionTemplates
// 0x0000 (0x0060 - 0x0060)
class UFunctionTemplates : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FunctionTemplates");
		return ptr;
	}


	void STATIC_Object__Swap__Int(int* A, int* B);
	void STATIC_Object__SwapArrayItems__TourTeam(int Idx1, int Idx2, TArray<struct FTourTeam>* A);
	void STATIC_ArrayFuncs__ShuffleArray__MusicTrack_TA(TArray<class UMusicTrack_TA*>* ArrayToShuffle);
	void STATIC_Object__SwapArrayItems__MusicTrack_TA(int Idx1, int Idx2, TArray<class UMusicTrack_TA*>* A);
	void STATIC_ArrayFuncs__ShuffleArray__String(TArray<struct FString>* ArrayToShuffle);
	void STATIC_Object__SwapArrayItems__String(int Idx1, int Idx2, TArray<struct FString>* A);
	class UProductAsset_Skin_TA* STATIC_ProductDatabase_TA__TLoadAsset__ProductAsset_Skin_TA(int ProductID);
	class UProductAsset_Body_TA* STATIC_ProductDatabase_TA__TLoadAsset__ProductAsset_Body_TA(int ProductID);
	void STATIC_Object__Swap__ClubColorSet(struct FClubColorSet* A, struct FClubColorSet* B);
	void STATIC_Object__Swap__ClubDetails_X(class UClubDetails_X** A, class UClubDetails_X** B);
	void STATIC_ArrayFuncs__ShuffleArray__KnockoutPickupArchetype_TA();
	void STATIC_Object__SwapArrayItems__KnockoutPickupArchetype_TA(int Idx1, int Idx2);
};


// Class TAGame.__XPManager_TA__PickRandomSlot_034DA9964078AA99A4806A91DD22C1F5
// 0x0008 (0x0068 - 0x0060)
class U__XPManager_TA__PickRandomSlot_034DA9964078AA99A4806A91DD22C1F5 : public UObject
{
public:
	class UProfile_TA*                                 Profile;                                                  // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__XPManager_TA__PickRandomSlot_034DA9964078AA99A4806A91DD22C1F5");
		return ptr;
	}


	bool __XPManager_TA__PickRandomSlot_034DA9964078AA99A4806A91DD22C1F5(class UProductSlot_TA* Slot);
};


// Class TAGame.ProductsOfflineSave_TA
// 0x0100 (0x01C8 - 0x00C8)
class UProductsOfflineSave_TA : public USaveObject_TA
{
public:
	TArray<int>                                        UnlockedProducts;                                         // 0x00C8(0x0010) (NeedCtorLink)
	TArray<int>                                        MatchCompleteCarBodies;                                   // 0x00D8(0x0010) (NeedCtorLink)
	TArray<struct FName>                               AllCarsPlayedRewards;                                     // 0x00E8(0x0010) (Const, Transient, NeedCtorLink)
	TArray<int>                                        RecentlyUnlockedProductIDs;                               // 0x00F8(0x0010) (NeedCtorLink)
	TArray<int>                                        RecentlyUnlockedGarageSlots;                              // 0x0108(0x0010) (NeedCtorLink)
	int                                                MatchesPlayed;                                            // 0x0118(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventProductUnlocked__Delegate;                         // 0x0120(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x011C(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventProductUnlockedForMultiItem__Delegate;             // 0x0138(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0138(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventProductUnlockedWithoutNotification__Delegate;      // 0x0150(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0150(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventProductLocked__Delegate;                           // 0x0168(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0168(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventUnlockedProductsRemoved__Delegate;                 // 0x0180(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0180(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventDefaultProductsUnlocked__Delegate;                 // 0x0198(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0198(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __MatchesPlayed__ChangeNotify;                            // 0x01B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x01B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductsOfflineSave_TA");
		return ptr;
	}


	void __ProductsOfflineSave_TA__HandleLoadUnlockedBody_F6A7F37B4C1A010711A8739A097B1B8B(int PID);
	void __ProductsOfflineSave_TA__GetVersionDelegates_FF8E01B54B7DB3D2C20BD9AAC11F22A2(class UObject* SaveObj);
	void __MatchesPlayed__ChangeNotifyFunc();
	void GetVersionDelegates(TArray<struct FScriptDelegate>* VersionDelegates);
	class USaveObject_TA* Reconcile(class USaveObject_TA* Remote);
	void CacheOfflineProducts(class UCachedUnlockedProducts_TA* OfflineProducts);
	bool DidPlayMatchWithAllDefaultBodies();
	void GetLockedItemsFromNames(TArray<struct FName>* ProductNames, TArray<int>* LockedIDs);
	TArray<int> SetMatchCompleteForBody(int ProductID);
	void UnlockDefaultProducts();
	bool HasPlayedEnoughMatchesToUnlock(class UProduct_TA* Product);
	void PurgeUnlockedProducts();
	void ValidateUnlocks();
	void HandleLoadUnlockedBody(const struct FAssetLoadResult& Result, TArray<int>* ArrayResultLocal_7751344E479CBDA37E7E208354044986);
	void UnlockChildProducts(int ProductID);
	bool UnlockProductNoNotify(int ProductID);
	bool UnlockProduct(int ProductID, bool bMultiItemDrop);
	bool LockProduct(int ProductID);
	bool IsProductUnlockedEx(class UProduct_TA* Product);
	bool IsProductUnlocked(class UProduct_TA* Product);
	bool IsProductIdUnlocked(int ProductID);
	bool STATIC_IsProductUnlockable(int ProductID, struct FString* Reason);
	bool CanUnlockProduct(int ProductID);
	void ClearUnlockedProducts();
	void OnLoad();
	void EventDefaultProductsUnlocked();
	void EventUnlockedProductsRemoved();
	void EventProductLocked(class UProductsOfflineSave_TA* ProductsOfflineSave, int ProductID);
	void EventProductUnlockedWithoutNotification(class UProductsOfflineSave_TA* ProductsOfflineSave, int ProductID);
	void EventProductUnlockedForMultiItem(int ProductID);
	void EventProductUnlocked(int ProductID);
};


// Class TAGame.__XPManager_TA__AllProductsUnlocked_3E02417042F408ED7F84B48AE147936C
// 0x0008 (0x0068 - 0x0060)
class U__XPManager_TA__AllProductsUnlocked_3E02417042F408ED7F84B48AE147936C : public UObject
{
public:
	class UProfile_TA*                                 Profile;                                                  // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__XPManager_TA__AllProductsUnlocked_3E02417042F408ED7F84B48AE147936C");
		return ptr;
	}


	bool __XPManager_TA__AllProductsUnlocked_3E02417042F408ED7F84B48AE147936C(class UProductSlot_TA* Slot);
};


// Class TAGame.GameMetrics_TA
// 0x0000 (0x0080 - 0x0080)
class UGameMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameMetrics_TA");
		return ptr;
	}


	void StatEvent(const struct FUniqueNetId& PlayerID, const struct FName& StatName, const struct FString& HitLocation);
	void RecordStatEvent(const struct FUniqueNetId& PlayerID, const struct FName& StatName, const struct FVector& HitLocation);
	void GameEnd(int WinningTeam, int Team0Score, int Team1Score);
	void Overtime();
	void GoalScoreHit(const struct FUniqueNetId& PlayerID, const struct FString& CarLocation, const struct FString& CarVelocity, const struct FString& BallLocation, const struct FString& BallVelocity, float ElapsedTimeSeconds);
	void RecordGoalScoreTouch(const struct FBallHitInfo& Hit);
	void GoalScored(int Team, const struct FString& BallLocation, const struct FString& BallVelocity);
	void RecordGoalScored(int Team, const struct FVector& BallLocation, const struct FVector& BallVelocity);
	void ForfeitVoteFail(int Team);
	void ForfeitVotePass(int Team);
	void ForfeitVoteStart(const struct FUniqueNetId& Instigator, int Team);
	void LeaveTeam(const struct FUniqueNetId& PlayerID);
	void JoinTeam(const struct FUniqueNetId& PlayerID, int Team);
	void EndRound(int SecondsRemaining);
	void StartRound(int SecondsRemaining);
	void IdleKick(const struct FUniqueNetId& PlayerID);
	void RemovePlayer(const struct FUniqueNetId& PlayerID);
	void AddPlayer(const struct FUniqueNetId& PlayerID);
	void PlayMutator(const struct FName& MutatorName);
	void GameInit(const struct FName& MapName, const struct FName& EventName, const struct FName& MatchType, int Playlist, const struct FString& MatchGUID);
};


// Class TAGame.SeqEvent_StadiumTeamColorsChanged_TA
// 0x0020 (0x019C - 0x017C)
class USeqEvent_StadiumTeamColorsChanged_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	int                                                Team;                                                     // 0x0180(0x0004) (Edit)
	struct FVector                                     Primary;                                                  // 0x0184(0x000C)
	struct FVector                                     Secondary;                                                // 0x0190(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_StadiumTeamColorsChanged_TA");
		return ptr;
	}


	void LinearColorToVector(struct FLinearColor* InColor, struct FVector* OutVector);
	void SetTeamColors(TArray<struct FLinearColor>* Colors);
};


// Class TAGame.__Team_TA__GetPartyFollowerIds_69D9EB00488D12DD8C407183B998C60F
// 0x0008 (0x0068 - 0x0060)
class U__Team_TA__GetPartyFollowerIds_69D9EB00488D12DD8C407183B998C60F : public UObject
{
public:
	class APRI_TA*                                     PRI;                                                      // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__Team_TA__GetPartyFollowerIds_69D9EB00488D12DD8C407183B998C60F");
		return ptr;
	}


	bool __Team_TA__GetPartyFollowerIds_69D9EB00488D12DD8C407183B998C60F(class APRI_TA* P);
};


// Class TAGame.Team_Soccar_TA
// 0x0040 (0x04A0 - 0x0460)
class ATeam_Soccar_TA : public ATeam_TA
{
public:
	int                                                GameScore;                                                // 0x0460(0x0004) (Net, Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0464(0x0004) MISSED OFFSET
	TArray<class AActor*>                              PrimaryStarts;                                            // 0x0468(0x0010) (Transient, NeedCtorLink)
	TArray<class AActor*>                              SecondaryStarts;                                          // 0x0478(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventGameScoreUpdated__Delegate;                        // 0x0488(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0488(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Team_Soccar_TA");
		return ptr;
	}


	void OnGameScoreUpdated();
	void SetGameScore(int Value);
	void ScoreGame();
	void InitSpawnPoints();
	class AActor* MirrorStartPoint(class AActor* SpawnPoint, const struct FVector& Pivot);
	void Destroyed();
	void SetGameEvent(class AGameEvent_Team_TA* InGameEvent);
	void ReplicatedEvent(const struct FName& VarName);
	void EventGameScoreUpdated(class ATeam_Soccar_TA* Team);
};


// Class TAGame.MatchSeries_TA
// 0x0030 (0x0090 - 0x0060)
class UMatchSeries_TA : public UObject
{
public:
	int                                                SeriesLength;                                             // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TArray<struct FSeriesTeam>                         Teams;                                                    // 0x0068(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __EventSeriesGameForfeit__Delegate;                       // 0x0078(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchSeries_TA");
		return ptr;
	}


	int __MatchSeries_TA__GetGamesPlayed_44A3425C40E3CE9A21345DA19DA22CEA(int Sum, const struct FSeriesTeam& Team);
	int __MatchSeries_TA__GetSeriesWinner_C2E700AD49B2D51ACB6058B18B6F2F56(const struct FSeriesTeam& T);
	int STATIC_GetSeriesWinCount(int InSeriesLength);
	int STATIC_GetSeriesWinnerFromData(int InSeriesLength, TArray<int>* InGamesWon);
	int GetSeriesWinner(TArray<int>* MapLocal_77260B8E4BC709184A3CEA8457600800);
	int GetGamesPlayed(int* ReduceLocal_21CE91F4479F277CFE6341AAE29ADC8D);
	bool AllGamesPlayed();
	void ForfeitGame(int WinningTeamIndex);
	void ScoreGame(int TeamIndex);
	int FindTeamForPlayer(const struct FUniqueNetId& Player);
	void RemoveTeamPlayer(const struct FUniqueNetId& Player);
	void AddTeamPlayer(int TeamIndex, const struct FUniqueNetId& Player);
	void EventSeriesGameForfeit(class UMatchSeries_TA* MatchSeries, int WinningTeamIndex);
};


// Class TAGame.SkinOverrideTable_TA
// 0x0010 (0x0070 - 0x0060)
class USkinOverrideTable_TA : public UObject
{
public:
	TArray<struct FProductSkinOverride>                Skins;                                                    // 0x0060(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkinOverrideTable_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_ProductLink_TA
// 0x0004 (0x0084 - 0x0080)
class UProductAttribute_ProductLink_TA : public UProductAttribute_TA
{
public:
	int                                                ProductID;                                                // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_ProductLink_TA");
		return ptr;
	}


	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* Attributes);
};


// Class TAGame.ProductAttribute_Masterpiece_TA
// 0x0000 (0x0080 - 0x0080)
class UProductAttribute_Masterpiece_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Masterpiece_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Level_TA
// 0x0004 (0x0084 - 0x0080)
class UProductAttribute_Level_TA : public UProductAttribute_TA
{
public:
	int                                                Level;                                                    // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Level_TA");
		return ptr;
	}


	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* Attributes);
};


// Class TAGame.ProductAttribute_EquippableSlot_TA
// 0x0001 (0x0081 - 0x0080)
class UProductAttribute_EquippableSlot_TA : public UProductAttribute_TA
{
public:
	TEnumAsByte<EEquippableProductSlot>                Slot;                                                     // 0x0080(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_EquippableSlot_TA");
		return ptr;
	}


	struct FName GetSlotName();
	struct FString GetOnlineProductAttributeValue();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* Attributes);
};


// Class TAGame.ProductAttribute_Expiration_TA
// 0x0008 (0x0088 - 0x0080)
class UProductAttribute_Expiration_TA : public UProductAttribute_TA
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.ProductAttribute_Expiration_TA.ExpirationTime

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Expiration_TA");
		return ptr;
	}


	struct FString GetHashID();
	struct FString GetTypeHashID();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* OtherAttributes);
};


// Class TAGame.ProductAttribute_Rental_TA
// 0x0004 (0x0084 - 0x0080)
class UProductAttribute_Rental_TA : public UProductAttribute_TA
{
public:
	int                                                RentalLength;                                             // 0x0080(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Rental_TA");
		return ptr;
	}


	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* OtherAttributes);
};


// Class TAGame.ProductAttribute_Indestructible_TA
// 0x0004 (0x0084 - 0x0080)
class UProductAttribute_Indestructible_TA : public UProductAttribute_TA
{
public:
	unsigned long                                      bIndestructible : 1;                                      // 0x0080(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Indestructible_TA");
		return ptr;
	}


	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* OtherAttributes);
};


// Class TAGame.ProductAttribute_BlueprintCost_TA
// 0x0004 (0x0084 - 0x0080)
class UProductAttribute_BlueprintCost_TA : public UProductAttribute_TA
{
public:
	int                                                Cost;                                                     // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_BlueprintCost_TA");
		return ptr;
	}


	struct FString GetOnlineProductAttributeValue();
	bool OnInit(const struct FString& AttributeValue, TArray<struct FOnlineProductAttribute>* OtherAttributes);
};


// Class TAGame.Mutator_TA
// 0x0004 (0x0064 - 0x0060)
class UMutator_TA : public UObject
{
public:
	unsigned long                                      bRecordMetrics : 1;                                       // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_TA");
		return ptr;
	}


	void MutateObject(class UObject* O);
	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.MatchRecorder_TA
// 0x0018 (0x0090 - 0x0078)
class UMatchRecorder_TA : public UMatchRecorder_X
{
public:
	TArray<class APRI_TA*>                             PRIs;                                                     // 0x0078(0x0010) (NeedCtorLink)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                               // 0x0088(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchRecorder_TA");
		return ptr;
	}


	void __MatchRecorder_TA__HandleTeamsCreated_022D713644E135B0DB6213AAB1604DD8(class ATeam_TA* Team);
	void UpdatePlayerData(class APRI_TA* PRI);
	void Finished();
	void HandleMatchEnded(class AGameEvent_Soccar_TA* G);
	void HandleMatchStarted(class AGameEvent_TA* G);
	void HandleJoinTeam(class ATeam_TA* Team, class APRI_TA* Member);
	void HandleTeamsCreated(class AGameEvent_Team_TA* G);
	void HandlePlayerRemoved(class AGameEvent_TA* G, class APRI_TA* PRI);
	void HandlePlayerAdded(class AGameEvent_TA* G, class APRI_TA* PRI);
	void SetClubMatch();
	void SetGameEvent(class AGameEvent_TA* InGame);
	void AddPlayer(const struct FUniqueNetId& PlayerID, const struct FString& PlayerName);
};


// Class TAGame.BanSync_TA
// 0x0028 (0x0088 - 0x0060)
class UBanSync_TA : public UObject
{
public:
	TArray<class UBanMessage_X*>                       BanMessages;                                              // 0x0060(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __EventSyncedBanStatus__Delegate;                         // 0x0070(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0070(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BanSync_TA");
		return ptr;
	}


	bool __BanSync_TA__SyncAllPlayers_9E20788A4EFD525E928F18AC88559045(const struct FUniqueNetId& Id);
	struct FUniqueNetId __BanSync_TA__SyncAllPlayers_27D96C20491DEEA77D8D3F8ACFE099D4(class APRI_TA* P);
	bool __BanSync_TA__SyncAllPlayers_394805E341A709347ACC1FB9DB1B8002(class APRI_TA* P);
	void __BanSync_TA__SetBanMessages_EECF46904C4169912B00B3B6153777F0(class UBanMessage_X* M);
	void Clear();
	class UBanMessage_X* GetBanMessage(TEnumAsByte<EBanType> BanType, const struct FUniqueNetId& PlayerID, TArray<class UBanMessage_X*>* FilterLocal_B21D1F56455A32B4E89B679EDC2C251D);
	TArray<class UBanMessage_X*> GetPlayerBanMessages(const struct FUniqueNetId& PlayerID, TArray<class UBanMessage_X*>* FilterLocal_ABAB604A4C1695FF06A1779A4936D482);
	TArray<class UBanMessage_X*> GetBanMessageTypes(TEnumAsByte<EBanType> BanType, TArray<class UBanMessage_X*>* FilterLocal_B9077C854D3C1A0BFA9981ADC2A33FD5);
	void SetBanMessages(TArray<class UBanMessage_X*>* Messages);
	void HandleBanStatusResponse(class URPC_GetBanStatus_TA* RPC);
	void SyncBanStatus(TArray<struct FUniqueNetId>* PlayerIDs);
	void SyncLocalPlayers();
	void HandleLocalPlayersChanged(class ULocalPlayer* NewPlayer);
	void HandlePsyNetLogin();
	void SyncAllPlayers(TArray<class APRI_TA*>* FilterLocal_C4F3D8F8481F85FF94FC5BB02AA92ECB, TArray<struct FUniqueNetId>* MapLocal_68308C3941228C95A118ACA143E011B3, TArray<struct FUniqueNetId>* FilterLocal_D9FC08D5442746F01EBAE38A3670B9E2);
	void HandlePlayerAdded(class AGameEvent_TA* GameEvent, class APRI_TA* PRI);
	void Construct();
	void EventSyncedBanStatus(class UBanSync_TA* BanSync);
};


// Class TAGame.OnlineGameDedicatedServer_TA
// 0x0048 (0x03B8 - 0x0370)
class UOnlineGameDedicatedServer_TA : public UOnlineGameDedicatedServer_X
{
public:
	class UOnlineGameTourServer_TA*                    Tournaments;                                              // 0x0370(0x0008) (Edit)
	int                                                LastPlaylistID;                                           // 0x0378(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x037C(0x0004) MISSED OFFSET
	TArray<class UObject*>                             AllRelevantProducts;                                      // 0x0380(0x0010) (Transient, NeedCtorLink)
	class UReplay_TA*                                  ReplayToUpload;                                           // 0x0390(0x0008)
	class ARLBot_SessionRecorder_TA*                   FlatbufferSession;                                        // 0x0398(0x0008)
	struct FScriptDelegate                             __EventGameEventInitialized__Delegate;                    // 0x03A0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x03A0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameDedicatedServer_TA");
		return ptr;
	}


	void UploadFlatbuffersSession(class ARLBot_SessionRecorder_TA* Session, const struct FString& URL, TArray<struct FKeyValuePair>* Headers);
	void InitFlatbufferUpload(class URPC_RecordMatch_X* RPC, class ARLBot_SessionRecorder_TA* Session);
	void InitReplayUpload(class URPC_RecordMatch_X* RPC, class UReplay_TA* Replay);
	class URPC_RecordMatch_X* SendRecordMatchRPC();
	bool AllowServerMigration();
	bool CanStartMatch();
	bool AllowSplitscreenJoinRankedMatch();
	bool AllowSplitscreenJoin(class APlayerReplicationInfo* PrimaryPRI, const struct FUniqueNetId& PlayerID, const struct FString& PlayerName, struct FString* Error);
	void AllowPlayerLogin(const struct FString& Options, const struct FUniqueNetId& PlayerID, struct FString* ErrorMessage);
	void GoToNextMap();
	struct FName GetNextRandomMapName(int GameMode);
	void GotoPrivateMatchMap(const struct FName& MapName, int GameMode, const struct FString& GameTags);
	unsigned char GetTeamNum(const struct FUniqueNetId& PlayerID);
	void ReportLowFPS();
	int GetPlaylistPlayerCount(class UGameSettingPlaylist_X* Playlist);
	void SetPlaylist(int PlaylistId);
	void GoInactive();
	void OnMainEventDestroyed();
	struct FString GetKickReason();
	bool KickPlayersOnGameEventDestroyed();
	void HandleMigrationJoin();
	void ClearSettings();
	void HandleGameEventEnded(class AGameEvent_Soccar_TA* GameEvent);
	void HandleGameInitialized(class AGameInfo_TA* Game);
	void StartMatch();
	class AGameEvent_TA* GetCurrentGameEvent();
	void LoadAllRelevantProducts();
	void HandleRLBotMatchEnded(class AGameEvent_Soccar_TA* _);
	void HandleRLBotMatchStarted(class AGameEvent_Soccar_TA* _);
	void HandleReplayDirector(class AGameEvent_Soccar_TA* G);
	void OnInit();
	void EventGameEventInitialized(class AGameEvent_TA* GameEvent);
};


// Class TAGame.MatchAdminComponent_TA
// 0x0010 (0x0070 - 0x0060)
class UMatchAdminComponent_TA : public UObject
{
public:
	class AGameEvent_TA*                               GameEvent;                                                // 0x0060(0x0008)
	class UOnlinePlayerPermissions_X*                  PlayerPermissions;                                        // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchAdminComponent_TA");
		return ptr;
	}


	bool IsMatchAdmin(class APRI_TA* PRI);
	bool IsLocalHost();
	void UpdateAll();
	void UpdatePlayer(class APRI_TA* PRI);
	void HandlePermissionsUpdated(class UOnlinePlayerPermissions_X* P);
	void HandleGameOwnerUpdated(class AGameEvent_TA* G, class APRI_TA* PRI);
	void HandlePlayerAdded(class AGameEvent_TA* G, class APRI_TA* PRI);
	void Init(class AGameEvent_TA* InGameEvent);
};


// Class TAGame.BotConfig_TA
// 0x0034 (0x00AC - 0x0078)
class UBotConfig_TA : public UOnlineConfig_X
{
public:
	struct FInterpCurveFloat                           BotSkillByPlayerSkillCurve;                               // 0x0078(0x0018) (NeedCtorLink)
	struct FInterpCurveFloat                           BotSkillByPlayerSkillCurve_vsAI;                          // 0x0090(0x0018) (NeedCtorLink)
	float                                              BotBoostThreshold_vsAI;                                   // 0x00A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BotConfig_TA");
		return ptr;
	}

};


// Class TAGame.PlayerRemovedEvent_TA
// 0x0008 (0x0068 - 0x0060)
class UPlayerRemovedEvent_TA : public UObject
{
public:
	class APRI_TA*                                     Player;                                                   // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerRemovedEvent_TA");
		return ptr;
	}

};


// Class TAGame.GameEventFinishedState_TA
// 0x0000 (0x0060 - 0x0060)
class UGameEventFinishedState_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEventFinishedState_TA");
		return ptr;
	}

};


// Class TAGame.ListenServer_TA
// 0x002C (0x008C - 0x0060)
class UListenServer_TA : public UObject
{
public:
	class AGRI_X*                                      GRI;                                                      // 0x0060(0x0008)
	class UAdHocBeacon_X*                              AdHocBeacon;                                              // 0x0068(0x0008)
	class AGameEvent_TA*                               GameEvent;                                                // 0x0070(0x0008)
	TArray<struct FLoadingPlayer>                      LoadingPlayers;                                           // 0x0078(0x0010) (NeedCtorLink)
	unsigned long                                      bRegistered : 1;                                          // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ListenServer_TA");
		return ptr;
	}


	int __ListenServer_TA__GetNumPlayers_35E937424996B459104D449705801839(const struct FLoadingPlayer& P);
	void GoToNextMap();
	void HandleCreateLanServerError(class UError* Error);
	void HandleLanServerCreated();
	void RegisterLanServer();
	void SubmitLanServerMetaData();
	struct FString BuildLanServerMetaData();
	void RebuildReservations(struct FReplicatedReservationData* StructInitializer_9A1C0B844E830EDFACF598BB896E997B);
	void TimerUpdateReservations();
	void UpdateReservations();
	void TimeoutLoadingPlayers();
	float GetMapLoadTime(TEnumAsByte<EOnlinePlatform> Platform);
	void RemoveLoadingPlayer(const struct FUniqueNetId& PlayerID);
	int GetMaxPlayers();
	int GetNumPlayers(TArray<int>* MapLocal_D82B58B74147759693033DA600CF169A, int* ReduceLocal_DD81F7DC4C79950F23DF399A3BFC4AAF);
	void KickConnectedPlayers();
	struct FUniqueNetId GetCustomMatchOwner();
	struct U_Types_X_FCustomMatchSettings GetCustomMatchSettings();
	void PlayerLoggedOut(class APlayerReplicationInfo* PRI);
	void PlayerLoggedIn(class APlayerReplicationInfo* PRI);
	bool AllowSplitscreenJoin(class APlayerReplicationInfo* PrimaryPRI, const struct FUniqueNetId& PlayerID, const struct FString& PlayerName, struct FString* Error);
	bool IsLocalPlayer(const struct FUniqueNetId& PlayerID);
	bool CanAddPlayers(int Count);
	void AllowPlayerLogin(const struct FString& Options, const struct FUniqueNetId& PlayerID, struct FString* ErrorMessage, struct FLoadingPlayer* StructInitializer_699271E243E2161F37A7A289AA39E086);
	void HandleGRIChanged();
	void Init(class AGameEvent_TA* InGameEvent);
};


// Class TAGame.GFxData_Chat_TA
// 0x0078 (0x0110 - 0x0098)
class UGFxData_Chat_TA : public UGFxDataSingleton_X
{
public:
	int                                                MaxMessages;                                              // 0x0098(0x0004) (Edit)
	int                                                MaxActiveChatTabs;                                        // 0x009C(0x0004) (Transient)
	TArray<struct FActiveChatTab>                      ActiveChatTabs;                                           // 0x00A0(0x0010) (Edit, NeedCtorLink, DataBinding)
	TArray<struct FChatPresetMessageGroup>             PresetGroups;                                             // 0x00B0(0x0010) (Edit, NeedCtorLink, DataBinding)
	TArray<struct FChatPresetMessage>                  PresetMessages;                                           // 0x00C0(0x0010) (Edit, NeedCtorLink, DataBinding)
	TArray<struct FGFxChatMessage>                     Messages;                                                 // 0x00D0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     BlockedMessageString;                                     // 0x00E0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ChatFilteredString;                                       // 0x00F0(0x0010) (Const, Localized, NeedCtorLink)
	unsigned long                                      bGameEnded : 1;                                           // 0x0100(0x0004) (Transient)
	TEnumAsByte<ECrossPlatformChatState>               LastMessagedCrossPlatformChatState;                       // 0x0104(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0105(0x0003) MISSED OFFSET
	class UChatHistory_TA*                             ChatHistory;                                              // 0x0108(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Chat_TA");
		return ptr;
	}


	void __GFxData_Chat_TA__OnShellSet_52F4307B4BE08E28B81B0AB1BFE4CDDC(class UObject* AccountSettings);
	void ClearDistracted();
	void OnOpenPartyChat();
	void OpenPartyChat();
	void OnOpenTeamChat();
	void OpenTeamChat();
	void OnOpenChat();
	void OpenChat();
	void RepopulatedChat();
	void CloseIndividualChatTab(const struct FUniqueNetId& PersonaId);
	void RepopulateIndividualChat(const struct FUniqueNetId& PersonaId);
	void ClearChat();
	void ClearChatByType(TEnumAsByte<EChatChannel> ChatChannel, const struct FUniqueNetId& Persona);
	void OnChatMessage(int Team, const struct FString& PlayerName, const struct FString& Message, TEnumAsByte<EChatChannel> ChatChannel, bool bLocalPlayer, const struct FUniqueNetId& SenderId, bool bWarning);
	void HandleMessageSanitizeError(class UError* Error, TEnumAsByte<EChatChannel> Channel, struct FGFxChatMessage* StructInitializer_964A2ED6495D71B7D896BE96D8A8BEE6);
	void InternalAddMessage(struct FGFxChatMessage* Data);
	void AddRepopulatedMessage(const struct FGFxChatMessage& NewMessage);
	void AddPresetMessage(const struct FGFxChatMessage& NewMessage);
	void AddTransientMessage(const struct FGFxChatMessage& NewMessage);
	void AddChatMessage(const struct FGFxChatMessage& NewMessage);
	void DispatchChatMessage(const struct FString& Message, TEnumAsByte<EChatChannel> ChatChannel, const struct FUniqueNetId& Recipient);
	void EraseChatByType(TEnumAsByte<EChatChannel> ChatChannel, const struct FUniqueNetId& PersonaId);
	void HandleReceivedUnfriendNotice(const struct FUniqueNetId& PersonaId);
	void HandleIndividualChat(const struct FString& InMessage, const struct FUniqueNetId& SenderId, bool bIsLocal, struct FGFxChatMessage* StructInitializer_DE470D9E43AEF3C9E30B588AA08D26EA);
	void SendPartyChatMessage(const struct FString& Message, bool bCanceled);
	void SendTeamChatMessage(const struct FString& Message, bool bCanceled);
	void SendGlobalChatMessage(const struct FString& Message, bool bCanceled);
	void SendChatChannelMessage(const struct FString& Message, TEnumAsByte<EChatChannel> ChatChannel, const struct FUniqueNetId& Recipient);
	void SendChatMessage(const struct FString& Message, bool bTeamMessage);
	TEnumAsByte<EVoiceFilter> GetChatFilter();
	void OnPressChatPreset(int Index);
	void SendChatPresetMessage(const struct FName& MessageId, bool bTeam);
	void DisplayFreshCrossPlatformFilterHint(TEnumAsByte<ECrossPlatformChatState> NewCrossplayChatState, class UOnlineGameParty_X* Party, struct FGFxChatMessage* StructInitializer_89D1DDF44CB5EA0714EB21A347BF11D1);
	void HandleCrossPlatformChatStateChanged();
	void HandlePartyChanged(class UOnlineGameParty_X* Party);
	void InitChatTabs(struct FActiveChatTab* StructInitializer_33B4C8964AAF72368C5DE9985309D1FE);
	void InitChatMessages();
	class APlayerController_TA* GetPlayerController();
	class AGameEvent_Soccar_TA* GetGameEvent();
	void HandleGameEnded(class AGameEvent_Soccar_TA* GameEvent);
	void OnRemoved();
	void HandleGameEventChanged(class APRI_TA* PRI);
	void HandlePRIReceived(class APlayerController_X* PC);
	void HandleQuickChatSettingsLoaded(class UProfileQuickChatSave_TA* QuickChatSave);
	void OnShellSet();
};


// Class TAGame.HUDBase_TA
// 0x0078 (0x0398 - 0x0320)
class AHUDBase_TA : public AHUD_X
{
public:
	class UGFxShell_TA*                                Shell;                                                    // 0x0320(0x0008) (Transient)
	struct FString                                     DisconnectedString;                                       // 0x0328(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ServerMaintString;                                        // 0x0338(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyChatTitle;                                           // 0x0348(0x0010) (Const, Localized, NeedCtorLink)
	class UGFxData_Chat_TA*                            ChatData;                                                 // 0x0358(0x0008) (Transient)
	class UGFxData_MultiItemDrops_TA*                  MultiItemDropData;                                        // 0x0360(0x0008) (Transient)
	struct FScriptDelegate                             __EventGameMessage__Delegate;                             // 0x0368(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0368(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventChatMessage__Delegate;                             // 0x0380(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0380(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.HUDBase_TA");
		return ptr;
	}


	void DrawLookupTextures();
	void DrawHUD();
	void NotifyChatBannedPermanently();
	void NotifyChatBanned();
	void NotifyChatDisabled(float Time);
	void NotifyServerShutdown();
	void ToggleScoreboard();
	bool ChatWithExternalKeyboard(const struct FString& Title, const struct FScriptDelegate& Callback);
	void OpenPartyChat();
	void OpenTeamChat();
	void OpenChat();
	void ToggleMidGameMenu();
	void UpdatePRIData();
	void ReceiveMessage(class UMessage_TA* Message, const struct FString& Text);
	bool ShouldDeliverMessage(const struct FUniqueNetId& SenderId);
	void AddChatMessage(bool bPreset, struct FGFxChatMessage* GFxMessage);
	void OnChatMessage(const struct FChatMessage& NewMsg, struct FGFxChatMessage* StructInitializer_BE34BAB74BBEB603EAE8B1A17EE62F68);
	void EraseChatByType(TEnumAsByte<EChatChannel> ChatChannel, const struct FUniqueNetId& PersonaId);
	void RepopulateChatHistory(TEnumAsByte<EChatChannel> ChatChannel, const struct FUniqueNetId& PersonaId);
	void LobbyMessage_TA(const struct FString& PlayerName, const struct FString& Message, TEnumAsByte<EChatChannel> ChatChannel, class APlayerReplicationInfo* SenderPRI);
	void IndividualMessage_TA(const struct FString& PlayerName, const struct FString& Message, TEnumAsByte<EChatChannel> ChatChannel, const struct FUniqueNetId& PersonaId, struct FGFxChatMessage* StructInitializer_ADB75FAC4B7C238F3F6BEF83D360413F);
	void Message_TA(class APlayerReplicationInfo* PRI, const struct FString& Message, TEnumAsByte<EChatChannel> ChatChannel, bool bPreset, const struct FUniqueNetId& Recipient);
	class UOnlineGame_X* GetOnlineGame();
	class UOnlinePlayer_TA* GetOnlinePlayer();
	class AGameEvent_TA* GetGameEvent();
	void Destroyed();
	void Init();
	void EventChatMessage(const struct FChatMessage& Message);
	void EventGameMessage(class UMessage_TA* Message, const struct FString& Text);
};


// Class TAGame.MatchType_Lan_TA
// 0x0000 (0x00A0 - 0x00A0)
class UMatchType_Lan_TA : public UMatchType_Custom_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_Lan_TA");
		return ptr;
	}


	void SetGameData();
};


// Class TAGame.MatchType_Private_TA
// 0x0000 (0x00A0 - 0x00A0)
class UMatchType_Private_TA : public UMatchType_Custom_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_Private_TA");
		return ptr;
	}


	bool IsOnlineMultiplayer();
};


// Class TAGame.__GameEvent_TA__SetBotSkillByTeam_0ED7B8EA4AE3A834C835379260E665D4
// 0x000C (0x006C - 0x0060)
class U__GameEvent_TA__SetBotSkillByTeam_0ED7B8EA4AE3A834C835379260E665D4 : public UObject
{
public:
	int                                                Team;                                                     // 0x0060(0x0004)
	float                                              NewSkill;                                                 // 0x0064(0x0004)
	float                                              BoostThreshold;                                           // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameEvent_TA__SetBotSkillByTeam_0ED7B8EA4AE3A834C835379260E665D4");
		return ptr;
	}


	void __GameEvent_TA__SetBotSkillByTeam_9BE48DDC4DAE69686D6E1A8E8B5D94E1(class AAIController_TA* AI);
	bool __GameEvent_TA__SetBotSkillByTeam_0ED7B8EA4AE3A834C835379260E665D4(class AAIController_TA* AI);
};


// Class TAGame.LoadoutRandomizer_TA
// 0x0000 (0x0060 - 0x0060)
class ULoadoutRandomizer_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutRandomizer_TA");
		return ptr;
	}


	int STATIC_GetRandomColorID(class UCarColorSet_TA* Set);
	void STATIC_RandomizeTeamPaint(struct U_Types_TA_FLoadoutData* Data);
	void STATIC_RandomizeSlot(class UProfile_TA* Profile, int SlotIndex, struct U_Types_TA_FLoadoutData* Data, TArray<class UOnlineProduct_TA*>* ArrayInitializer_5BF2CCD7401600F281E0AE832FF4623F);
	void STATIC_RandomizeSlotFromProductList(class UProductSlot_TA* Slot, struct U_Types_TA_FLoadoutData* Data, TArray<class UProduct_TA*>* ProductList);
	void STATIC_Randomize(class UProfile_TA* Profile, struct U_Types_TA_FLoadoutData* Loadouts);
	void STATIC_RandomizeLoadout(class UProfile_TA* Profile, struct U_Types_TA_FLoadoutData* Loadout);
	void STATIC_RandomizerLog(const struct FString& LogStr);
};


// Class TAGame.__GameEvent_TA__HasPlayerNamed_33DCBC424A4F05F3F160DEA709F37E08
// 0x0010 (0x0070 - 0x0060)
class U__GameEvent_TA__HasPlayerNamed_33DCBC424A4F05F3F160DEA709F37E08 : public UObject
{
public:
	struct FString                                     PlayerName;                                               // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameEvent_TA__HasPlayerNamed_33DCBC424A4F05F3F160DEA709F37E08");
		return ptr;
	}


	bool __GameEvent_TA__HasPlayerNamed_33DCBC424A4F05F3F160DEA709F37E08(class APRI_TA* PRI);
};


// Class TAGame.GameState_TA
// 0x0010 (0x0070 - 0x0060)
class UGameState_TA : public UObject
{
public:
	TArray<struct FComponentTemplate>                  Components;                                               // 0x0060(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameState_TA");
		return ptr;
	}

};


// Class TAGame.__GameEvent_TA__HasMutatorType_1F10E42C472531B038C949A564DF2386
// 0x0008 (0x0068 - 0x0060)
class U__GameEvent_TA__HasMutatorType_1F10E42C472531B038C949A564DF2386 : public UObject
{
public:
	class UClass*                                      MutatorClass;                                             // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameEvent_TA__HasMutatorType_1F10E42C472531B038C949A564DF2386");
		return ptr;
	}


	bool __GameEvent_TA__HasMutatorType_1F10E42C472531B038C949A564DF2386(class UMutator_TA* M);
};


// Class TAGame.__GameEvent_TA__HasMutatorNamed_EFE83F6A46FE12DD38E5808AD362C03B
// 0x0008 (0x0068 - 0x0060)
class U__GameEvent_TA__HasMutatorNamed_EFE83F6A46FE12DD38E5808AD362C03B : public UObject
{
public:
	struct FName                                       MutatorName;                                              // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameEvent_TA__HasMutatorNamed_EFE83F6A46FE12DD38E5808AD362C03B");
		return ptr;
	}


	bool __GameEvent_TA__HasMutatorNamed_EFE83F6A46FE12DD38E5808AD362C03B(class UMutator_TA* M);
};


// Class TAGame.RPC_ChatLog_TA
// 0x0020 (0x0120 - 0x0100)
class URPC_ChatLog_TA : public URPC_X
{
public:
	TArray<struct FPlayerChatMessage>                  Messages;                                                 // 0x0100(0x0010) (NeedCtorLink)
	struct FString                                     GameID;                                                   // 0x0110(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ChatLog_TA");
		return ptr;
	}


	class URPC_ChatLog_TA* SetGameID(const struct FString& InGameID);
	class URPC_ChatLog_TA* SetMessages(TArray<struct FPlayerChatMessage>* InMessages);
};


// Class TAGame.MatchType_AutoTournament_TA
// 0x0000 (0x00B0 - 0x00B0)
class UMatchType_AutoTournament_TA : public UMatchType_Tournament_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_AutoTournament_TA");
		return ptr;
	}


	bool ShouldSubmitMatchComplete();
	bool ShouldStartMatch();
};


// Class TAGame.MatchType_FaceIt_TA
// 0x0018 (0x00C8 - 0x00B0)
class UMatchType_FaceIt_TA : public UMatchType_Tournament_TA
{
public:
	unsigned long                                      bHasMinPlayers : 1;                                       // 0x00B0(0x0004)
	int                                                MinPlayersMetWaitTimeSeconds;                             // 0x00B4(0x0004)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.MatchType_FaceIt_TA.WaitForPlayersExpirationTimeStamp
	class UMatchSeries_TA*                             MatchSeries;                                              // 0x00C0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_FaceIt_TA");
		return ptr;
	}


	int GetMaxTeamSize();
	bool IsFirstMatch();
	bool ShouldShowWaitingForPlayersTime();
	bool IsWaitingForPlayersTimeExpired();
	bool ShouldCancelMatch();
	bool ShouldStartMatch();
	int GetWaitTimeRemaining();
	void OnStartWaitingForPlayers();
	void OnInitGameEvent();
};


// Class TAGame.SeqEvent_GameEventStateChanged_TA
// 0x0014 (0x0190 - 0x017C)
class USeqEvent_GameEventStateChanged_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	struct FString                                     StateName;                                                // 0x0180(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_GameEventStateChanged_TA");
		return ptr;
	}

};


// Class TAGame.PlayerReplicatedEventInfo_TA
// 0x0008 (0x0270 - 0x0268)
class APlayerReplicatedEventInfo_TA : public AActor
{
public:
	class APRI_TA*                                     OwnerPRI;                                                 // 0x0268(0x0008) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerReplicatedEventInfo_TA");
		return ptr;
	}


	void OnOwnerChanged();
};


// Class TAGame.GameEvent_Lobby_TA
// 0x0010 (0x0710 - 0x0700)
class AGameEvent_Lobby_TA : public AGameEvent_TA
{
public:
	class ABall_TA*                                    BallArchetype;                                            // 0x0700(0x0008) (Edit)
	class ABall_TA*                                    Ball;                                                     // 0x0708(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Lobby_TA");
		return ptr;
	}


	void SpawnBall();
	bool AllowShutdown();
	void Destroyed();
	void OnCarSpawned(class ACar_TA* NewCar);
	void InitField();
	void PostBeginPlay();
	void StartFirstState();
	void OnInit();
};


// Class TAGame.GameEvent_PostGameLobby_TA
// 0x0000 (0x0710 - 0x0710)
class AGameEvent_PostGameLobby_TA : public AGameEvent_Lobby_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_PostGameLobby_TA");
		return ptr;
	}


	bool ShouldShowBallIndicator();
	void StartFirstState();
};


// Class TAGame.GameEvent_Soccar_SubRules_TA
// 0x0000 (0x0060 - 0x0060)
class UGameEvent_Soccar_SubRules_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Soccar_SubRules_TA");
		return ptr;
	}


	void Unapply();
	void OnGetBallModifiedScore(class ABall_TA* Ball, int ScoreIndex, int* BallScore);
	void OnGetBallSpawnPosition(struct FVector* BallPosition);
	bool OnCanUseBallCam();
	class ATeam_TA* OnGetWinningTeam();
	bool ShouldSpawnBall();
	bool ShouldDisableStatXP();
	void SetBallListeners(class ABall_TA* Ball, bool bListen);
	void OnRestartPlayer(class AController* NewPlayer);
	void OnTick(float DeltaTime);
	void OnRemoveGameBall();
	void OnAddGameBall(class ABall_TA* Ball);
	void OnFirstBallHit();
	void OnMatchEnd();
	void OnNewRound();
	void Init();
};


// Class TAGame.GoalIndicator_TA
// 0x0058 (0x02C0 - 0x0268)
class AGoalIndicator_TA : public AActor
{
public:
	class UGoal_TA*                                    Goal;                                                     // 0x0268(0x0008) (ExportObject, Transient, Component, EditInline)
	class APlayerController_TA*                        PCOwner;                                                  // 0x0270(0x0008) (Transient)
	class APRI_TA*                                     PRI;                                                      // 0x0278(0x0008) (Transient)
	class ULensFlareComponent_X*                       LensFlareComponent;                                       // 0x0280(0x0008) (ExportObject, Component, EditInline)
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x0288(0x0008) (ExportObject, Component, EditInline)
	class UStaticMesh*                                 DefenseMesh;                                              // 0x0290(0x0008)
	class UStaticMesh*                                 OffenseMesh;                                              // 0x0298(0x0008)
	class UMaterialInterface*                          MaterialGoalDefense;                                      // 0x02A0(0x0008)
	class UMaterialInterface*                          MaterialGoalOffense;                                      // 0x02A8(0x0008)
	TArray<class ULensFlare*>                          LensFlareTeamList;                                        // 0x02B0(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GoalIndicator_TA");
		return ptr;
	}


	void HandleViewerTeamChanged(class APRI_X* InPRI);
	void HandleViewerReceivedPRI(class APlayerController_X* PC);
	void Destroyed();
	void SetGoal(class AGameEvent_Soccar_TA* GameEvent, class UGoal_TA* In_Goal);
};


// Class TAGame.MatchBroadcastComponent_TA
// 0x0010 (0x0080 - 0x0070)
class UMatchBroadcastComponent_TA : public UComponent
{
public:
	class UMatchBroadcastLog_TA*                       MatchLog;                                                 // 0x0070(0x0008)
	class UOnlineGame_Base_X*                          OnlineGame;                                               // 0x0078(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchBroadcastComponent_TA");
		return ptr;
	}


	void AppendBroadcastLog(class AMatchBroadcast_TA* Broadcast, const struct FString& EventJson);
	void SetBroadcast(class AMatchBroadcast_TA* Broadcast);
	void InitServer(class AGameEvent_Soccar_TA* GameEvent);
	void HandleLocalPlayersChanged(class AGameEvent_TA* GameEvent);
	void InitClient(class AGameEvent_Soccar_TA* GameEvent);
	bool CreateMatchLog();
	struct FString GetLogFileName();
	void Init(class AGameEvent_Soccar_TA* GameEvent);
};


// Class TAGame.CountdownObject_TA
// 0x0024 (0x00B0 - 0x008C)
class UCountdownObject_TA : public UTickableStateObject_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	int                                                CountTime;                                                // 0x0090(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventCountChange__Delegate;                             // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0094(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CountdownObject_TA");
		return ptr;
	}


	void UpdateCountdown();
	void StopCount();
	void Start(int InCountTime);
	void EventCountChange(class UCountdownObject_TA* CountdownObject, int CountValue);
};


// Class TAGame.OvertimeComponent_TA
// 0x0014 (0x00B8 - 0x00A4)
class UOvertimeComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	TEnumAsByte<EMatchTieBreaker>                      TieBreaker;                                               // 0x00A8(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	int                                                OvertimeGameTime;                                         // 0x00AC(0x0004) (Edit)
	float                                              BallHitGroundTimeoutSeconds;                              // 0x00B0(0x0004) (Edit)
	int                                                FirstScoreTeamIndex;                                      // 0x00B4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OvertimeComponent_TA");
		return ptr;
	}


	class ATeam_TA* PickFirstScore();
	class ATeam_TA* STATIC_PickRandomTeam(class AGameEvent_Soccar_TA* GameEvent);
	class ATeam_TA* PickWinner();
	void HandleGoalScored(class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIdx);
	void Detached();
	void Attached();
};


// Class TAGame.SeqEvent_GoalScored_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_GoalScored_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_GoalScored_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_ScoreChanged_TA
// 0x000C (0x0188 - 0x017C)
class USeqEvent_ScoreChanged_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	int                                                BlueScore;                                                // 0x0180(0x0004)
	int                                                RedScore;                                                 // 0x0184(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_ScoreChanged_TA");
		return ptr;
	}

};


// Class TAGame.MatchWinner_TA
// 0x0008 (0x0068 - 0x0060)
class UMatchWinner_TA : public UObject
{
public:
	class ATeam_TA*                                    WinningTeam;                                              // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchWinner_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_CountDownStart_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_CountDownStart_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_CountDownStart_TA");
		return ptr;
	}

};


// Class TAGame.ServerPerformanceTracker_TA
// 0x0024 (0x00C8 - 0x00A4)
class UServerPerformanceTracker_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class UServerPerformanceConfig_TA*                 ServerPerformanceConfig;                                  // 0x00A8(0x0008) (Edit)
	class UConnectionQualityConfig_TA*                 ConnectionQualityConfig;                                  // 0x00B0(0x0008) (Edit)
	float                                              RollingFpsAverage;                                        // 0x00B8(0x0004)
	float                                              InternalLowFpsTime;                                       // 0x00BC(0x0004)
	float                                              ServerPerformanceLastUpdateTime;                          // 0x00C0(0x0004)
	unsigned long                                      bReportedServerForPoorPerformance : 1;                    // 0x00C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ServerPerformanceTracker_TA");
		return ptr;
	}


	void HandleInternalServerPerformanceCheck(float CurrentFps, float DeltaTime);
	TEnumAsByte<EConnectionQualityState> GetPerformanceStatus(float InPerformance, float MediocreBoundary, float BadBoundary);
	void Tick(float DeltaTime);
	void Attached();
};


// Class TAGame.GameEventMatchActive_TA
// 0x0000 (0x0060 - 0x0060)
class UGameEventMatchActive_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEventMatchActive_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_CountDownCompleted_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_CountDownCompleted_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_CountDownCompleted_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_RoundStart_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_RoundStart_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_RoundStart_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_LiveReplay_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_LiveReplay_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_LiveReplay_TA");
		return ptr;
	}

};


// Class TAGame.RPC_MatchComplete_TA
// 0x0098 (0x0198 - 0x0100)
class URPC_MatchComplete_TA : public URPC_X
{
public:
	int                                                PlaylistId;                                               // 0x0100(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	struct FString                                     MatchGUID;                                                // 0x0108(0x0010) (NeedCtorLink)
	TArray<struct FOnlinePlayerMatchData>              MatchData;                                                // 0x0118(0x0010) (NeedCtorLink)
	struct FGuid                                       AppSessionID;                                             // 0x0128(0x0010)
	struct FGuid                                       LevelSessionID;                                           // 0x0138(0x0010)
	int                                                MaxTeamSize;                                              // 0x0148(0x0004)
	int                                                MatchWinner;                                              // 0x014C(0x0004)
	struct FString                                     MapName;                                                  // 0x0150(0x0010) (NeedCtorLink)
	struct FName                                       MatchType;                                                // 0x0160(0x0008)
	TArray<int>                                        TeamScores;                                               // 0x0168(0x0010) (NeedCtorLink)
	TArray<struct FOnlineProductDrop>                  Drops;                                                    // 0x0178(0x0010) (Transient, NeedCtorLink)
	TArray<struct FName>                               StatsToSend;                                              // 0x0188(0x0010) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MatchComplete_TA");
		return ptr;
	}


	class URPC_MatchComplete_TA* SetGameEventData(class AGameEvent_Soccar_TA* GameEvent);
	TArray<struct FCurrency> GetCurrencyDrops(struct FUniqueNetId* PlayerID, TArray<struct FCurrency>* ArrayInitializer_79230D7042A673630595378F010803F4);
	TArray<struct U_Types_TA_FOnlineXPReward> GetRewardDrops(struct FUniqueNetId* PlayerID);
	TArray<struct FOnlineProductData> GetDrops(struct FUniqueNetId* PlayerID);
	bool ContainsPlayerData(struct FUniqueNetId* PlayerID);
	class URPC_MatchComplete_TA* SetLevelSessionID(struct FGuid* InLevelSessionID);
	class URPC_MatchComplete_TA* SetAppSessionID(struct FGuid* InAppSessionID);
	class URPC_MatchComplete_TA* SetMatchData(TArray<struct FOnlinePlayerMatchData>* InMatchData);
	class URPC_MatchComplete_TA* SetPlaylistID(int InPlaylistID);
};


// Class TAGame.SpawnPointCluster_TA
// 0x0010 (0x0070 - 0x0060)
class USpawnPointCluster_TA : public UObject
{
public:
	TArray<class USpawnPointGroup_TA*>                 SpawnTeams;                                               // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpawnPointCluster_TA");
		return ptr;
	}


	class USpawnPointGroup_TA* GetGroup(class ATeamInfo* Team);
	int GetGroupId(class AActor* SpawnPoint);
	void RemoveFromSpawnPoints(class AController* ForPlayer);
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
	bool TryAddToSpawnPointAtIndex(class AController* ForPlayer, int PointIdx);
	bool TryAddToSpawnPoint(class AController* ForPlayer);
	void SetSpawnPoints(class AGameEvent_TA* GameEvent, const struct FVector& Center, const struct FRotator& Orientation);
	void Init(class AGameEvent_TA* GameEvent, const struct FVector& CenterOffset, const struct FRotator& CenterRotation);
};


// Class TAGame.StatCategory_TA
// 0x0014 (0x0074 - 0x0060)
class UStatCategory_TA : public UObject
{
public:
	TArray<class UStatTitle_TA*>                       Titles;                                                   // 0x0060(0x0010) (Edit, NeedCtorLink)
	float                                              Multiplier;                                               // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatCategory_TA");
		return ptr;
	}

};


// Class TAGame.StatTitle_TA
// 0x003D (0x009D - 0x0060)
class UStatTitle_TA : public UObject
{
public:
	struct FString                                     PrimaryTitle;                                             // 0x0060(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     SecondaryTitle;                                           // 0x0070(0x0010) (Const, Localized, NeedCtorLink)
	int                                                Points;                                                   // 0x0080(0x0004)
	int                                                MinStatValueRequired;                                     // 0x0084(0x0004)
	int                                                MaxStatValueAllowed;                                      // 0x0088(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	class UStatEvent_TA*                               Stat;                                                     // 0x0090(0x0008)
	unsigned long                                      bPerStat : 1;                                             // 0x0098(0x0004)
	unsigned long                                      bInverseStat : 1;                                         // 0x0098(0x0004)
	unsigned long                                      bClampStatToOne : 1;                                      // 0x0098(0x0004)
	TEnumAsByte<EStatTrackingUnitType>                 StatUnitType;                                             // 0x009C(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatTitle_TA");
		return ptr;
	}


	struct FString GetUnitTypeAsString(bool bMetric);
	bool GetNumPoints(class APRI_TA* Member, class UStatCategory_TA* Category, int* PointsEarned, int* StatCount);
};


// Class TAGame.__GameEvent_Soccar_TA__GetGoalByTeamIndex_4747FF9E43534FF64D0CE49224B0AEA4
// 0x0004 (0x0064 - 0x0060)
class U__GameEvent_Soccar_TA__GetGoalByTeamIndex_4747FF9E43534FF64D0CE49224B0AEA4 : public UObject
{
public:
	int                                                TeamIndex;                                                // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameEvent_Soccar_TA__GetGoalByTeamIndex_4747FF9E43534FF64D0CE49224B0AEA4");
		return ptr;
	}


	bool __GameEvent_Soccar_TA__GetGoalByTeamIndex_4747FF9E43534FF64D0CE49224B0AEA4(class UGoal_TA* G);
};


// Class TAGame.Replay_Soccar_TA
// 0x0048 (0x02F8 - 0x02B0)
class UReplay_Soccar_TA : public UReplay_TA
{
public:
	int                                                TeamSize;                                                 // 0x02B0(0x0004) (DataBinding)
	int                                                UnfairTeamSize;                                           // 0x02B4(0x0004) (DataBinding)
	unsigned long                                      bUnfairBots : 1;                                          // 0x02B8(0x0004) (DataBinding)
	int                                                PrimaryPlayerTeam;                                        // 0x02BC(0x0004) (DataBinding)
	int                                                Team0Score;                                               // 0x02C0(0x0004) (DataBinding)
	int                                                Team1Score;                                               // 0x02C4(0x0004) (DataBinding)
	TArray<struct FScoredGoal>                         Goals;                                                    // 0x02C8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FHighlight>                          HighLights;                                               // 0x02D8(0x0010) (NeedCtorLink)
	TArray<struct FReplayPlayerStats>                  PlayerStats;                                              // 0x02E8(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Replay_Soccar_TA");
		return ptr;
	}


	void PreExport();
	void RemoveTimelineKeyframe(int KeyframeIndex);
	void AddTimelineEvent(const struct FName& EventID, float TimeBeforeEvent);
	void RecordUserEvent();
	void RecordHighlight(class APRI_TA* FocusPlayer, const struct FName& BallName);
	void RecordSave(class APRI_TA* Saver, const struct FName& BallName);
	void RecordGoal(int TeamNum, class APRI_TA* Scorer, const struct FName& BallName);
	void AddPlayer(class APRI_TA* PRI);
};


// Class TAGame.GFxHUD_TA
// 0x0170 (0x0508 - 0x0398)
class AGFxHUD_TA : public AHUDBase_TA
{
public:
	struct FString                                     UIState;                                                  // 0x0398(0x0010) (Edit, Const, NeedCtorLink)
	class UGFxMoviePlayer_X*                           MatchInfoMovieArchetype;                                  // 0x03A8(0x0008) (Edit)
	class UGFxMoviePlayer_X*                           MatchInfoMovie;                                           // 0x03B0(0x0008) (Transient)
	class UGFxNameplatesManager_TA*                    NameplatesManager;                                        // 0x03B8(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FString                                     PlayerJoinString;                                         // 0x03C0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PlayerLeaveString;                                        // 0x03D0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PlayerTimedOutString;                                     // 0x03E0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ChatTitle;                                                // 0x03F0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     TeamChatTitle;                                            // 0x0400(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ChatDisabledMessage;                                      // 0x0410(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ReplayQueSaveMessage;                                     // 0x0420(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ChatBannedMessage;                                        // 0x0430(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ChatBannedPermanentlyMessage;                             // 0x0440(0x0010) (Const, Localized, NeedCtorLink)
	class APRI_TA*                                     OwnerPRI;                                                 // 0x0450(0x0008) (Transient)
	class ACar_TA*                                     OwnerCar;                                                 // 0x0458(0x0008) (Transient)
	class AGameEvent_TA*                               GameEvent;                                                // 0x0460(0x0008) (Transient)
	class AGameEvent_Team_TA*                          TeamGameEvent;                                            // 0x0468(0x0008) (Transient)
	class UGFxData_GameEvent_TA*                       GameEventData;                                            // 0x0470(0x0008) (Transient)
	class UGFxData_LocalCar_TA*                        CarData;                                                  // 0x0478(0x0008) (Transient)
	TArray<class UGFxData_PRI_TA*>                     PRIData;                                                  // 0x0480(0x0010) (Transient, NeedCtorLink)
	TArray<class UGFxData_PlayerRecord_TA*>            PlayerRecordData;                                         // 0x0490(0x0010) (Transient, NeedCtorLink)
	float                                              CloseScoreboardTime;                                      // 0x04A0(0x0004) (Transient)
	unsigned long                                      bShowedDisconnectMessage : 1;                             // 0x04A4(0x0004) (Transient)
	TArray<class APRI_TA*>                             PendingShowAddMessagePlayers;                             // 0x04A8(0x0010) (Transient, NeedCtorLink)
	class ARBActor_TA*                                 LastTarget;                                               // 0x04B8(0x0008) (Transient)
	float                                              TestLastLogTime;                                          // 0x04C0(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04C4(0x0004) MISSED OFFSET
	class ACar_TA*                                     CarDisplayingBoost;                                       // 0x04C8(0x0008)
	class UAdHocBeacon_X*                              AdHocBeacon;                                              // 0x04D0(0x0008)
	struct FScriptDelegate                             __EventOpenedMidGameMenu__Delegate;                       // 0x04D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x04D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __VoteLambda__Delegate;                                   // 0x04F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x04F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_TA");
		return ptr;
	}


	void __GFxHUD_TA__HandleServerNameChanged_3E56126F41967E7C810BE3824791EE65(const struct FString& O, const struct FString& S);
	void __GFxHUD_TA__SetGameEvent_2BEAD70E4678B4727D7445BB22C7E0DA(class AGameEvent_Soccar_TA* Soccar);
	void SetRespawnTimeRemaining(int NewTime);
	void HandleReplaceBot(class APRI_TA* InPRI);
	struct FScreenLocation GetScreenLocation(const struct FVector& WorldLocation, float SafeZone);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void DrawNameplatesTexture();
	void DrawHUD();
	void HandleReplayAutoSave(class AReplayDirector_TA* Director, struct FGFxChatMessage* StructInitializer_DB7726ED4FD534EACB5F71A819557F0F);
	void HandleVoteFinished(class AVoteActor_TA* VoteActor);
	class UGFxData_Vote_TA* GetVoteBySubject(TEnumAsByte<EVoteSubject> VoteSubject);
	class UGFxData_Vote_TA* GetVoteByRow(int RowIndex);
	int GetVoteRow(const struct FScriptDelegate& MatchCondition);
	void HandleVoteStarted(class AVoteActor_TA* VoteActor);
	void NotifyChatBannedPermanently(struct FGFxChatMessage* StructInitializer_1DB7985B441FB9679076B396F1C2C7F3);
	void NotifyChatBanned(struct FGFxChatMessage* StructInitializer_80A6CB9B4BDE488426C84DAA9B0C2CFF);
	void NotifyChatDisabled(float Time, struct FGFxChatMessage* StructInitializer_EDC7F3E84B4B1B2995E78BA50D9F46E5);
	void ChatPreset(int Index);
	void HandleInternetConnectionChanged(bool bConnected);
	void NotifyClientTravel();
	void NotifyServerShutdown();
	void HandlePRICameraChanged(class APRI_TA* InPRI);
	void CloseScoreboard();
	void OpenScoreboard();
	void OpenMidgameMenu();
	void ReceiveMessage(class UMessage_TA* Message, const struct FString& Text);
	void HandleStatTickerMessage(class APRI_TA* Receiver, class APRI_TA* Victim, class UStatEvent_TA* StatEvent);
	bool CanDisplayStatEvent(class UStatEvent_TA* StatEvent);
	void HandleStatEvent(class APRI_TA* PRI, class UStatEvent_TA* StatEvent, int Count);
	void OpenPartyChat();
	void OpenTeamChat();
	void OpenChat();
	bool CanOpenChat();
	bool AnyPlayerChatRestricted();
	void UpdateCarData();
	class ACar_TA* GetFocusCar();
	void UpdateCarDataFromCar(class ACar_TA* Car);
	void UpdateCameraYaw();
	void Tick(float DeltaTime);
	int GetBoostAmountForUI(class ACarComponent_Boost_TA* Boost);
	void UpdatePRIData();
	void SetOwnerCar(class ACar_TA* NewCar);
	void HandlePawnChanged(class APlayerController_X* PC, class APawn* OldPawn, class APawn* NewPawn);
	void OnAllTeamsCreated();
	void HandleAllTeamsCreated(class AGameEvent_Team_TA* G);
	void HandleGameStateChanged(class AGameEvent_TA* G);
	void HandlePlayerRemoved(class AGameEvent_TA* G, class APRI_TA* InPRI, struct FGFxChatMessage* StructInitializer_DA1A6C3845EA1DC2EE9DBBB950B2D7DB);
	void HandlePlayerIDChanged(class APRI_X* InPRI);
	void HideNameplates();
	void ShowNameplates();
	void ToggleNameplates();
	void UpdatePendingAddMessagePlayers(struct FGFxChatMessage* StructInitializer_DA457DF7427EE317607366A4B0414AFB);
	void HandlePlayerAdded(class AGameEvent_TA* G, class APRI_TA* InPRI, struct FGFxChatMessage* StructInitializer_94A0500C43BA5B794B14F892B43D0019);
	struct FString GetPlayerName(class APRI_TA* PRI);
	void UpdateGFxPlayerRecord(class APRI_TA* InPRI);
	void UpdateSessionStatus();
	void DestroyGFxPRIData(class UGFxData_PRI_TA* OldData);
	class UGFxData_PRI_TA* CreateGFxPRIData();
	void HandleReservationsUpdated(class AGRI_X* GRI);
	bool IsValidID(const struct FUniqueNetId& PlayerID);
	class UGFxData_PRI_TA* GetPRIDataFromID(const struct FUniqueNetId& PlayerID);
	int GetPRIDataIndex(class APRI_TA* InPRI);
	void HandleMatchTypeSet(class AGameEvent_TA* InGameEvent);
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	void HandleGameEventChanged(class APRI_TA* InPRI);
	void SetTeam(class ATeam_TA* Team);
	void HandleTeamChanged(class APRI_X* InPRI);
	void SetOwnerPRI(class APRI_TA* InPRI);
	void HandleReceivedPRI(class APlayerController_X* PC);
	void UpdateMutatorTags(const struct FString& MatchTags);
	void UpdateMutatorTagsFromPreset(class UPresetMutators_X* Presets);
	void HandleGameDataSelected(int PlaylistId, int MutatorIndex);
	void HandleServerNameChanged(class AGRI_X* GRI);
	void HandleCanVoteForfeitChanged(class AGameEvent_TA* InGameEvent);
	void HandlePenaltyChanged(class AGameEvent_TA* InGameEvent);
	void HandleGRIReplicated(class AGRI_X* GRI);
	void HandleHideWorldUIChanged(class UGameShare_TA* G);
	void Destroyed();
	void InitGFxData();
	void InitGFx();
	void Init();
	bool VoteLambda(class AVoteActor_TA* InVoteActor);
	void EventOpenedMidGameMenu(class AGFxHUD_TA* HUD);
};


// Class TAGame.SeqEvent_PodiumStart_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_PodiumStart_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_PodiumStart_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_GameTimeChanged_TA
// 0x000C (0x0188 - 0x017C)
class USeqEvent_GameTimeChanged_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	float                                              CallTimePercent;                                          // 0x0180(0x0004) (Edit)
	unsigned long                                      bHasBeenCalled : 1;                                       // 0x0184(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_GameTimeChanged_TA");
		return ptr;
	}

};


// Class TAGame.BotDetection_TA
// 0x0034 (0x00D8 - 0x00A4)
class UBotDetection_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	float                                              ThrottleThreshold;                                        // 0x00A8(0x0004) (Edit)
	float                                              AirRollThreshold;                                         // 0x00AC(0x0004) (Edit)
	float                                              CameraRotationThreshold;                                  // 0x00B0(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	TArray<struct FPlayerAggregateStats>               PlayerStats;                                              // 0x00B8(0x0010) (Transient, NeedCtorLink)
	class UBotDetectionConfig_TA*                      BotConfig;                                                // 0x00C8(0x0008)
	class AGameEvent_Soccar_TA*                        SoccarData;                                               // 0x00D0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BotDetection_TA");
		return ptr;
	}


	void HandleBoostPickup(class AVehiclePickup_Boost_TA* BoostPickup);
	void MatchComplete();
	void Tick(float DeltaTime);
	struct FBinaryInput UpdateBinaryInput(const struct FBinaryInput& Input, bool bNewInput);
	struct FAggregateInput UpdateAggregateInput(const struct FAggregateInput& Input, bool bValue, float DeltaTime);
	void HandleCarHitBall(class ACar_TA* InCar, class ABall_TA* InBall, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void HandleCarAdded(class AGameEvent_TA* InGameEvent, class ACar_TA* InCar);
	void HandlePlayerAdded(class AGameEvent_TA* InGameEvent, class APRI_TA* InPRI);
	void Detached();
	void Attached();
};


// Class TAGame.RPC_RecordMatchStats_TA
// 0x0028 (0x0128 - 0x0100)
class URPC_RecordMatchStats_TA : public URPC_X
{
public:
	struct FString                                     MatchGUID;                                                // 0x0100(0x0010) (NeedCtorLink)
	int                                                PlaylistId;                                               // 0x0110(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	TArray<struct FPlayerAggregateStats>               Aggregates;                                               // 0x0118(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_RecordMatchStats_TA");
		return ptr;
	}


	class URPC_RecordMatchStats_TA* SetPlaylistID(int InID);
	class URPC_RecordMatchStats_TA* SetMatchGUID(const struct FString& InGuid);
};


// Class TAGame.__GameEvent_Soccar_TA__CommitPlayerMatchData_DE89C9B44DCC4FE5EA7254806560A95F
// 0x0008 (0x0068 - 0x0060)
class U__GameEvent_Soccar_TA__CommitPlayerMatchData_DE89C9B44DCC4FE5EA7254806560A95F : public UObject
{
public:
	class APRI_TA*                                     PRI;                                                      // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameEvent_Soccar_TA__CommitPlayerMatchData_DE89C9B44DCC4FE5EA7254806560A95F");
		return ptr;
	}


	bool __GameEvent_Soccar_TA__CommitPlayerMatchData_DE89C9B44DCC4FE5EA7254806560A95F(const struct FReservationData& Reservation);
};


// Class TAGame.ConsecutiveMatchTracker_TA
// 0x0010 (0x0070 - 0x0060)
class UConsecutiveMatchTracker_TA : public UObject
{
public:
	TArray<struct FMatchData>                          PlayerMatchData;                                          // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ConsecutiveMatchTracker_TA");
		return ptr;
	}


	bool __ConsecutiveMatchTracker_TA__HandleGameEnded_226FFCBF4298122FB71EF28443BF8806(class APRI_TA* PRI);
	void Reset();
	int GetConsecutiveMatchesPlayed(const struct FUniqueNetId& PlayerID);
	void HandleGameEnded(class AGameEvent_Soccar_TA* GameEvent, TArray<struct FMatchData>* FilterLocal_A07F9478474C974DB30643B9412131E7, struct FMatchData* StructInitializer_B1B990E5433C52D212A938BB1D142E90);
	void Construct();
};


// Class TAGame.__GameEvent_Soccar_TA__ReportFps_837CD6334352AD5E7BE641A43896185F
// 0x0004 (0x0064 - 0x0060)
class U__GameEvent_Soccar_TA__ReportFps_837CD6334352AD5E7BE641A43896185F : public UObject
{
public:
	int                                                TotalFrames;                                              // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameEvent_Soccar_TA__ReportFps_837CD6334352AD5E7BE641A43896185F");
		return ptr;
	}


	void __GameEvent_Soccar_TA__ReportFps_837CD6334352AD5E7BE641A43896185F(const struct FFPSBucketMetrics& Bucket);
};


// Class TAGame.PerfMetrics_TA
// 0x0000 (0x0080 - 0x0080)
class UPerfMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PerfMetrics_TA");
		return ptr;
	}


	void ClientFPS(int TotalFrames, TArray<struct FFPSBucketMetrics> Buckets);
	void ServerInactiveFPS(int TotalFrames, TArray<struct FFPSBucketMetrics> Buckets);
	void ServerFPS(int TotalFrames, TArray<struct FFPSBucketMetrics> Buckets);
};


// Class TAGame.__GameEvent_Soccar_TA__InitClubMatch_B00E34064981696968572889106528C0
// 0x0008 (0x0068 - 0x0060)
class U__GameEvent_Soccar_TA__InitClubMatch_B00E34064981696968572889106528C0 : public UObject
{
public:
	class UOnlineClubCache_X*                          Cache;                                                    // 0x0060(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameEvent_Soccar_TA__InitClubMatch_B00E34064981696968572889106528C0");
		return ptr;
	}


	void __GameEvent_Soccar_TA__InitClubMatch_AB559D8D4C79C5498B356EAB1F867CC7(const struct FReservationData& P);
	void __GameEvent_Soccar_TA__InitClubMatch_B00E34064981696968572889106528C0(const struct FReservationData& P);
};


// Class TAGame.ClubUtil_TA
// 0x0000 (0x0060 - 0x0060)
class UClubUtil_TA : public UClubUtil_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ClubUtil_TA");
		return ptr;
	}


	int STATIC_AccentColorToUIColorID(int InColor);
	int STATIC_ColorToUIColorID(int InColor);
	int STATIC_UIAccentColorIDToColor(int ColorID);
	int STATIC_UIColorIDToColor(int ColorID);
	struct FClubColorSet STATIC_GetClubColorSet(class UClubDetails_X* Club, struct FClubColorSet* StructInitializer_3C74562B42C79C802CFDF88B4B86724B);
	TEnumAsByte<EClubColorChange> STATIC_EnsureDifferentColorsTA(struct FClubColorSet* Set0, struct FClubColorSet* Set1);
};


// Class TAGame.ClientConnectionTracker_TA
// 0x006C (0x0110 - 0x00A4)
class UClientConnectionTracker_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	unsigned long                                      bDisconnectedFromServer : 1;                              // 0x00A8(0x0004) (DataBinding)
	unsigned long                                      bShowConnectionQualityIndicators : 1;                     // 0x00A8(0x0004) (DataBinding)
	TEnumAsByte<EConnectionQualityState>               LatencyStatus;                                            // 0x00AC(0x0001) (DataBinding)
	TEnumAsByte<EConnectionQualityState>               JitterStatus;                                             // 0x00AD(0x0001) (DataBinding)
	TEnumAsByte<EConnectionQualityState>               PacketStatus;                                             // 0x00AE(0x0001) (DataBinding)
	unsigned char                                      UnknownData01[0x1];                                       // 0x00AF(0x0001) MISSED OFFSET
	float                                              LatencyLastUpdateTime;                                    // 0x00B0(0x0004)
	float                                              JitterRollingAverage;                                     // 0x00B4(0x0004)
	float                                              JitterLastUpdateTime;                                     // 0x00B8(0x0004)
	float                                              PacketLastUpdateTime;                                     // 0x00BC(0x0004)
	float                                              NewPacketsRollingAverage;                                 // 0x00C0(0x0004)
	float                                              PacketsLostRollingAverage;                                // 0x00C4(0x0004)
	float                                              RollingPercentLost;                                       // 0x00C8(0x0004)
	float                                              PriorTotalPacketsInOut;                                   // 0x00CC(0x0004)
	float                                              PriorTotalPacketsLost;                                    // 0x00D0(0x0004)
	float                                              RollingBadPingTime;                                       // 0x00D4(0x0004)
	float                                              RollingBadJitterTime;                                     // 0x00D8(0x0004)
	float                                              RollingBadPacketLossTime;                                 // 0x00DC(0x0004)
	class UConnectionQualityConfig_TA*                 ConnectionQualityConfig;                                  // 0x00E0(0x0008) (Edit)
	class APRI_TA*                                     TrackedPRI;                                               // 0x00E8(0x0008)
	class UConnectionQualitySave_TA*                   ConnectionQualitySave;                                    // 0x00F0(0x0008)
	struct FScriptDelegate                             __EventNetStatsPolled__Delegate;                          // 0x00F8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00F8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ClientConnectionTracker_TA");
		return ptr;
	}


	TEnumAsByte<EConnectionQualityState> GetWorstConnectionStatusBeyondLatency();
	TEnumAsByte<EConnectionQualityState> STATIC_GetConnectionStatus(float InMetricValue, float MediocreBoundary, float BadBoundary);
	bool STATIC_ShouldUpdateMetric(TEnumAsByte<EConnectionQualityState> ExistingValue, TEnumAsByte<EConnectionQualityState> NewValue, float LastUpdateTime, float CurrentTime, float DelayTime);
	void STATIC_PollMetric(TEnumAsByte<EConnectionQualityState> NewState, float NewTime, float DelayTime, TEnumAsByte<EConnectionQualityState>* ExistingState, float* UpdateTime);
	void UpdateSavedRollingMetricTimes();
	void UpdateRollingConnectionQuality(TEnumAsByte<EConnectionQualityState> Status, float* RollingTime);
	void UpdateRollingConnectionQualities();
	float ComputeRollingPacketLossPercent();
	float ComputeRollingJitter();
	void PollConnectionStats();
	void HandleConnectionQualitySaveUnloaded(class UConnectionQualitySave_TA* InConnectionQualitySave);
	void HandleConnectionQualitySaveLoaded(class UConnectionQualitySave_TA* InConnectionQualitySave);
	void SubscribeToConnectionQualitySave(class USaveData_TA* SaveData);
	void ResetConnectionStatuses();
	void StopTrackingConnection();
	void BeginTrackingConnection();
	void SetTrackedPRI(class APRI_TA* InPRI);
	void Detached();
	void Attached();
	void EventNetStatsPolled(class UClientConnectionTracker_TA* InTracker, const struct FClientConnectionStats& InStats);
};


// Class TAGame.EndRoundComponent_TA
// 0x000C (0x00B0 - 0x00A4)
class UEndRoundComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class AGameEvent_Soccar_TA*                        SoccarGame;                                               // 0x00A8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EndRoundComponent_TA");
		return ptr;
	}


	bool BallHitGround(const struct FVector& HitNorm);
	void EndRound();
	void HandleBallHitGroundTimeout();
	void HandleBallHitGround(class ABall_TA* Ball, const struct FVector& HitLoc, const struct FVector& HitNorm);
	void Detached();
	void Attached();
};


// Class TAGame.CrowdSoundManager_TA
// 0x00E4 (0x0188 - 0x00A4)
class UCrowdSoundManager_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class UCrowdSoundSettings_TA*                      Settings;                                                 // 0x00A8(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class ACrowdActorManager_TA*                       CrowdActorManager;                                        // 0x00B0(0x0008)
	class UCrowdSounds_TA*                             Sounds;                                                   // 0x00B8(0x0008) (Transient)
	unsigned long                                      bInitializedMods : 1;                                     // 0x00C0(0x0004) (Transient)
	unsigned long                                      bFastBreakInProgress : 1;                                 // 0x00C0(0x0004) (Transient)
	unsigned long                                      bShotInProgress : 1;                                      // 0x00C0(0x0004) (Transient)
	unsigned long                                      bAerialInProgress : 1;                                    // 0x00C0(0x0004) (Transient)
	unsigned long                                      bIn0Seconds : 1;                                          // 0x00C0(0x0004) (Transient)
	unsigned long                                      bWaitingForKickoffTouch : 1;                              // 0x00C0(0x0004) (Transient)
	unsigned long                                      bLowEnergy : 1;                                           // 0x00C0(0x0004) (Transient)
	unsigned long                                      bWaitingForTenseClear : 1;                                // 0x00C0(0x0004) (Transient)
	float                                              DefenseZoneTime;                                          // 0x00C4(0x0004) (Transient)
	float                                              LastBallHitNoiseTime;                                     // 0x00C8(0x0004) (Transient)
	int                                                LastBallHitNoiseLevel;                                    // 0x00CC(0x0004) (Transient)
	float                                              TimeSinceLastGoal;                                        // 0x00D0(0x0004) (Transient)
	int                                                LeadChanges;                                              // 0x00D4(0x0004) (Transient)
	float                                              OpenGoalTime;                                             // 0x00D8(0x0004) (Transient)
	float                                              NearGoalTime;                                             // 0x00DC(0x0004) (Transient)
	float                                              FastBreakTime;                                            // 0x00E0(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	class UGoal_TA*                                    ShotGoal;                                                 // 0x00E8(0x0008) (ExportObject, Transient, Component, EditInline)
	float                                              ShotMaxScorability;                                       // 0x00F0(0x0004) (Transient)
	float                                              LastShotTime;                                             // 0x00F4(0x0004) (Transient)
	float                                              AerialDuration;                                           // 0x00F8(0x0004) (Transient)
	float                                              LastAerialTime;                                           // 0x00FC(0x0004) (Transient)
	struct FString                                     DebugLastExcitementSoundValue;                            // 0x0100(0x0010) (Transient, NeedCtorLink)
	float                                              DebugLastExcitementSoundTime;                             // 0x0110(0x0004) (Transient)
	float                                              TimeSince0Seconds;                                        // 0x0114(0x0004) (Transient)
	class UDynamicValueModifier_X*                     Mod0Seconds;                                              // 0x0118(0x0008) (Transient)
	float                                              CurrentLowEnergyDuration;                                 // 0x0120(0x0004) (Transient)
	float                                              ChantLowEnergyDuration;                                   // 0x0124(0x0004) (Transient)
	float                                              TenseNearGoalTime;                                        // 0x0128(0x0004) (Transient)
	int                                                LastScoreSeparation;                                      // 0x012C(0x0004) (Transient)
	int                                                ScoreSeparationTrend;                                     // 0x0130(0x0004) (Transient)
	struct FName                                       LastExcitementState;                                      // 0x0134(0x0008) (Transient)
	struct FName                                       LastTensionState;                                         // 0x013C(0x0008) (Transient)
	struct FName                                       LastScoreState;                                           // 0x0144(0x0008) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	struct FString                                     AprilCrowdOverridePath;                                   // 0x0150(0x0010) (Const, NeedCtorLink)
	struct FVector                                     AprilCrowdLocation;                                       // 0x0160(0x000C)
	unsigned char                                      UnknownData03[0x4];                                       // 0x016C(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __GetSound__Delegate;                                     // 0x0170(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x016C(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CrowdSoundManager_TA");
		return ptr;
	}


	class UAkSoundCue* __CrowdSoundManager_TA__InitCrowd_D12763C04F838743BB31D4BA870EC23D(class UCrowdSounds_TA* S);
	float __CrowdSoundManager_TA__InitModifiers_0C6936544E81498CA3B138B19BFC3A91();
	float __CrowdSoundManager_TA__InitModifiers_DF74826F4060C0EF24BC6C9FEFDBABDB();
	float __CrowdSoundManager_TA__InitModifiers_34E3F2394B0527F85426798BBDF109FF();
	float __CrowdSoundManager_TA__InitModifiers_A0553CE14D9C77747BC4FAA91A9B3DCB();
	float __CrowdSoundManager_TA__InitModifiers_C5D1B50E4BD4EF0D192E76A66B734451();
	float __CrowdSoundManager_TA__InitModifiers_5640CC214D48FE97CE5B12ADAC06FFDB();
	float __CrowdSoundManager_TA__InitModifiers_B5B7A2994126962DEDA1F18928FA9079();
	float __CrowdSoundManager_TA__InitModifiers_4A3BADC7497594D6F6E847BCE0C1AB63();
	float __CrowdSoundManager_TA__InitModifiers_D48EA7C942C82CA95DD58BA3EE8A5295();
	float __CrowdSoundManager_TA__InitModifiers_C519F24D484F522003D83EB5319974D0();
	float __CrowdSoundManager_TA__InitModifiers_FC3585A949730960E08C7CBBE7B52B5D();
	float __CrowdSoundManager_TA__InitModifiers_B09231B642E4BDA718AF5AAEB3BAAC35();
	float __CrowdSoundManager_TA__InitModifiers_609406E845FF1E78EAE6A49E7C64EF3A();
	float __CrowdSoundManager_TA__InitModifiers_82134AD34F701D683EDAEAB866AC0FC9();
	float __CrowdSoundManager_TA__InitModifiers_A0D41010415E61C98A2CE194E632AB4A();
	float __CrowdSoundManager_TA__InitModifiers_9C48AD1E4DBDDAC38E66049AFA530255();
	void __CrowdSoundManager_TA__HandleGameStateChanged_5307D0F5472FAA7596ED258F3DCCD527(class ACrowdActor_TA* C);
	void __CrowdSoundManager_TA__HandleGameStateChanged_C3A8EDA64B19B3444EECDB936B29F719(class ACrowdActor_TA* C);
	class UAkSoundCue* __CrowdSoundManager_TA__HandleOvertimeUpdated_0E1909C2403727E49C73FEB548BBE90C(class UCrowdSounds_TA* S);
	class UAkSoundCue* __CrowdSoundManager_TA__PlayMatchEndedEncore_FFD6F0564B71892F4E4B2FA9F2BB9297(class UCrowdSounds_TA* S);
	class UAkSoundCue* __CrowdSoundManager_TA__GoalScored_4048F40948B9BF6608AA809004AA7163(class UCrowdSounds_TA* S);
	void __CrowdSoundManager_TA__GoalScored_EC370C9148AC0F78977504B14F2EF549(class ACrowdActor_TA* C);
	void __CrowdSoundManager_TA__GoalScored_C6D47DBC4AA141D5EC5F75856A7DF3F5(class ACrowdActor_TA* C);
	class UAkSoundCue* __CrowdSoundManager_TA__HandleGameWinnerSet_D0C7742A42C60879F7623FBDCEAF3804(class UCrowdSounds_TA* S);
	class UAkSoundCue* __CrowdSoundManager_TA__HandleGameWinnerSet_727EA57842CEBE52A2C037A0C939F61B(class UCrowdSounds_TA* S);
	class UAkSoundCue* __CrowdSoundManager_TA__HandleGameWinnerSet_7DE9E27B4AF3D778139CAFAAF1785CE1(class UCrowdSounds_TA* S);
	void __CrowdSoundManager_TA__HandleDemolish_5F5E1C2D4F52292B0D8663BEACD67EE3(class ACrowdActor_TA* C);
	void __CrowdSoundManager_TA__HandleDemolish_C78865B14572A2E6F1B5EF9F83B72B35(class ACrowdActor_TA* C);
	void __CrowdSoundManager_TA__HandleGameTimeUpdated_481F5A6845C245126009EF88D0AAB696(class ACrowdActor_TA* C);
	float __CrowdSoundManager_TA__HandleGameTimeUpdated_36683BC942B04E466171C4ACD9636C53();
	void __CrowdSoundManager_TA__HandleCarHitBall_BAF84B8E48D08765158E4CAB61A10774(class ACrowdActor_TA* C);
	void __CrowdSoundManager_TA__HandleCarHitBall_47E27B9D42844DFDB583C6B0852E10B9(class ACrowdActor_TA* C);
	void __CrowdSoundManager_TA__CheckGoals_6AB843A34AFB9DB40131468185CBC4DA(class ACrowdActor_TA* C);
	void __CrowdSoundManager_TA__CheckGoals_8FFE54E640D78EB617C8E0861296C6AD(class ACrowdActor_TA* C);
	void __CrowdSoundManager_TA__CheckGoals_64644F1948005ABF774E0185E1312A5D(class ACrowdActor_TA* C);
	void __CrowdSoundManager_TA__CheckGoals_58004C2D476FB702715576BA789BD2A2(class ACrowdActor_TA* C);
	void __CrowdSoundManager_TA__CheckGoals_73D5CAD54E1FE47BDB0B6298842B9F7E(class ACrowdActor_TA* C);
	void __CrowdSoundManager_TA__CheckAerial_DF49E19A4CD17331BB0B5086014C4CAC(class ACrowdActor_TA* C);
	class UAkSoundCue* __CrowdSoundManager_TA__CheckEnergy_42615BB341023EFF3ABDD79543389B0C(class UCrowdSounds_TA* S);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	float GetCrowdValue(TEnumAsByte<ECrowdValueType> Type);
	void StopCrowdExcitementSound(const struct FCrowdExcitementSounds& ExcitementSounds, class AActor* FromActor);
	void PlayCrowdExcitementSoundNoCooldown(const struct FCrowdExcitementSounds& ExcitementSounds, class AActor* FromActor);
	void PlayCrowdExcitementSound(class AActor* FromActor, struct FCrowdExcitementSounds* ExcitementSounds);
	void SetNextChantDuration();
	void CheckEnergy(float DeltaTime);
	void CheckAerial(float DeltaTime);
	void ClearShotInProgress();
	void CheckGoals(float DeltaTime);
	void HandleCarHitBall(class ACar_TA* InCar, class ABall_TA* InBall);
	void Update0Seconds(float DeltaTime);
	void PlayMatchEndCountdown(int InSecondsRemaining, class UCrowdSounds_TA* InSounds, class AActor* FromActor);
	void HandleGameTimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleDemolish(class AGameEvent_TA* InGameEvent, const struct FDemolishData& Data);
	void HandleGameWinnerSet(class AGameEvent_Soccar_TA* InGameEvent);
	float GetTimeRemaining();
	float GetScoreSeparation();
	void UpdateScoreState();
	void UpdateStates();
	void TickValues(float DeltaTime);
	void TickActive(float DeltaTime);
	void Tick(float DeltaTime);
	void AfterGoalScored();
	void GoalScored();
	void PlayMatchEndedEncore();
	void HandleMatchEnded(class AGameEvent_Soccar_TA* G);
	void HandleOvertimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleGameStateChanged(class AGameEvent_TA* G);
	void ClearPendingCrowdFlags();
	void StopCrowdActorSound(const struct FScriptDelegate& GetSoundDelegate);
	void PlayCrowdActorSound(const struct FScriptDelegate& GetSoundDelegate);
	class UAkSoundCue* GetSound(class UCrowdSounds_TA* InSounds);
	class UDynamicValueModifier_X* AddDynamicModifier(class UDynamicValue_X* Value, class UDynamicValueModifier_X* ModArchetype);
	bool CanModifyCrowd();
	class UDynamicValueModifier_X* CreateCurveModifier(class UDynamicValueModifierCurve_X* ModArchetype, const struct FScriptDelegate& InDelegate);
	void RemoveAllModifiers();
	void InitModifiers();
	void InitGameObserver();
	void InitCrowd();
	void Detached();
	void Attached();
};


// Class TAGame.SimilarSeasonLogos_TA
// 0x0010 (0x0070 - 0x0060)
class USimilarSeasonLogos_TA : public UObject
{
public:
	TArray<struct FSimilarLogoGroup>                   LogoGroups;                                               // 0x0060(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SimilarSeasonLogos_TA");
		return ptr;
	}

};


// Class TAGame.GameEvent_Soccar_SubRules_Basketball_TA
// 0x0008 (0x0068 - 0x0060)
class UGameEvent_Soccar_SubRules_Basketball_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	int                                                LongDistanceScore;                                        // 0x0060(0x0004)
	int                                                DefaultScore;                                             // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Soccar_SubRules_Basketball_TA");
		return ptr;
	}


	void OnGetBallModifiedScore(class ABall_TA* Ball, int ScoreIndex, int* BallScore);
};


// Class TAGame.Tutorial_TA
// 0x01BC (0x0248 - 0x008C)
class UTutorial_TA : public UTickableStateObject_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	class USequenceAction*                             KNode_Owner;                                              // 0x0090(0x0008) (Transient)
	class APlayerController_TA*                        PC;                                                       // 0x0098(0x0008) (Transient)
	class AGameEvent_Tutorial_TA*                      GameEvent;                                                // 0x00A0(0x0008) (Transient)
	struct FString                                     ModalSectionName;                                         // 0x00A8(0x0010) (NeedCtorLink)
	class UGFxModal_X*                                 MessageModal;                                             // 0x00B8(0x0008) (Transient)
	TArray<struct FMessageInfo>                        Messages;                                                 // 0x00C0(0x0010) (NeedCtorLink)
	int                                                MessageIndex;                                             // 0x00D0(0x0004)
	float                                              DisplayMessageStartTime;                                  // 0x00D4(0x0004)
	unsigned long                                      bEndTutorialOnFinalMessage : 1;                           // 0x00D8(0x0004)
	unsigned long                                      bCompleteTutorialOnFinalMessage : 1;                      // 0x00D8(0x0004)
	unsigned long                                      bInitialMessagesFinished : 1;                             // 0x00D8(0x0004)
	unsigned long                                      bFadeAudio : 1;                                           // 0x00D8(0x0004)
	unsigned long                                      bSkipFadeIn : 1;                                          // 0x00D8(0x0004)
	unsigned long                                      bFadeTransitionComplete : 1;                              // 0x00D8(0x0004)
	unsigned long                                      bTutorialStarted : 1;                                     // 0x00D8(0x0004)
	unsigned long                                      bActionNameToDetectPressed : 1;                           // 0x00D8(0x0004)
	unsigned long                                      bCarTouched : 1;                                          // 0x00D8(0x0004)
	unsigned long                                      bCompleteOnBallTouch : 1;                                 // 0x00D8(0x0004)
	unsigned long                                      bFailTutorialOnOtherCarHitBall : 1;                       // 0x00D8(0x0004)
	unsigned long                                      bDestroyBallsOnFadeIn : 1;                                // 0x00D8(0x0004)
	unsigned long                                      bDestroyBotsOnFadeIn : 1;                                 // 0x00D8(0x0004)
	unsigned long                                      bHasBot : 1;                                              // 0x00D8(0x0004)
	unsigned long                                      bFoundBot : 1;                                            // 0x00D8(0x0004)
	unsigned long                                      bStartWithSecondaryCamActive : 1;                         // 0x00D8(0x0004)
	unsigned long                                      bStartWithBoostMeterDisabled : 1;                         // 0x00D8(0x0004)
	unsigned long                                      bBotCanPlay : 1;                                          // 0x00D8(0x0004)
	unsigned long                                      bStartBotOnAllMessagesDisplayed : 1;                      // 0x00D8(0x0004)
	unsigned long                                      bBallCanHitPlayersGoal : 1;                               // 0x00D8(0x0004)
	unsigned long                                      bCompleteOnLastBallTouched : 1;                           // 0x00D8(0x0004)
	unsigned long                                      bCompleteOnHitGoal : 1;                                   // 0x00D8(0x0004)
	unsigned long                                      bFailOnHitGoal : 1;                                       // 0x00D8(0x0004)
	unsigned long                                      bFreezeCarOnSpawn : 1;                                    // 0x00D8(0x0004)
	unsigned long                                      bCanEverDodge : 1;                                        // 0x00D8(0x0004)
	unsigned long                                      bCanEverDoubleJump : 1;                                   // 0x00D8(0x0004)
	unsigned long                                      bTutorialFinished : 1;                                    // 0x00D8(0x0004)
	unsigned long                                      bPauseDuringMessages : 1;                                 // 0x00D8(0x0004)
	unsigned long                                      bCanResetTutorial : 1;                                    // 0x00D8(0x0004)
	unsigned long                                      bCanSkipTutorial : 1;                                     // 0x00D8(0x0004)
	unsigned long                                      bShowGameFinishMessage : 1;                               // 0x00D8(0x0004)
	unsigned long                                      bSkipped : 1;                                             // 0x00D8(0x0004)
	unsigned long                                      UnknownData01 : 32;                                       // 0x00D8(0x0001)
	unsigned long                                      bQuit : 1;                                                // 0x00DC(0x0004)
	unsigned long                                      bReset : 1;                                               // 0x00DC(0x0004)
	unsigned long                                      bTLog : 1;                                                // 0x00DC(0x0004)
	struct FMessageInfo                                CorrectAnswer;                                            // 0x00E0(0x0040) (NeedCtorLink)
	struct FMessageInfo                                IncorrectAnswer;                                          // 0x0120(0x0040) (NeedCtorLink)
	float                                              StartFadeDisplayTime;                                     // 0x0160(0x0004)
	struct FColor                                      FadeColor;                                                // 0x0164(0x0004)
	float                                              FadeTime;                                                 // 0x0168(0x0004)
	unsigned char                                      UnknownData02[0x4];                                       // 0x016C(0x0004) MISSED OFFSET
	class UGFxShell_TA*                                Shell;                                                    // 0x0170(0x0008) (Transient)
	struct FName                                       ActionNameToDetect;                                       // 0x0178(0x0008)
	float                                              FailTimeAfterBallTouch;                                   // 0x0180(0x0004)
	float                                              CountdownTime;                                            // 0x0184(0x0004)
	int                                                BotTeam;                                                  // 0x0188(0x0004)
	float                                              TutorialFailTime;                                         // 0x018C(0x0004)
	float                                              TutorialCompleteTime;                                     // 0x0190(0x0004)
	float                                              BallDestroyTimeOnTouch;                                   // 0x0194(0x0004)
	float                                              AllMessagesDisplayedTime;                                 // 0x0198(0x0004)
	float                                              WaitTimeBeforeCheckCompleteAction;                        // 0x019C(0x0004)
	TEnumAsByte<ETutorialStatus>                       TutorialStatus;                                           // 0x01A0(0x0001)
	unsigned char                                      UnknownData03[0x3];                                       // 0x01A1(0x0003) MISSED OFFSET
	float                                              StartTime;                                                // 0x01A4(0x0004)
	struct FString                                     StartTimeString;                                          // 0x01A8(0x0010) (NeedCtorLink)
	TArray<struct FString>                             UseActions;                                               // 0x01B8(0x0010) (NeedCtorLink)
	TArray<struct FName>                               IgnoreActionPressList;                                    // 0x01C8(0x0010) (NeedCtorLink)
	TArray<struct FName>                               FailedActionPressList;                                    // 0x01D8(0x0010) (NeedCtorLink)
	TArray<struct FName>                               StartActionPressList;                                     // 0x01E8(0x0010) (NeedCtorLink)
	TArray<struct FName>                               CompleteActionPressList;                                  // 0x01F8(0x0010) (NeedCtorLink)
	TArray<struct FName>                               CompleteActionIgnorePressList;                            // 0x0208(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __EventTutorialEnded__Delegate;                           // 0x0218(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0218(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTutorialCompleted__Delegate;                       // 0x0230(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0230(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Tutorial_TA");
		return ptr;
	}


	struct FString GetTutorialName();
	void SkipTutorial_Confirm(class UGFxModal_X* Modal);
	void SkipTutorial();
	void ResetTutorial();
	void SelectMultipleChoiceButton(class UGFxModal_X* Modal, int buttonIndex);
	void MultipleChoice_Button3(class UGFxModal_X* Modal);
	void MultipleChoice_Button2(class UGFxModal_X* Modal);
	void MultipleChoice_Button1(class UGFxModal_X* Modal);
	void MultipleChoice_Button0(class UGFxModal_X* Modal);
	void ForceActivateOutput(TEnumAsByte<ETutorialOutput> Output);
	void NotifyEventOnTutorial(const struct FString& EventName);
	void ReachedTimeAfterBallTouch();
	void HandleBallDestroyed(class APawn_X* Pawn);
	void HandleCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<EBallHitType> HitType);
	void HandleHitGoal(class ABall_TA* Ball, class UGoal_TA* Goal);
	void HandleBallAdded(class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* Ball);
	void RegisterGameBallDelegates();
	void CloseMessageModal();
	void TutorialCompleteTimeFinished();
	void TutorialFailTimeFinished();
	void EndTutorial();
	void ShowGameMessage(const struct FName& Type, const struct FString& Message);
	void FailedTutorial();
	void CompletedTutorial();
	void SetIgnoreOnCompleteActionList();
	void AddKeyNameFromAction(const struct FName& ActionName, TArray<struct FString>* KeyList);
	TArray<struct FString> GetActionDisplayNames(const struct FActionNameInfo& ActionInfo);
	bool RemoveMatchingKeys(const struct FString& KeyToAdd, TArray<struct FString>* Out_KeyList);
	struct FString GetUIReadableString(const struct FString& Key);
	struct FString GetMergedActionString(TArray<struct FString> KeyList);
	struct FString GetBodyText(const struct FMessageInfo& InMessage);
	bool DisplayMessage(const struct FMessageInfo& InMessage);
	bool DisplayNextMessage();
	void DisplayCurrentMessage();
	void OnAllMessagesDisplayed();
	void ShowNextMessage(class UGFxModal_X* Modal);
	struct FMessageInfo GetMessage();
	void Tick(float DeltaTime);
	void CheckActionNameToDetect();
	void OnActionNameToDetectReleased();
	void OnActionNameToDetectPressed();
	void OnActionKeyReleased(const struct FName& ActionName);
	void OnActionKeyPressed(const struct FName& ActionName);
	bool NotifyKeyInput(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	bool NotifyAxisInput(int ControllerId, const struct FName& Key, float delta, float DeltaTime, bool bGamepad);
	bool CompleteActionPressed(const struct FName& Key, bool bGamepad);
	bool StartActionPressed(const struct FName& Key, bool bGamepad);
	void SetIgnoredInput(bool bClearPreviousActions);
	void SetAllDriving(TEnumAsByte<EPlayerDriveType> PlayerDriveType, bool bDriving);
	void TutorialStart();
	void CountTimeElapsed();
	void InitTutorial();
	void OnScreenFadedOut();
	void OnScreenFadedIn();
	void HideFadeScreen();
	void ShowFadeScreen(float DisplayTime);
	void Destroyed();
	bool CanDestroy();
	void FoundBot();
	void HandleVehicleSetup(class AGameEvent_Tutorial_TA* InGameEvent, class ACar_TA* Car);
	void HandleInputTypeChanged(class UGFxShell_X* InShell);
	void Init(class APlayerController_TA* InPC, class AGameEvent_Tutorial_TA* InGameEvent, class USequenceAction* InKNode_Owner);
	void EventTutorialCompleted(class UTutorial_TA* Tutorial);
	void EventTutorialEnded(class UTutorial_TA* Tutorial);
};


// Class TAGame.GameEvent_Training_Goalie_TA
// 0x0004 (0x0E84 - 0x0E80)
class AGameEvent_Training_Goalie_TA : public AGameEvent_Training_TA
{
public:
	int                                                Score;                                                    // 0x0E80(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Training_Goalie_TA");
		return ptr;
	}


	void CommitRedoRound();
	void ResetGameEvent();
	void GetBallAimInfo(const struct FVector& BallSpawnLoc, const struct FFieldSpawnInfo& SpawnInfo, struct FVector* Out_GoalAimLocation, float* Out_DepthPercent, float* Out_HeightPercent, float* Out_WidthPercent);
	struct FVector GetBallArchVelocity(const struct FVector& BallSpawnLoc, const struct FFieldSpawnInfo& SpawnInfo);
	struct FVector GetBallForwardVelocity(const struct FVector& BallSpawnLoc, const struct FFieldSpawnInfo& SpawnInfo);
	struct FVector GetBallAimVelocity(const struct FVector& BallSpawnLoc, const struct FFieldSpawnInfo& SpawnInfo);
	struct FVector DetermineBallInitialVelocity(const struct FVector& BallSpawnLoc, class ACar_TA* Car, const struct FFieldSpawnInfo& SpawnInfo);
	struct FRotator GetCarSpawnRotation(const struct FFieldSpawnInfo& SpawnInfo, const struct FVector& CarSpawnLocation);
	struct FVector GetCarSpawnLocation(const struct FFieldSpawnInfo& SpawnInfo);
	int GetScore();
};


// Class TAGame.TutorialSave_TA
// 0x0010 (0x00D8 - 0x00C8)
class UTutorialSave_TA : public USaveObject_TA
{
public:
	TArray<struct FString>                             TrainingEventsPlayed;                                     // 0x00C8(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TutorialSave_TA");
		return ptr;
	}


	bool AddToTutorialPlayedList_Internal(const struct FString& EventName);
	bool AddToTutorialPlayedList(const struct FString& EventName, const struct FString& Difficulty);
	bool HasPlayedTraining_Internal(const struct FString& EventName);
	bool HasPlayedTraining(const struct FString& EventName, const struct FString& Difficulty);
};


// Class TAGame.GFxShell_TA
// 0x0158 (0x0288 - 0x0130)
class UGFxShell_TA : public UGFxShell_X
{
public:
	float                                              BugReportDelay;                                           // 0x0130(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0134(0x0004) MISSED OFFSET
	class UChampionshipTrophy_TA*                      ChampionshipTrophyArchetype;                              // 0x0138(0x0008) (Edit)
	class ULocalPlayer_TA*                             TAPlayer;                                                 // 0x0140(0x0008) (Transient)
	class UGFxData_System_TA*                          SystemData;                                               // 0x0148(0x0008) (Transient)
	class UGFxData_LocalPlayer_TA*                     LocalPlayerData;                                          // 0x0150(0x0008) (Transient)
	struct FString                                     BugReportEmail;                                           // 0x0158(0x0010) (NeedCtorLink, DataBinding)
	unsigned long                                      bEnableFocusDebugger : 1;                                 // 0x0168(0x0004) (DataBinding)
	unsigned long                                      bDisableStartupMovies : 1;                                // 0x0168(0x0004) (DataBinding)
	unsigned long                                      bAllowOnlineStorageResyncModal : 1;                       // 0x0168(0x0004) (Const, Config)
	unsigned char                                      UnknownData01[0x4];                                       // 0x016C(0x0004) MISSED OFFSET
	class UBugReport_X*                                CurrentBugReport;                                         // 0x0170(0x0008) (Transient)
	struct FString                                     SaveReplayMessage;                                        // 0x0178(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     BugReportWaitMessage;                                     // 0x0188(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     DefaultDisconnectionTitle;                                // 0x0198(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PsyNetReconnectMessage;                                   // 0x01A8(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PSPlusTipTitle;                                           // 0x01B8(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PSPlusTipMessage;                                         // 0x01C8(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     RankedReconnectTitle;                                     // 0x01D8(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     RankedReconnectBody;                                      // 0x01E8(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     BannedTimeRemainingMessage;                               // 0x01F8(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PermaBannedMessage;                                       // 0x0208(0x0010) (Const, Localized, NeedCtorLink)
	TArray<class UGFxModal_X*>                         ActiveModals;                                             // 0x0218(0x0010) (Transient, NeedCtorLink)
	TEnumAsByte<EProgressMessageType>                  PendingMessageType;                                       // 0x0228(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0229(0x0007) MISSED OFFSET
	struct FString                                     PendingErrorTitle;                                        // 0x0230(0x0010) (Transient, NeedCtorLink)
	struct FString                                     PendingErrorMessage;                                      // 0x0240(0x0010) (Transient, NeedCtorLink)
	float                                              LastPsyNetReconnectTime;                                  // 0x0250(0x0004) (Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0254(0x0004) MISSED OFFSET
	class UGFxModal_X*                                 ModalKick;                                                // 0x0258(0x0008) (Transient)
	struct FString                                     BuildEdition;                                             // 0x0260(0x0010) (NeedCtorLink, DataBinding)
	struct FScriptDelegate                             __EventBanButtonClicked__Delegate;                        // 0x0270(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0270(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxShell_TA");
		return ptr;
	}


	void __GFxShell_TA__OnStart_1BE0BD8746002AD7341697AFD63A079C(class UOnlineGamePlaylists_X* Playlists);
	void __GFxShell_TA__HandleOnlinePlayerStorageSyncError_8979E6BB4997C38432C0DFB1275924CA(class UGFxModal_X* _);
	void __GFxShell_TA__HandleSaveDataLoaded_E898471A4F4736D1F89F9B9E4050E0E5(class UOnlineStorageSyncManager_TA* _, class UAsyncTask* Task);
	void __GFxShell_TA__HandleBanned_91EA15D846911F15D29D249DC8F10A06(class UGFxModal_X* _);
	struct FString STATIC_ReplaceHtmlEntities(const struct FString& Text);
	class UGFxDataStore_X* STATIC_GetData(class ULocalPlayer_X* ForPlayer);
	class UGFxShell_TA* STATIC_GetShell(class ULocalPlayer_X* ForPlayer);
	void HandleTopMenuChange(const struct FName& PrevMenu, const struct FName& TopMenu);
	void AlertErrorObj(class UError* Error);
	class UGFxModal_X* AlertErrorObject(const struct FString& Error, const struct FString& Title);
	class UGFxModal_X* AlertError(const struct FString& Error, const struct FString& Title);
	bool AnyPlayerChatRestricted();
	void PreloadLegalText();
	struct FString GetPrivacyPolicy();
	struct FString GetTermsOfService();
	struct FString GetEULA();
	void OnRankedReconnect(const struct FString& BeaconAddress, int PlaylistId, struct FServerReservationData* StructInitializer_2DD0554346AEBC74E8A365913FEE8391);
	void ShowRankedReconnectModal(const struct FString& BeaconAddress, int PlaylistId);
	void OnGotoStorePage(class UGFxModal_X* Modal);
	void ShowUnauthorizedModal();
	void HandlePlaylistsChanged(class UOnlineGamePlaylists_X* Playlists);
	void SetInputActionEnabled(const struct FName& ActionName, bool bEnabled);
	void VoteToForfeit();
	void ShowTextInput(const struct FString& Title, const struct FString& Body, const struct FScriptDelegate& Callback, bool bDisplayAsPassword, const struct FString& DefaultText, int MaxLength);
	void HandleCommerceDialogClosed();
	void SetViewingOnlineScene(bool bViewing);
	void HandlePsyNetLoginAttempt(class UOnlinePlayerAuthentication_X* Auth);
	void HandlePsyNetLoginConfirm(class UGFxModal_X* Modal);
	struct FString GetPrivilegeRestrictionMessage(class UError* FailReason);
	void HandlePrivilegeCheckRestriction(class UPrivilegeCheck_X* PrivilegeCheck);
	void HandleOnlineGameConnectionError(class UError* Error, class UOnlinePlayer_X* OnlinePlayer);
	void HandlePsyNetDisabled(class UPsyNetConnection_X* Connection);
	void HandleBanned(class UOnlinePlayerAuthentication_X* Auth);
	void HandlePauseChanged();
	void PopUISoundState(const struct FName& StateName);
	void PushUISoundState(const struct FName& StateName);
	void CheckoutCompleteFlashNNX();
	void OpenStoreOverlay(TArray<struct FString>* ArrayInitializer_1E6BAE49467A45BB1693438D2E52C967, TArray<struct FString>* ArrayInitializer_CD21341743C7878CCA61BAA349D112C5, TArray<struct FString>* ArrayInitializer_CF68A2D6454AC72779F2F29ADD4E50E4);
	void OnKickPlayerAccepted(class UGFxModal_X* Modal);
	void OnKickPlayerModalClosed(class UGFxModal_X* Modal);
	void HandleCloseKickPlayerDialog();
	void HandleDrawWorldFullScreenChanged(class UGameViewportClient_TA* GVC);
	void HandleSplitScreenTypeChanged(class UGameViewportClient_TA* GVC);
	void ShowControllerPickerUI();
	void ShowControllerUI();
	void ShowKickPlayerModal(int ControllerIndex);
	void ShowLoginUI(int ControllerIndex);
	void HandleKickedResponse(class UGFxModal_X* Modal);
	void HandleUserSaveReplay(class UGFxModal_X* Modal);
	void ShowErrorMessage();
	void HandleGameInit(class AGRI_X* GRI);
	void HandleConnectionError(TEnumAsByte<EProgressMessageType> MessageType, const struct FString& Title, const struct FString& Message);
	void OnCancelSaveSaveData(class UGFxModal_X* Modal);
	void OnRetrySaveSaveData(class UGFxModal_X* Modal);
	class UGFxModal_X* CreateSaveErrorModal(class UError* Error);
	void HandleSaveDataSaved(class USaveGameManager_TA* SaveManager, class USaveData_TA* SaveData, class UError* Error);
	void NotifyEnableSaveDataProcess(class UGFxModal_X* Modal);
	void OnDisableSaveData(class UGFxModal_X* Modal);
	void OnLoadFailureDisableSaveData(class UGFxModal_X* Modal);
	void OnCreateNewSaveData(class UGFxModal_X* Modal);
	void OnConfirmCreateNewSaveData(class UGFxModal_X* Modal);
	void OnRetryLoadSaveData(class UGFxModal_X* Modal);
	void HandleSaveDataLoaded(class USaveGameManager_TA* SaveManager, class USaveData_TA* SaveData, class UError* Error);
	void HandleOnlinePlayerStorageSyncError(class UError* Error);
	void DelayedNotifyWhenSaveDataLoaded();
	void CancelBugReport();
	void SubmitBugReport(const struct FString& Title, const struct FString& Description, const struct FString& Email);
	bool StartBugReport();
	void HandleModalClosed(class UGFxModal_X* Modal);
	class UGFxObject* OnCreateTutorialModal();
	class UGFxObject* OnCreateModal(const struct FString& ClassType);
	void OnShowModal(class UGFxObject* Modal);
	class UGFxModal_X* CreateModalObject(class UClass* ModalClass);
	class UGFxObject* GetModalObject(class UClass* ModalClass);
	class UGFxModal_X* ShowModalObject(class UGFxModal_X* Modal);
	class UGFxModal_X* CreateModal(class UClass* ModalClass);
	void OpenFriendsList();
	void ViewProfile(const struct FUniqueNetId& ProfileId);
	int GetKeyCodeForAction(const struct FName& Action, bool bGamepad);
	struct FString GetKeyForAction(const struct FName& Action, bool bGamepad);
	void ExitToOpenContainer(const struct FProductHashID& ContainerID);
	void LeaveMatch();
	void ExitToMainMenu();
	void PlaySeason();
	void PlayNow();
	void OnPrintOpenScreens();
	void OnChampionshipTrophyScreenFinished();
	void ChampionshipTrophyScreenFinished();
	void SpawnChampionshipTrophy();
	void SeasonSkipPreMatch();
	void RestartMatch();
	class UProfile_TA* GetProfile();
	void HandleGameSessionEnded();
	void HandleGameInvitePassword(const struct FString& Password, bool bCanceled);
	void HandleGameInvitePasswordRequired();
	void ShowPasswordPrompt(const struct FScriptDelegate& Callback);
	void HandleGameInviteConfirmed(class UGFxModal_X* Modal);
	void HandleGameInviteConfirmation(const struct FName& ConfirmationReason);
	void HandleGameInviteAccepted();
	void ShowSingleButtonMessage(const struct FString& MessageType);
	void HandlePCDestroyed(class APlayerController_X* PC);
	void HandleReceivedController(class UPlayer* PlayerRef);
	void OnStart();
	class UOnlineGame_X* STATIC_GetOnlineGame();
	void EventBanButtonClicked(class UGFxShell_TA* GFxShell);
};


// Class TAGame.UISavedValues_TA
// 0x0010 (0x00D8 - 0x00C8)
class UUISavedValues_TA : public USaveObject_TA
{
public:
	TArray<struct FUISavedKeyValue>                    Values;                                                   // 0x00C8(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.UISavedValues_TA");
		return ptr;
	}


	void Clear(const struct FName& Key);
	void Set(const struct FName& Key, const struct FString& Value);
	bool Contains(const struct FName& Key);
	struct FString Get(const struct FName& Key);
};


// Class TAGame.UIStrings_TA
// 0x0160 (0x01C0 - 0x0060)
class UUIStrings_TA : public UUIStrings_X
{
public:
	struct FString                                     Continue;                                                 // 0x0060(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ExitGame;                                                 // 0x0070(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Retry;                                                    // 0x0080(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     OK;                                                       // 0x0090(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Cancel;                                                   // 0x00A0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Yes;                                                      // 0x00B0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     No;                                                       // 0x00C0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     SignIn;                                                   // 0x00D0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Days;                                                     // 0x00E0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Hours;                                                    // 0x00F0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Minutes;                                                  // 0x0100(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Seconds;                                                  // 0x0110(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Meters;                                                   // 0x0120(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Kilometers;                                               // 0x0130(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Feet;                                                     // 0x0140(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Miles;                                                    // 0x0150(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MetersUnit;                                               // 0x0160(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     FeetUnit;                                                 // 0x0170(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     MetersPerSecondUnit;                                      // 0x0180(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     FeetPerSecondUnit;                                        // 0x0190(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Error;                                                    // 0x01A0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Warning;                                                  // 0x01B0(0x0010) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.UIStrings_TA");
		return ptr;
	}

};


// Class TAGame.GameInfo_Tutorial_TA
// 0x0018 (0x0528 - 0x0510)
class AGameInfo_Tutorial_TA : public AGameInfo_Soccar_TA
{
public:
	unsigned long                                      bAutoEntered : 1;                                         // 0x0510(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0514(0x0004) MISSED OFFSET
	TArray<struct FString>                             TutorialTypes;                                            // 0x0518(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Tutorial_TA");
		return ptr;
	}


	TEnumAsByte<EV2TutorialType> STATIC_GetTutorialV2Type(const struct FString& MapName);
	struct FString STATIC_GetTutorialV2Map(TEnumAsByte<EV2TutorialType> Type);
	void TutorialHelper();
	void SkipTutorial();
	void InitTutorialGameEvent(class AGameEvent_TA* GameEventArchetype, int InDifficulty);
	void StartTutorialType(const struct FString& Type, const struct FString& Difficulty);
	void SetTutorialDifficulty(int Difficulty);
	void PostBeginPlay();
};


// Class TAGame.GameEvent_Training_Aerial_TA
// 0x0000 (0x0E80 - 0x0E80)
class AGameEvent_Training_Aerial_TA : public AGameEvent_Training_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Training_Aerial_TA");
		return ptr;
	}


	void CheckForReset();
	struct FVector DetermineBallInitialVelocity(const struct FVector& BallSpawnLoc, class ACar_TA* Car, const struct FFieldSpawnInfo& SpawnInfo);
};


// Class TAGame.GameEvent_Training_Striker_TA
// 0x0000 (0x0E80 - 0x0E80)
class AGameEvent_Training_Striker_TA : public AGameEvent_Training_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Training_Striker_TA");
		return ptr;
	}


	void CheckForReset();
	struct FVector DetermineBallInitialVelocity(const struct FVector& BallSpawnLoc, class ACar_TA* Car, const struct FFieldSpawnInfo& SpawnInfo);
	int GetScore();
};


// Class TAGame.GameEvent_Tutorial_Basic_TA
// 0x000C (0x0E74 - 0x0E68)
class AGameEvent_Tutorial_Basic_TA : public AGameEvent_Tutorial_TA
{
public:
	int                                                CurrentScore;                                             // 0x0E68(0x0004)
	int                                                TotalRounds;                                              // 0x0E6C(0x0004)
	int                                                CurrentRounds;                                            // 0x0E70(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Tutorial_Basic_TA");
		return ptr;
	}


	bool MoveToGround(class AActor* Mover, float HeightCheck);
	void OnVehicleSetup(class ACar_TA* Car);
	void InitBallVelocity();
	void CheckForReset();
	void StartRound();
	void HideTimer();
	void SetManualScores(int InTotalRounds, int InCurrentRound, int InCurrentScore);
	int GetGameEventRounds();
	int GetTotalRounds();
	int GetScore();
	void SkipTutorial();
	class ATeam_TA* PickTeam(class AController* C);
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
};


// Class TAGame.GameEvent_Tutorial_Advanced_TA
// 0x0004 (0x0E78 - 0x0E74)
class AGameEvent_Tutorial_Advanced_TA : public AGameEvent_Tutorial_Basic_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0E74(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Tutorial_Advanced_TA");
		return ptr;
	}

};


// Class TAGame.GameEvent_Tutorial_FreePlay_TA
// 0x0000 (0x0E68 - 0x0E68)
class AGameEvent_Tutorial_FreePlay_TA : public AGameEvent_Tutorial_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Tutorial_FreePlay_TA");
		return ptr;
	}


	void ResetBalls();
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
	void InitMutators();
	void ResetGameEvent();
	void CheckForReset();
	void OnVehicleSetup(class ACar_TA* Car);
	void InitGameSetup(class ACar_TA* Car);
};


// Class TAGame.__GameEvent_Tutorial_FreePlay_TA__HandleHitGoal_6A7444104EC2E5ED82B8A4B59429C1B7
// 0x0008 (0x0068 - 0x0060)
class U__GameEvent_Tutorial_FreePlay_TA__HandleHitGoal_6A7444104EC2E5ED82B8A4B59429C1B7 : public UObject
{
public:
	class UGoal_TA*                                    Goal;                                                     // 0x0060(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameEvent_Tutorial_FreePlay_TA__HandleHitGoal_6A7444104EC2E5ED82B8A4B59429C1B7");
		return ptr;
	}


	void __GameEvent_Tutorial_FreePlay_TA__HandleHitGoal_6A7444104EC2E5ED82B8A4B59429C1B7(class APlayerController_TA* PC);
};


// Class TAGame.GameInfo_Cinematic_TA
// 0x0000 (0x04D8 - 0x04D8)
class AGameInfo_Cinematic_TA : public AGameInfoBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Cinematic_TA");
		return ptr;
	}


	void SetStadiumColors();
	void GenericPlayerInitialization(class AController* C);
	class APlayerController* SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
};


// Class TAGame.PlayerController_Cinematic_TA
// 0x0008 (0x0868 - 0x0860)
class APlayerController_Cinematic_TA : public APlayerController_X
{
public:
	class UPostProcessManager_X*                       PostProcessManagerArchetype;                              // 0x0860(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerController_Cinematic_TA");
		return ptr;
	}


	void ReceivedPlayer();
};


// Class TAGame.__GameInfo_GFxMenu_TA__Destroyed_FD2C54034D81EAB97B1CF3BB1124F4AD
// 0x0008 (0x0068 - 0x0060)
class U__GameInfo_GFxMenu_TA__Destroyed_FD2C54034D81EAB97B1CF3BB1124F4AD : public UObject
{
public:
	class UGFxEngine_TA*                               GFxEngine;                                                // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameInfo_GFxMenu_TA__Destroyed_FD2C54034D81EAB97B1CF3BB1124F4AD");
		return ptr;
	}


	void __GameInfo_GFxMenu_TA__Destroyed_FD2C54034D81EAB97B1CF3BB1124F4AD(class UGFxShell_X* Shell);
};


// Class TAGame.ExplosionPreviewer_TA
// 0x0030 (0x00A0 - 0x0070)
class UExplosionPreviewer_TA : public UComponent
{
public:
	class UProductLoader_TA*                           ProductLoader;                                            // 0x0070(0x0008) (Edit, ExportObject, Component, EditInline)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.ExplosionPreviewer_TA.ExplosionId
	class UProductAsset_GoalExplosion_TA*              ExplosionProduct;                                         // 0x0080(0x0008) (Transient)
	class AFXActor_X*                                  ExplosionInstance;                                        // 0x0088(0x0008) (Transient)
	unsigned long                                      bPreviewing : 1;                                          // 0x0090(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class APlayerController*                           PC;                                                       // 0x0098(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ExplosionPreviewer_TA");
		return ptr;
	}


	void ClearPreview();
	void ApplyExplosionParameters(class AFXActor_X* Instance);
	void StopExplosion(TArray<int>* ArrayInitializer_BEFFD24B4C36AFA66BD2D6959B35F452);
	void PlayExplosion(TArray<int>* ArrayInitializer_0232FF944BE34D2E89F18986733AC19F);
	void HandleProductLoaded(class UProductLoader_TA* InLoader);
	void SetProduct(int ProductID, TArray<int>* ArrayInitializer_487627964E09002DD70CB68967063923);
	void SetLoadout(struct U_Types_TA_FLoadoutData* InLoadout);
	void UpdateExplosion();
	void SetPreviewSlot(class UProductSlot_TA* InSlot);
	void SetPreviewSlotIndex(int InSlotIndex);
};


// Class TAGame.GFxData_MenuSequence_TA
// 0x0010 (0x00A8 - 0x0098)
class UGFxData_MenuSequence_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FMenuSequencePair>                   MenuStack;                                                // 0x0098(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MenuSequence_TA");
		return ptr;
	}


	void OnSequenceChange(const struct FName& NewSequence);
	void HandleSequenceChanged(class UMenuSequence_TA* NewSequence);
	void SetMenuSequence(const struct FName& MenuSequence);
	void PopMenuSequence(const struct FName& MenuID);
	void PushMenuSequence(const struct FName& MenuSequence, const struct FName& MenuID);
	void OnShellSet();
};


// Class TAGame.GFxData_System_TA
// 0x0044 (0x00DC - 0x0098)
class UGFxData_System_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     Language;                                                 // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     UIState;                                                  // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     SharedUIState;                                            // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	int                                                LocalPlayerCount;                                         // 0x00C8(0x0004) (DataBinding)
	unsigned long                                      bSaveDataLoaded : 1;                                      // 0x00CC(0x0004) (DataBinding)
	unsigned long                                      bLoggedInPsyNet : 1;                                      // 0x00CC(0x0004) (DataBinding)
	unsigned long                                      bLoggedInPlatform : 1;                                    // 0x00CC(0x0004) (DataBinding)
	unsigned long                                      bUndocked : 1;                                            // 0x00CC(0x0004) (DataBinding)
	TEnumAsByte<ESplitScreenType>                      SplitScreenType;                                          // 0x00D0(0x0001) (DataBinding)
	TEnumAsByte<EInputPlatformType>                    AvailableGamepadType;                                     // 0x00D1(0x0001) (DataBinding)
	unsigned char                                      UnknownData00[0x2];                                       // 0x00D2(0x0002) MISSED OFFSET
	float                                              SafeZoneRatio;                                            // 0x00D4(0x0004) (DataBinding)
	float                                              UIScale;                                                  // 0x00D8(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_System_TA");
		return ptr;
	}


	void SetUIState(const struct FString& NewState);
	void HandleSafeZoneRatioUpdated(class UGameViewportClient_TA* GVC);
	void HandleUIScaleModifierUpdated(class UGameViewportClient_TA* GVC);
	void HandleAvailableGamepadTypeChanged(class UGFxEngine_X* Engine);
	void HandleLocalPlayerChanged(class ULocalPlayer* NewPlayer);
	void HandleSplitScreenTypeChanged(class UGameViewportClient_TA* GVC);
	void SetSharedUIState(const struct FString& NewSharedUIState);
	void HandleProfileSet(class ULocalPlayer_TA* InPlayer);
	void HandleSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError* Error);
	void HandleLocalPlayerLoginStatusChanged(class UOnlinePlayer_X* InPlayer);
	void HandleQuitGame(class UGFxModal_X* Modal);
	void HandleLoginResult(class UOnlinePlayerAuthentication_X* Auth);
	void HandlePsyWebLoginChanged(class UOnlinePlayerAuthentication_X* Auth);
	void OnShellSet();
};


// Class TAGame.GFxData_LocalPlayer_TA
// 0x00D8 (0x0170 - 0x0098)
class UGFxData_LocalPlayer_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bOpenedStartMenu : 1;                                     // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bCheckedStartupEvents : 1;                                // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bSaveDataLoaded : 1;                                      // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bBallcam : 1;                                             // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bUseHoldBallCam : 1;                                      // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bUseBallCamIndicator : 1;                                 // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bAlternateNameplates : 1;                                 // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bMetric : 1;                                              // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bTeamColoredBoostMeter : 1;                               // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bPrimaryPlayer : 1;                                       // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bPartyLeader : 1;                                         // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bIsInParty : 1;                                           // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bIsPlayerTrading : 1;                                     // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bDemoBuild : 1;                                           // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bForceSplitScreenUI : 1;                                  // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bPrivateMatchGameOwner : 1;                               // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bAgeRestricted : 1;                                       // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bPendingIdleKick : 1;                                     // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bStartVoteToForfeitDisabled : 1;                          // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bDisableCrossPlay : 1;                                    // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bReplacingBot : 1;                                        // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bDisableDivisions : 1;                                    // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bDisableDivisionsSports : 1;                              // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bCheckedBootMessage : 1;                                  // 0x0098(0x0004)
	unsigned long                                      bUseSteamInput : 1;                                       // 0x0098(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FString                                     SaveDataError;                                            // 0x00A0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     OnlineError;                                              // 0x00B0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     PlayerName;                                               // 0x00C0(0x0010) (NeedCtorLink, DataBinding)
	class UTexture*                                    PlayerAvatarTexture;                                      // 0x00D0(0x0008) (DataBinding)
	int                                                XpLevel;                                                  // 0x00D8(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	struct FString                                     XPTitle;                                                  // 0x00E0(0x0010) (NeedCtorLink, DataBinding)
	int                                                XPTotal;                                                  // 0x00F0(0x0004) (DataBinding)
	int                                                XPProgressInCurrentLevel;                                 // 0x00F4(0x0004) (DataBinding)
	int                                                XPRequiredForNextLevel;                                   // 0x00F8(0x0004) (DataBinding)
	int                                                Team;                                                     // 0x00FC(0x0004) (DataBinding)
	float                                              CameraYaw;                                                // 0x0100(0x0004) (DataBinding)
	int                                                SplitScreenPosition;                                      // 0x0104(0x0004) (DataBinding)
	int                                                ControllerId;                                             // 0x0108(0x0004) (DataBinding)
	int                                                LocalPlayerIndex;                                         // 0x010C(0x0004) (DataBinding)
	struct FName                                       LastMatchType;                                            // 0x0110(0x0008) (DataBinding)
	struct FProductHashID                              ContainerToOpenId;                                        // 0x0118(0x0004) (DataBinding)
	unsigned char                                      OrphanedControllerId;                                     // 0x011C(0x0001) (Transient)
	unsigned char                                      UnknownData02[0x3];                                       // 0x011D(0x0003) MISSED OFFSET
	class UPersonaSave_TA*                             PersonaSave;                                              // 0x0120(0x0008)
	struct FUniqueNetId                                PlayerID;                                                 // 0x0128(0x0038) (DataBinding)
	class ULocalPlayer_TA*                             Player;                                                   // 0x0160(0x0008) (Transient)
	class UGFxModal_X*                                 ModalOrphaned;                                            // 0x0168(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_LocalPlayer_TA");
		return ptr;
	}


	void HandlePersonaSaveLoaded(class UPersonaSave_TA* InPersonaSave);
	void HandleXPUnloaded(class UClientXPSave_TA* XPSave);
	void HandleXPLoaded(class UClientXPSave_TA* XPSave);
	void HandleBallCamModeChanged();
	void HandleCameraSettingsLoaded(class UProfileCameraSave_TA* CameraSettings);
	void HandleProfileGameplaySettingsLoaded(class UProfileGameplaySave_TA* GameplaySettings);
	void ClearContainerToOpen();
	bool HasBlueprintToPreview();
	bool HasContainerToOpen();
	bool AreDivisionsDisabled();
	void HandleCrossPlatformEnabledChanged();
	void HandleAccountSettingsAdded(class UAccountSettingsComponent_TA* AccountSettings);
	void OnExitToStartScreen(class UGFxModal_X* Modal);
	void OnPickAccount(class UGFxModal_X* Modal);
	void ShowOrphanedUserDialog(unsigned char InControllerID);
	void ShowSecondaryPlayerOrphanedModal();
	void ShowPrimaryPlayerOrphanedModal();
	void OnUserRestored(unsigned char InControllerID);
	void OnUserOrphaned(unsigned char InControllerID);
	void HandleVoteToForfeitDisabledChanged(class APRI_TA* PRI);
	void HandleCanPlayOnlineChanged(class UOnlinePlayer_X* P);
	void HandleLocalPlayerChanged(class ULocalPlayer* NewPlayer);
	void ClearLocalPlayerData(class AGameEvent_TA* GameEvent);
	void HandlePrivateMatchGameOwnerUpdated(class AGameEvent_TA* GameEvent, class APRI_TA* NewGameOwner);
	void ChangeName(const struct FString& NewName);
	void Spectate();
	void OnJoinTeamFailed(int TeamNum);
	void OnServerChangeTeamFailed(int TeamNum);
	void ChangeTeam(int TeamIndex);
	class APRI_TA* GetPRI();
	bool GetOverlayEnabled();
	void SetCheckedStartupEvents(bool bHasChecked);
	void SetOpenedStartMenu(bool bHasBeenOpened);
	void UpdateXP(class UClientXPSave_TA* XPSave);
	void OnXpInitialized(int NewXP);
	void HandleSplitScreenPositionChanged(class ULocalPlayer_TA* LocalPlayer);
	class UOnlineGame_X* GetOnlineGame();
	void HandleGetAvatar(const struct FUniqueNetId& InPlayerId, class UTexture* Avatar, const struct FString& OnlinePlayerName);
	void HandleReceivedPRI(class APlayerController_X* PC);
	void HandleReceivedController(class UPlayer* PlayerRef, TArray<struct FUniqueNetId>* ArrayInitializer_8B0B06C0477CA2B254DC4881FB4CAE8F);
	void CheckBootMessages();
	void HandleOnlineNameChanged(class UOnlinePlayer_X* P);
	void HandlePsyNetConnected(class UPsyNetConnection_X* C);
	void HandleLoginStatusChanged(class UOnlinePlayer_X* OnlinePlayer, TArray<struct FUniqueNetId>* ArrayInitializer_9CE46BE541BBEC4944EEF49FA5F55D2C);
	void HandleSyncSuccess(class UOnlineStorageSyncManager_TA* OnlineStorageSyncManager);
	void HandleGamepadInputAPIChanged(class UGameViewportClient* InGVC, int InControllerID, TEnumAsByte<EInputAPI> InInputAPI);
	void HandleProfileSet(class ULocalPlayer_TA* InLocalPlayer);
	void HandleSplitScreenTypeChanged(class UGameViewportClient_TA* GVC);
	void HandleDrawWorldFullScreenChanged(class UGameViewportClient_TA* GVC);
	void UpdateName();
	void UpdatePrimaryPlayer();
	void HandlePrimaryPlayerChange(class ULocalPlayer* OldPrimary, class ULocalPlayer* NewPrimary);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.PremiumGaragePreviewSet_TA
// 0x0070 (0x00D0 - 0x0060)
class UPremiumGaragePreviewSet_TA : public UObject
{
public:
	int                                                PreviewActorIndices[0x2];                                 // 0x0060(0x0004) (Edit)
	TArray<class ACarPreviewActor_TA*>                 CarPreviewActors;                                         // 0x0068(0x0010) (Transient, NeedCtorLink)
	class UOnlineGameParty_TA*                         OnlineParty;                                              // 0x0078(0x0008) (Transient)
	class ACarPreviewActor_TA*                         CurrentCar;                                               // 0x0080(0x0008)
	int                                                CurrentCarIdx;                                            // 0x0088(0x0004)
	unsigned long                                      bFirstSet : 1;                                            // 0x008C(0x0004)
	class UDLCPack_TA*                                 QueuedSwapPack;                                           // 0x0090(0x0008)
	int                                                QueuedSwapSubIdx;                                         // 0x0098(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventSwapFinished__Delegate;                            // 0x00A0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x009C(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRevealComplete__Delegate;                          // 0x00B8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00B8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PremiumGaragePreviewSet_TA");
		return ptr;
	}


	void SetPreviewBaseLoadout();
	void FinishReveal();
	void OnRevealFinished(int SlotIdx);
	void OnRevealStarted();
	void DoReveal(class UOnlineProduct_TA* OnlineProduct, bool bMultiProductDrop);
	void SetupCarReveal(class UProductSlot_TA* RevealSlot);
	void InitReveal();
	void ResetInvalidAssets(class ACarPreviewActor_TA* PreviewActor, int SlotIndex, int ProductID);
	void SetCarRotations(int Rotation, bool bGamepad);
	void ExitPremiumGarage();
	void EnterPremiumGarage();
	class ATurnTableActor_TA* GetTurntable();
	struct U_Types_TA_FLoadoutData GetCurrentLoadout();
	void SetPreviewSlot(class UProductSlot_TA* Slot);
	void SetPreviewSlotIndex(int SlotIndex);
	void SetPreviewProduct(int SlotIdx, int ProductID, int TeamIdx, bool bUsePrimaryBaseLoadout);
	void SetOldLoadout(const struct U_Types_TA_FLoadoutData& Loadout);
	void HandleCarSwapComplete();
	void UpdateWheel(const struct FAssetLoadResult& Result);
	void SwapPremiumCarTo(class UDLCPack_TA* DLCPack, int SubIdx);
	void HandleCarPreviewActorAdded(class UGameShare_TA* GameShare, class ACarPreviewActor_TA* PreviewActor);
	void Cleanup();
	void Init();
	void EventRevealComplete(int SlotIdx);
	void EventSwapFinished();
};


// Class TAGame.MenuSequencer_TA
// 0x005C (0x0100 - 0x00A4)
class UMenuSequencer_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	TArray<class UMenuSequence_TA*>                    Sequences;                                                // 0x00A8(0x0010) (Edit, NeedCtorLink)
	struct FName                                       DefaultSequence;                                          // 0x00B8(0x0008) (Edit)
	class UMenuSequence_TA*                            CurrentSequence;                                          // 0x00C0(0x0008)
	class UMenuSequence_TA*                            PendingSequence;                                          // 0x00C8(0x0008)
	TEnumAsByte<ESequenceStatus>                       Status;                                                   // 0x00D0(0x0001)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00D1(0x0007) MISSED OFFSET
	TArray<class UMenuSequence_TA*>                    PendingSequenceQueue;                                     // 0x00D8(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __EventSequenceChanged__Delegate;                         // 0x00E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MenuSequencer_TA");
		return ptr;
	}


	class APlayerController* GetLocalPlayerController();
	bool IsSequencePending(const struct FName& SequenceName);
	bool IsSequenceActive(const struct FName& SequenceName);
	void Tick(float DeltaTime);
	void HandleSequenceEntered(class UMenuSequence_TA* Sequence);
	void InternalSequenceEnter(class UMenuSequence_TA* NewSequence, class UMenuSequence_TA* PrevSequence);
	void InternalSequenceLeave(class UMenuSequence_TA* NewSequence, class UMenuSequence_TA* PrevSequence);
	void HandleSequenceLeft(class UMenuSequence_TA* FromSequence);
	void TryEnterNextSequence();
	void SetSequence(const struct FName& SequenceName);
	class UMenuSequence_TA* GetSequence(const struct FName& SequenceName);
	class UMenuSequence_TA* InstanceSequence(class UMenuSequence_TA* Archetype);
	void InstanceSequences();
	void Attached();
	void EventSequenceChanged(class UMenuSequence_TA* NewSequence);
};


// Class TAGame.GameInfo_PerfTest_TA
// 0x0000 (0x04D8 - 0x04D8)
class AGameInfo_PerfTest_TA : public AGameInfoBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_PerfTest_TA");
		return ptr;
	}


	int SortCameraActors(class ACameraActor* A, class ACameraActor* B);
	void SelectCamera(int Direction);
	void PrevCamera();
	void NextCamera();
	void GenericPlayerInitialization(class AController* C);
	class APlayerController* SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
};


// Class TAGame.PostProcessManager_TA
// 0x0018 (0x00E8 - 0x00D0)
class UPostProcessManager_TA : public UPostProcessManager_X
{
public:
	TEnumAsByte<EPostProcessAAType>                    PostProcessAAType;                                        // 0x00D0(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	float                                              DOF_DistanceLimit;                                        // 0x00D4(0x0004)
	float                                              DOF_InnerRadiusLimit;                                     // 0x00D8(0x0004)
	float                                              DOF_KernelDefault;                                        // 0x00DC(0x0004)
	float                                              DOF_MaxFarDefault;                                        // 0x00E0(0x0004)
	float                                              DOF_DistanceExtent;                                       // 0x00E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PostProcessManager_TA");
		return ptr;
	}


	float GetPostProcessProperty(TEnumAsByte<EReplayFXProperties> PropertyName);
	void SetPostProcessProperty(TEnumAsByte<EReplayFXProperties> PropertyName, float InValue, bool bSetToDefault);
	void SetDOFDistance(float Value);
	bool IsReplayFXDirtied();
	void RestoreReplayFXPostProcessSettings();
	void CacheReplayFXPostProcessSettings();
	void ApplyPostProcessTypeOverride();
	void SetAAType(TEnumAsByte<EPostProcessAAType> NewType);
};


// Class TAGame.SeqEvent_ReplayTime_TA
// 0x0008 (0x0184 - 0x017C)
class USeqEvent_ReplayTime_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	float                                              TimeSeconds;                                              // 0x0180(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_ReplayTime_TA");
		return ptr;
	}

};


// Class TAGame.PlayerStart_TA
// 0x0000 (0x0398 - 0x0398)
class APlayerStart_TA : public APlayerStart
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerStart_TA");
		return ptr;
	}

};


// Class TAGame.DynamicPlayerStart_TA
// 0x0000 (0x0398 - 0x0398)
class ADynamicPlayerStart_TA : public APlayerStart_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DynamicPlayerStart_TA");
		return ptr;
	}

};


// Class TAGame.GameInfo_Season_TA
// 0x0008 (0x0508 - 0x0500)
class AGameInfo_Season_TA : public AGameInfo_TA
{
public:
	class AGameEvent_Soccar_TA*                        SoccarArchetype;                                          // 0x0500(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Season_TA");
		return ptr;
	}


	void RestartLevel();
	void RestartPlayer(class AController* aPlayer);
	bool PlayerCanRestart(class APlayerController* aPlayer);
	void PostLogin(class APlayerController* NewPlayer);
};


// Class TAGame.MapSelector_TA
// 0x0098 (0x0108 - 0x0070)
class UMapSelector_TA : public UComponent
{
public:
	unsigned long                                      bDebug : 1;                                               // 0x0070(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	TArray<class UMapData_TA*>                         AllMaps;                                                  // 0x0078(0x0010) (Transient, NeedCtorLink)
	TArray<class UMapData_TA*>                         FilteredMaps;                                             // 0x0088(0x0010) (Transient, NeedCtorLink)
	TArray<struct FMapGroup>                           AllGroups;                                                // 0x0098(0x0010) (Transient, NeedCtorLink)
	TArray<struct FMapGroup>                           RemainingGroupMaps;                                       // 0x00A8(0x0010) (Transient, NeedCtorLink)
	TArray<int>                                        RemainingGroups;                                          // 0x00B8(0x0010) (Transient, NeedCtorLink)
	TArray<int>                                        PreviousGroups;                                           // 0x00C8(0x0010) (Transient, NeedCtorLink)
	int                                                PreviousGroupMax;                                         // 0x00D8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	class UMapData_TA*                                 LastPlayedMap;                                            // 0x00E0(0x0008) (Transient)
	float                                              Skill;                                                    // 0x00E8(0x0004) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	TArray<struct FMapSkillSettings>                   MapSkillRequirements;                                     // 0x00F0(0x0010) (Transient, NeedCtorLink)
	struct FName                                       MapSetName;                                               // 0x0100(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapSelector_TA");
		return ptr;
	}


	struct FMapGroup __MapSelector_TA__GetNextMap_C14EFC1242D63F1C44ABFD9ADD41407C(int GroupIdx);
	struct FName GetNextPreferredMapName(int NumPlayers, TArray<struct FName>* Likes, TArray<struct FName>* Dislikes);
	class UMapData_TA* GetNextPreferredMap(int NumPlayers, TArray<struct FName>* Likes, TArray<struct FName>* Dislikes);
	struct FMapGroup GetChosenGroup(TArray<float> GroupWeights);
	TArray<float> GetMapGroupWeights(int NumPlayers, TArray<struct FName>* Likes, TArray<struct FName>* Dislikes);
	float GetMapGroupWeight(const struct FMapGroup& Group, int NumPlayers, TArray<struct FName>* Likes, TArray<struct FName>* Dislikes);
	struct FName GetNextMapName();
	struct FString GetMapsString(TArray<class UMapData_TA*> Maps);
	void SetMapPlayed(class UMapData_TA* Map);
	class UMapData_TA* GetNextMap(TArray<struct FMapGroup>* MapLocal_CF69DC304D87B3ADFCCE478612BEAC16);
	void RebuildRemainingGroups();
	void FilterRemainingGroupsBySkill();
	TArray<class UMapData_TA*> FilterMapsBySkill(TArray<class UMapData_TA*> InMaps);
	void RebuildMaps();
	void SetSkill(float InSkill, TArray<struct FMapSkillSettings> InSkillReqs);
	void SetMaps(TArray<class UMapData_TA*> Maps);
};


// Class TAGame.GRI_TA
// 0x0018 (0x0628 - 0x0610)
class AGRI_TA : public AGRI_X
{
public:
	unsigned long                                      bHasTalkers : 1;                                          // 0x0610(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0614(0x0004) MISSED OFFSET
	struct FString                                     NewDedicatedServerIP;                                     // 0x0618(0x0010) (Net, Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GRI_TA");
		return ptr;
	}


	void SetNewDedicatedServerIP(const struct FString& IP);
	void SetVoiceChatActive(bool bActive);
	void HandleTalkingStatusChange(class UOnlineGameVoice_X* OnlineGameVoice, class APlayerReplicationInfo* PRI, bool bTalking);
	struct FString GetTimeString(int Seconds, bool bCountDown, bool bShowMinutes, float MS, bool bShowMS);
	void Destroyed();
	void SetDefaultScriptedColors();
	void PostBeginPlay();
};


// Class TAGame.SeqEvent_TutorialHelper_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_TutorialHelper_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_TutorialHelper_TA");
		return ptr;
	}

};


// Class TAGame.GameSettingPlaylist_TA
// 0x0018 (0x00F8 - 0x00E0)
class UGameSettingPlaylist_TA : public UGameSettingPlaylist_X
{
public:
	TArray<struct FMapSkillSettings>                   MapSkillRequirements;                                     // 0x00E0(0x0010) (Edit, NeedCtorLink)
	class UClass*                                      TourServerInfoClass;                                      // 0x00F0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameSettingPlaylist_TA");
		return ptr;
	}


	void Setup(class UPlaylistSettings_X* Settings);
};


// Class TAGame.PlaylistSettings_TA
// 0x0018 (0x00F0 - 0x00D8)
class UPlaylistSettings_TA : public UPlaylistSettings_X
{
public:
	TArray<struct FMapSkillSettings>                   MapSkillRequirements;                                     // 0x00D8(0x0010) (Edit, NeedCtorLink)
	class UClass*                                      TourServerInfoClass;                                      // 0x00E8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlaylistSettings_TA");
		return ptr;
	}

};


// Class TAGame.TourServerInfo_TA
// 0x0020 (0x0080 - 0x0060)
class UTourServerInfo_TA : public UObject
{
public:
	struct FName                                       InfoName;                                                 // 0x0060(0x0008) (Const)
	int                                                NumAllowedSpectators;                                     // 0x0068(0x0004) (Const)
	unsigned long                                      bUsesTieBreakerRules : 1;                                 // 0x006C(0x0004) (Const)
	unsigned long                                      bRestoreInterruptedMatches : 1;                           // 0x006C(0x0004) (Const)
	class UClass*                                      GetMatchDetailsClass;                                     // 0x0070(0x0008) (Const)
	class UClass*                                      GameUpdateClass;                                          // 0x0078(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourServerInfo_TA");
		return ptr;
	}


	bool IsTourSet(const struct FTourServerSettings& TourSettings);
};


// Class TAGame.__GameShare_TA__NotifyCarPreviewActorAdded_20BDEBD9424D0150CCE3CBB38F8A4158
// 0x0018 (0x0078 - 0x0060)
class U__GameShare_TA__NotifyCarPreviewActorAdded_20BDEBD9424D0150CCE3CBB38F8A4158 : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameShare_TA__NotifyCarPreviewActorAdded_20BDEBD9424D0150CCE3CBB38F8A4158");
		return ptr;
	}


	void __GameShare_TA__NotifyCarPreviewActorAdded_20BDEBD9424D0150CCE3CBB38F8A4158(class ACarPreviewActor_TA* C);
};


// Class TAGame.GameplaySettingsSave_TA
// 0x0048 (0x0110 - 0x00C8)
class UGameplaySettingsSave_TA : public USaveObject_TA
{
public:
	TEnumAsByte<EVoiceFilter>                          VoiceFilter;                                              // 0x00C8(0x0001)
	TEnumAsByte<EVoiceFilter>                          ChatFilter;                                               // 0x00C9(0x0001)
	TEnumAsByte<EStatEventDisplayLevels>               StatEventDisplayLevel;                                    // 0x00CA(0x0001) (Config)
	TEnumAsByte<EStatGraphLevel>                       StatGraphLevel;                                           // 0x00CB(0x0001)
	float                                              SafeZoneRatio;                                            // 0x00CC(0x0004)
	float                                              UIScale;                                                  // 0x00D0(0x0004)
	unsigned long                                      bColorBlind : 1;                                          // 0x00D4(0x0004)
	unsigned long                                      bForceDefaultColors : 1;                                  // 0x00D4(0x0004)
	unsigned long                                      bEnableHorizontalSplitscreen : 1;                         // 0x00D4(0x0004)
	unsigned long                                      bEnableFreeplayUnlimitedBoost : 1;                        // 0x00D4(0x0004)
	unsigned long                                      bShowPsyTags : 1;                                         // 0x00D4(0x0004)
	unsigned long                                      bUseSteamInput : 1;                                       // 0x00D4(0x0004)
	float                                              NameplateScale;                                           // 0x00D8(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __bEnableFreeplayUnlimitedBoost__ChangeNotify;            // 0x00E0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00DC(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __bUseSteamInput__ChangeNotify;                           // 0x00F8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00F8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameplaySettingsSave_TA");
		return ptr;
	}


	void __bUseSteamInput__ChangeNotifyFunc();
	void __bEnableFreeplayUnlimitedBoost__ChangeNotifyFunc();
	void SetNameplateScale(float Value);
	void SetUIScale(float Value);
	void SetSafeZone(float Value);
	void OnLoad();
};


// Class TAGame.OnlineGameTournaments_TA
// 0x00B0 (0x0128 - 0x0078)
class UOnlineGameTournaments_TA : public UOnline_X
{
public:
	class UTourConfig_TA*                              Config;                                                   // 0x0078(0x0008) (Edit)
	class UTourEvent_TA*                               TourEventArchetype;                                       // 0x0080(0x0008) (Edit)
	class UTourService_TA*                             ServiceArchetype;                                         // 0x0088(0x0008) (Edit)
	class UTourService_TA*                             Service;                                                  // 0x0090(0x0008) (Edit)
	class UTourSubscriptions_TA*                       Subscriptions;                                            // 0x0098(0x0008) (Edit)
	class UTourRegistration_TA*                        Registration;                                             // 0x00A0(0x0008) (Edit)
	class UTourCheckIn_TA*                             CheckIn;                                                  // 0x00A8(0x0008) (Edit)
	class UTourCheckInError_TA*                        CheckInError;                                             // 0x00B0(0x0008) (Edit)
	class UTourPartyCheckIn_TA*                        PartyCheckIn;                                             // 0x00B8(0x0008) (Edit)
	class UTourPartyLeaderLeave_TA*                    PartyLeaderLeave;                                         // 0x00C0(0x0008) (Edit)
	class UTourCheckInWindowWatcher_TA*                WindowWatcher;                                            // 0x00C8(0x0008) (Edit)
	class UTourRewards_TA*                             Rewards;                                                  // 0x00D0(0x0008) (Edit)
	class UTourBracketCache_TA*                        Brackets;                                                 // 0x00D8(0x0008) (Edit)
	class UTourCredentials_TA*                         Credentials;                                              // 0x00E0(0x0008) (Edit)
	class UTourSettingsCache_TA*                       Cache;                                                    // 0x00E8(0x0008) (Edit)
	class UTourMatchServerBrowser_TA*                  MatchServerBrowser;                                       // 0x00F0(0x0008) (Edit)
	class UTourStatus_TA*                              Status;                                                   // 0x00F8(0x0008) (Edit)
	class UAutoTour_TA*                                AutoTour;                                                 // 0x0100(0x0008) (Edit)
	class UTourEvent_TA*                               TourEvent;                                                // 0x0108(0x0008) (Transient)
	struct FScriptDelegate                             __EventTourActivated__Delegate;                           // 0x0110(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameTournaments_TA");
		return ptr;
	}


	struct FString STATIC_GetBannedErrorString(class UError* Error, TArray<struct FString>* MapLocal_81EFA4D549368BA18775CB8AE311BE8A);
	bool STATIC_IsTournamentPlaylist(class UGameSettingPlaylist_X* Playlist);
	bool IsInTournamentGame(class AGRI_X* GRI);
	void STATIC_AlertError(class UGFxShell_TA* Shell, class UError* Error, const struct FScriptDelegate& Callback);
	int GetTourRank(const struct FUniqueNetId& PlayerID, class UTourSettings_TA* Settings);
	bool IsTournamentActive();
	void HandleTourEventDeactivated(class UTourEvent_TA* InTourEvent);
	bool GetCanRegister();
	bool IsRegisteredWithCrossPlatformTour();
	bool GetIsRegistered();
	void NotifyTourActivated(const struct FScriptDelegate& Callback);
	void ActivateTourEvent(const struct FUniqueNetId& PlayerID, class UTourSettings_TA* Settings, struct FTourTeam* Team);
	void OnNewGame();
	void InitServiceProvider();
	void OnInit();
	void EventTourActivated(class UOnlineGameTournaments_TA* Tournament, class UTourEvent_TA* Event);
};


// Class TAGame.__GameViewportClient_TA__AllowTournamentSplitscreen_91C852084D8E26C5C47F9299AE259265
// 0x0038 (0x0098 - 0x0060)
class U__GameViewportClient_TA__AllowTournamentSplitscreen_91C852084D8E26C5C47F9299AE259265 : public UObject
{
public:
	struct FUniqueNetId                                PlayerIDCompare;                                          // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameViewportClient_TA__AllowTournamentSplitscreen_91C852084D8E26C5C47F9299AE259265");
		return ptr;
	}


	bool __GameViewportClient_TA__AllowTournamentSplitscreen_91C852084D8E26C5C47F9299AE259265(const struct FTourPlayer& P);
};


// Class TAGame.TourEvent_TA
// 0x00D0 (0x0130 - 0x0060)
class UTourEvent_TA : public UObject
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0060(0x0008) (Edit)
	class UOnlineGameTourMatchmaking_TA*               TourMatchmaking;                                          // 0x0068(0x0008) (Edit)
	struct FUniqueNetId                                PlayerID;                                                 // 0x0070(0x0038) (Transient)
	class UTourSettings_TA*                            ActiveTour;                                               // 0x00A8(0x0008) (Transient)
	struct FTourTeam                                   Team;                                                     // 0x00B0(0x0040) (Transient, NeedCtorLink)
	class UTourEventMatch_TA*                          EventMatch;                                               // 0x00F0(0x0008) (Transient)
	class UTourEventMatchComplete_TA*                  MatchComplete;                                            // 0x00F8(0x0008) (Transient)
	struct FScriptDelegate                             __EventStartTimeElapsed__Delegate;                        // 0x0100(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventDeactivated__Delegate;                             // 0x0118(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0118(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourEvent_TA");
		return ptr;
	}


	bool STATIC_IsTerminalError(class UError* Error);
	void HandleError(class UError* Error);
	void HandleMatchmakingError(class UOnlineGameTourMatchmaking_TA* InMatchMaking, class UError* Error);
	void HandleMatchError(class UTourEventMatch_TA* InEventMatch, class UError* Error);
	void HandleUnsubscribe(class UTourSubscriptions_TA* Subscriptions);
	void Deactivate();
	void HandleStartTimeElapsed();
	void NotifyOnStartTimeElapsed(const struct FScriptDelegate& Callback);
	void SetActiveTour(const struct FUniqueNetId& InPlayerId, class UTourSettings_TA* InSettings, struct FTourTeam* InTeam);
	void EventDeactivated(class UTourEvent_TA* TourEvent);
	void EventStartTimeElapsed(class UTourEvent_TA* TourEvent);
};


// Class TAGame.TourErrors_TA
// 0x00E8 (0x0168 - 0x0080)
class UTourErrors_TA : public UErrorList
{
public:
	class UErrorType*                                  TournamentFull;                                           // 0x0080(0x0008) (Const)
	class UErrorType*                                  TournamentPaused;                                         // 0x0088(0x0008) (Const)
	class UErrorType*                                  InActiveTournament;                                       // 0x0090(0x0008) (Const)
	class UErrorType*                                  NoMatchFound;                                             // 0x0098(0x0008) (Const)
	class UErrorType*                                  TeamEliminated;                                           // 0x00A0(0x0008) (Const)
	class UErrorType*                                  AlreadyRegistered;                                        // 0x00A8(0x0008) (Const)
	class UErrorType*                                  NotAdmin;                                                 // 0x00B0(0x0008) (Const)
	class UErrorType*                                  NotEligible;                                              // 0x00B8(0x0008) (Const)
	class UErrorType*                                  AlreadyStarted;                                           // 0x00C0(0x0008) (Const)
	class UErrorType*                                  InvalidTournamentState;                                   // 0x00C8(0x0008) (Const)
	class UErrorType*                                  InvalidCredentials;                                       // 0x00D0(0x0008) (Const)
	class UErrorType*                                  TournamentNotFound;                                       // 0x00D8(0x0008) (Const)
	class UErrorType*                                  CheckInRankIneligible;                                    // 0x00E0(0x0008) (Const)
	class UErrorType*                                  CheckInNotOpen;                                           // 0x00E8(0x0008) (Const)
	class UErrorType*                                  CheckInRequiresPartyLeader;                               // 0x00F0(0x0008) (Const)
	class UErrorType*                                  CannotMatchmakeIfRegistered;                              // 0x00F8(0x0008) (Const)
	class UErrorType*                                  CannotCheckInWhileOnline;                                 // 0x0100(0x0008) (Const)
	class UErrorType*                                  CannotCancelAfterRegistration;                            // 0x0108(0x0008) (Const)
	class UErrorType*                                  TournamentHasBeenCancelled;                               // 0x0110(0x0008) (Const)
	class UErrorType*                                  TeamSizeTooLarge;                                         // 0x0118(0x0008) (Const)
	class UErrorType*                                  TeamSizeTooSmall;                                         // 0x0120(0x0008) (Const)
	class UErrorType*                                  PlayerNotRegistered;                                      // 0x0128(0x0008) (Const)
	class UErrorType*                                  TeamNameNotAllowed;                                       // 0x0130(0x0008) (Const)
	class UErrorType*                                  TournamentNameNotAllowed;                                 // 0x0138(0x0008) (Const)
	class UErrorType*                                  TournamentCreateLimitReached;                             // 0x0140(0x0008) (Const)
	class UErrorType*                                  AutoTournamentNoTeamFound;                                // 0x0148(0x0008) (Const)
	class UErrorType*                                  AutoTournamentRequiresCrossplatform;                      // 0x0150(0x0008) (Const)
	class UErrorType*                                  AutoTourmamentRequiresCrossplatformNotLeader;             // 0x0158(0x0008) (Const)
	class UErrorType*                                  AutoTournamentBanned;                                     // 0x0160(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourErrors_TA");
		return ptr;
	}

};


// Class TAGame.AccountSettingsComponent_TA
// 0x0060 (0x00D0 - 0x0070)
class UAccountSettingsComponent_TA : public UComponent
{
public:
	unsigned long                                      bCrossPlatformEnabled : 1;                                // 0x0070(0x0004)
	unsigned long                                      bPlatformAllowsCrossPlatform : 1;                         // 0x0070(0x0004)
	TEnumAsByte<ECrossPlatformChatState>               CrossPlatformChatState;                                   // 0x0074(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0075(0x0003) MISSED OFFSET
	class UNetworkSave_TA*                             NetworkSave;                                              // 0x0078(0x0008)
	class UPlatformAccountSettings*                    PlatformSettings;                                         // 0x0080(0x0008) (ExportObject, Component, EditInline)
	struct FScriptDelegate                             __EventAccountSettingsChanged__Delegate;                  // 0x0088(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0088(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __bCrossPlatformEnabled__ChangeNotify;                    // 0x00A0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00A0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __CrossPlatformChatState__ChangeNotify;                   // 0x00B8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00B8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AccountSettingsComponent_TA");
		return ptr;
	}


	void __CrossPlatformChatState__ChangeNotifyFunc();
	void __bCrossPlatformEnabled__ChangeNotifyFunc();
	bool IsCrossPlatformEnabled();
	bool VerifyCrossPlatformChat();
	bool VerifyCrossPlatformEnabled();
	void ReadPlatformSettings();
	void RecheckAllSettings();
	void SavedCrossPlatformEnabledChanged();
	void HandlePlatformSettingsChanged(class UPlatformAccountSettings* _);
	void HandleNetworkSaveSet(class UNetworkSave_TA* InSave);
	void HandlePlatformSettingsCreated(class UPlatformAccountSettings* InPlatformSettings, unsigned char InControllerID);
	void Construct();
	void EventAccountSettingsChanged(class UAccountSettingsComponent_TA* AccountSettings);
};


// Class TAGame.ProfileQuickChatSave_TA
// 0x0010 (0x00D8 - 0x00C8)
class UProfileQuickChatSave_TA : public USaveObject_TA
{
public:
	TArray<struct FName>                               QuickChatBindings;                                        // 0x00C8(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProfileQuickChatSave_TA");
		return ptr;
	}


	void ResetQuickChatBindings();
	void ChangeQuickChatBinding(int Index, const struct FName& Message);
};


// Class TAGame.__GFxData_Chat_TA__AddChatMessage_FDFFC6FF410E1851D81A7C96CBAAC721
// 0x0070 (0x00D0 - 0x0060)
class U__GFxData_Chat_TA__AddChatMessage_FDFFC6FF410E1851D81A7C96CBAAC721 : public UObject
{
public:
	struct FGFxChatMessage                             NewMessage;                                               // 0x0060(0x0070) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Chat_TA__AddChatMessage_FDFFC6FF410E1851D81A7C96CBAAC721");
		return ptr;
	}


	void __GFxData_Chat_TA__AddChatMessage_D8A8383242569655424B11A3619DCBFB(const struct FString& _, class UError* Error);
	void __GFxData_Chat_TA__AddChatMessage_FDFFC6FF410E1851D81A7C96CBAAC721(const struct FString& _, const struct FString& Sanitized);
};


// Class TAGame.ChatHistory_TA
// 0x0014 (0x0074 - 0x0060)
class UChatHistory_TA : public UObject
{
public:
	TArray<class UStoredChatData_TA*>                  StoredChat;                                               // 0x0060(0x0010) (Transient, NeedCtorLink)
	int                                                MaxNumHistories;                                          // 0x0070(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChatHistory_TA");
		return ptr;
	}


	bool __ChatHistory_TA__FindHistory_E08A12244F5D5302C36C14B37168828F(class UStoredChatData_TA* N);
	int __ChatHistory_TA__StoreMessageInternal_C7C1C4794976F63F8F32ECB3DAD722A2(class UStoredChatData_TA* L, class UStoredChatData_TA* R);
	void RepopulateChatFromHistory(class UGFxData_Chat_TA* GFxChat, TEnumAsByte<EChatChannel> Channel, const struct FUniqueNetId& SenderId);
	void ClearHistory(TEnumAsByte<EChatChannel> Channel, const struct FUniqueNetId& SenderId);
	void StoreMessageInternal(class UStoredChatData_TA* ChatInfo, struct FGFxChatMessage* Data);
	class UStoredChatData_TA* CreateNewHistory(TEnumAsByte<EChatChannel> Channel, const struct FUniqueNetId& SenderId, class UStoredChatData_TA** ObjectInitializer_F26818474353408597C410B36DF54948);
	class UStoredChatData_TA* FindHistory(TEnumAsByte<EChatChannel> Channel, const struct FUniqueNetId& SenderId, TArray<class UStoredChatData_TA*>* FilterLocal_2E394AB74A080B5AF0525FAB6D5E6247);
	class UStoredChatData_TA* GetOrCreateHistory(TEnumAsByte<EChatChannel> Channel, const struct FUniqueNetId& SenderId);
	void StoreMessage(struct FGFxChatMessage* Data);
	void ActivateStoredChat(class UStoredChatData_TA* StoredChatHistory);
	void DeactivateStoredChatForPersona(const struct FUniqueNetId& PersonaId);
	bool CanStoreMessage(TEnumAsByte<EChatChannel> ChannelMessage);
};


// Class TAGame.StoredChatData_TA
// 0x0060 (0x00C0 - 0x0060)
class UStoredChatData_TA : public UObject
{
public:
	TEnumAsByte<EChatChannel>                          ChatChannel;                                              // 0x0060(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	struct FUniqueNetId                                SenderId;                                                 // 0x0068(0x0038)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00A0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.StoredChatData_TA.LastChatUpdate
	TArray<struct FGFxChatMessage>                     Messages;                                                 // 0x00A8(0x0010) (NeedCtorLink)
	unsigned long                                      bIsActive : 1;                                            // 0x00B8(0x0004)
	int                                                MaxChatLength;                                            // 0x00BC(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StoredChatData_TA");
		return ptr;
	}


	void RepopulateChat(class UGFxData_Chat_TA* GFxChat);
	void StoreChatMessage(struct FGFxChatMessage* Data);
};


// Class TAGame.GFxData_Community_TA
// 0x0048 (0x00E0 - 0x0098)
class UGFxData_Community_TA : public UGFxDataSingleton_X
{
public:
	TArray<class UGFxData_BlogTile_TA*>                GFxBlogTiles;                                             // 0x0098(0x0010) (Transient, NeedCtorLink)
	class UOnlineGameBlog_X*                           OnlineGameBlog;                                           // 0x00A8(0x0008)
	float                                              UpdateBlogTimeout;                                        // 0x00B0(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	struct FString                                     MotD;                                                     // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	int                                                NumOfCarouselTiles;                                       // 0x00C8(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	class UBlogTileCache_TA*                           Cache;                                                    // 0x00D0(0x0008) (Transient)
	class UBlogTileConfig_X*                           BlogTileConfig;                                           // 0x00D8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Community_TA");
		return ptr;
	}


	struct FString __GFxData_Community_TA__UpdateFromCache_67895BF6468DB0308CC0F089A9FF644D(class UGFxData_BlogTile_TA* GFxBlogTile);
	void ShowHelp();
	int TileEpochCompare(class UBlogTile_X* Left, class UBlogTile_X* Right);
	TArray<class UBlogTile_X*> GetActiveTiles(int NumOfActiveTiles, TArray<class UBlogTile_X*>* BlogTiles, TArray<class UBlogTile_X*>* FilterLocal_E19653E04E9E6CB9FF0046A1A239ECF6, TArray<class UBlogTile_X*>* SortLocal_31C220F0453E3DE905A0BC847A2711FF, TArray<class UBlogTile_X*>* FilterLocal_15774A6B4198DA5F4F28E58C9952E8E9);
	class UBlogTile_X* GetActiveTile(TArray<class UBlogTile_X*>* BlogTiles);
	void AddActiveTiles(TEnumAsByte<EBlogTileType> TileType, int NumOfActiveTiles, TArray<class UBlogTile_X*>* BlogTiles);
	void AddActiveTile(TEnumAsByte<EBlogTileType> TileType, TArray<class UBlogTile_X*>* BlogTiles);
	void AddBlogTile(class UBlogTile_X* BlogTile, TEnumAsByte<EBlogTileType> TileType);
	void HandleBlogSynced(class UOnlineGameBlog_X* Blog);
	void UpdateFromCache(TArray<struct FString>* MapLocal_680811894D61FE289DD6CF8FC74CACF2);
	void HandleCacheLoaded(class UBlogTileCache_TA* InCache);
	void ClearBlogTileNewInfo(int Row);
	void UpdateBlog();
	void HandleInternetConnectionChanged(bool bConnected);
	void OnShellSet();
};


// Class TAGame.BlogTileCache_TA
// 0x0020 (0x00E8 - 0x00C8)
class UBlogTileCache_TA : public USaveObject_TA
{
public:
	TArray<struct FString>                             UnreadTileIDs;                                            // 0x00C8(0x0010) (NeedCtorLink)
	TArray<struct FString>                             PreviouslyDisplayedTileIDs;                               // 0x00D8(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BlogTileCache_TA");
		return ptr;
	}


	bool __BlogTileCache_TA__UpdateTileIDs_2F71260E434C92D2F8725E926FBAE8A1(const struct FString& ActiveTileID);
	bool IsUnreadTileID(const struct FString& TileID);
	void UpdateTileIDs(TArray<struct FString>* ActiveTileIDs, TArray<struct FString>* FilterLocal_2633386A4FFF12F19545BE8D3C49E2A5);
};


// Class TAGame.GFxData_BlogTile_TA
// 0x001C (0x00B0 - 0x0094)
class UGFxData_BlogTile_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class UTexture*                                    ImageTexture;                                             // 0x0098(0x0008) (Transient, DataBinding)
	int                                                TextureSizeX;                                             // 0x00A0(0x0004) (Transient, DataBinding)
	int                                                TextureSizeY;                                             // 0x00A4(0x0004) (Transient, DataBinding)
	TEnumAsByte<EBlogTileType>                         TileType;                                                 // 0x00A8(0x0001) (Transient, DataBinding)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00A9(0x0003) MISSED OFFSET
	unsigned long                                      bNewInfo : 1;                                             // 0x00AC(0x0004) (Transient, DataBinding)
	unsigned long                                      bLive : 1;                                                // 0x00AC(0x0004) (Transient, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_BlogTile_TA");
		return ptr;
	}


	void SetLive();
	void HandleDownloadedImage(class UTexture2DDynamic* BlogTexture);
	void DownloadImage(struct FString* ImageURL);
	void SetTileType(TEnumAsByte<EBlogTileType> InTileType);
	void SetbNewInfo(bool bInNewInfo);
	void SetBlogTile(class UBlogTile_X* InBlogTile);
};


// Class TAGame.__GFxData_Community_TA__GetActiveTiles_AC040BCA42AA57731E8677A14AB05711
// 0x0018 (0x0078 - 0x0060)
class U__GFxData_Community_TA__GetActiveTiles_AC040BCA42AA57731E8677A14AB05711 : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__GFxData_Community_TA__GetActiveTiles_AC040BCA42AA57731E8677A14AB05711.EpochNow
	TArray<class UBlogTile_X*>                         ActiveTiles;                                              // 0x0068(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Community_TA__GetActiveTiles_AC040BCA42AA57731E8677A14AB05711");
		return ptr;
	}


	bool __GFxData_Community_TA__GetActiveTiles_A7BA6E9244553E2E62A3FEAA1E84BF4C(class UBlogTile_X* BlogTile);
	bool __GFxData_Community_TA__GetActiveTiles_AC040BCA42AA57731E8677A14AB05711(class UBlogTile_X* BlogTile);
};


// Class TAGame.__GFxData_Community_TA__AddActiveTiles_E02B7F5843B6322617F943911BEE4E3C
// 0x0001 (0x0061 - 0x0060)
class U__GFxData_Community_TA__AddActiveTiles_E02B7F5843B6322617F943911BEE4E3C : public UObject
{
public:
	TEnumAsByte<EBlogTileType>                         TileType;                                                 // 0x0060(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Community_TA__AddActiveTiles_E02B7F5843B6322617F943911BEE4E3C");
		return ptr;
	}


	void __GFxData_Community_TA__AddActiveTiles_E02B7F5843B6322617F943911BEE4E3C(class UBlogTile_X* CarouselTile);
};


// Class TAGame.BlogTileConfig_X
// 0x0038 (0x0098 - 0x0060)
class UBlogTileConfig_X : public UObject
{
public:
	class UTexture2D*                                  LocalImage;                                               // 0x0060(0x0008) (Edit)
	struct FString                                     Title;                                                    // 0x0068(0x0010) (Edit, NeedCtorLink)
	struct FString                                     DescriptionHeader;                                        // 0x0078(0x0010) (Edit, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0088(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BlogTileConfig_X");
		return ptr;
	}

};


// Class TAGame.GFxData_Controls_TA
// 0x0080 (0x0118 - 0x0098)
class UGFxData_Controls_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FLocalizedBindingCategory>           Categories;                                               // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FLocalizedAction>                    Actions;                                                  // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FUIPlayerBinding>                    PCBindings;                                               // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FUIPlayerBinding>                    GamepadBindings;                                          // 0x00C8(0x0010) (NeedCtorLink, DataBinding)
	class UProfile_TA*                                 Profile;                                                  // 0x00D8(0x0008) (Transient)
	class UProfileGamepadSave_TA*                      GamepadSave;                                              // 0x00E0(0x0008) (Transient)
	TArray<struct FBindingAction>                      BindingActions;                                           // 0x00E8(0x0010) (Transient, NeedCtorLink)
	struct FName                                       PendingRecordBindingAction;                               // 0x00F8(0x0008) (Transient)
	struct FName                                       PendingRecordBindingAxis;                                 // 0x0100(0x0008) (Transient)
	class UInteraction*                                Interaction;                                              // 0x0108(0x0008) (Transient)
	class UProfilePCSave_TA*                           ProfilePCSave;                                            // 0x0110(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Controls_TA");
		return ptr;
	}


	void __GFxData_Controls_TA__HandleProfileSet_704E04A24E151528E522C8AE9934A6D4(class UProfileGamepadSave_TA* Save);
	void __GFxData_Controls_TA__HandleProfileSet_316BA97A479BD4C448C1D5A828712E54(class UProfilePCSave_TA* Save);
	void HandleActiveBindingsChanged(class UPlayerInput_X* PlayerInput);
	bool IsRemappableType(const struct FName& Action, TEnumAsByte<ERemappable> RemappableType, TArray<struct FPlayerBinding>* Bindings);
	bool IsRemappable(const struct FName& Action, TArray<struct FPlayerBinding> Bindings);
	void Save();
	void ReseToDefaults();
	void OnBindingSet();
	void OnRecordBindingCanceled();
	struct FUIPlayerBinding MapUIBinding(const struct FPlayerBinding& Binding, struct FUIPlayerBinding* StructInitializer_A47884C84D3B3B82955CA3BF41ECCF1A);
	void InitUIBindings(const struct FName& PresetName, TArray<struct FUIPlayerBinding>* MapLocal_C2D8C81745846FAADA5580AC4D136862, TArray<struct FUIPlayerBinding>* MapLocal_A6DB01B8475943F78D78CDA26FDEC6FE);
	void InvertAxisForBinding(const struct FName& Action, TArray<struct FPlayerBinding>* OutBindings);
	void InvertAxis(const struct FName& Axis);
	void RemoveBinding(const struct FName& Action, const struct FName& Key, TEnumAsByte<EAxisSign> AxisSign, TArray<struct FPlayerBinding>* OutBindings);
	void SetSingleBinding(const struct FName& Action, const struct FName& Key, TEnumAsByte<EAxisSign> AxisSign, TArray<struct FPlayerBinding>* DefaultBindings, TArray<struct FPlayerBinding>* OutBindings);
	void SetBinding(const struct FName& Action, const struct FName& Key, TEnumAsByte<EAxisSign> AxisSign, TArray<struct FPlayerBinding>* DefaultBindings, TArray<struct FPlayerBinding>* OutBindings);
	void SetCurrentBinding(const struct FName& Key, bool bGamepad, TEnumAsByte<EAxisSign> AxisSign);
	bool HandleBindingInputAxis(int ControllerId, const struct FName& Key, float delta, float DeltaTime, bool bGamepad);
	bool HandleBindingInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	void ClearBindingFromArray(const struct FName& Action, TArray<struct FPlayerBinding>* DefaultBindings, TArray<struct FPlayerBinding>* OutBindings);
	void ClearBinding(const struct FName& Action);
	void CancelRecordBinding();
	void StartRecordBinding(const struct FName& Action);
	struct FString LocalizeKeyInternal(const struct FName& Key);
	struct FString LocalizeKey(const struct FName& Key, TEnumAsByte<EAxisSign> AxisSign);
	struct FLocalizedAction GetLocalizedAction(const struct FName& ActionName);
	void HandleProfileSet(class ULocalPlayer_TA* InLocalPlayer);
	void OnShellSet();
};


// Class TAGame.ProfilePCSave_TA
// 0x0028 (0x00F0 - 0x00C8)
class UProfilePCSave_TA : public USaveObject_TA
{
public:
	TArray<struct FPlayerBinding>                      PCBindings;                                               // 0x00C8(0x0010) (NeedCtorLink)
	float                                              MouseSensitivity;                                         // 0x00D8(0x0004)
	float                                              MouseXDeadZone;                                           // 0x00DC(0x0004)
	float                                              MouseYDeadZone;                                           // 0x00E0(0x0004)
	float                                              MouseXDeadZoneAir;                                        // 0x00E4(0x0004)
	float                                              MouseYDeadZoneAir;                                        // 0x00E8(0x0004)
	float                                              KeyboardAxisBlendTime;                                    // 0x00EC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProfilePCSave_TA");
		return ptr;
	}

};


// Class TAGame.ProfileGamepadSave_TA
// 0x0020 (0x00E8 - 0x00C8)
class UProfileGamepadSave_TA : public USaveObject_TA
{
public:
	TArray<struct FPlayerBinding>                      GamepadBindings;                                          // 0x00C8(0x0010) (NeedCtorLink)
	float                                              ControllerDeadzone;                                       // 0x00D8(0x0004)
	float                                              DodgeInputThreshold;                                      // 0x00DC(0x0004)
	float                                              SteeringSensitivity;                                      // 0x00E0(0x0004)
	float                                              AirControlSensitivity;                                    // 0x00E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProfileGamepadSave_TA");
		return ptr;
	}


	void SetAirControlSensitivity(float Value);
	void SetSteeringSensitivity(float Value);
	void SetDodgeInputThreshold(float Value);
};


// Class TAGame.GFxData_Credits_TA
// 0x0060 (0x00F8 - 0x0098)
class UGFxData_Credits_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FLocalizedDepartmentData>            LocalizedDepartmentGroups;                                // 0x0098(0x0010) (NeedCtorLink)
	TArray<struct FLocalizedPostCreditData>            LocalizedCopyrightGroups;                                 // 0x00A8(0x0010) (NeedCtorLink)
	TArray<struct FLocalizedPostCreditData>            LocalizedMusicGroups;                                     // 0x00B8(0x0010) (NeedCtorLink)
	TArray<struct FDepartmentData>                     DepartmentGroups;                                         // 0x00C8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FPostCreditData>                     CopyrightGroups;                                          // 0x00D8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FPostCreditData>                     MusicGroups;                                              // 0x00E8(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Credits_TA");
		return ptr;
	}


	void __GFxData_Credits_TA__LoadCredits_4D55EEC54708811D0711BD89703DE7DE(const struct FLocalizedPostCreditData& LocalizedPostCredit);
	void AddToPostCreditData(const struct FLocalizedPostCreditData& LocalizedPostCredit, TArray<struct FPostCreditData>* Out_PostCredits);
	void AddToDepartmentData(const struct FString& LocalizedDepartmentTitle, const struct FLocalizedNameData& LocalizedNameInfo);
	void UnloadCredits();
	void MarkCreditsViewed();
	void LoadCredits();
};


// Class TAGame.GFxData_GameEvent_TA
// 0x00A4 (0x013C - 0x0098)
class UGFxData_GameEvent_TA : public UGFxDataSingleton_X
{
public:
	int                                                TimeRemaining;                                            // 0x0098(0x0004) (DataBinding)
	int                                                TimeToNextMatch;                                          // 0x009C(0x0004) (DataBinding)
	int                                                TimeWaitingForPlayersRemaining;                           // 0x00A0(0x0004) (DataBinding)
	unsigned long                                      bOverTime : 1;                                            // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bOnline : 1;                                              // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bUnfairTeams : 1;                                         // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bForfeit : 1;                                             // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bNoContest : 1;                                           // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bServerTraveling : 1;                                     // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bRankedMatch : 1;                                         // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bSolo : 1;                                                // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bForfeitVoteAllowed : 1;                                  // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bHasLeaveMatchPenalty : 1;                                // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bCanVoteToForfeit : 1;                                    // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bViewingEndGameReplay : 1;                                // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bShowIntroScene : 1;                                      // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bDisableTeamSelectScreen : 1;                             // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bStayAsPartyButtonVisible : 1;                            // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bStayAsPartyButtonEnabled : 1;                            // 0x00A4(0x0004) (DataBinding)
	struct FString                                     MatchState;                                               // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	struct FName                                       GameState;                                                // 0x00B8(0x0008) (DataBinding)
	struct FName                                       MatchType;                                                // 0x00C0(0x0008) (DataBinding)
	struct FName                                       EventType;                                                // 0x00C8(0x0008) (DataBinding)
	int                                                ReplayScoredBy;                                           // 0x00D0(0x0004) (DataBinding)
	int                                                ReplayAssistedBy;                                         // 0x00D4(0x0004) (DataBinding)
	float                                              ReplaySpeed;                                              // 0x00D8(0x0004) (DataBinding)
	float                                              ReplayTime;                                               // 0x00DC(0x0004) (DataBinding)
	int                                                WinningTeam;                                              // 0x00E0(0x0004) (DataBinding)
	TEnumAsByte<ETieBreakDecision>                     TieBreakDecision;                                         // 0x00E4(0x0001) (DataBinding)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00E5(0x0003) MISSED OFFSET
	int                                                MaxPlayers;                                               // 0x00E8(0x0004) (DataBinding)
	int                                                MaxScore;                                                 // 0x00EC(0x0004) (DataBinding)
	struct FString                                     PlaylistName;                                             // 0x00F0(0x0010) (NeedCtorLink, DataBinding)
	struct FName                                       PlaylistId;                                               // 0x0100(0x0008) (DataBinding)
	struct FString                                     ServerName;                                               // 0x0108(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     PartyPlaylistName;                                        // 0x0118(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     MutatorsString;                                           // 0x0128(0x0010) (NeedCtorLink, DataBinding)
	int                                                SeriesGames;                                              // 0x0138(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_GameEvent_TA");
		return ptr;
	}


	void SetIsViewingEndgameReplay(bool Value);
	void OnSkipScoreIntro();
	void OnCloseScoreboard();
	void OnOpenScoreboard();
	void OnCloseMidgameMenu();
	void OnOpenMidgameMenu();
	void OnTickerEvent(const struct FString& EventName, class UTexture* Texture, int ReceiverIndex, int VictimIndex);
	void OnGameMessage(const struct FName& Type, const struct FString& Message);
	void OnStatEvent(const struct FString& EventName, int Points, class UTexture* Texture, const struct FName& Sound);
	void StayAsPartyVoteBegin();
	void ForceStartPlay();
	void SetReadyToPlay(bool bReady, bool bReadyAllLocalPlayers);
};


// Class TAGame.GFxData_Garage_TA
// 0x01F0 (0x0288 - 0x0098)
class UGFxData_Garage_TA : public UGFxDataSingleton_X
{
public:
	TArray<class UProductSlot_TA*>                     LoadoutSlots;                                             // 0x0098(0x0010) (Edit, NeedCtorLink)
	class ACarPreviewActor_TA*                         PreviewActor;                                             // 0x00A8(0x0008) (Transient)
	TArray<class UGFxData_GarageProductSlot_TA*>       GarageProductSlots;                                       // 0x00B0(0x0010) (NeedCtorLink)
	TArray<struct FGarageTeam>                         Teams;                                                    // 0x00C0(0x0010) (NeedCtorLink, DataBinding)
	int                                                PaintFinishSlotIndex;                                     // 0x00D0(0x0004) (DataBinding)
	int                                                PreviewTeam;                                              // 0x00D4(0x0004) (DataBinding)
	TArray<struct FGFxTeamColor>                       CustomColors;                                             // 0x00D8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FGFxTeamColor>                       Team0Colors;                                              // 0x00E8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FGFxTeamColor>                       Team1Colors;                                              // 0x00F8(0x0010) (NeedCtorLink, DataBinding)
	unsigned long                                      bTeam0FinishDisabled : 1;                                 // 0x0108(0x0004) (DataBinding)
	unsigned long                                      bTeam1FinishDisabled : 1;                                 // 0x0108(0x0004) (DataBinding)
	unsigned long                                      bCustom0FinishDisabled : 1;                               // 0x0108(0x0004) (DataBinding)
	unsigned long                                      bCustom1FinishDisabled : 1;                               // 0x0108(0x0004) (DataBinding)
	unsigned long                                      bTeam0ColorForced : 1;                                    // 0x0108(0x0004) (DataBinding)
	unsigned long                                      bTeam1ColorForced : 1;                                    // 0x0108(0x0004) (DataBinding)
	unsigned long                                      bCustom0ColorForced : 1;                                  // 0x0108(0x0004) (DataBinding)
	unsigned long                                      bCustom1ColorForced : 1;                                  // 0x0108(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	struct FString                                     ForcedTeam0FinishName;                                    // 0x0110(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ForcedTeam1FinishName;                                    // 0x0120(0x0010) (NeedCtorLink, DataBinding)
	int                                                ForcedTeam0Color;                                         // 0x0130(0x0004) (DataBinding)
	int                                                ForcedTeam1Color;                                         // 0x0134(0x0004) (DataBinding)
	int                                                ForcedCustom0Color;                                       // 0x0138(0x0004) (DataBinding)
	int                                                ForcedCustom1Color;                                       // 0x013C(0x0004) (DataBinding)
	int                                                MatchesPlayed;                                            // 0x0140(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	class UProfile_TA*                                 Profile;                                                  // 0x0148(0x0008) (Transient)
	struct U_Types_TA_FLoadoutData                     Loadouts[0x2];                                            // 0x0150(0x0040) (Transient, NeedCtorLink)
	struct U_Types_TA_FLoadoutData                     LastNonLicensedLoadout[0x2];                              // 0x01D0(0x0040) (Transient, NeedCtorLink)
	class ULoadoutSet_TA*                              LoadoutSet;                                               // 0x0250(0x0008) (Transient)
	class UCarPreviewSet_TA*                           CarPreviewSet;                                            // 0x0258(0x0008)
	class UExplosionPreviewer_TA*                      ExplosionPreview;                                         // 0x0260(0x0008) (ExportObject, Component, EditInline)
	struct FName                                       GoalExplosionSeqName;                                     // 0x0268(0x0008) (Const)
	struct FScriptDelegate                             __PreviewTeamAction__Delegate;                            // 0x0270(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0270(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Garage_TA");
		return ptr;
	}


	void __GFxData_Garage_TA__InitProductSlots_1AC9BBC345781DD49489D5B379AFA62C(class UGFxData_GarageProductSlot_TA* S);
	class UOnlineProductStoreSet_TA* GetLocalOnlineProductSet();
	void UpdateExplosionPreviewer();
	void HandleUpdatedNumLocalPlayers(class UGameViewportClient_TA* GVC, int LocalPlayerCount);
	bool AllowTeamSpecificEquip(int SlotIndex, const struct FProductHashID& HashID);
	bool AreDuplicateProducts();
	void SetPreviewLoadout(struct U_Types_TA_FLoadoutData* InLoadout);
	bool HasNewProducts();
	void UpdateColorSettings();
	bool STATIC_InitForcedCustomColor(int TeamIndex, class UProductAsset_Body_TA* BodyAsset, class UProductAsset_Skin_TA* SkinAssets, int* OutColor);
	bool STATIC_InitForcedTeamColor(int TeamIndex, class UProductAsset_Body_TA* BodyAsset, class UProductAsset_Skin_TA* SkinAssets, int* OutColor);
	struct FString STATIC_GetForcedFinishLabel(bool bFinishDisabled, class UProductAsset_Body_TA* BodyAsset, class UProductAsset_Skin_TA* SkinAsset, int TeamID);
	void OnProductsChanged();
	void HandleDLCChange(class USaveData_TA* SaveData);
	void HandleLoadoutChanged(class ULoadoutSet_TA* InLoadoutSet, class ULoadout_TA* InLoadout);
	void CommitLoadout();
	void SetPreviewTeam(int Team);
	void UpdateCustomFinish(int Team, const struct FProductHashID& HashID);
	void SetCustomFinish(int Team, const struct FProductHashID& HashID);
	bool IsCustomFinishDisabled(int Team);
	void SetPreviewCustomFinish(const struct FProductHashID& HashID);
	void UpdateTeamFinish(int Team, const struct FProductHashID& HashID);
	void SetTeamFinish(int Team, const struct FProductHashID& HashID);
	bool IsTeamFinishDisabled(int Team);
	void SetPreviewTeamFinish(int Team, const struct FProductHashID& HashID);
	void SetCustomColor(int Team, int ColorID);
	bool IsCustomColorDisabled(int Team);
	void SetPreviewCustomColor(int ColorID);
	void SetTeamColor(int Team, int ColorID);
	bool IsTeamColorDisabled(int Team);
	void SetPreviewTeamColor(int Team, int ColorID);
	void ClearPreviewPaint(int Team);
	bool ProductSlotIsEnabled(class UGFxData_ProductSlot_TA* ProductSlot, const struct FProductHashID& BodySlotHashID);
	void UpdateUnlockedGarageSlots();
	void HandleProductsOfflineSaveLoaded(class UProductsOfflineSave_TA* ProductsOfflineSave);
	void RefreshEnabledProductSlots();
	void EquipProduct(int SlotIndex, const struct FProductHashID& HashID, TEnumAsByte<EEquipAction> EquipAction, struct FProductHashID* StructInitializer_15E35F704980BC08E10AE09E61F9A178);
	void HandleLicensedLoadouts(int InProductID);
	void ClearPreviewLoadout(int PendingPreviewProductID);
	void ClearPreviewProduct();
	void SetPreviewProduct(int SlotIndex, const struct FProductHashID& HashID);
	void SetSlot(int SlotIndex);
	void InitColors();
	void InitProductSlots();
	void InitTeams();
	void InitLoadouts(class ULoadoutSet_TA* NewLoadoutSet, int TeamIndex);
	void HandleLoadoutSaveLoaded(class UProfileLoadoutSave_TA* LoadoutSave);
	void LoadUserLoadout();
	void HandlePreviewActorsChanged(class UCarPreviewSet_TA* G);
	void OnRemoved();
	void OnShellSet();
	void PreviewTeamAction();
};


// Class TAGame.GFxData_ProductSlot_TA
// 0x0054 (0x00E8 - 0x0094)
class UGFxData_ProductSlot_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	unsigned long                                      bEnabled : 1;                                             // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bCanUnequip : 1;                                          // 0x0098(0x0004) (DataBinding)
	struct FName                                       SlotName;                                                 // 0x009C(0x0008) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FString                                     Label;                                                    // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     PluralLabel;                                              // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	class UTexture*                                    Icon;                                                     // 0x00C8(0x0008) (DataBinding)
	int                                                SlotIndex;                                                // 0x00D0(0x0004) (DataBinding)
	struct FProductHashID                              EquippedHashID0;                                          // 0x00D4(0x0004) (DataBinding)
	struct FProductHashID                              EquippedHashID1;                                          // 0x00D8(0x0004) (DataBinding)
	struct FProductHashID                              EquippedPack;                                             // 0x00DC(0x0004) (DataBinding)
	int                                                DefaultProductID;                                         // 0x00E0(0x0004)
	int                                                MatchesNeededToUnlock;                                    // 0x00E4(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductSlot_TA");
		return ptr;
	}


	void SetupProductSlot(class UProductSlot_TA* Slot);
};


// Class TAGame.GFxData_GarageProductSlot_TA
// 0x0000 (0x00E8 - 0x00E8)
class UGFxData_GarageProductSlot_TA : public UGFxData_ProductSlot_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_GarageProductSlot_TA");
		return ptr;
	}


	void SetupGarageProductSlot(class UProductSlot_TA* Slot, class ULoadoutSet_TA* LoadoutSet, int PreviewTeam, struct FProductHashID* StructInitializer_0905DD024022E0D59786AD88A77CC548);
};


// Class TAGame.__GFxData_Garage_TA__SetPreviewProduct_4975333A43CF831C8C6511BD9F6779A5
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Garage_TA__SetPreviewProduct_4975333A43CF831C8C6511BD9F6779A5 : public UObject
{
public:
	int                                                SlotIndex;                                                // 0x0060(0x0004)
	struct FProductHashID                              HashID;                                                   // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Garage_TA__SetPreviewProduct_4975333A43CF831C8C6511BD9F6779A5");
		return ptr;
	}


	void __GFxData_Garage_TA__SetPreviewProduct_4975333A43CF831C8C6511BD9F6779A5();
};


// Class TAGame.GFxData_Products_TA
// 0x0128 (0x01C0 - 0x0098)
class UGFxData_Products_TA : public UGFxDataSingleton_X
{
public:
	TArray<class ULoadingProduct_TA*>                  LoadingProducts;                                          // 0x0098(0x0010) (Transient, NeedCtorLink)
	TArray<struct FProductStatInfo>                    Stats;                                                    // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ProductLabel;                                             // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ProductLongLabel;                                         // 0x00C8(0x0010) (NeedCtorLink, DataBinding)
	class UTexture*                                    ProductIcon;                                              // 0x00D8(0x0008) (DataBinding)
	struct FString                                     ProductDescription;                                       // 0x00E0(0x0010) (NeedCtorLink, DataBinding)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00F0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_Products_TA.ProductID
	int                                                BaseProductID;                                            // 0x00F8(0x0004) (DataBinding)
	struct FProductHashID                              HashID;                                                   // 0x00FC(0x0004) (DataBinding)
	int                                                SchematicPointerID;                                       // 0x0100(0x0004) (DataBinding)
	int                                                ProductSlot;                                              // 0x0104(0x0004) (DataBinding)
	struct FString                                     ProductSlotLabel;                                         // 0x0108(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ProductSlotLongLabel;                                     // 0x0118(0x0010) (NeedCtorLink, DataBinding)
	unsigned long                                      bProductEquipped_1 : 1;                                   // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bProductEquipped_2 : 1;                                   // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bProductUnlocked : 1;                                     // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bProductIsPack : 1;                                       // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bProductIsNew : 1;                                        // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bProductHasNewSkin : 1;                                   // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bProductCanBeTradedIn : 1;                                // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bProductCanBePlayerTraded : 1;                            // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bProductIsContainer : 1;                                  // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bProductIsContainerKey : 1;                               // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bProductIsSchematic : 1;                                  // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bProductUpgradable : 1;                                   // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bIsFavorited : 1;                                         // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bIsArchived : 1;                                          // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bCanArchive : 1;                                          // 0x0128(0x0004) (DataBinding)
	unsigned long                                      bDebugLoadingProducts : 1;                                // 0x0128(0x0004) (Edit)
	struct FColor                                      ProductPaintColor;                                        // 0x012C(0x0004) (DataBinding)
	struct FString                                     ProductPaintColorName;                                    // 0x0130(0x0010) (NeedCtorLink, DataBinding)
	TEnumAsByte<EProductQuality>                       ProductQuality;                                           // 0x0140(0x0001) (DataBinding)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0141(0x0003) MISSED OFFSET
	int                                                ProductQuantity;                                          // 0x0144(0x0004) (DataBinding)
	int                                                TradeHold;                                                // 0x0148(0x0004) (DataBinding)
	int                                                SeriesID;                                                 // 0x014C(0x0004) (DataBinding)
	struct FString                                     SeriesDescription;                                        // 0x0150(0x0010) (NeedCtorLink, DataBinding)
	int                                                SchematicResources;                                       // 0x0160(0x0004) (DataBinding)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0164(0x0004) MISSED OFFSET
	class UGFxProductAttributeMap_TA*                  AttributeMap;                                             // 0x0168(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FString                                     AttributeTables;                                          // 0x0170(0x0010) (NeedCtorLink, DataBinding)
	TArray<class UProduct_TA*>                         NewProducts;                                              // 0x0180(0x0010) (NeedCtorLink)
	class UProductsFavoriteSave_TA*                    FavoriteSave;                                             // 0x0190(0x0008) (Transient)
	class UProductsArchiveSave_TA*                     ArchiveSave;                                              // 0x0198(0x0008) (Transient)
	class UProfileLoadoutSave_TA*                      LoadoutSave;                                              // 0x01A0(0x0008) (Transient)
	TArray<class UClass*>                              DynamicThumbnailsIgnorableOnlinePaintedProducts;          // 0x01A8(0x0010) (Transient, NeedCtorLink)
	class UMtxConfig_TA*                               MtxConfig;                                                // 0x01B8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Products_TA");
		return ptr;
	}


	void __GFxData_Products_TA__OnShellSet_4DFEB35945F7484834D3F192A9F661B0(class UWallet_TA* Wallet);
	void __GFxData_Products_TA__OnShellSet_A63650B343B51AC6A77EB9A540CA28D5(class UWallet_TA* _);
	void __GFxData_Products_TA__OnShellSet_D353205742BE17157765B896A7F4C7A7(class UProductsArchiveSave_TA* InArchiveSave);
	void __GFxData_Products_TA__OnShellSet_846F3EE04C04E20FCBD76CBE1D3C220A(class UProfileLoadoutSave_TA* InLoadoutSave);
	void __GFxData_Products_TA__OnShellSet_57B14A99498B53C9EF8CF5A7F83DB6AC(class UProductsFavoriteSave_TA* InFavoriteSave);
	bool __GFxData_Products_TA__GetAttributesWithAdditionalAssets_F3BE87C542C5A10605DFAC8FEEC8D872(class UProductAttribute_TA* A);
	void __GFxData_Products_TA__ClearAttributes_A267F96241C9B0E3D75A38BDBBD7A372(class UGFxData_ProductAttribute_TA* GFxAttribute);
	class UGFxData_ProductAttribute_TA* __GFxData_Products_TA__ClearAttributes_E3B1F1C34E0752DC99234BA34CB9B92D(class UClass* GFxClass);
	class UGFxData_ProductAttribute_TA* __GFxData_Products_TA__InstanceAttributes_4B37F98C47FDF9782977C9B06B1DB58A(class UClass* GFxClass);
	class UClass* __GFxData_Products_TA__InstanceAttributes_D528F1DE483CF2DC8D11B29621D8F38A(class UProductAttribute_TA* Attribute);
	struct FName __GFxData_Products_TA__BuildAttributeTableStr_21E2A1114B969507735B3EA62D0C5632(class UGFxData_ProductAttribute_TA* GFxAttribute);
	bool __GFxData_Products_TA__HasNewOnlineProducts_9DCAC1424CC41244EF6940B7C539DD4D();
	bool __GFxData_Products_TA__FolderContainsNewProducts_0EBF3A9F45E0C41D8B4E319DDE34BC71(class UProduct_TA* P);
	void __GFxData_Products_TA__GetMatchingInstancesByProductID_25CB7B254C56D0546E41BF9969297375(class UOnlineProduct_TA* OnlineProduct);
	class ACarPreviewActor_TA* GetCarPreview();
	int GetEditTeamIndex(class UProfile_TA* Profile);
	class ULoadoutSet_TA* GetEditLoadoutSet(class UProfile_TA* Profile);
	class ULoadout_TA* GetEditLoadout(class UProfile_TA* Profile, int TeamIndex);
	void OnSchematicResourcesChanged();
	void HandleSchematicResourcesChanged(class USaveData_TA* SaveData);
	void RefreshSchematicResources();
	void HandleRemovedOnlineProduct(class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct);
	void HandleNewOnlineProduct(class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct);
	void OnProductsRefreshed();
	void HandleOnlineProductsSynced(class USaveData_TA* SaveData);
	void TimerRefreshProducts();
	void RefreshProducts();
	void GetMatchingInstancesByProductID(int InProductID, TArray<class UOnlineProduct_TA*>* ArrayResultLocal_42FCA9564EE54CF58D65FAA2FD1DC0D0);
	int GetTimeHoldRemaining(const struct FProductHashID& InHashID);
	void UpdateTeamProductData();
	void UpdateAllProductData();
	struct FProductHashID GetNewestProductId();
	bool SlotContainsNewProducts(int SlotIndex);
	bool FolderContainsNewProducts();
	bool HasNewOnlineProducts();
	struct FString GetProductLongLabel(const struct FProductHashID& InHashID);
	TEnumAsByte<EProductQuality> GetProductQuality(const struct FProductHashID& InHashID);
	struct FString GetProductTrademarkLabel(const struct FProductHashID& InHashID);
	struct FString GetProductLabel(const struct FProductHashID& InHashID);
	bool BaseProductsMatch(const struct FProductHashID& FirstProduct, const struct FProductHashID& SecondProduct);
	struct FProductHashID GetHashIDFromProductID(int InProductID);
	struct FString GetSlotLabel(const struct FProductHashID& InHashID);
	int GetSlotIndex(const struct FProductHashID& InHashID);
	bool IsContainer(const struct FProductHashID& InHashID);
	void OnProductFailedToLoad(const struct FProductHashID& InHashID);
	void OnProductLoaded(const struct FProductHashID& InHashID, int ThumbnailSize);
	struct FString BuildAttributeTableStr(TArray<class UGFxData_ProductAttribute_TA*>* Attributes, TArray<struct FName>* MapLocal_5CFE26C64A5B0EE22DC596992EE1FA8E);
	TArray<class UGFxData_ProductAttribute_TA*> InstanceAttributes(const TScriptInterface<class UIProductAttributeProvider_TA>& AttributeProvider, TArray<class UProductAttribute_TA*>* ArrayResultLocal_C3AD4FCD4F2408F15873C5B22CEFC7AF, TArray<class UClass*>* MapLocal_DE2A0E8F41C5802C75975A993934E00E, TArray<class UClass*>* FilterLocal_CEF82C55475D56D9A46B1482017BA774, TArray<class UGFxData_ProductAttribute_TA*>* MapLocal_76B6CC804BD813D3E6687D82BBC5FBFF);
	void ClearAttributes(TArray<class UGFxData_ProductAttribute_TA*>* MapLocal_38738BDA49802FCA007868B7A040C4A9);
	void UpdateProductData(class ULoadingProduct_TA* ProductData, TArray<class UProductAttribute_TA*>* ArrayResultLocal_7B69417D4BFF156F142A71A2D0F008EB, struct FColor* StructInitializer_3ACA89A846095EFC7B46C4A1B73DBCCE);
	bool UpdateEquippedVanity(int SlotIndex, const struct FProductHashID& ProductHash);
	void UpdateNextProductData();
	void SetUpdateProductDataTimer();
	void QueUpdateProductData(class ULoadingProduct_TA* LoadingProduct);
	bool CanBePlayerTraded(class UProduct_TA* Product);
	bool CanBeTradedIn(class UProduct_TA* Product);
	void HandleRenderTargetUpdate(class UTextureRenderTarget2D* Texture, class ULoadingProduct_TA* LoadingProduct);
	void HandleThumbnailLoaded(const struct FAssetLoadResult& Result, class ULoadingProduct_TA* LoadingProduct);
	void HandleProductThumbnailRendered(const struct FProductThumbnailResult& Result, class ULoadingProduct_TA* LoadingProduct);
	void RenderProductThumbnail(class ULoadingProduct_TA* ProductData);
	void HandleAdditionalProductReferenceLoaded(class ULoadingProduct_TA* LoadingProduct, struct FAssetLoadResult* Result);
	void HandlePaintedProductLoaded(class ULoadingProduct_TA* LoadingProduct, struct FAssetLoadResult* Result);
	TArray<class UProductAttribute_TA*> GetAttributesWithAdditionalAssets(class ULoadingProduct_TA* ProductData, TArray<class UProductAttribute_TA*>* ConcatLocal_4ED174024358F82C54B738B4C63A6215, TArray<class UProductAttribute_TA*>* FilterLocal_B9C5647A4BD088D0AE87A9891FA97B94);
	void LoadAdditionalProductReferences(class ULoadingProduct_TA* LoadingProduct, TArray<class UProductAttribute_TA*>* ArrayResultLocal_C8691CEE49ED2EC744642C83C0EAD175);
	void SetIsArchived(const struct FProductHashID& InHashID, bool bValue);
	void SetIsFavorited(const struct FProductHashID& InHashID, bool bValue);
	void StartLoadingProduct(const struct FProductHashID& InHashID, TEnumAsByte<EProductThumbnailSize> ThumbnailSize, int ViewId, bool bIgnoreEquipped);
	void RefreshProduct(class ULoadingProduct_TA* LoadingProduct, int ViewId, bool bIgnoreEquipped);
	void LoadProduct(const struct FProductHashID& InHashID, TEnumAsByte<EProductThumbnailSize> ThumbnailSize, int ViewId, bool bIgnoreEquipped);
	void OnClearViewedProduct(const struct FProductHashID& InHashID, TEnumAsByte<EProductThumbnailSize> ThumbnailSize);
	bool IsThumbnailReferenced(class UProductAsset_TA* Asset, class UOnlineProduct_TA* OnlineProduct, TEnumAsByte<EProductThumbnailSize> ThumbnailSize);
	bool IsProductIDReferenced(int InProductID);
	void ClearProductView(class ULoadingProduct_TA* LoadingProduct, int ViewId);
	void ClearReferencedProducts(int ViewId);
	void SetViewProducts(int ViewId, TArray<struct FProductHashID> HashIDs, TEnumAsByte<EProductThumbnailSize> ThumbnailSize);
	void GetVisibleProductIDs(int SlotIndex, const struct FProductHashID& PackHashID, bool bUnlockedOnly);
	void GetUnlockedProductIDs(int SlotIndex, struct FProductHashID* StructInitializer_4DBA387D4C6310E3873E2594C3C38BDC);
	bool STATIC_ShouldShowProduct(class ULoadout_TA* Loadout, class UProduct_TA* Product, const struct FProductHashID& PackHashID);
	void CacheNewProducts();
	void HandleProductsSave(class UProductsSave_TA* ProductsSave);
	class UProfile_TA* GetProfile();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.ProductsSave_TA
// 0x0058 (0x0120 - 0x00C8)
class UProductsSave_TA : public USaveObject_TA
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x00C8(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.ProductsSave_TA.OnlineProductInstanceIds
	unsigned char                                      UnknownData01[0x10];                                      // 0x00D8(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.ProductsSave_TA.NewProductIDs
	unsigned char                                      UnknownData02[0x10];                                      // 0x00E8(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.ProductsSave_TA.UnseenContainerProducts
	unsigned char                                      UnknownData03[0x8];                                       // 0x00F8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.ProductsSave_TA.LastUnlockDisplayId
	int                                                PreviousKeyCount;                                         // 0x0100(0x0004) (DataBinding)
	int                                                PreviousDecryptorCount;                                   // 0x0104(0x0004) (DataBinding)
	struct FScriptDelegate                             __NewProductIDs__ChangeNotify;                            // 0x0108(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0108(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductsSave_TA");
		return ptr;
	}


	void __NewProductIDs__ChangeNotifyFunc();
	class USaveObject_TA* Reconcile(class USaveObject_TA* Remote);
	TArray<struct FProductHashID> GetUnseenContainerDrops(TArray<struct FProductHashID>* MapLocal_D5B67FC54EBB3C80E98A328D7E399260);
	void HandleOnlineProductsChanged(TArray<class UOnlineProduct_TA*>* InOnlineProducts);
	void RemoveContainerDrop(const struct FProductHashID& HashID);
	void ClearUnseenContainerDrops();
	struct FProductHashID GetHighestRarityDrop(struct FProductHashID* StructInitializer_21E9A737436BF65116BC34954DC95429);
	bool IsUnseenContainerDrop();
	void AddUnseenContainerDrop();
	bool ProductIsNew();
	void UnlockProduct(int ProductID);
	void LockProduct(int ProductID);
	void ClearNewProducts();
	void OnLoad();
};


// Class TAGame.ICustomizableSlot
// 0x0000 (0x0060 - 0x0060)
class UICustomizableSlot : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ICustomizableSlot");
		return ptr;
	}

};


// Class TAGame.GFxData_Leaderboards_TA
// 0x0048 (0x00E0 - 0x0098)
class UGFxData_Leaderboards_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FLeaderboardData>                    LeaderboardDataSet;                                       // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	int                                                PlayerLeaderboardValue;                                   // 0x00A8(0x0004) (DataBinding)
	int                                                PlayerLeaderboardDivision;                                // 0x00AC(0x0004) (DataBinding)
	float                                              PlayerLeaderboardMMR;                                     // 0x00B0(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	struct FString                                     PlayerLeaderboardName;                                    // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	unsigned long                                      bShowGlobalLeaderboards : 1;                              // 0x00C8(0x0004) (DataBinding)
	unsigned long                                      bWordFilterError : 1;                                     // 0x00C8(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	class UOnlineGameLeaderboards_X*                   Leaderboards;                                             // 0x00D0(0x0008) (Transient)
	struct FName                                       PendingLeaderboardRequestID;                              // 0x00D8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Leaderboards_TA");
		return ptr;
	}


	void ViewProfile(int InRowIndex);
	void HandleSanitizeError(const struct FString& OriginalPhrase, class UError* Error);
	void HandlePlayerNameSanitized(const struct FString& Original, const struct FString& Sanitized);
	void SanitizePlayerNames(TArray<struct FLeaderboardData>* Table);
	void GetLeaderboardFriends(const struct FName& LeaderboardId);
	void HandlePlayerFriendLeaderboardRecieved(class UOnlineGameLeaderboards_X* LeaderboardsRef, const struct FName& LeaderboardId, class UError* Error, struct FLeaderboardData* PlayerLeaderboardData);
	void HandlePlayerLeaderboardRecieved(class UOnlineGameLeaderboards_X* LeaderboardsRef, const struct FName& LeaderboardId, class UError* Error, struct FLeaderboardData* PlayerLeaderboardData);
	void RequestClearPendingAvatarDownloads();
	void HandleLeaderboardReceived(const struct FName& NewLeaderboardID, TArray<struct FLeaderboardData>* NewLeaderboardData);
	void OnLeaderboardError(const struct FString& LeaderboardError);
	void OnLeaderboardLoaded();
	void HandleLeaderboardError(class UError* Error);
	void GetLeaderboard(const struct FName& LeaderboardName);
	void SetShowGlobalLeaderboards(bool bGlobal);
	void InitShowGlobalLeaderboards();
	void GetPlayerLeaderboardValue(const struct FName& LeaderboardName, const struct FScriptDelegate& NewDelegate);
	void BeginGetLeaderboard(const struct FName& LeaderboardName);
	void OnShellSet();
	class UOnlineGame_X* GetOnlineGame();
};


// Class TAGame.GFxData_LocalCar_TA
// 0x0028 (0x00C0 - 0x0098)
class UGFxData_LocalCar_TA : public UGFxDataSingleton_X
{
public:
	int                                                Boost;                                                    // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bOnBack : 1;                                              // 0x009C(0x0004) (DataBinding)
	unsigned long                                      bViewingCarCam : 1;                                       // 0x009C(0x0004) (DataBinding)
	unsigned long                                      bShowItemsDisplay : 1;                                    // 0x009C(0x0004) (DataBinding)
	unsigned long                                      bItemActive : 1;                                          // 0x009C(0x0004) (DataBinding)
	int                                                TimeTillItem;                                             // 0x00A0(0x0004) (DataBinding)
	int                                                MaxTimeTillItem;                                          // 0x00A4(0x0004) (DataBinding)
	struct FString                                     ItemName;                                                 // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	float                                              ItemTimeRemaining;                                        // 0x00B8(0x0004) (DataBinding)
	int                                                ItemTargetID;                                             // 0x00BC(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_LocalCar_TA");
		return ptr;
	}


	void SetItemTargetScreenPosition(float ScreenX, float ScreenY, bool bOffScreen);
	void SetOnBack(bool bIsOnBack);
	void UpdateViewingCarCam(class ACamera_X* Camera);
	void HandleCameraStateChanged(class ACamera_X* Camera, class UCameraState_X* CameraState);
	void HandleCameraTargetChanged(class ACamera_TA* Camera, class AActor* Target);
	void HandleCameraChanged(class APlayerController_X* PlayerController);
	void BoostPercentageChanged(int NewPercentage, bool bAnimate);
	void SetBoostPercent(int NewPercentage, bool bAnimateChange);
	void OnShellSet();
};


// Class TAGame.ClientXPSave_TA
// 0x0040 (0x0108 - 0x00C8)
class UClientXPSave_TA : public USaveObject_TA
{
public:
	int                                                TotalXP;                                                  // 0x00C8(0x0004) (DataBinding)
	int                                                Level;                                                    // 0x00CC(0x0004) (DataBinding)
	int                                                CurrentLevelXPThreshold;                                  // 0x00D0(0x0004) (DataBinding)
	int                                                NextLevelXPThreshold;                                     // 0x00D4(0x0004) (DataBinding)
	struct FScriptDelegate                             __EventXPUpdated__Delegate;                               // 0x00D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventLevelUpdated__Delegate;                            // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ClientXPSave_TA");
		return ptr;
	}


	class USaveObject_TA* Reconcile(class USaveObject_TA* Remote);
	void STATIC_StaticGetXPInfo(int XPTotal, int* Out_XPLevel, struct FString* Out_XPTitle, int* Out_XPProgressInCurrentLevel, int* Out_XPRequiredForNextLevel);
	void GiveXPDrop(struct U_Types_TA_FOnlineXPReward* XPDrop);
	void GetXPInfo(int* Out_XPTotal, int* Out_XPLevel, struct FString* Out_XPTitle, int* Out_XPProgressInCurrentLevel, int* Out_XPRequiredForNextLevel);
	void SetLevelInfo(int InCurrentLevel, int InCurrentLevelXPThreshold, int InNextLevelXPThreshold);
	void SetXPInfo(struct FXPInfo* InXPInfo);
	void SetXPInfoNoNotify(struct FXPInfo* InXPInfo);
	void SetTotalXP(int InTotalXP);
	bool InitLevelInfoNoNotify(int InCurrentLevel, int InCurrentLevelXPThreshold, int InNextLevelXPThreshold, int* OldLevel);
	bool SetTotalXPNoNotify(int InTotalXP, int* OldXP);
	void EventLevelUpdated(class UClientXPSave_TA* XPSave, int NewLevel, int OldLevel);
	void EventXPUpdated(class UClientXPSave_TA* XPSave, int OldXP);
};


// Class TAGame.GFxData_PlayerVanity_TA
// 0x0018 (0x00B0 - 0x0098)
class UGFxData_PlayerVanity_TA : public UGFxDataSingleton_X
{
public:
	class UVanitySetManager_TA*                        VanityMgr;                                                // 0x0098(0x0008) (Transient)
	class UGFxData_PlayerAvatarBorder_TA*              GFxPlayerAvatarBorder;                                    // 0x00A0(0x0008) (Transient)
	class UGFxData_PlayerBanner_TA*                    GFxPlayerBanner;                                          // 0x00A8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PlayerVanity_TA");
		return ptr;
	}


	bool __GFxData_PlayerVanity_TA__UpdatePlayerAvatars_38CA1E444B1A93A81C49D5AFD5604BB8(const struct FUniqueNetId& PID);
	int GetPlayerBorderIndex(const struct FUniqueNetId& PlayerID);
	void OnPlayerAvatarBordersUpdated(TArray<struct FUniqueNetId> PlayerIDs);
	void UpdatePlayerAvatarBorders(TArray<struct FUniqueNetId> PlayerIDs);
	void InitPlayerAvatarBorder(TArray<struct FUniqueNetId>* ArrayInitializer_D869CEDC4F8C8472957C07881CA86525);
	int GetPlayerBannerIndex(const struct FUniqueNetId& PlayerID);
	void OnPlayerBannersUpdated(TArray<struct FUniqueNetId> PlayerIDs);
	void UpdatePlayerBanners(TArray<struct FUniqueNetId> PlayerIDs);
	void InitPlayerBanner(TArray<struct FUniqueNetId>* ArrayInitializer_FC4ECD54416283AE00190BB09B1AB35F);
	int GetPlayerAvatarIndex(const struct FUniqueNetId& PlayerID);
	void OnPlayerAvatarsUpdated(TArray<struct FUniqueNetId> PlayerIDs);
	void UpdatePlayerAvatars(TArray<struct FUniqueNetId> PlayerIDs, TArray<struct FUniqueNetId>* FilterLocal_81493AAC4966EA847CE35F96B0995347);
	void HandleLoginChanged(class UOnlinePlayerAuthentication_X* Auth, TArray<struct FUniqueNetId>* ArrayInitializer_5775CE83484029EABA885CABB12CFEE5, TArray<struct FUniqueNetId>* ArrayInitializer_D9E0D70C4B272F523441DBA3D4F2547B, TArray<struct FUniqueNetId>* ArrayInitializer_BD7E11B942B9B7F99C87A28CD7340209);
	void InitVanityItems();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.ProfileGameplaySave_TA
// 0x0006 (0x00CE - 0x00C8)
class UProfileGameplaySave_TA : public USaveObject_TA
{
public:
	unsigned long                                      bMetric : 1;                                              // 0x00C8(0x0004)
	unsigned long                                      bTeamColoredBoostMeter : 1;                               // 0x00C8(0x0004)
	unsigned long                                      bDisableDivisions : 1;                                    // 0x00C8(0x0004)
	unsigned long                                      bDisableDivisionsSports : 1;                              // 0x00C8(0x0004)
	TEnumAsByte<EHUDMessageLevel>                      HUDMessageThreshold;                                      // 0x00CC(0x0001)
	TEnumAsByte<ENameplateMode>                        NameplateMode;                                            // 0x00CD(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProfileGameplaySave_TA");
		return ptr;
	}


	bool STATIC_GetMetricDefaultValue();
};


// Class TAGame.PersonaSave_TA
// 0x0030 (0x00F8 - 0x00C8)
class UPersonaSave_TA : public USaveObject_TA
{
public:
	TArray<struct FPersonaDataId>                      RecentPlayers;                                            // 0x00C8(0x0010) (NeedCtorLink)
	TEnumAsByte<EOnlineFriendState>                    PresenceState;                                            // 0x00D8(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	struct FScriptDelegate                             __PresenceState__ChangeNotify;                            // 0x00E0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00D9(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PersonaSave_TA");
		return ptr;
	}


	void __PresenceState__ChangeNotifyFunc();
	void SetRecentPlayers(TArray<struct FPersonaDataId>* Recent);
};


// Class TAGame.__GFxData_LocalPlayer_TA__HandleXPLoaded_C9C8F4674AA46C4F37D45C8750EEBE7B
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_LocalPlayer_TA__HandleXPLoaded_C9C8F4674AA46C4F37D45C8750EEBE7B : public UObject
{
public:
	class UClientXPSave_TA*                            XPSave;                                                   // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_LocalPlayer_TA__HandleXPLoaded_C9C8F4674AA46C4F37D45C8750EEBE7B");
		return ptr;
	}


	void __GFxData_LocalPlayer_TA__HandleXPLoaded_C9C8F4674AA46C4F37D45C8750EEBE7B(class USaveData_TA* SaveData);
};


// Class TAGame.OnlineStorageMetadata_TA
// 0x0010 (0x0070 - 0x0060)
class UOnlineStorageMetadata_TA : public UObject
{
public:
	TArray<struct UOnlineStorageMetadata_TA_FStorageMetadata> MetaData;                                                 // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineStorageMetadata_TA");
		return ptr;
	}


	struct UOnlineStorageMetadata_TA_FStorageMetadata Get(class UClass* DataClass);
	int GetUpdateTick(class UClass* DataClass);
	void SyncComplete(class UClass* DataClass, int UpdateTick, TEnumAsByte<EObjectEncoding> Encoding);
	void CommitStart(class UClass* DataClass, int* UpdateTick);
	int GetIndex(class UClass* DataClass);
};


// Class TAGame.OnlineStorageSyncManager_TA
// 0x0068 (0x00C8 - 0x0060)
class UOnlineStorageSyncManager_TA : public UObject
{
public:
	unsigned long                                      bDebugSyncManager : 1;                                    // 0x0060(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TArray<struct FString>                             DisabledOnlineStorageConfig;                              // 0x0068(0x0010) (Const, Config, NeedCtorLink)
	TArray<class UClass*>                              DisabledOnlineStorageClasses;                             // 0x0078(0x0010) (Transient, NeedCtorLink)
	TArray<class UClass*>                              ForcedOnlineStorageClasses;                               // 0x0088(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __EventSyncOnlinePlayerStorageStarted__Delegate;          // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0098(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSyncSuccess__Delegate;                             // 0x00B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineStorageSyncManager_TA");
		return ptr;
	}


	void __OnlineStorageSyncManager_TA__HandlePsyNetLogin_CF36D38F49A66CDF53C751AB2437DEFC(class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError* Error);
	void __OnlineStorageSyncManager_TA__SyncCloudData_02FC8FC74999B4CC469CFD89DF3334E0(class UError* _);
	void __OnlineStorageSyncManager_TA__SyncOnlinePlayerStorage_D83149EB457898B8CACCF4AE90FDABD2(class UError* E);
	bool __OnlineStorageSyncManager_TA__SyncOnlinePlayerStorage_5F3D87C9487D7750400A2A92DA0775AD(class USaveObject_TA* S);
	class UObject* __OnlineStorageSyncManager_TA__HandleOnlineStorageOutOfSync_D487BE3B4EC1BF9396163AB01317B8CA(const struct FPendingStorage& PS);
	void HandleOnlineStorageOutOfSync(TArray<struct FPendingStorage>* FailedStorage, TArray<class UObject*>* MapLocal_3C36347440DA9E6115E383975972DF25, TArray<class USaveObject_TA*>* OfTypeLocal_00CA361F44BA28399A1414B6E1406762, TArray<struct FOnlinePlayerStorageSyncRequest>* MapLocal_DCB02FBC41D540569D00EBA9AAA04C31);
	void HandleOnlineStorageCommit(class UObject* SaveObject, int ServerTick, TEnumAsByte<EObjectEncoding> Encoding);
	void OnlineStorageSyncSuccess(struct FOnlinePlayerStorageSyncResult* Result);
	bool IsOnlinePlayerStorageSyncSuccess();
	struct FOnlinePlayerStorageSyncRequest SaveObjectToSyncRequest(class USaveObject_TA* SaveObject, struct FOnlinePlayerStorageSyncRequest* StructInitializer_7F4201E0438C5E5729A873A68478BB67);
	void HandleStorageSyncSuccess();
	class UAsyncTask* SyncOnlinePlayerStorage(TArray<class USaveObject_TA*>* ConcatLocal_EAE336E5433842878F24DBAAFB6BB3AC, TArray<class USaveObject_TA*>* FilterLocal_C302488640B013EC05E01CA568C7057D, TArray<struct FOnlinePlayerStorageSyncRequest>* MapLocal_D03E8E4944D068D818E4DA9586E1656D);
	void RetrySyncOnlinePlayerStorage();
	void NotifyOnSyncOnlinePlayerStorageStarted(const struct FScriptDelegate& Callback);
	void SyncCloudData(class UOnlinePlayer_X* OnlinePlayer);
	void HandlePsyNetLogin(class UPsyNetConnection_X* C);
	void Construct();
	void EventSyncSuccess(class UOnlineStorageSyncManager_TA* OnlineStorageSyncManager);
	void EventSyncOnlinePlayerStorageStarted(class UOnlineStorageSyncManager_TA* OnlineStorageSyncManager, class UAsyncTask* SyncTask);
};


// Class TAGame.GFxData_MainMenu_TA
// 0x0040 (0x00D8 - 0x0098)
class UGFxData_MainMenu_TA : public UGFxDataSingleton_X
{
public:
	float                                              PreviewCameraRotationScale;                               // 0x0098(0x0004) (Edit)
	struct FName                                       RequestedDLCName;                                         // 0x009C(0x0008) (Transient)
	int                                                RequestedSubIdx;                                          // 0x00A4(0x0004) (Transient)
	struct FName                                       QueuedName;                                               // 0x00A8(0x0008) (Transient)
	int                                                QueuedSubIdx;                                             // 0x00B0(0x0004) (Transient)
	struct FName                                       UISoundState_AudioPreview;                                // 0x00B4(0x0008)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	struct FScriptDelegate                             ProductLoadedCallback;                                    // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00BC(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MainMenu_TA");
		return ptr;
	}


	void STATIC_HandleSkillDecayed(class UGFxShell_TA* GFxShell, class ULocalPlayer_TA* LocalPlayer, class USkillDecayedEvent_TA* SkillDecayedEvent);
	void HandleTopMenuChange(const struct FName& PrevMenu, const struct FName& NewMenu);
	class UShowroomMetrics_TA* GetShowroomMetrics();
	void SetLockPreviewActor(bool bLock);
	bool SetPreviewProduct(int SlotIndex, const struct FProductHashID& HashID, bool bUseBaseLoadout);
	void SetPreviewBaseLoadout();
	void OnRotatePreviewFinished();
	void RotatePreviewCamera(float X, float Y);
	void OnPremiumCarFinished();
	void SetPremiumCarFromBundle(const struct FName& PackID, int SubIdx);
	void SetPremiumDLCPack(const struct FName& PackID, int SubIdx);
	class UProfile_TA* GetProfile();
	void OnShellSet();
};


// Class TAGame.GFxData_TeamInfo_TA
// 0x0038 (0x00CC - 0x0094)
class UGFxData_TeamInfo_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	struct FString                                     TeamName;                                                 // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	struct FColor                                      TeamColor;                                                // 0x00A8(0x0004) (DataBinding)
	int                                                Score;                                                    // 0x00AC(0x0004) (DataBinding)
	class UTexture*                                    TeamLogo;                                                 // 0x00B0(0x0008) (DataBinding)
	int                                                SeriesScore;                                              // 0x00B8(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	class ATeam_TA*                                    Team;                                                     // 0x00C0(0x0008) (Transient)
	int                                                Difficulty;                                               // 0x00C8(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TeamInfo_TA");
		return ptr;
	}


	void UpdateDifficulty();
	void HandleGameScoreUpdated(class ATeam_Soccar_TA* InTeam);
	void HandleScoreUpdated(class ATeam_TA* InTeam);
	void HandleColorsChanged(class ATeam_TA* InTeam);
	void HandleLogoChanged(class ATeam_TA* InTeam);
	void HandleNameChanged(class ATeam_TA* InTeam);
	void SetTeam(class ATeam_TA* InTeam);
};


// Class TAGame.RPC_MicroTransactions_GetContainerDropTable_TA
// 0x0010 (0x0110 - 0x0100)
class URPC_MicroTransactions_GetContainerDropTable_TA : public URPC_X
{
public:
	TArray<struct FRPCContainerDropTable>              ContainerDrops;                                           // 0x0100(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MicroTransactions_GetContainerDropTable_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_ContainerDrops_TA
// 0x0038 (0x00D0 - 0x0098)
class UGFxData_ContainerDrops_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FContainerInfo>                      ContainerDropList;                                        // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	class UOnlineProductStoreSet_TA*                   ContainerDropsSet;                                        // 0x00A8(0x0008) (ExportObject, Transient, Component, EditInline)
	class UAsyncTask*                                  GetDropTableTask;                                         // 0x00B0(0x0008)
	struct FScriptDelegate                             __EventContainersUpdated__Delegate;                       // 0x00B8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ContainerDrops_TA");
		return ptr;
	}


	bool __GFxData_ContainerDrops_TA__HandleGetContainerDropTableResponse_4B8862E949BBE9D894C517AB07FCF48E(const struct FRPCContainerDropTable& D);
	int STATIC_GetBlueprintSeriesID(int BlueprintProductID);
	struct FString GetPossibleContainerDrops(int ProductID);
	TArray<struct FString> GetMatchingProductSeries(int SeriesID, TArray<struct FString>* ArrayInitializer_A18434274605EFC5A889CDAB82DD2A63, TArray<class UOnlineProduct_TA*>* ArrayResultLocal_7D699E9A40F46436C15CA1A271FE39D5, TArray<class UOnlineProduct_TA*>* FilterLocal_B93E69CD48AF5C86DD522FBFDB9361CE, TArray<class UOnlineProduct_TA*>* ArrayResultLocal_0011C15C42AE9BFDEFE7B0830F915E19, TArray<class UOnlineProduct_TA*>* FilterLocal_6F3E8E864CBB7EE00F3807929A4EBCD8, TArray<class UOnlineProduct_TA*>* FilterLocal_6874D4394F5A76F3ECAA70AA2E1D2C00, TArray<class UOnlineProduct_TA*>* DifferenceLocal_53EFAF8245479455A6D674BDD2162A0E, TArray<int>* MapLocal_A8C4A5A3477C16CB9813159033E9F7B4, TArray<int>* MapLocal_2935F8FB47B5431CF9FCC190739CCD2B, TArray<struct FString>* ArrayInitializer_299429D446E3392A84C0C88DA231CE6A);
	void OnContainersUpdated();
	int OnlineProductToHashInt(class UOnlineProduct_TA* OnlineProduct);
	struct FContainerInfo ContainerDropsToHashIDs(const struct FRPCContainerDropTable& DropTable, TArray<class UOnlineProduct_TA*>* MapLocal_8DDA0A5F40D3064ACD410E86089F5799, TArray<int>* MapLocal_A96EC7DC4E0CDE7767AF20AE956F1D37, struct FContainerInfo* StructInitializer_8BDB94F840E6A0BA98682599FEDA19F3);
	void HandleGetContainerDropTableResponse(class URPC_MicroTransactions_GetContainerDropTable_TA* RPC, TArray<struct FRPCContainerDropTable>* FilterLocal_EEC2906A41ACB91181F7FF9B2B78FF26, TArray<struct FContainerInfo>* MapLocal_68BD8A8546CE2F6849A9C882B3BE44B0);
	class UOnlineProduct_TA* CreateTempOnlineProduct(const struct FOnlineProductData& Data);
	void GetContentDrops();
	void HandlePsyNetConnected(class UPsyNetConnection_X* C);
	void OnRemoved();
	void OnShellSet();
	void EventContainersUpdated(class UGFxData_ContainerDrops_TA* ContainerDrops);
};


// Class TAGame.GFxData_MenuStack_TA
// 0x0028 (0x00C0 - 0x0098)
class UGFxData_MenuStack_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FName>                               MenuNames;                                                // 0x0098(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventTopMenuChanged__Delegate;                          // 0x00A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MenuStack_TA");
		return ptr;
	}


	void HandleMapLoad(const struct FString& MapName);
	struct FName GetTopMenu();
	void PopMenu(const struct FName& MenuName);
	void PushMenu(const struct FName& MenuName);
	void OnRemoved();
	void OnShellSet();
	void EventTopMenuChanged(const struct FName& PrevMenu, const struct FName& TopMenu);
};


// Class TAGame.SkillDecayedEvent_TA
// 0x0000 (0x0060 - 0x0060)
class USkillDecayedEvent_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkillDecayedEvent_TA");
		return ptr;
	}

};


// Class TAGame.ShowroomMetrics_TA
// 0x0000 (0x0080 - 0x0080)
class UShowroomMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ShowroomMetrics_TA");
		return ptr;
	}


	void PurchaseItemInShowRoom(const struct FName& ItemName, int ItemIndex);
	void ViewItemInStore(const struct FName& ItemName, int ItemIndex);
	void ViewItemInShowroom(const struct FName& ItemName, int ItemIndex, int SubItemIndex);
	void ShowroomExit();
	void ShowroomEnter();
};


// Class TAGame.GFxData_DLC_TA
// 0x0038 (0x00D0 - 0x0098)
class UGFxData_DLC_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxDLCData>                         Packs;                                                    // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	unsigned long                                      bReturningFromStore : 1;                                  // 0x00A8(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	class UMtxConfig_TA*                               MtxConfig;                                                // 0x00B0(0x0008) (Edit)
	class UOnlineGameDLC_TA*                           OnlineDLC;                                                // 0x00B8(0x0008) (Edit)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x00C0(0x0008) (Edit)
	class UOnlinePlayerMTX_TA*                         MTX;                                                      // 0x00C8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_DLC_TA");
		return ptr;
	}


	void __GFxData_DLC_TA__HandleClaimEntitlements_CE52CD654AC599CE895B43BFA4B4B213(class UOnlineProduct_TA* P);
	class UShowroomMetrics_TA* GetShowroomMetrics();
	void OnClaimedEntitlements();
	void HandleClaimEntitlements(class UOnlinePlayerMTX_TA* InMTX, TArray<class UOnlineProduct_TA*> NewProducts);
	void HandleEntitlementsError(class UOnlinePlayerMTX_TA* InMTX, class UError* Error);
	void OnExternalUIChange(bool bIsOpening);
	void CheckNewPurchases();
	void OpenStoreForDLC(const struct FName& Id);
	void HandleUnlockedDLCChanged();
	void HandleGetAppPriceInfoComplete(const struct FName& AppName, const struct FString& Price, const struct FString& DiscountPrice, int DiscountPercentage);
	void UpdateAppPrices();
	void HandleDLCReleased(class UOnlineGameDLC_X* OnlineDLCX);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_Map_TA
// 0x0070 (0x0108 - 0x0098)
class UGFxData_Map_TA : public UGFxDataSingleton_X
{
public:
	struct FGFxMapData                                 RandomMapData;                                            // 0x0098(0x0038) (Edit, NeedCtorLink)
	TArray<struct FGFxMapData>                         Data;                                                     // 0x00D0(0x0010) (Edit, NeedCtorLink, DataBinding)
	int                                                ActiveMapIndex;                                           // 0x00E0(0x0004) (Edit, DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00E4(0x0004) MISSED OFFSET
	class UTexture2D*                                  LastLoadedMapImage;                                       // 0x00E8(0x0008)
	struct FScriptDelegate                             __EventMapListChanged__Delegate;                          // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Map_TA");
		return ptr;
	}


	void OnLargeMapImageFailed(const struct FName& MapName);
	void OnLargeMapImageLoaded(class UTexture2D* Image, const struct FName& MapName);
	void HandleLargeMapImageLoaded(const struct FMapImageLoadResult& Result);
	void LoadLargeMapImage(const struct FName& MapName, struct FMapImageLoadResult* StructInitializer_18216B644F46A558CCE7D88D3D09B121);
	int GetMapIndex(const struct FName& MapName);
	struct FGFxMapData CreateMapData(class UMapData_TA* Map);
	void SetMaps(TArray<struct FGFxMapData>* InData);
	void UpdateMapList(int GameModeIndex, bool AddRandomOption);
	int SortFreeplayMaps(const struct FGFxMapData& A, const struct FGFxMapData& B);
	void UpdateFreeplayMapList();
	void OnShellSet();
	void EventMapListChanged(class UGFxData_Map_TA* Maps);
};


// Class TAGame.GFxData_OnlineMatch_TA
// 0x007C (0x0114 - 0x0098)
class UGFxData_OnlineMatch_TA : public UGFxDataSingleton_X
{
public:
	class ULocalPlayer_TA*                             TAPlayer;                                                 // 0x0098(0x0008) (Transient)
	class UProfile_TA*                                 Profile;                                                  // 0x00A0(0x0008) (Transient)
	struct FString                                     NoRegionsMessage;                                         // 0x00A8(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     NotLoggedInPsynetMessage;                                 // 0x00B8(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     BannedMessage;                                            // 0x00C8(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     NotPartyLeaderMsg;                                        // 0x00D8(0x0010) (Const, Localized, NeedCtorLink)
	int                                                CountdownSeconds;                                         // 0x00E8(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	class UOnlineGameParty_X*                          OnlineParty;                                              // 0x00F0(0x0008) (Transient)
	struct FString                                     OnlineStatusError;                                        // 0x00F8(0x0010) (NeedCtorLink, DataBinding)
	class UGFxData_OnlineMatchStatus_TA*               SearchStatusData;                                         // 0x0108(0x0008) (Transient)
	unsigned long                                      bSearching : 1;                                           // 0x0110(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_OnlineMatch_TA");
		return ptr;
	}


	TEnumAsByte<ESearchStatusOwner> GetStatusOwnerValue();
	bool IsStatusOwner();
	void ShowMatchmakingCancelOnPlaylistTimeframeExpired();
	void HandleMatchmakingError(class UOnlineGameMatchmaking_X* InMatchMaking, class UError* Error);
	void ShowMatchmakingCanceledOnPartySizeChangedError();
	void HandleMatchmakingCanceledOnPartySizeChanged(class UOnlineGameMatchmaking_X* InMatchMaking);
	void HandlePartySizeChanged(class UOnlineGameParty_X* Party, int NewSize, int OldSize);
	void HandlePartyChanged(class UOnlineGameParty_X* Party);
	void HandleRegionsSynced(class UGFxData_Regions_TA* RegionsData);
	void SetError(const struct FString& msg);
	void SetOnlineStatusError(const struct FString& NewStatusError);
	void UpdateOnlineStatus();
	struct FString GetOnlineStatusError();
	void ClearUpdateOnlineStatusTimer();
	void SetUpdateOnlineStatusTimer();
	class UOnlineGame_TA* GetOnlineGame();
	void OnProfileSet();
	void OnRemoved();
	void OnShellSet();
	void CancelSearch();
};


// Class TAGame.GFxData_OnlineMatchStatus_TA
// 0x0028 (0x00C0 - 0x0098)
class UGFxData_OnlineMatchStatus_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bSearching : 1;                                           // 0x0098(0x0004) (Transient, DataBinding)
	struct FName                                       SearchState;                                              // 0x009C(0x0008) (Transient, DataBinding)
	TEnumAsByte<ESearchStatusOwner>                    StatusOwner;                                              // 0x00A4(0x0001) (Transient, DataBinding)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A5(0x0003) MISSED OFFSET
	class UOnlineGameParty_X*                          OnlineParty;                                              // 0x00A8(0x0008) (Transient)
	struct FString                                     PartyLeaderSearchingMessage;                              // 0x00B0(0x0010) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_OnlineMatchStatus_TA");
		return ptr;
	}


	void SetWarning(const struct FString& msg);
	void OnCountdownEnded();
	void OnCountdownStarted(int SecondsRemaining);
	void OnClearMessages();
	void OnSearchError(const struct FString& Message);
	void OnSearchMessage(const struct FString& Message, TEnumAsByte<ESearchMessageType> MessageType);
	void OnFindGameComplete();
	class UOnlineGame_X* GetOnlineGame();
	void HandleCountdownEnded();
	void HandleCountdownStarted();
	void HandlePartyJoinGameError(class UOnlineGameParty_X* Party, const struct FString& LocalizedErrorString);
	void HandleFindGameWarning(const struct FString& Message);
	void SetError(const struct FString& msg);
	void SetStatus(const struct FString& msg);
	void HandleFindGameComplete(bool bCancelled);
	void HandleFindGameStatusChanged(const struct FString& NewStatus);
	void SetSearching(bool bNewSearching, TEnumAsByte<ESearchStatusOwner> NewOwner);
	void SetSearchState(const struct FName& NewState);
	void SetPartyLeaderSearchingMessage();
	void HandlePartySizeChanged(class UOnlineGameParty_X* Party, int NewSize, int OldSize);
	void HandleJoinGameComplete(bool bSuccess, const struct FString& FailReason);
	void HandlePartySearchStatus(class UOnlineGameParty_X* Party, class UPartyMessage_SearchStatus_X* StatusMessage);
	void SetStatusOwner(TEnumAsByte<ESearchStatusOwner> NewOwner);
	void OnShellSet();
};


// Class TAGame.GFxData_Regions_TA
// 0x0038 (0x00D0 - 0x0098)
class UGFxData_Regions_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxRegion>                          SuperRegions;                                             // 0x0098(0x0010) (NeedCtorLink)
	TArray<struct FGFxRegion>                          Regions;                                                  // 0x00A8(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __EventRegionsSynced__Delegate;                           // 0x00B8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Regions_TA");
		return ptr;
	}


	TArray<struct FGFxRegion> SelectRegions(TArray<struct FString> SelectedRegions);
	void NotifyWhenSynced(const struct FScriptDelegate& Callback);
	void HandleRegionsSynced(class UOnlineGameRegions_X* RegionsObj);
	void OnShellSet();
	void EventRegionsSynced(class UGFxData_Regions_TA* RegionsData);
};


// Class TAGame.OnlineGame_TA
// 0x0030 (0x0298 - 0x0268)
class UOnlineGame_TA : public UOnlineGame_X
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0268(0x0008) (Edit)
	class UESportEvents_TA*                            ESportEvents;                                             // 0x0270(0x0008)
	class UOnlineGameTourMatchmaking_TA*               TourMatchmaking;                                          // 0x0278(0x0008) (Edit)
	class UOnlineGamePlayTogether_TA*                  PlayTogether;                                             // 0x0280(0x0008)
	class UPersonas_TA*                                Personas;                                                 // 0x0288(0x0008)
	class UClubPersonas_TA*                            ClubPersonas;                                             // 0x0290(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGame_TA");
		return ptr;
	}


	void OnMainMenuOpened();
	void OnInit();
};


// Class TAGame.GFxData_Matchmaking_TA
// 0x00C4 (0x01D8 - 0x0114)
class UGFxData_Matchmaking_TA : public UGFxData_OnlineMatch_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	struct FString                                     NoPlaylistSelectedMessage;                                // 0x0118(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     NoRegionSelectedMessage;                                  // 0x0128(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyTooBigMessage;                                       // 0x0138(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     LeavePenaltyMessage;                                      // 0x0148(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PartySkillTooDistant;                                     // 0x0158(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyMemberNotOriginalAppOwner;                           // 0x0168(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     PartyMemberNotLoggedIn;                                   // 0x0178(0x0010) (Const, Localized, NeedCtorLink)
	TArray<struct FGFxRegion>                          Regions;                                                  // 0x0188(0x0010) (NeedCtorLink, DataBinding)
	int                                                TotalPopulation;                                          // 0x0198(0x0004) (DataBinding)
	TEnumAsByte<EMatchmakingViewTab>                   MatchmakingViewTab;                                       // 0x019C(0x0001) (DataBinding)
	unsigned char                                      UnknownData01[0x3];                                       // 0x019D(0x0003) MISSED OFFSET
	unsigned long                                      bRankedPlaylistsEnabled : 1;                              // 0x01A0(0x0004) (DataBinding)
	int                                                SeasonEndDays;                                            // 0x01A4(0x0004) (DataBinding)
	int                                                SeasonEndHours;                                           // 0x01A8(0x0004) (DataBinding)
	int                                                SeasonEndMinutes;                                         // 0x01AC(0x0004) (DataBinding)
	class UMatchmakingSettingsSave_TA*                 MatchmakingSave;                                          // 0x01B0(0x0008)
	TArray<struct FMessageUpdate>                      MessageUpdates;                                           // 0x01B8(0x0010) (Edit, NeedCtorLink)
	int                                                CurrentMessageUpdateIndex;                                // 0x01C8(0x0004) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x01CC(0x0004) MISSED OFFSET
	class URankedConfig_X*                             RankedConfig;                                             // 0x01D0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Matchmaking_TA");
		return ptr;
	}


	void __GFxData_Matchmaking_TA__OnShellSet_984E22084798FF3D2CD0ED80759F3EDE(bool _);
	void UpdateSelectedRegions();
	void UpdateSeasonTimeRemaining();
	void HandleDisableCrossPlayChange(class UOnlineGameParty_X* PartyObject);
	TEnumAsByte<ESearchStatusOwner> GetStatusOwnerValue();
	void CancelSearch();
	void CancelNextDisplayMessage();
	void DisplayNextMessage();
	void AddMessageUpdate(int DelayFromStart, const struct FString& MessageKey);
	void PopulateMessageUpdates();
	TArray<struct FName> GetAccessiblePlaylists(TArray<struct FName>* FilterLocal_BDD18FB848EF582145000085D24BB571, TArray<struct FName>* FilterLocal_ED9AF7764345884FF0EB16A649C18DA7, TArray<struct FName>* FilterLocal_24A38F9B4A4D3E8A224187A9AABC475F, TArray<struct FName>* FilterLocal_0D06B5F7457D0D317B5E4F856C47990B, TArray<struct FName>* FilterLocal_762A104542245BD6B7A0A4B15BAE3A2B, TArray<struct FName>* FilterLocal_390DA793470964069863BA82326CF091, TArray<struct FName>* FilterLocal_47A3044F447BD7A46ED2839D1525988E, TArray<struct FName>* FilterLocal_74A2E26A48A571988C1CCA85D258EB55, TArray<struct FName>* FilterLocal_DAD712264D5B9B7E729597940158B4DA, TArray<struct FName>* FilterLocal_9F86B6DE4B013C4F4A315E96A7C493CA, TArray<struct FName>* FilterLocal_2900228B427F53244B862B964BC0C47E, TArray<struct FName>* FilterLocal_DAA3172B48C9B6E75A73308028BB3599);
	void StartMatchmaking();
	bool IsRankedView(TEnumAsByte<EMatchmakingViewTab> Tab);
	void SetMatchmakingViewTab(TEnumAsByte<EMatchmakingViewTab> InMatchmakingViewTab);
	void SetRegionSelection(int Row, bool bSelected);
	void DeselectAllRegions();
	void HandleRegionsSynced(class UGFxData_Regions_TA* RegionsData);
	void SetPlaylistSelection(int Row, bool bSelected);
	void DeselectAllRankedPlaylists();
	void HandleRankedConfigChanged();
	void InitPlaylists();
	void HandleGetPlaylistPopulations(class UOnlineGamePopulation_X* Population);
	void UpdatePopulation();
	void SetViewingMatchmaking(bool bViewingMatchmaking);
	int GetMaxTeamSize();
	bool GetNotLoggedInPartyRestrictionError(struct FString* OutError);
	bool GetCompetitivePartyRestrictionError(struct FString* OutError);
	struct FString GetOnlineStatusError();
	void HandleMatchmakingSaveLoaded(class UMatchmakingSettingsSave_TA* InMatchmakingSave);
	void OnShellSet();
};


// Class TAGame.MatchmakingSettingsSave_TA
// 0x0028 (0x00F0 - 0x00C8)
class UMatchmakingSettingsSave_TA : public USaveObject_TA
{
public:
	TEnumAsByte<EMatchmakingViewTab>                   MatchmakingViewTab;                                       // 0x00C8(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00C9(0x0007) MISSED OFFSET
	TArray<struct FName>                               QuickMatchPlaylists;                                      // 0x00D0(0x0010) (NeedCtorLink)
	TArray<struct FString>                             QuickMatchRegions;                                        // 0x00E0(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchmakingSettingsSave_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_Playlist_TA
// 0x007C (0x0110 - 0x0094)
class UGFxData_Playlist_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class UGameSettingPlaylist_X*                      Playlist;                                                 // 0x0098(0x0008) (Transient)
	int                                                Id;                                                       // 0x00A0(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FString                                     KeyName;                                                  // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     FriendlyName;                                             // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     Description;                                              // 0x00C8(0x0010) (NeedCtorLink, DataBinding)
	int                                                TeamSize;                                                 // 0x00D8(0x0004) (DataBinding)
	unsigned long                                      bStandardMatch : 1;                                       // 0x00DC(0x0004) (DataBinding)
	unsigned long                                      bRanked : 1;                                              // 0x00DC(0x0004) (DataBinding)
	unsigned long                                      bSolo : 1;                                                // 0x00DC(0x0004) (DataBinding)
	unsigned long                                      bSelected : 1;                                            // 0x00DC(0x0004) (DataBinding)
	unsigned long                                      bEnabled : 1;                                             // 0x00DC(0x0004) (DataBinding)
	unsigned long                                      bRestricted : 1;                                          // 0x00DC(0x0004) (DataBinding)
	unsigned long                                      bNew : 1;                                                 // 0x00DC(0x0004) (DataBinding)
	unsigned long                                      bIsMicroEventPlaylist : 1;                                // 0x00DC(0x0004) (DataBinding)
	unsigned long                                      bPlaylistAllowsStayAsParty : 1;                           // 0x00DC(0x0004) (DataBinding)
	unsigned long                                      bIsTimeRestricted : 1;                                    // 0x00DC(0x0004) (DataBinding)
	class UTexture*                                    PlaylistBackgroundTexture;                                // 0x00E0(0x0008) (Transient, DataBinding)
	int                                                PlayerCount;                                              // 0x00E8(0x0004) (DataBinding)
	int                                                SkillTier;                                                // 0x00EC(0x0004) (DataBinding)
	int                                                SkillDivision;                                            // 0x00F0(0x0004) (DataBinding)
	int                                                SkillMatchesPlayed;                                       // 0x00F4(0x0004) (DataBinding)
	float                                              SkillMMR;                                                 // 0x00F8(0x0004) (DataBinding)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData03[0x8];                                       // 0x00FC(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_Playlist_TA.StartTime
	unsigned char                                      UnknownData04[0x8];                                       // 0x0108(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_Playlist_TA.EndTime

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Playlist_TA");
		return ptr;
	}


	void UpdatePlaylistTimeWindow();
	void UpdateSkillData();
	void HandleSkillUpdateOnGameJoin(bool bSuccess, const struct FString& FailReason);
	void SetPlayerCount(int Count);
	void HandleDownloadedImage(class UTexture2DDynamic* PlaylistTexture);
	void HandleMicroEventChanged(class UMicroEventConfig_TA* MicroEventConfig);
	void SetPlaylist(class UGameSettingPlaylist_X* InPlaylist);
	class UOnlineGameParty_X* GetOnlineGameParty();
	class UOnlineGameSkill_X* GetOnlineGameSkill();
};


// Class TAGame.ViewingMatchmaking_TA
// 0x0000 (0x0060 - 0x0060)
class UViewingMatchmaking_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ViewingMatchmaking_TA");
		return ptr;
	}

};


// Class TAGame.__GFxData_Matchmaking_TA__GetAccessiblePlaylists_B5D8006444AEA2E6753AF39301413D3E
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Matchmaking_TA__GetAccessiblePlaylists_B5D8006444AEA2E6753AF39301413D3E : public UObject
{
public:
	class UOnlineGamePlaylists_TA*                     Playlists;                                                // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Matchmaking_TA__GetAccessiblePlaylists_B5D8006444AEA2E6753AF39301413D3E");
		return ptr;
	}


	bool __GFxData_Matchmaking_TA__GetAccessiblePlaylists_B5D8006444AEA2E6753AF39301413D3E(const struct FName& P);
};


// Class TAGame.OnlineGamePlaylists_TA
// 0x0010 (0x00C0 - 0x00B0)
class UOnlineGamePlaylists_TA : public UOnlineGamePlaylists_X
{
public:
	class USpecialEventConfig_TA*                      SpecialEventConfig;                                       // 0x00B0(0x0008) (Transient)
	class UMicroEventConfig_TA*                        MicroEventConfig;                                         // 0x00B8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGamePlaylists_TA");
		return ptr;
	}


	bool IsDebugMicroEventPlaylist(const struct FName& PlaylistName);
	bool IsActiveMicroEventPlaylist(const struct FName& PlaylistName);
};


// Class TAGame.MusicPlayerSave_TA
// 0x0030 (0x00F8 - 0x00C8)
class UMusicPlayerSave_TA : public USaveObject_TA
{
public:
	TArray<struct FPlaylistState>                      PlaylistsUpdate22_2;                                      // 0x00C8(0x0010) (NeedCtorLink)
	TEnumAsByte<EGameplayMusicSetting>                 GameplayMusicSetting;                                     // 0x00D8(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	struct FScriptDelegate                             __GameplayMusicSetting__ChangeNotify;                     // 0x00E0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00D9(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicPlayerSave_TA");
		return ptr;
	}


	void __GameplayMusicSetting__ChangeNotifyFunc();
	bool IsModified();
	TArray<struct FPlaylistState> GetPlaylists();
	void SetSelected(const struct FName& Playlist, bool bEnabled);
};


// Class TAGame.MusicTheme_TA
// 0x0060 (0x00C0 - 0x0060)
class UMusicTheme_TA : public UObject
{
public:
	TArray<class UMusicPlaylist_TA*>                   Playlists;                                                // 0x0060(0x0010) (Edit, NeedCtorLink)
	TArray<struct FPlaylistTrack>                      TitleTracks;                                              // 0x0070(0x0010) (Edit, NeedCtorLink)
	class UAkSoundCue*                                 NeverPlayInFirstTracklist;                                // 0x0080(0x0008) (Edit)
	struct FPlaylistTrack                              Credits;                                                  // 0x0088(0x0010) (Edit)
	struct FPlaylistTrack                              KonamiCode;                                               // 0x0098(0x0010) (Edit)
	class UTexture*                                    DefaultIcon;                                              // 0x00A8(0x0008) (Edit)
	TArray<struct FPlaylistTrack>                      AdditionalTracks;                                         // 0x00B0(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicTheme_TA");
		return ptr;
	}


	class UMusicTheme_TA* ApplyIcons();
};


// Class TAGame.GFxData_MusicPlayer_TA
// 0x0100 (0x0198 - 0x0098)
class UGFxData_MusicPlayer_TA : public UGFxDataSingleton_X
{
public:
	class UMusicUrlConfig_TA*                          UrlConfig;                                                // 0x0098(0x0008) (Edit)
	unsigned long                                      bDebugMusicPlayer : 1;                                    // 0x00A0(0x0004) (Edit)
	unsigned long                                      bPlaylistsEnabled : 1;                                    // 0x00A0(0x0004) (DataBinding)
	unsigned long                                      bEnableMusicControls : 1;                                 // 0x00A0(0x0004) (DataBinding)
	unsigned long                                      bTitleTracksActive : 1;                                   // 0x00A0(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	TArray<struct FGFxMusicPlaylist>                   DefaultPlaylists;                                         // 0x00A8(0x0010) (NeedCtorLink)
	TArray<struct FGFxMusicPlaylist>                   Playlists;                                                // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     TrackTitle;                                               // 0x00C8(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     TrackArtist;                                              // 0x00D8(0x0010) (NeedCtorLink, DataBinding)
	class UTexture*                                    TrackIcon;                                                // 0x00E8(0x0008) (DataBinding)
	struct FString                                     TrackUrl;                                                 // 0x00F0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     CurrentTrackName;                                         // 0x0100(0x0010) (Transient, NeedCtorLink)
	int                                                CurrentTrackPlayingID;                                    // 0x0110(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	class UMusicTrack_TA*                              CurrentTrack;                                             // 0x0118(0x0008) (Transient)
	TArray<struct FPlaylistTrack>                      MasterTracklist;                                          // 0x0120(0x0010) (Transient, NeedCtorLink)
	TScriptInterface<class UIMusicTracklist_TA>        ActiveTracklist;                                          // 0x0130(0x0010)
	class UMusicTracklistFactory_TA*                   TracklistFactory;                                         // 0x0140(0x0008)
	class UMusicTracklistBuildStep_RemoveTrack_TA*     BuildStep_RemoveCurrentTrack;                             // 0x0148(0x0008)
	class UMusicTheme_TA*                              MusicTheme;                                               // 0x0150(0x0008) (Transient)
	class UMusicPlayerSave_TA*                         MusicSave;                                                // 0x0158(0x0008) (Transient)
	class UGameplayMusicPlayer_TA*                     GameMusicPlayer;                                          // 0x0160(0x0008) (Transient)
	struct FScriptDelegate                             __EventTrackFinished__Delegate;                           // 0x0168(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0168(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __CurrentTrackName__ChangeNotify;                         // 0x0180(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0180(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MusicPlayer_TA");
		return ptr;
	}


	void __GFxData_MusicPlayer_TA__OnShellSet_CAC1ED164C9D871BAADCDF925BACB53C(class UMusicThemeConfig_TA* InConfig);
	void __GFxData_MusicPlayer_TA__OnShellSet_134C446742F60FCFFCF50D93CAA91BE9(class UMusicUrlConfig_TA* InConfig);
	void __GFxData_MusicPlayer_TA__OnShellSet_3650C4D74E9CCB9506482689BE7CC637(class UMusicTrack_TA* _);
	void __GFxData_MusicPlayer_TA__HandleThemeChange_4237348B4DB0D460D0E666992C54700B();
	bool __GFxData_MusicPlayer_TA__HandleSaveDataLoaded_0907FA2A4B8E24F1D20AA68404DD45EF(const struct FGFxMusicPlaylist& P);
	void __GFxData_MusicPlayer_TA__HandleSaveDataLoaded_43F8F2B440D6A46ED5943795E5438431(const struct FPlaylistState& P);
	TArray<struct FPlaylistTrack> STATIC___GFxData_MusicPlayer_TA__BuildMasterTracklist_36B64E5C4D00086B637A9596B356276B(const struct FGFxMusicPlaylist& P);
	bool STATIC___GFxData_MusicPlayer_TA__BuildMasterTracklist_7C7779FE4F2DA055A674188D399731D9(const struct FGFxMusicPlaylist& P);
	void __CurrentTrackName__ChangeNotifyFunc();
	void UpdateTrackUrl();
	void PopLoadingScreenUIState();
	void PushLoadingScreenUIState();
	void HandleMusicPlayerStateChanged(class UGameplayMusicPlayer_TA* InGameMusicPlayer, TEnumAsByte<EMusicPlayerState> NewState);
	void GoToUrl();
	void HandlePlaylistsToggled(class UPlayerInput_X* PlayerInput, const struct FName& ActionName, bool bEnabled);
	TArray<struct FPlaylistTrack> STATIC_BuildMasterTracklist(TArray<struct FGFxMusicPlaylist>* InGFxPlaylists, TArray<struct FGFxMusicPlaylist>* FilterLocal_26764AFA4EDC43D32F927C89F4E4C9C6, TArray<struct FPlaylistTrack>* MapManyLocal_2DCAFA3649B195059B04C2A46B9D8B70, TArray<struct FPlaylistTrack>* DistinctLocal_08CA40A447A23B7CD83668A9D982B2A4);
	void ValidateCurrentTrack();
	void SetPlaylistSelected(int Row, bool bSelected);
	class UMusicMetrics_TA* GetMetrics();
	void HandleTrackEnd(int PlayingID);
	void HandleTrackStart(int PlayingID, const struct FString& FileMarker);
	void PlayKonamiTheme();
	void StopCurrentTrack();
	void OnTogglePlaylistSelection();
	void TogglePlaylistSelection();
	void RebuildActiveTracklist();
	void NextTrack();
	void PlayCreditsTheme();
	void SetPlaylistSelectedByName(const struct FName& PlaylistName, bool bSelected);
	TScriptInterface<class UIMusicTracklist_TA> BuildTracklist(TArray<struct FPlaylistTrack>* InTracklist, TArray<class UMusicTrack_TA*>* MapLocal_E5D4A031410A1258978132896A13DDC5);
	void HandleSaveDataLoaded(class UMusicPlayerSave_TA* InMusicSave, TArray<struct FPlaylistState>* ArrayResultLocal_F4F2A5614AA10A2FC88EE79F89412EFE, TArray<class UMusicTrack_TA*>* ArrayInitializer_CD6541004602DF101745968CDCCE0D19, class UMusicTracklistBuildStep_RemoveTrack_TA** ObjectInitializer_05D3A2894A40544F50A566B94FCF732F);
	void PlayMusicTrack(class UMusicTrack_TA* Track);
	class UMusicTrack_TA* PlaylistTrackToMusicTrack(const struct FPlaylistTrack& Pt, class UMusicTrack_TA** ObjectInitializer_777219194EBAC0D5A40EB09A89B6074B);
	TArray<struct FGFxMusicPlaylist> STATIC_MergePlaylists(TArray<struct FGFxMusicPlaylist>* OldPlaylists, TArray<struct FGFxMusicPlaylist>* NewPlaylists, TArray<struct FGFxMusicPlaylist>* FilterLocal_7351D02F4AF4CD8D62B13A8FEB5C7CCD, TArray<struct FGFxMusicPlaylist>* ConcatLocal_5B1876544B84248EE946F48A79E9518C);
	struct FGFxMusicPlaylist STATIC_PlaylistToGFxData(class UMusicPlaylist_TA* P, struct FGFxMusicPlaylist* StructInitializer_C358F2544ADEE2F3049750B400C7A19E);
	void HandleThemeChange(class UMusicTheme_TA* InTheme, TArray<struct FGFxMusicPlaylist>* MapLocal_50204D3E4F1493CCC1E85BBEF0ACF748, class UMusicTracklistBuildStep_RemoveTrack_TA** ObjectInitializer_7FD4A426468FA96607B9B19C47BBF3E6, class UMusicTracklistFactory_TA** ObjectInitializer_D86DBDD941BC1D9A4A20B59922D8CE82, TArray<class UMusicTrack_TA*>* MapLocal_DD36F2164DAE14B5832F82A5297384D9);
	void OnRemoved();
	void OnShellSet(TArray<struct FGFxMusicPlaylist>* MapLocal_DD0DF8154F56053943FFABA07967D23F, class UMusicTracklistBuildStep_RemoveTrack_TA** ObjectInitializer_DFC2DE3849BE0F58DFBED0977CEA5FCC, class UMusicTracklistBuildStep_ShuffleTracks_TA** ObjectInitializer_DF1C44344AA9819627FAA39AFC70C3C7, class UMusicTracklistFactory_TA** ObjectInitializer_E2CA1BBD486BAB7DCF8874A975902D4B);
	void EventTrackFinished();
};


// Class TAGame.MusicThemeConfig_TA
// 0x0008 (0x0080 - 0x0078)
class UMusicThemeConfig_TA : public UOnlineConfig_X
{
public:
	class UMusicTheme_TA*                              Theme;                                                    // 0x0078(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicThemeConfig_TA");
		return ptr;
	}

};


// Class TAGame.GameplayMusicPlayer_TA
// 0x0080 (0x00E0 - 0x0060)
class UGameplayMusicPlayer_TA : public UObject
{
public:
	class UMusicPlayerSave_TA*                         MusicSave;                                                // 0x0060(0x0008) (Transient)
	class AGameEvent_TA*                               CurrentGameEvent;                                         // 0x0068(0x0008)
	unsigned long                                      bMuted : 1;                                               // 0x0070(0x0004)
	struct FName                                       LoadingScreenState;                                       // 0x0074(0x0008)
	struct FName                                       CurrentPlaylist;                                          // 0x007C(0x0008)
	TEnumAsByte<EMusicPlayerState>                     MusicPlayerState;                                         // 0x0084(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	struct FName                                       LoadingScreenStateGroup;                                  // 0x0088(0x0008)
	struct FName                                       LoadingScreenState_MusicEnabled;                          // 0x0090(0x0008)
	struct FName                                       LoadingScreenState_MusicDisabled;                         // 0x0098(0x0008)
	struct FName                                       LoadingScreenState_None;                                  // 0x00A0(0x0008)
	struct FName                                       GameplayMusicStateGroup;                                  // 0x00A8(0x0008)
	struct FName                                       GameplayMusicState_Enabled;                               // 0x00B0(0x0008)
	struct FName                                       GameplayMusicState_Disabled;                              // 0x00B8(0x0008)
	struct FName                                       GameplayMusicState_None;                                  // 0x00C0(0x0008)
	struct FScriptDelegate                             __EventStateChanged__Delegate;                            // 0x00C8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00C8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameplayMusicPlayer_TA");
		return ptr;
	}


	void HandleAuthStateChanged(class UOnlinePlayerAuthentication_X* Auth);
	void HandleEventDestroyed(class AGameEvent_TA* GameEvent);
	void HandleMatchTypeSet(class AGameEvent_TA* GameEvent);
	void HandleLoadingMovieClosed();
	void HandleGameEventChanged();
	void SetLoadingScreenState(const struct FName& InState);
	struct FName GetLoadingScreenState(bool bIsLoadingMainMenu);
	void UpdateLoadingScreenState(const struct FString& MapName);
	void UpdateBGM();
	void SetState(TEnumAsByte<EMusicPlayerState> InState);
	bool IsTrainingMatch(class UMatchType_TA* MatchType);
	bool IsReplay();
	bool IsActiveForMatchType(class UMatchType_TA* MatchType);
	TEnumAsByte<EPlaylistType> GetPlaylistType(class UGameSettingPlaylist_X* Playlist);
	void SetMuted(bool bInMuted);
	void SetMusicSave(class UMusicPlayerSave_TA* InMusicSave);
	bool IsPlayingMusic();
	void RegisterLoadingScreenCallbacks();
	void Construct();
	void EventStateChanged(class UGameplayMusicPlayer_TA* GameplayMusicPlayer, TEnumAsByte<EMusicPlayerState> NewState);
};


// Class TAGame.MusicTracklistBuildStep_RemoveTrack_TA
// 0x0018 (0x0078 - 0x0060)
class UMusicTracklistBuildStep_RemoveTrack_TA : public UObject
{
public:
	TScriptInterface<class UIMusicTracklistBuilder>    Source;                                                   // 0x0060(0x0010)
	class UAkSoundCue*                                 TrackToRemove;                                            // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicTracklistBuildStep_RemoveTrack_TA");
		return ptr;
	}


	class UMusicTracklist_TA* CreateMusicTracklist(TArray<class UMusicTrack_TA*> Tracks);
};


// Class TAGame.IMusicTracklistBuilder
// 0x0000 (0x0060 - 0x0060)
class UIMusicTracklistBuilder : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IMusicTracklistBuilder");
		return ptr;
	}


	class UMusicTracklist_TA* CreateMusicTracklist(TArray<class UMusicTrack_TA*> Tracks);
};


// Class TAGame.MusicTracklistBuildStep_ShuffleTracks_TA
// 0x0010 (0x0070 - 0x0060)
class UMusicTracklistBuildStep_ShuffleTracks_TA : public UObject
{
public:
	TScriptInterface<class UIMusicTracklistBuilder>    Source;                                                   // 0x0060(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicTracklistBuildStep_ShuffleTracks_TA");
		return ptr;
	}


	class UMusicTracklist_TA* CreateMusicTracklist(TArray<class UMusicTrack_TA*> Tracks);
};


// Class TAGame.MusicTracklistBuildStep_CreateDefault_TA
// 0x0000 (0x0060 - 0x0060)
class UMusicTracklistBuildStep_CreateDefault_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicTracklistBuildStep_CreateDefault_TA");
		return ptr;
	}


	class UMusicTracklist_TA* CreateMusicTracklist(TArray<class UMusicTrack_TA*> Tracks, class UMusicTracklist_TA** ObjectInitializer_A9A3B5C74EDEE80E6C0E4C90AC1C3747);
};


// Class TAGame.MusicTracklistFactory_TA
// 0x0030 (0x0090 - 0x0060)
class UMusicTracklistFactory_TA : public UObject
{
public:
	class UMusicTracklistNull_TA*                      TracklistNull;                                            // 0x0060(0x0008) (Const)
	TScriptInterface<class UIMusicTracklistBuilder>    TracklistBuilder;                                         // 0x0068(0x0010) (Edit)
	struct FScriptDelegate                             LastTrackAction;                                          // 0x0078(0x0010) (Edit, NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicTracklistFactory_TA");
		return ptr;
	}


	TScriptInterface<class UIMusicTracklist_TA> CreateTracklist(TArray<class UMusicTrack_TA*> InTracklist);
};


// Class TAGame.MusicUrlConfig_TA
// 0x0010 (0x0088 - 0x0078)
class UMusicUrlConfig_TA : public UOnlineConfig_X
{
public:
	TArray<struct FMusicConfigTrack>                   Tracks;                                                   // 0x0078(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicUrlConfig_TA");
		return ptr;
	}


	struct FString GetTrackUrl(const struct FName& TrackName);
};


// Class TAGame.MusicPlaylist_TA
// 0x001C (0x007C - 0x0060)
class UMusicPlaylist_TA : public UObject
{
public:
	TArray<struct FPlaylistTrack>                      Tracks;                                                   // 0x0060(0x0010) (Edit, NeedCtorLink)
	class UTexture*                                    Icon;                                                     // 0x0070(0x0008) (Edit)
	unsigned long                                      bDefaultSelected : 1;                                     // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicPlaylist_TA");
		return ptr;
	}


	struct FString GetTitle();
};


// Class TAGame.ArenaSoundManager_TA
// 0x0064 (0x0108 - 0x00A4)
class UArenaSoundManager_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class UAkSoundCue*                                 DefaultInGameMusicCue;                                    // 0x00A8(0x0008) (Edit)
	class UAkSoundCue*                                 TrainingRoundEndCue;                                      // 0x00B0(0x0008) (Edit)
	class UArenaSoundSettings_TA*                      Settings;                                                 // 0x00B8(0x0008) (Transient)
	class AArenaSoundPlayer_TA*                        SoundPlayer;                                              // 0x00C0(0x0008) (Transient)
	unsigned long                                      bPlayedGameStartMusic : 1;                                // 0x00C8(0x0004) (Transient)
	unsigned long                                      bMatchBegan : 1;                                          // 0x00C8(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	class AGameEvent_Soccar_TA*                        SoccarGame;                                               // 0x00D0(0x0008) (Transient)
	class UArenaReflectionsManager_TA*                 ReflectionsManager;                                       // 0x00D8(0x0008)
	class UAkSoundCue*                                 GoalScoreStinger;                                         // 0x00E0(0x0008) (Transient)
	float                                              ReplayGoalStingerDelay;                                   // 0x00E8(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventReflectionsManagerSet__Delegate;                   // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00EC(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ArenaSoundManager_TA");
		return ptr;
	}


	void __ArenaSoundManager_TA__RegisterGameEventCallbacks_630FEE4D43CC620341F5E58D35B36443(class AGameEvent_TA* G, class ACar_TA* C);
	void ClearBallExplodeState();
	void HandleBallExploded(class ABall_TA* Ball);
	void HandlePostTimeSkip(class UReplay_TA* Replay);
	bool IsTraining();
	bool IsReplay();
	void HandleStatTickerMessage(class APRI_TA* Receiver, class APRI_TA* Victim, class UStatEvent_TA* StatEvent);
	void HandlePlayerScored(class AGameEvent_Soccar_TA* GameEvent, class APRI_TA* Scorer);
	void UpdateReverbEnvironments();
	void UpdateSoundScoreStatus();
	void UpdateSoundGameMode();
	void UpdateSoundState();
	void HandleMusicPlayerStateChanged(class UGameplayMusicPlayer_TA* InGameMusicPlayer, TEnumAsByte<EMusicPlayerState> NewState);
	void UpdateBackgroundMusic();
	void HandleCountdownTimeUpdated(class AGameEvent_TA* InGameEvent, int Seconds);
	void HandleGameTimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void StopInGameMusic();
	void StartInGameMusic();
	void HandleGameWinnerSet(class AGameEvent_Soccar_TA* InGameEvent);
	void StopGoalScoredStinger();
	void PlayGoalScoredStinger();
	void PlayGoalScoredSounds();
	void PlayMusicStinger(class UAkSoundCue* Stinger);
	void HandleOvertimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleStatEvent(class AGameEvent_Soccar_TA* InGameEvent, class UStatEvent_TA* StatEvent);
	void HandleGameStateChanged(class AGameEvent_TA* InGameEvent);
	void PlaySound(class UAkSoundCue* Sound);
	void HandlePylonSet();
	void RegisterGameEventCallbacks(class AGameEvent_Soccar_TA* InSoccarGame);
	void Detached(TArray<class UObject*>* ArrayInitializer_494C3DDE4CB87F421309FEA34300154E);
	void Attached(TArray<class UObject*>* ArrayInitializer_AA862CD64A9B48EE744768AC327AC9E7);
	void EventReflectionsManagerSet(class UArenaReflectionsManager_TA* NewReflectionsManager);
};


// Class TAGame.MusicMetrics_TA
// 0x0014 (0x0094 - 0x0080)
class UMusicMetrics_TA : public UMetricsGroup_X
{
public:
	struct FName                                       TrackName;                                                // 0x0080(0x0008) (Transient)
	float                                              TrackStartTime;                                           // 0x0088(0x0004) (Transient)
	int                                                TrackSequence;                                            // 0x008C(0x0004) (Transient)
	float                                              PendingMusicVolume;                                       // 0x0090(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicMetrics_TA");
		return ptr;
	}


	float GetMusicVolume();
	void PlaylistSelected(const struct FName& Playlist, bool bSelected);
	void TrackSkip(const struct FName& Track, int Sequence, float Duration, float Volume);
	void RecordTrackSkip();
	void TrackEnd(const struct FName& Track, int Sequence, float Volume);
	void RecordTrackEnd();
	void TrackStart(const struct FName& Track, int Sequence, float Volume);
	void RecordTrackStart(class UAkSoundCue* Cue);
};


// Class TAGame.MusicTrack_TA
// 0x0028 (0x0088 - 0x0060)
class UMusicTrack_TA : public UObject
{
public:
	class UAkSoundCue*                                 Cue;                                                      // 0x0060(0x0008) (Edit)
	class UTexture*                                    Icon;                                                     // 0x0068(0x0008) (Edit)
	struct FScriptDelegate                             __NextTrackAction__Delegate;                              // 0x0070(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0070(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicTrack_TA");
		return ptr;
	}


	void NextTrackAction(class UMusicTrack_TA* Track);
};


// Class TAGame.IMusicTracklist_TA
// 0x0000 (0x0060 - 0x0060)
class UIMusicTracklist_TA : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IMusicTracklist_TA");
		return ptr;
	}


	int Num();
	void NextTrack();
};


// Class TAGame.__GFxData_MusicPlayer_TA__MergePlaylists_183C8719415B8E32053903936465BA1A
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_MusicPlayer_TA__MergePlaylists_183C8719415B8E32053903936465BA1A : public UObject
{
public:
	TArray<struct FGFxMusicPlaylist>                   NewPlaylists;                                             // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_MusicPlayer_TA__MergePlaylists_183C8719415B8E32053903936465BA1A");
		return ptr;
	}


	bool __GFxData_MusicPlayer_TA__MergePlaylists_183C8719415B8E32053903936465BA1A(const struct FGFxMusicPlaylist& P);
};


// Class TAGame.__GFxData_MusicPlayer_TA__HandleThemeChange_BA5DD9DC4548A585FE97C1A82D9B0BB7
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_MusicPlayer_TA__HandleThemeChange_BA5DD9DC4548A585FE97C1A82D9B0BB7 : public UObject
{
public:
	TScriptInterface<class UIMusicTracklistBuilder>    DefaultBuilder;                                           // 0x0060(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_MusicPlayer_TA__HandleThemeChange_BA5DD9DC4548A585FE97C1A82D9B0BB7");
		return ptr;
	}


	void ____GFxData_MusicPlayer_TA__HandleThemeChange_BA5DD9DC4548A585FE97C1A82D9B0BB7____GFxData_MusicPlayer_TA__HandleThemeChange_BA5DD9DC4548A585FE97C1A82D9B0BB7_FE2EC7F14F6C7455A33D589D27E44CDF();
	void __GFxData_MusicPlayer_TA__HandleThemeChange_BA5DD9DC4548A585FE97C1A82D9B0BB7(class UMusicTrack_TA* _);
};


// Class TAGame.GFxData_Nameplate_TA
// 0x003C (0x00D0 - 0x0094)
class UGFxData_Nameplate_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	float                                              HideFullNameplateDistance;                                // 0x0098(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FString                                     PlayerName;                                               // 0x00A0(0x0010) (NeedCtorLink, DataBinding)
	int                                                Team;                                                     // 0x00B0(0x0004) (DataBinding)
	unsigned long                                      bHideFullNameplate : 1;                                   // 0x00B4(0x0004) (DataBinding)
	unsigned long                                      bIsDistracted : 1;                                        // 0x00B4(0x0004) (DataBinding)
	unsigned long                                      bLocalPlayer : 1;                                         // 0x00B4(0x0004) (DataBinding)
	unsigned long                                      bShowShortcut : 1;                                        // 0x00B4(0x0004) (Transient)
	class UNameplateComponent_TA*                      NameplateComponent;                                       // 0x00B8(0x0008) (ExportObject, Transient, Component, EditInline)
	class UProfileGameplaySave_TA*                     GameplaySettings;                                         // 0x00C0(0x0008) (Transient)
	class UPersona_TA*                                 Persona;                                                  // 0x00C8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Nameplate_TA");
		return ptr;
	}


	void __GFxData_Nameplate_TA__HandleProfileSet_784620D24395F891E2BFD29D28DEFE8C(class UProfileGameplaySave_TA* Settings);
	void SetShowShortcut(bool bValue);
	void Tick();
	void HandlePersonaUpdated(class UPersona_TA* InPersona);
	void HandlePRIDistracted(class APRI_TA* InPRI);
	void SetPlayerName(class APRI_TA* InPRI);
	class UOnlineGame_X* GetOnlineGame();
	void HandlePlayerNameSet(class UNameplateComponent_TA* InNameplateComponent);
	void SetNameplateComponent(class UNameplateComponent_TA* InNameplateComponent);
	void HandleProfileSet(class ULocalPlayer_TA* InLocalPlayer);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_Party_TA
// 0x0060 (0x00F8 - 0x0098)
class UGFxData_Party_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxPartyMember>                     Members;                                                  // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	int                                                MaxPartySize;                                             // 0x00A8(0x0004) (DataBinding)
	struct FName                                       Processing;                                               // 0x00AC(0x0008) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	class UOnlineGameParty_X*                          OnlineParty;                                              // 0x00B8(0x0008) (Transient)
	class UPersonas_TA*                                PersonasData;                                             // 0x00C0(0x0008) (Transient)
	class UOnlineClubCache_X*                          Clubs;                                                    // 0x00C8(0x0008) (ExportObject, Component, EditInline)
	class UVanitySetManager_TA*                        VanityManager;                                            // 0x00D0(0x0008)
	TEnumAsByte<EPsyNetPartyStatus>                    PsyNetPartyStatus;                                        // 0x00D8(0x0001) (DataBinding)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00D9(0x0007) MISSED OFFSET
	struct FString                                     RegionRestrictedPlayerTrade;                              // 0x00E0(0x0010) (Const, Localized, NeedCtorLink)
	class UGFxModal_X*                                 PartyErrorModal;                                          // 0x00F0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Party_TA");
		return ptr;
	}


	struct FUniqueNetId __GFxData_Party_TA__ActivatePartyUp_ED46E6F44B29CF415F55A090A715D401(const struct FGFxPartyMember& M);
	struct FUniqueNetId __GFxData_Party_TA__ActivatePartyUp_196AEDD243CBB028C43C709C478045CC(class APRI_TA* T);
	struct FUniqueNetId __GFxData_Party_TA__RebuildPartyData_F889B67F40E8318CBB15F39CA3B1D5AD(const struct FPartyMember& PMember);
	void HandlePlayerTradeInviteError(class UOnlineMessageComponent_X* Component, class UPartyMessage_InviteToTradeError_X* Message);
	void HandleFollowTheLeaderToMainMenu(class UGFxModal_X* Modal);
	void HandleLeaderChange(class UOnlineGameParty_X* PartyObject);
	void HandleLeaderLeftOnlineGame(class UOnlineGameParty_X* PartyObject);
	void ClearPartyJoinGameDelegates();
	void HandlePartyJoinGameSuccess(class UOnlineGameParty_X* PartyObject);
	void HandlePartyJoinGameError(class UOnlineGameParty_X* PartyObject, const struct FString& LocalizedString);
	void HandlePartyJoinGameConfirmed(class UGFxModal_X* Modal);
	void HandlePartyJoinGameConfirmation(class UOnlineGameParty_X* PartyObject);
	void HandlePartyError(class UOnlineGameParty_X* PartyObject, class UError* Error);
	void HandleReceivedPartyPersonaInfo(class URPC_GetPersonaInfo_TA* RPC);
	int SortMembersCallback(const struct FGFxPartyMember& A, const struct FGFxPartyMember& B);
	void RebuildPartyData(TArray<struct FUniqueNetId>* MapLocal_A09C4E204B4A225D36655D9CA2D4D748);
	void RebuildPartyDataDelayed();
	void OnPartyChanged(class UOnlineGameParty_X* PartyObject);
	bool ProcessInvitationResponse(class UOnlineGameParty_X* Party, const struct FScriptDelegate& JoinPartyCallback, struct FUniqueLobbyId* PartyID, struct FUniqueNetId* InviterId, class UGFxModal_X** CreatedModal);
	void OnPlayerInvitedSilent(class UOnlineGameParty_X* Party, const struct FScriptDelegate& JoinPartyCallback, struct FUniqueLobbyId* PartyID, struct FUniqueNetId* InviterId);
	void JoinAttempt(class UOnlineGameParty_X* Party, const struct FScriptDelegate& JoinPartyCallback, struct FUniqueLobbyId* PartyID, struct FUniqueNetId* InviterId);
	void OnPlayerInvited(class UOnlineGameParty_X* Party, const struct FScriptDelegate& JoinPartyCallback, struct FUniqueLobbyId* PartyID, struct FUniqueNetId* InviterId);
	void HandleGetAvatar(const struct FUniqueNetId& InPlayerId, class UTexture* Avatar, const struct FString& OnlinePlayerName);
	void SetLeader(int Index);
	void OnPartyMembersPersonaUpdated();
	void OnPlayerTradeEnded();
	void HandleCloseInviteToTrade(class UOnlineGameParty_X* PartyObject, bool bWasCanceled);
	void OnPlayerTradeStarted();
	void HandleAcceptedInviteToTrade(class UOnlineGameParty_X* PartyObject);
	void HandleCancelInviteToTrade(class UGFxModal_X* Modal);
	void HandleAcceptInviteToTrade(class UGFxModal_X* Modal);
	void OnAnotherInviteToTrade(int MemberIdx);
	void HandleAnotherInviteToTrade(class UOnlineGameParty_X* PartyObject, const struct FUniqueNetId& InMemberId);
	void SetSearchingStatus(bool bSearching, TEnumAsByte<ESearchStatusOwner> StatusOwner);
	void HandleInviteToTrade(class UOnlineGameParty_X* PartyObject, const struct FUniqueNetId& InMemberId);
	bool IsInSameMatch(int PartyMemberIdx);
	void HandleJoinFriend();
	void JoinFriend(int PartyMemberIdx);
	void InvitePlayerToTrade(int Index);
	void HandlePlayerInMatchChanged(class UOnlineGameParty_X* PartyObject, const struct FUniqueNetId& InMemberId);
	void HandlePlayerIsCurrentlyTrading(class UOnlineGameParty_X* PartyObject, const struct FUniqueNetId& InMemberId);
	void HandlePlayerTradingChanged(class UOnlineGameParty_X* PartyObject, const struct FUniqueNetId& InMemberId, bool bIsPlayerTrading);
	void KickPlayer(int Index);
	void ShowInviteUI();
	bool CanSendPartyInviteToUser(const struct FUniqueNetId& PlayerID);
	void OnConfirmLeaveParty(class UGFxModal_X* Modal);
	void LeaveParty();
	void OnPartyCreatedWithoutInvite();
	void OnConfirmCreatePlatformParty(class UGFxModal_X* Modal);
	void AskCreatePlatformParty();
	void OnPartyCreated(class UOnlineGameParty_X* Party, bool bWasSuccessful);
	void CreateParty();
	bool IsProcessing();
	void HandleProcessingStateChanged(class UOnlineGameParty_X* P);
	void HandleProfileSet(class ULocalPlayer_TA* LocalPlayer);
	void OnRemoved();
	TEnumAsByte<EPsyNetPartyStatus> GetPsyNetPartyStatus();
	bool IsTradePlatformRestricted(const struct FUniqueNetId& TradeTarget);
	bool ActivatePartyUp(TArray<struct FUniqueNetId>* MapLocal_ADD86A6D4BBBB1D7DCF49D9C6988C4B0, TArray<struct FUniqueNetId>* MapLocal_EB7A25E14965FBDBA48BC38B5CE2230F, TArray<struct FUniqueNetId>* DifferenceLocal_86C9F0F3451366EC6B41C494156A0D0E);
	bool CanTradeWithPlayer(const struct FUniqueNetId& MemberId);
	void UpdatePsyNetPartyStatus();
	void HandlePerConChanged(class UPerCon_X* PerCon);
	void HandleConnectionChanged(class UPsyNetConnection_X* Connection);
	void HandlePrimaryPlayerChanged(class UOnlineGameAccount_X* InAccount, const struct FUniqueNetId& PlayerID);
	void HandlePsyNetConfigChanged(class UPsyNetConfig_X* Config);
	void HandleClubUpdated(class UOnlineClubCache_X* Cache, class UClubDetails_X* ClubDetails);
	void OnShellSet();
};


// Class TAGame.ServerStartVoteEvent_TA
// 0x0018 (0x0078 - 0x0060)
class UServerStartVoteEvent_TA : public UObject
{
public:
	TArray<struct FPartyInfo>                          Parties;                                                  // 0x0060(0x0010) (NeedCtorLink)
	class AActor*                                      VoteOwner;                                                // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ServerStartVoteEvent_TA");
		return ptr;
	}

};


// Class TAGame.StayAsPartySystem_TA
// 0x0000 (0x0060 - 0x0060)
class UStayAsPartySystem_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StayAsPartySystem_TA");
		return ptr;
	}


	class AStayAsPartyVoter_TA* STATIC___StayAsPartySystem_TA__StartStayAsPartyVote_FD1A6D804513BB2A1404F8B42E5DC7DB(const struct FPartyInfo& Party);
	bool STATIC_IsOneParty(TArray<class APRI_TA*>* PRIs);
	class UGFxData_PRI_TA* STATIC_GetPRIData(class AGFxHUD_TA* InHUD, class APRI_TA* InPRI);
	void STATIC_PlayerSentPartyInvites(class APRI_TA* PRI);
	bool STATIC_DidPlayerSendPartyInvites(class APRI_TA* PRI);
	TArray<class APRI_TA*> STATIC_FindHumanTeammatesOfID(TArray<class APRI_TA*> PRIs, const struct FUniqueNetId& PlayerID, TArray<class APRI_TA*>* ArrayInitializer_1D66F4BE4BC7032F14C2BC8DB0145006, TArray<class APRI_TA*>* FilterLocal_69EDF24F4E2125F3D6C5C1B7AE7FB5EE);
	bool STATIC_IsLocalPlayerActive(class ULocalPlayer* LP);
	void STATIC_StayAsPartyLeader_Removed(class UOnlinePlayer_TA* OnlinePlayer, class UStayAsPartyLeader_TA* Leader, struct FUniqueNetId* StructInitializer_B713145C42624577312E688B253D1D33);
	void STATIC_StayAsPartyLeader_Added(class UOnlinePlayer_TA* OnlinePlayer, class UStayAsPartyLeader_TA* Leader);
	void STATIC_SetVoteActive(TArray<class APRI_TA*> PRIs, bool bActive);
	void STATIC_GFxPlayerDisconnected(class UNetMode_Client* NetMode, class APRI_TA* PRI, class UPlayerRemovedEvent_TA* DisconnectedEvent, TArray<class APRI_TA*>* ArrayInitializer_0F16A2774090D7F408B4FE935AEADCF6);
	void STATIC_GFxLeftParty(class UNetMode_Client* NetMode, class APRI_TA* PRI, class UPartyLeaderChangedEvent_TA* LeaderChanged, struct FUniqueNetId* StructInitializer_15021B3E4F07094345EF918A8D757F1C, TArray<class APRI_TA*>* ArrayInitializer_E18921E54EDFA508BA5B8083D55C5B44);
	void STATIC_GFxPlayerJoinedParty(class UNetMode_Client* NetMode, class ATeam_TA* Team, class APRI_TA* PRI, class UPartyLeaderChangedEvent_TA* LeaderChanged, struct FUniqueNetId* StructInitializer_5FC15B5742E838D7A2A67588A7E3C305, TArray<class APRI_TA*>* ArrayInitializer_3BB304864978FB9EDE18989570BEDCBF, TArray<class APRI_TA*>* ArrayInitializer_5EB1F9564A761F9295FBA8BAB1AB502E);
	void STATIC_GFxLeaderActive(class UNetMode_Client* NetMode, class APRI_TA* PRI, class AStayAsPartyVoter_TA* Voter, class AStayAsPartyVoteYes_TA* YesVote, TArray<class APRI_TA*>* FilterLocal_5972E7F54B04DAE8C78970AC13FC667F, TArray<class APRI_TA*>* ArrayInitializer_50BAC2BD433823C96B32D4B2002F9BB8);
	void STATIC_GFxDisableButton(class UGFxData_GameEvent_TA* GFxGame, class AStayAsPartyVoteYes_TA* _);
	void STATIC_GFxShowStayAsPartyButton(class UGFxData_GameEvent_TA* GFxGame, class UGFxStayAsPartyDisplayButton_TA* DisplayCommand);
	void STATIC_FormParty(class APRI_TA* LeaderPRI, class UServerFormPartyEvent_TA* FormEvent);
	void STATIC_HandleClientConfirmedInvite(class UStayAsPartyVote_TA* Vote, class ATeam_TA* Team, class APRI_TA* ConfirmedFollower, class UServerInviteeConfirmedMergeEvent_TA* _, TArray<class APRI_TA*>* ArrayResultLocal_C7EA153D4B1673D371ECF186B16CF6EA, class UServerFormPartyEvent_TA** ObjectInitializer_A27A72854A362DBE362A95BCE074FC4D);
	void STATIC_BroadcastPartyEvent(class APRI_TA* PRI, class UPartyLeaderChangedEvent_TA** ObjectInitializer_592D4B744ED345210C61B69C78737031);
	void STATIC_UnregisterForLeaderChanged(class APRI_TA* PRI);
	void STATIC_RegisterForLeaderChanged(class APRI_TA* PRI);
	void STATIC_UnsubscribeToLeaderChanges(class APRI_TA* PRI);
	void STATIC_ReportLeaderChanges(class APRI_TA* PRI, class UClientStayAsPartyVoteBeginEvent_TA* _);
	void STATIC_ReplicateVoteYes_Removed(class UStayAsPartyVote_TA* Vote, class APRI_TA* PRI, class AStayAsPartyVoter_TA* Voter, class AStayAsPartyVoteYes_TA* InVoteYes);
	void STATIC_ReplicateVoteYes_Added(class UNetMode_Server* NetMode, class APRI_TA* PRI, class AStayAsPartyVoteYes_TA* YesVote);
	void STATIC_ReplicateVoter_Removed(class UNetMode_Server* NetMode, class APRI_TA* PRI, class AStayAsPartyVoter_TA* PartyVoter);
	void STATIC_ReplicateVoter_Added(class UNetMode_Server* NetMode, class APRI_TA* PRI, class AStayAsPartyVoter_TA* PartyVoter);
	void STATIC_VoteYes_Removed(class UStayAsPartyVote_TA* Vote, class AStayAsPartyVoter_TA* Voter, class AStayAsPartyVoteYes_TA* InVoteYes);
	void STATIC_VoteYes_Added(class AStayAsPartyVoter_TA* Voter, class AStayAsPartyVoteYes_TA* InVoteYes);
	void STATIC_ReplicateInviteeMergeEvent(class UNetMode_Server* NetMode, class APRI_TA* PRI, class UMergePartyEvent_TA* MergeEvent);
	void STATIC_ProcessVote(class UStayAsPartyVote_TA* Vote, class AStayAsPartyVoter_TA* Voter, class AStayAsPartyVoteYes_TA* PlayerVote);
	void STATIC_HandlePartyChanged(class UStayAsPartyVote_TA* Vote, class UPartyLeaderChangedEvent_TA* PartyEvent);
	void STATIC_VoterRemoved(class UStayAsPartyVote_TA* Vote, class AStayAsPartyVoter_TA* Voter);
	void STATIC_VoterDisconnected(class UNetMode_Server* NetMode, class AStayAsPartyVoter_TA* Voter, class UPlayerRemovedEvent_TA* DisconnectedEvent);
	void STATIC_AddVoterToVote(class UStayAsPartyVote_TA* Vote, class AStayAsPartyVoter_TA* Voter);
	void STATIC_NotifyPlayersVoteStarted(class APlayerController_TA* InController, class UServerVoteStartedEvent_TA* _);
	void STATIC_StartStayAsPartyVote(class UServerStartVoteEvent_TA* InEvent, TArray<class AStayAsPartyVoter_TA*>* MapLocal_494D38334D4FF32691D72090D60E4C64, class UServerVoteStartedEvent_TA** ObjectInitializer_8B027644450D2BF5EAE300AC7D75207B);
	void STATIC_CreateVoteStartEvent(class UNetMode_Server* NetMode, class ATeam_TA* Team, class UGameEventFinishedState_TA* _);
	void STATIC_ProcessEndMatch(class UNetMode_Client* NetMode, class ATeam_TA* Team, class UGameEventFinishedState_TA* _);
};


// Class TAGame.GFxModal_Error_TA
// 0x0000 (0x00C8 - 0x00C8)
class UGFxModal_Error_TA : public UGFxModal_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxModal_Error_TA");
		return ptr;
	}

};


// Class TAGame.__GFxData_Party_TA__OnPlayerInvited_4DAFEDC0480845606E7CBEB5E9143B74
// 0x0068 (0x00C8 - 0x0060)
class U__GFxData_Party_TA__OnPlayerInvited_4DAFEDC0480845606E7CBEB5E9143B74 : public UObject
{
public:
	class UOnlineGameParty_X*                          Party;                                                    // 0x0060(0x0008)
	struct FUniqueLobbyId                              PartyID;                                                  // 0x0068(0x0010)
	struct FUniqueNetId                                InviterId;                                                // 0x0078(0x0038)
	struct FScriptDelegate                             JoinPartyCallback;                                        // 0x00B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Party_TA__OnPlayerInvited_4DAFEDC0480845606E7CBEB5E9143B74");
		return ptr;
	}


	void __GFxData_Party_TA__OnPlayerInvited_4DAFEDC0480845606E7CBEB5E9143B74(class UGFxModal_X* _);
};


// Class TAGame.RPC_GetPersonaInfo_TA
// 0x0030 (0x0130 - 0x0100)
class URPC_GetPersonaInfo_TA : public URPC_X
{
public:
	TArray<struct FUniqueNetId>                        PlayerIDs;                                                // 0x0100(0x0010) (NeedCtorLink)
	TArray<struct FPsyNetPersonaData>                  PlayerData;                                               // 0x0110(0x0010) (Transient, NeedCtorLink)
	TArray<struct FOnlineFriend>                       FriendsData;                                              // 0x0120(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetPersonaInfo_TA");
		return ptr;
	}


	void OnSuccess(TArray<struct FOnlineFriend>* MapLocal_D9E005EA4F0814C5447FBF8DCB74AD23);
	class URPC_GetPersonaInfo_TA* SetPlayerIDs(TArray<struct FUniqueNetId> InPlayerIDs);
};


// Class TAGame.__GFxData_Party_TA__HandlePartyError_5F55BB5F4DB5B517AB808189A9D03950
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Party_TA__HandlePartyError_5F55BB5F4DB5B517AB808189A9D03950 : public UObject
{
public:
	class UError*                                      Error;                                                    // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Party_TA__HandlePartyError_5F55BB5F4DB5B517AB808189A9D03950");
		return ptr;
	}


	void __GFxData_Party_TA__HandlePartyError_5F55BB5F4DB5B517AB808189A9D03950(class UGFxModal_X* Modal);
};


// Class TAGame.GFxData_ErrorModals_TA
// 0x0030 (0x00C8 - 0x0098)
class UGFxData_ErrorModals_TA : public UGFxDataSingleton_X
{
public:
	class AGameEvent_TA*                               GameEvent;                                                // 0x0098(0x0008) (Edit)
	TArray<struct FPendingError>                       PendingErrors;                                            // 0x00A0(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __OnErrorModalCreated__Delegate;                          // 0x00B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ErrorModals_TA");
		return ptr;
	}


	void __GFxData_ErrorModals_TA__OnShellSet_0DAD576640C7CC9B78DCF7ACB697F242(class AGameEvent_TA* _);
	void __GFxData_ErrorModals_TA__OnShellSet_6EDABA9D446E9E6C2FDEA4983E5C0269(class AGameInfo_X* _);
	void __GFxData_ErrorModals_TA__OnShellSet_D17361934138B7B29345C5BF4E10AFDF(class AGFxHUD_TA* _);
	void __GFxData_ErrorModals_TA__ShowError_D0D8223F417DCD5ED64F929093A75B27(class UGFxModal_X* _);
	void ShowError(bool bForce);
	bool CanShowError();
	void AlertError(class UError* Error, const struct FScriptDelegate& Callback, struct FPendingError* StructInitializer_C0D85D2C492BC13E7F7B59958EFF94B1);
	void OnShellSet();
	void OnErrorModalCreated(class UGFxModal_X* Modal);
};


// Class TAGame.GFxData_Persona_TA
// 0x0014 (0x00A8 - 0x0094)
class UGFxData_Persona_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class UPersona_TA*                                 Persona;                                                  // 0x0098(0x0008)
	class UTexture*                                    PlayerAvatar;                                             // 0x00A0(0x0008) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Persona_TA");
		return ptr;
	}


	void HandleGetAvatar(const struct FUniqueNetId& InPlayerId, class UTexture* Avatar, const struct FString& OnlinePlayerName);
	void UpdatePlayerAvatar(TArray<struct FUniqueNetId>* ArrayInitializer_69ECB62A407FB6365640D3BE156A20A3);
	void RemoveFromDataStore();
	void SetPersonaProxy(class UPersona_TA* InPersona);
};


// Class TAGame.__GFxData_Party_TA__ProcessInvitationResponse_C7DB263348062B77D6B003B0BA63EB70
// 0x0028 (0x0088 - 0x0060)
class U__GFxData_Party_TA__ProcessInvitationResponse_C7DB263348062B77D6B003B0BA63EB70 : public UObject
{
public:
	struct FScriptDelegate                             JoinPartyCallback;                                        // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FUniqueLobbyId                              PartyID;                                                  // 0x0078(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Party_TA__ProcessInvitationResponse_C7DB263348062B77D6B003B0BA63EB70");
		return ptr;
	}


	void __GFxData_Party_TA__ProcessInvitationResponse_C7DB263348062B77D6B003B0BA63EB70(class UGFxModal_X* _);
};


// Class TAGame.__GFxData_Party_TA__ActivatePartyUp_BA2404D448EF2F0860A29CB0D9DD4C50
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Party_TA__ActivatePartyUp_BA2404D448EF2F0860A29CB0D9DD4C50 : public UObject
{
public:
	class AStayAsPartyVoter_TA*                        PartyVoter;                                               // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Party_TA__ActivatePartyUp_BA2404D448EF2F0860A29CB0D9DD4C50");
		return ptr;
	}


	void __GFxData_Party_TA__ActivatePartyUp_BA2404D448EF2F0860A29CB0D9DD4C50(class UGFxModal_X* _);
};


// Class TAGame.StayAsPartyVoter_TA
// 0x0060 (0x02C8 - 0x0268)
class AStayAsPartyVoter_TA : public AActor
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0268(0x0038) (Net)
	TArray<struct FUniqueNetId>                        Followers;                                                // 0x02A0(0x0010) (NeedCtorLink)
	class AStayAsPartyVoteYes_TA*                      YesVote;                                                  // 0x02B0(0x0008)
	unsigned long                                      bSentPartyInvites : 1;                                    // 0x02B8(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02BC(0x0004) MISSED OFFSET
	class APRI_TA*                                     PRI;                                                      // 0x02C0(0x0008) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StayAsPartyVoter_TA");
		return ptr;
	}


	bool __StayAsPartyVoter_TA__GetPartyUpError_193CF6DA4AFEE881C168F49E656D088C(class APRI_TA* P);
	bool __StayAsPartyVoter_TA__GetPartyUpError_03E467884A24F702DB672BB2D0BDB4A7(class APRI_TA* P);
	bool __StayAsPartyVoter_TA__GetPartyUpError_3F7D009042CFCA89BB13A191D3F3D53E(class APRI_TA* P);
	void ServerJoinError(class UError* ReportedError);
	void ReportJoinError(class UError* ReportedError);
	void ServerStayAsPartyVote();
	bool CanPlayerPartyUpServer(struct FUniqueNetId* StructInitializer_76CDBA334FF15CB9C2C69F8D47E2488C);
	void VoteYes();
	bool GetPartyUpError(struct FString* Error, TArray<class APRI_TA*>* FilterLocal_3AF929B94144D33D80F312A1ECBB2B6B, TArray<class APRI_TA*>* FilterLocal_3E4198B54B6820C16D203EB53A747303);
	void RemovePartyFollower(struct FUniqueNetId* OldFollower);
	void AddPartyFollower(struct FUniqueNetId* NewFollower);
	void SetPartyFollowers(TArray<struct FUniqueNetId>* PartyFollowers);
	void Setup(const struct FUniqueNetId& InPlayerId, TArray<struct FUniqueNetId>* PartyFollowers);
	void Destroyed();
	void RefreshORSGroup();
	void OnOwnerChanged();
	class AStayAsPartyVoter_TA* STATIC_SpawnVoter(class AActor* VoterOwner, struct FUniqueNetId* VoterId, TArray<struct FUniqueNetId>* PartyFollowers);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class TAGame.GFxData_PlayerRecord_TA
// 0x007C (0x0110 - 0x0094)
class UGFxData_PlayerRecord_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	struct FString                                     PlayerIDString;                                           // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	unsigned long                                      bReported : 1;                                            // 0x00A8(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	struct FString                                     SanitizedPlayerName;                                      // 0x00B0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     PlayerName;                                               // 0x00C0(0x0010) (NeedCtorLink)
	class APRI_TA*                                     PRI;                                                      // 0x00D0(0x0008) (Transient)
	struct FUniqueNetId                                PlayerID;                                                 // 0x00D8(0x0038) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PlayerRecord_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void Report(unsigned char Reason);
	void HandleUniqueIdChanged(class APRI_X* InPRI);
	void HandlePlayerNameSanitized(const struct FString& Original, const struct FString& Sanitized);
	void HandlePlayerNameChanged(class APRI_X* InPRI);
	void OnRemoved();
	void SetPRI(class APRI_TA* InPRI);
	class UOnlineGame_X* GetOnlineGame();
};


// Class TAGame.MicroEventConfig_TA
// 0x0018 (0x0090 - 0x0078)
class UMicroEventConfig_TA : public UOnlineConfig_X
{
public:
	int                                                PlaylistId;                                               // 0x0078(0x0004) (Edit, DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x007C(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.MicroEventConfig_TA.StartTime
	unsigned char                                      UnknownData02[0x8];                                       // 0x0088(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.MicroEventConfig_TA.EndTime

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MicroEventConfig_TA");
		return ptr;
	}


	bool IsActive();
};


// Class TAGame.GFxData_PRI_TA
// 0x0164 (0x01F8 - 0x0094)
class UGFxData_PRI_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	struct FString                                     PlayerName;                                               // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     PlayerIDString;                                           // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     Platform;                                                 // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	class UTexture*                                    Avatar;                                                   // 0x00C8(0x0008) (DataBinding)
	int                                                Team;                                                     // 0x00D0(0x0004) (DataBinding)
	int                                                Score;                                                    // 0x00D4(0x0004) (DataBinding)
	int                                                Goals;                                                    // 0x00D8(0x0004) (DataBinding)
	int                                                Assists;                                                  // 0x00DC(0x0004) (DataBinding)
	int                                                Saves;                                                    // 0x00E0(0x0004) (DataBinding)
	int                                                Shots;                                                    // 0x00E4(0x0004) (DataBinding)
	int                                                Ping;                                                     // 0x00E8(0x0004) (DataBinding)
	int                                                BreakoutDamage;                                           // 0x00EC(0x0004) (DataBinding)
	unsigned long                                      bMvp : 1;                                                 // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bSpeaking : 1;                                            // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bMuted : 1;                                               // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bReady : 1;                                               // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bBotPlayer : 1;                                           // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bLocalPlayer : 1;                                         // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bDisconnected : 1;                                        // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bStayAsPartyActive : 1;                                   // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bSpectator : 1;                                           // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bSelected : 1;                                            // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bHighlighted : 1;                                         // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bGameEnded : 1;                                           // 0x00F0(0x0004) (Transient)
	unsigned long                                      bOnPodium : 1;                                            // 0x00F0(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00F4(0x0004) MISSED OFFSET
	struct FString                                     ConnectionStatus;                                         // 0x00F8(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     PartyID;                                                  // 0x0108(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     XPTitle;                                                  // 0x0118(0x0010) (NeedCtorLink, DataBinding)
	struct FColor                                      TitleColor;                                               // 0x0128(0x0004) (DataBinding)
	struct FColor                                      TitleGlowColor;                                           // 0x012C(0x0004) (DataBinding)
	int                                                SkillTier;                                                // 0x0130(0x0004) (DataBinding)
	int                                                Boost;                                                    // 0x0134(0x0004) (DataBinding)
	class APRI_TA*                                     PRI;                                                      // 0x0138(0x0008) (Transient)
	struct FUniqueNetId                                PlayerID;                                                 // 0x0140(0x0038) (Transient)
	float                                              PodiumSpotlightScreenPosX;                                // 0x0178(0x0004) (DataBinding)
	float                                              PodiumSpotlightScreenPosY;                                // 0x017C(0x0004) (DataBinding)
	struct FString                                     PrimaryTitle;                                             // 0x0180(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     SecondaryTitle;                                           // 0x0190(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     PrimaryTitleStat;                                         // 0x01A0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     SecondaryTitleStat;                                       // 0x01B0(0x0010) (NeedCtorLink, DataBinding)
	int                                                PrimaryStat;                                              // 0x01C0(0x0004) (DataBinding)
	int                                                SecondaryStat;                                            // 0x01C4(0x0004) (DataBinding)
	unsigned char                                      UnknownData02[0x8];                                       // 0x01C8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_PRI_TA.ClubID
	TEnumAsByte<EConnectionQualityState>               WorstConnectionQualityStateBeyondLatency;                 // 0x01D0(0x0001) (DataBinding)
	unsigned char                                      UnknownData03[0x3];                                       // 0x01D1(0x0003) MISSED OFFSET
	int                                                SpectatorShortcut;                                        // 0x01D4(0x0004) (DataBinding)
	class UGFxData_PlayerBanner_TA*                    GFxPlayerBanner;                                          // 0x01D8(0x0008) (Transient)
	class UGFxData_PlayerAvatar_TA*                    GFxPlayerAvatar;                                          // 0x01E0(0x0008) (Transient)
	class UGFxData_PlayerAvatarBorder_TA*              GFxPlayerBorder;                                          // 0x01E8(0x0008) (Transient)
	class UPersona_TA*                                 Persona;                                                  // 0x01F0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PRI_TA");
		return ptr;
	}


	bool IsActivePlayer();
	void HandleSpectatorShortcutChanged(class APRI_TA* InPRI);
	void HandleReplicatedNetStats();
	void HandleClub(class UClubDetails_X* Club);
	void HandleClubID();
	void UpdatePlayerAvatarBorder();
	void UpdatePlayerBanner();
	void UpdateScreenPosition(class UCanvas* MyCanvas, const struct FVector& WorldPosition, bool bHovered, bool bFocused);
	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void SetPlayerTitle(const struct FName& TitleId);
	void HandleTitleChanged(class APRI_TA* InPRI);
	void HandleReplacingBotChanged(class APRI_TA* InPRI);
	void InitStatTitle(const struct FMemberTitleStat& Stat, const struct FString& TitleLocalizationString, struct FString* StatTitle, int* StatValue, struct FString* StatPostfix);
	void HandleStatTitlesSet(class APRI_TA* InPRI);
	void HandleWonMVP(class APRI_TA* InPRI);
	void HandleSkillTierChanged(class APRI_TA* InPRI);
	void HandlePawnTypeChanged(class APRI_TA* InPRI);
	void HandlePartyLeaderChanged(class APRI_TA* InPRI);
	void SetDisconnected();
	void SetMuted(bool bNewMuted);
	void UpdateMuted();
	void HandleMuteChanged(class APlayerController_TA* PC, const struct FUniqueNetId& InPlayerId, bool bMute);
	void UpdatePRIData();
	void HandlePlayerTalking(class UOnlineGameVoice_X* SelfRef, const struct FUniqueNetId& InPlayerId, bool bTalking);
	void HandleReadyChanged(class APRI_TA* InPRI);
	void HandleTeamChanged(class APRI_X* InPRI);
	void HandleGetAvatar(const struct FUniqueNetId& InPlayerId, class UTexture* InAvatar, const struct FString& OnlinePlayerName);
	void UpdatePlayerAvatar();
	void HandleAvatarChange(const struct FUniqueNetId& InPlayerId);
	void HandleVanityUpdate(TEnumAsByte<EVanityType> VanityType);
	void HandlePersonaUpdated(class UPersona_TA* InPersona);
	void SetPersona(class UPersona_TA* InPersona);
	void HandleUniqueIdChanged(class APRI_X* InPRI);
	void HandleReceivedLocalPRI(class APlayerController_X* P);
	void HandlePlayerNameChanged(class APRI_X* InPRI);
	void OnRemoved();
	void HandleOwnerChanged(class APRI_TA* InPRI);
	void SetPRI(class APRI_TA* InPRI);
	struct FString GetReservationStatusString(TEnumAsByte<EReservationStatus> Status);
	void SetReservation(const struct FReplicatedReservationData& Reservation);
	class UOnlineGame_X* GetOnlineGame();
};


// Class TAGame.GFxData_PlayerAvatarBorder_TA
// 0x000C (0x00A0 - 0x0094)
class UGFxData_PlayerAvatarBorder_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class UPlayerAvatarBorder_TA*                      PlayerBorder;                                             // 0x0098(0x0008) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PlayerAvatarBorder_TA");
		return ptr;
	}


	void EquipColor(int InColorID);
	void EquipProduct(const struct FProductHashID& HashID);
	struct FUniqueNetId GetPlayerID();
	void SetBorder(class UPlayerAvatarBorder_TA* InBorder);
	class UGFxData_PlayerAvatarBorder_TA* STATIC_Create(class UGFxShell_X* InShell, class UPlayerAvatarBorder_TA* InBorder, const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxData_PlayerBanner_TA
// 0x000C (0x00A0 - 0x0094)
class UGFxData_PlayerBanner_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class UPlayerBanner_TA*                            PlayerBanner;                                             // 0x0098(0x0008) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PlayerBanner_TA");
		return ptr;
	}


	void EquipColor(int InColorID);
	void EquipProduct(const struct FProductHashID& HashID);
	struct FUniqueNetId GetPlayerID();
	void SetBanner(class UPlayerBanner_TA* InBanner);
	class UGFxData_PlayerBanner_TA* STATIC_Create(class UGFxShell_X* InShell, class UPlayerBanner_TA* InBanner, const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxData_PlayerAvatar_TA
// 0x000C (0x00A0 - 0x0094)
class UGFxData_PlayerAvatar_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class UPlayerAvatar_TA*                            PlayerAvatar;                                             // 0x0098(0x0008) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PlayerAvatar_TA");
		return ptr;
	}


	void EquipColor(int InColor);
	void EquipProduct(const struct FProductHashID& HashID);
	void SetAvatar(class UPlayerAvatar_TA* InPlayerAvatar);
	struct FUniqueNetId GetPlayerID();
	class UGFxData_PlayerAvatar_TA* STATIC_GetOrCreate(class UGFxShell_X* InShell, class UPlayerAvatar_TA* InAvatar);
};


// Class TAGame.__GFxData_PRI_TA__HandleOwnerChanged_63EB4ACC414F21E3D29202B2F4880E82
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_PRI_TA__HandleOwnerChanged_63EB4ACC414F21E3D29202B2F4880E82 : public UObject
{
public:
	class UProfileLoadoutSave_TA*                      LoadoutSave;                                              // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_PRI_TA__HandleOwnerChanged_63EB4ACC414F21E3D29202B2F4880E82");
		return ptr;
	}


	void __GFxData_PRI_TA__HandleOwnerChanged_63EB4ACC414F21E3D29202B2F4880E82();
};


// Class TAGame.GFxData_PrivateMatch_TA
// 0x0086 (0x019A - 0x0114)
class UGFxData_PrivateMatch_TA : public UGFxData_OnlineMatch_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	TArray<struct FGFxRegion>                          Regions;                                                  // 0x0118(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ServerName;                                               // 0x0128(0x0010) (Edit, NeedCtorLink, DataBinding)
	struct FString                                     Password;                                                 // 0x0138(0x0010) (Edit, NeedCtorLink, DataBinding)
	int                                                SelectedMaxPlayerCount;                                   // 0x0148(0x0004) (Edit, DataBinding)
	unsigned long                                      bPublicMatch : 1;                                         // 0x014C(0x0004) (Edit, DataBinding)
	int                                                MinServerNameLength;                                      // 0x0150(0x0004) (Edit, Const)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	struct FString                                     AlreadySearchingMessage;                                  // 0x0158(0x0010) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     AlreadySearchingForPublicMessage;                         // 0x0168(0x0010) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     ServerNameLengthError;                                    // 0x0178(0x0010) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     DuplicateLanServerMessage;                                // 0x0188(0x0010) (Edit, Const, Localized, NeedCtorLink)
	TEnumAsByte<ESearchStatusOwner>                    SearchStatusOwner;                                        // 0x0198(0x0001) (Transient)
	TEnumAsByte<ECustomMatchSettingsType>              SettingsType;                                             // 0x0199(0x0001) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PrivateMatch_TA");
		return ptr;
	}


	TEnumAsByte<ESearchStatusOwner> GetStatusOwnerValue();
	void HandleLanSearchComplete(bool bCancelled);
	void HandleLanResponse(struct FServerResult* HostResponse);
	void UpdateOnlineStatus();
	void StartLanSearch();
	void UpdateCustomMatchSettings();
	void StartSearchWithSettings(struct U_Types_X_FCustomMatchSettings* Settings);
	void StartSearch();
	void StartClubSearch();
	struct FString CreateRandom16CharGuidString();
	void CancelSearch();
	void SetRegionSelection(int Row, bool bSelected);
	struct FString GetPreferredRegion();
	void HandleRegionsSynced(class UGFxData_Regions_TA* RegionsData, TArray<struct FString>* ArrayInitializer_A6D087254D424B72E4032488012D54CC, struct FGFxRegion* StructInitializer_F07394B84F162393EA2E36B1237F899D);
	void SetPublic(bool bValue);
	void SetPassword(const struct FString& InPassword);
	void SetServerName(const struct FString& InServerName);
	void SetSelectedMaxPlayerCount(int MaxPlayerCount);
	struct FString GetCustomMatchRegion();
	void SetCustomMatchSettings(struct U_Types_X_FCustomMatchSettings* InSettings);
	struct U_Types_X_FCustomMatchSettings GetCustomMatchSettings();
	void OnShellSet();
};


// Class TAGame.CustomMatchSettingsSave_TA
// 0x0098 (0x0160 - 0x00C8)
class UCustomMatchSettingsSave_TA : public USaveObject_TA
{
public:
	struct U_Types_X_FCustomMatchSettings              Settings;                                                 // 0x00C8(0x0090) (NeedCtorLink)
	class UGameTags_TA*                                GameTags;                                                 // 0x0158(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CustomMatchSettingsSave_TA");
		return ptr;
	}


	struct U_Types_X_FCustomMatchSettings GetSettings();
	void OnLoad();
};


// Class TAGame.PrivateMatchSettingsSave_TA
// 0x0010 (0x0170 - 0x0160)
class UPrivateMatchSettingsSave_TA : public UCustomMatchSettingsSave_TA
{
public:
	struct FString                                     Region;                                                   // 0x0160(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PrivateMatchSettingsSave_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_Privileges_TA
// 0x0004 (0x009C - 0x0098)
class UGFxData_Privileges_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bCheckingPrivileges : 1;                                  // 0x0098(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Privileges_TA");
		return ptr;
	}


	void HandlePrivilegeCheck(class UPrivilegeCheck_X* PrivilegeCheck);
	void PrivilegeCheckFail();
	void PrivilegeCheckSuccess();
	void TryToUseUGC();
	void TryToUsePsyNet();
	void TryToPlayOnline();
	void TryToViewLeaderboards();
	void TryToBrowseInternet();
	void UpdateCheckingPrivileges();
	void HandlePrivilegesCheck(class UOnlineGamePrivileges_X* Privileges);
	void OnShellSet();
};


// Class TAGame.__GFxData_Products_TA__LoadProduct_7B4F5AF649CD2104C01F08897B41D2DF
// 0x0005 (0x0065 - 0x0060)
class U__GFxData_Products_TA__LoadProduct_7B4F5AF649CD2104C01F08897B41D2DF : public UObject
{
public:
	struct FProductHashID                              InHashID;                                                 // 0x0060(0x0004)
	TEnumAsByte<EProductThumbnailSize>                 ThumbnailSize;                                            // 0x0064(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Products_TA__LoadProduct_7B4F5AF649CD2104C01F08897B41D2DF");
		return ptr;
	}


	bool __GFxData_Products_TA__LoadProduct_7B4F5AF649CD2104C01F08897B41D2DF(class ULoadingProduct_TA* P);
};


// Class TAGame.Wallet_TA
// 0x0088 (0x00E8 - 0x0060)
class UWallet_TA : public UObject
{
public:
	TArray<struct FCurrency>                           Currencies;                                               // 0x0060(0x0010) (Edit, NeedCtorLink)
	class UOnlineProductStoreSet_TA*                   CurrencyProductSet;                                       // 0x0070(0x0008) (ExportObject, Component, EditInline)
	int                                                RocketBucksCurrencyID;                                    // 0x0078(0x0004) (Const)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	class USpecialEventConfig_TA*                      SpecialEvent;                                             // 0x0080(0x0008) (Edit)
	struct FScriptDelegate                             __EventWalletUpdated__Delegate;                           // 0x0088(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0088(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventWalletCurrencyUpdated__Delegate;                   // 0x00A0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00A0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventWalletCurrencyDataUpdated__Delegate;               // 0x00B8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00B8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventReceivedCurrencyDrop__Delegate;                    // 0x00D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00D0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Wallet_TA");
		return ptr;
	}


	void __Wallet_TA__SetCurrencyTotals_29CA097D4B60FE0ED27493AD7546655A(const struct FCurrency& C);
	void __Wallet_TA__SetCurrencyTradeholds_3EBC454241B6161919770CB876DF6A34(const struct FCurrency& C);
	void __Wallet_TA__OnSpecialEventSet_CACC1D994E3F687DD7BC3EB612ABA1B6();
	void __Wallet_TA__OnSpecialEventSet_7806BC9C45B07AF562314487B90FCEFE();
	void GiveCurrencyDrops(TArray<struct FCurrency>* Drops);
	void GiveCurrencyDrop(struct FCurrency* Drop);
	void OnSpecialEventSet();
	void UpdateWalletCurrencies(TArray<struct FCurrency>* InCurrencies);
	void UpdateCurrencyImage(int InCurrencyID, class UTexture* SmallImage, class UTexture* LargeImage);
	void UpdateCurrencyName(int InCurrencyID, const struct FString& LocalizedName);
	void HandleCurrencyAddedNotification(class UPsyNetService_CurrencyAdded_TA* Service);
	void DecreaseCurrency(int InCurrencyID, int Amount);
	void IncreaseCurrency(int InCurrencyID, int Amount);
	void SetCurrencyTradehold(int InCurrencyID, int InTradehold);
	void SetCurrencyTotal(int InCurrencyID, int Amount);
	struct FCurrency GetCurrency(int InCurrencyID);
	void SetCurrencyTradeholds(TArray<struct FCurrency>* InCurrencies);
	void SetCurrencyTotals(TArray<struct FCurrency>* InCurrencies);
	void HandleGetWallet(class URPC_GetWallet_TA* RPC);
	void HandleOnlinePlayerRemoved(class UOnlinePlayer_X* InOnlinePlayer);
	void HandlePerConConnected(class UPsyNetConnection_X* InPsyNetConnection);
	void GetWallet();
	void GetWalletDelayed();
	void Init(struct FOnlineProductData* StructInitializer_2D5EF5734643203FC28DF5A3C275E9B0);
	void EventReceivedCurrencyDrop(class UWallet_TA* Wallet, struct FCurrency* Drop);
	void EventWalletCurrencyDataUpdated(class UWallet_TA* Wallet, int CurrencyID);
	void EventWalletCurrencyUpdated(class UWallet_TA* Wallet, int CurrencyID);
	void EventWalletUpdated(class UWallet_TA* Wallet);
};


// Class TAGame.ProductsHashSave_TA
// 0x0038 (0x0100 - 0x00C8)
class UProductsHashSave_TA : public USaveObject_TA
{
public:
	TArray<struct FProductHashID>                      HashIDs;                                                  // 0x00C8(0x0010) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData00[0x10];                                      // 0x00D8(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.ProductsHashSave_TA.InstanceIDs
	struct FScriptDelegate                             __HashIDs__ChangeNotify;                                  // 0x00E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductsHashSave_TA");
		return ptr;
	}


	struct FProductHashID __ProductsHashSave_TA__OnLoad_FE67E853443A404087999DA4271500EF();
	void __ProductsHashSave_TA__UpdateInstanceIDs_5A62F6484AC0D78D2C6E3D930B6D9BAA(const struct FProductHashSource& P);
	void __HashIDs__ChangeNotifyFunc();
	void UpdateInstanceIDs(const struct FProductHashID& HashID, class USaveData_TA* SaveData, bool bSaved, TArray<struct FProductHashSource>* ArrayResultLocal_71EE1DC14A7B6B60BE9FB3890BD217AE);
	void OnOnlineProductRemoved(class UOnlineProduct_TA* OnlineProduct, class USaveData_TA* SaveData);
	void OnNewOnlineProduct(class UOnlineProduct_TA* OnlineProduct);
	int NumProducts();
	void SetIsSaved(const struct FProductHashID& HashID, class USaveData_TA* SaveData, bool bSaved);
	bool GetIsSaved(const struct FProductHashID& HashID);
	void OnLoad(TArray<struct FProductHashID>* MapLocal_B445977D4914C878CEBB7782E8861CCF, TArray<struct FProductHashID>* DistinctLocal_4702C7F94B51117B220D3DA7943962E9);
};


// Class TAGame.ProductsArchiveSave_TA
// 0x0028 (0x0128 - 0x0100)
class UProductsArchiveSave_TA : public UProductsHashSave_TA
{
public:
	TArray<struct FProductHashID>                      ArchivedHashIDs;                                          // 0x0100(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __EventProductArchived__Delegate;                         // 0x0110(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductsArchiveSave_TA");
		return ptr;
	}


	void __ProductsArchiveSave_TA__GetVersionDelegates_EF4AE45C459100C32A8355AE86111D5B(class UObject* SaveObj);
	void GetVersionDelegates(TArray<struct FScriptDelegate>* VersionDelegates);
	void SetIsArchived(const struct FProductHashID& HashID, class USaveData_TA* SaveData, bool bArchived);
	bool GetIsArchived(const struct FProductHashID& HashID);
	void EventProductArchived(const struct FProductHashID& HashID);
};


// Class TAGame.ProductsFavoriteSave_TA
// 0x0010 (0x0110 - 0x0100)
class UProductsFavoriteSave_TA : public UProductsHashSave_TA
{
public:
	TArray<int>                                        FavoritedHashes;                                          // 0x0100(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductsFavoriteSave_TA");
		return ptr;
	}


	void __ProductsFavoriteSave_TA__GetVersionDelegates_88D978B14A530C05D5E12D8646FF1DF4(class UObject* SaveObj, struct FProductHashID* StructInitializer_31BE046B445934D73D3E5D932A2A63E3);
	void GetVersionDelegates(TArray<struct FScriptDelegate>* VersionDelegates);
	bool IsProductFavorited(const struct FProductHashID& HashID);
	void SetIsFavorited(const struct FProductHashID& HashID, class USaveData_TA* SaveData, bool bValue);
};


// Class TAGame.GFxData_ProductAttribute_TA
// 0x0018 (0x00B0 - 0x0098)
class UGFxData_ProductAttribute_TA : public UGFxDataSingleton_X
{
public:
	class UClass*                                      AttributeClass;                                           // 0x0098(0x0008) (Edit)
	TScriptInterface<class UIProductAttributeProvider_TA> AttributeProvider;                                        // 0x00A0(0x0010) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_TA");
		return ptr;
	}


	void UpdateAdditionalLoadedData(class UGFxData_Products_TA* GFxData_Products, class ULoadingProduct_TA* ProductData, class UProduct_TA* Product);
	void OnReceivedAttribute(class UProductAttribute_TA* Attribute);
	void Init(const TScriptInterface<class UIProductAttributeProvider_TA>& InProvider);
};


// Class TAGame.GFxProductAttributeMap_TA
// 0x0010 (0x0070 - 0x0060)
class UGFxProductAttributeMap_TA : public UObject
{
public:
	TArray<class UClass*>                              GFxClasses;                                               // 0x0060(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxProductAttributeMap_TA");
		return ptr;
	}


	class UClass* MapAttribute(class UClass* AttributeClass);
	TArray<class UClass*> MapAttributes(TArray<class UClass*>* Attributes, TArray<class UClass*>* MapLocal_414460D04149E2B44F01719DD6092A17, TArray<class UClass*>* FilterLocal_A6186F1F47BF447556FAD9A7F60D7660);
};


// Class TAGame.LoadingProduct_TA
// 0x0058 (0x00B8 - 0x0060)
class ULoadingProduct_TA : public UObject
{
public:
	int                                                ProductID;                                                // 0x0060(0x0004)
	struct FProductHashID                              HashID;                                                   // 0x0064(0x0004)
	TArray<int>                                        ReferencedViews;                                          // 0x0068(0x0010) (NeedCtorLink)
	class UOnlineProduct_TA*                           OnlineProduct;                                            // 0x0078(0x0008)
	TEnumAsByte<EProductThumbnailSize>                 ThumbnailSize;                                            // 0x0080(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0081(0x0007) MISSED OFFSET
	class UProductThumbnailAsset_TA*                   ThumbnailAsset;                                           // 0x0088(0x0008)
	class UProductAsset_TA*                            Asset;                                                    // 0x0090(0x0008)
	class UProductThumbnail_TA*                        Thumbnail;                                                // 0x0098(0x0008)
	unsigned long                                      bUpdateProductData : 1;                                   // 0x00A0(0x0004)
	unsigned long                                      bIgnoreEquipped : 1;                                      // 0x00A0(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	TArray<class UObject*>                             AdditionalProductReferences;                              // 0x00A8(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadingProduct_TA");
		return ptr;
	}

};


// Class TAGame.__GFxData_Products_TA__SlotContainsNewProducts_E8E738BE46B743005F12F18822730A17
// 0x0004 (0x0064 - 0x0060)
class U__GFxData_Products_TA__SlotContainsNewProducts_E8E738BE46B743005F12F18822730A17 : public UObject
{
public:
	int                                                SlotIndex;                                                // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Products_TA__SlotContainsNewProducts_E8E738BE46B743005F12F18822730A17");
		return ptr;
	}


	bool __GFxData_Products_TA__SlotContainsNewProducts_E8E738BE46B743005F12F18822730A17(class UProduct_TA* P);
};


// Class TAGame.__GFxData_Products_TA__InstanceAttributes_93E7116249A48AB66DBB9BBFADD18BFD
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_Products_TA__InstanceAttributes_93E7116249A48AB66DBB9BBFADD18BFD : public UObject
{
public:
	TScriptInterface<class UIProductAttributeProvider_TA> AttributeProvider;                                        // 0x0060(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Products_TA__InstanceAttributes_93E7116249A48AB66DBB9BBFADD18BFD");
		return ptr;
	}


	void __GFxData_Products_TA__InstanceAttributes_93E7116249A48AB66DBB9BBFADD18BFD(class UGFxData_ProductAttribute_TA* GFxAttribute);
};


// Class TAGame.IProductAttributeProvider_TA
// 0x0000 (0x0060 - 0x0060)
class UIProductAttributeProvider_TA : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IProductAttributeProvider_TA");
		return ptr;
	}


	class UProductAttribute_TA* GetAttribute(class UClass* AttributeClass);
	TArray<class UProductAttribute_TA*> GetAttributes();
};


// Class TAGame.__GFxData_Products_TA__UpdateProductData_24E4FB2E4D9483B380FD2F8273FF1745
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_Products_TA__UpdateProductData_24E4FB2E4D9483B380FD2F8273FF1745 : public UObject
{
public:
	class ULoadingProduct_TA*                          ProductData;                                              // 0x0060(0x0008)
	class UProduct_TA*                                 Product;                                                  // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Products_TA__UpdateProductData_24E4FB2E4D9483B380FD2F8273FF1745");
		return ptr;
	}


	bool __GFxData_Products_TA__UpdateProductData_697430554FA59F06CAEDF6A3E5E32B66(class UProduct_TA* P);
	void __GFxData_Products_TA__UpdateProductData_EDDFFEEE4A0BC55EF9FB77B7536C3CE1(class UGFxData_ProductAttribute_TA* GFxAttribute);
	bool __GFxData_Products_TA__UpdateProductData_24E4FB2E4D9483B380FD2F8273FF1745(class UProductAttribute_TA* A);
};


// Class TAGame.ProductAttribute_LevelSettings_TA
// 0x0010 (0x0090 - 0x0080)
class UProductAttribute_LevelSettings_TA : public UProductAttribute_TA
{
public:
	TArray<struct FProductLevelData>                   Levels;                                                   // 0x0080(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_LevelSettings_TA");
		return ptr;
	}

};


// Class TAGame.ProductStat_TA
// 0x0050 (0x00B0 - 0x0060)
class UProductStat_TA : public UObject
{
public:
	struct FString                                     Label;                                                    // 0x0060(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0070(0x0010) (Const, Localized, NeedCtorLink)
	class APRI_TA*                                     PRI;                                                      // 0x0080(0x0008) (Transient)
	int                                                ProductID;                                                // 0x0088(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	class ACar_TA*                                     Car;                                                      // 0x0090(0x0008) (Transient)
	class AGameEvent_TA*                               GameEvent;                                                // 0x0098(0x0008) (Transient)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                               // 0x00A0(0x0008) (Transient)
	int                                                Value;                                                    // 0x00A8(0x0004) (Transient)
	unsigned long                                      bOnlyMinorUnitsInMetricDistanceStrings : 1;               // 0x00AC(0x0004) (Const, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_TA");
		return ptr;
	}


	struct FString STATIC_GetDistanceString(class APlayerControllerBase_TA* ForPC, int Meters);
	struct FString STATIC_GetTimeString(int Seconds);
	struct FString STATIC_GetDisplayValue(class APlayerControllerBase_TA* ForPC, int StatValue);
	struct FString STATIC_GetDescription();
	struct FString STATIC_GetLabel();
	void AddStatValue(int Amount);
	void SetCar(class ACar_TA* InCar);
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	void HandleCarDestroyed(class APawn_X* P);
	void HandleCarRefSet(class APRI_TA* InPRI);
	void HandleGameEventChanged(class APRI_TA* InPRI);
	void ShutDown();
	void OnInit();
	void Init(class APRI_TA* InPRI, int InProductID);
};


// Class TAGame.GFxData_ProductAttribute_Blueprint_TA
// 0x001C (0x00CC - 0x00B0)
class UGFxData_ProductAttribute_Blueprint_TA : public UGFxData_ProductAttribute_TA
{
public:
	class UTexture*                                    ProductThumbnail;                                         // 0x00B0(0x0008) (DataBinding)
	class UTexture*                                    BlueprintThumbnail;                                       // 0x00B8(0x0008) (DataBinding)
	int                                                Cost;                                                     // 0x00C0(0x0004) (DataBinding)
	unsigned long                                      bRevealed : 1;                                            // 0x00C4(0x0004) (DataBinding)
	struct FProductHashID                              PreviewProductHashID;                                     // 0x00C8(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Blueprint_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_Blueprint_TA* Attribute);
};


// Class TAGame.BlueprintThumbnailLoadResult
// 0x0010 (0x0070 - 0x0060)
class UBlueprintThumbnailLoadResult : public UObject
{
public:
	class UTexture*                                    ProductThumbnail;                                         // 0x0060(0x0008)
	class UTexture*                                    BlueprintThumbnail;                                       // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BlueprintThumbnailLoadResult");
		return ptr;
	}

};


// Class TAGame.GFxData_BlueprintGarage_TA
// 0x0028 (0x00C0 - 0x0098)
class UGFxData_BlueprintGarage_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineProductStoreSet_TA*                   BlueprintGarageSet;                                       // 0x0098(0x0008) (ExportObject, Transient, Component, EditInline)
	TArray<struct FBlueprintPreviewProduct>            BlueprintPreviewProducts;                                 // 0x00A0(0x0010) (Transient, NeedCtorLink)
	class UOnlineProduct_TA*                           PendingBlueprintProduct;                                  // 0x00B0(0x0008)
	class USaveData_TA*                                SaveData;                                                 // 0x00B8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_BlueprintGarage_TA");
		return ptr;
	}


	void __GFxData_BlueprintGarage_TA__OnShellSet_1A7BC9F94141EC15B5B225963BA0F1B9(const struct FString& _);
	void __GFxData_BlueprintGarage_TA__OnShellSet_A31DDBFB451A8B8973A532BDECF79ADF(class USaveGameManager_TA* M, class USaveData_TA* S, class UError* E);
	bool __GFxData_BlueprintGarage_TA__CreatePreviewProduct_D9A2FAD04A820CF6E5AE71863B5188F6(const struct FOnlineProductAttribute& Attribute);
	void OnForceOpenFTUE();
	void OnBuildFail();
	void OnRevealFail();
	void OnBuildSuccess(const struct FProductHashID& Product);
	void OnRevealSuccess(const struct FProductHashID& RevealedBlueprint);
	void HandleBuildFail(class URPC_X* RPC);
	void HandleRevealFail(class URPC_X* RPC);
	void HandleBuildSuccess(class URPC_BuildBlueprint_TA* RPC);
	void HandleRevealSuccess(class URPC_RevealBlueprint_TA* RPC);
	struct FProductHashID CreateProductFromBlueprint(const struct FOnlineProductData& ProductToAdd);
	void ReturnPendingBlueprint();
	void StorePendingBlueprint(class UOnlineProduct_TA* Blueprint);
	bool IsAlreadyOwned(const struct FProductHashID& BlueprintHashID);
	void Build(const struct FProductHashID& BlueprintHashID, class URPC_BuildBlueprint_TA** ObjectInitializer_8C6D7D6D42AD314EC3D0888B2BFF905F);
	void Reveal(const struct FProductHashID& BlueprintHashID, class URPC_RevealBlueprint_TA** ObjectInitializer_CCAD9D174780B4B460D080B721FED85C);
	void Preview(const struct FProductHashID& BlueprintHashID);
	bool PreviewProductSeriesIDChanged(const struct FBlueprintPreviewProduct& PreviewProduct);
	TArray<struct FProductHashID> GetSimilarHashIDs(class UOnlineProduct_TA* OnlineProduct, struct FOnlineProductAttribute* StructInitializer_6800075C40619E078D80AF9D541D7385, TArray<struct FProductHashID>* ArrayInitializer_0764F7AB4667403F0E9931997CCA3E3E);
	void CreatePreviewProduct(const struct FProductHashID& BlueprintHashID, int Index, TArray<struct FOnlineProductAttribute>* FilterLocal_88E5DAE842E807B0FA9C618EAAC2907D);
	class UOnlineProduct_TA* GetOrCreatePreviewProduct(const struct FProductHashID& BlueprintHashID, struct FBlueprintPreviewProduct* StructInitializer_CA97E17B44A73EF6525AB784943B4FB4);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.MtxConfig_TA
// 0x0008 (0x0080 - 0x0078)
class UMtxConfig_TA : public UOnlineConfig_X
{
public:
	unsigned long                                      bAllowMicroTransactions : 1;                              // 0x0078(0x0004) (Edit)
	unsigned long                                      bAllowCurrencyTrading : 1;                                // 0x0078(0x0004) (Edit, Config)
	unsigned long                                      bAllowCurrencyGifting : 1;                                // 0x0078(0x0004) (Edit, Config)
	unsigned long                                      bAllowCurrencyForCurrencyTrades : 1;                      // 0x0078(0x0004) (Edit, Config)
	int                                                MaxCurrencyTradeAmount;                                   // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MtxConfig_TA");
		return ptr;
	}

};


// Class TAGame.__GFxData_Products_TA__HandleProductThumbnailRendered_26D4F14D4DC33335992F5A9FE0DE4126
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Products_TA__HandleProductThumbnailRendered_26D4F14D4DC33335992F5A9FE0DE4126 : public UObject
{
public:
	class ULoadingProduct_TA*                          LoadingProduct;                                           // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Products_TA__HandleProductThumbnailRendered_26D4F14D4DC33335992F5A9FE0DE4126");
		return ptr;
	}


	void __GFxData_Products_TA__HandleProductThumbnailRendered_26D4F14D4DC33335992F5A9FE0DE4126(class UTextureRenderTarget2D* ThumbnailTexture);
};


// Class TAGame.__GFxData_Products_TA__RenderProductThumbnail_73A69C954BBC59325A0A869631AA5439
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Products_TA__RenderProductThumbnail_73A69C954BBC59325A0A869631AA5439 : public UObject
{
public:
	class ULoadingProduct_TA*                          ProductData;                                              // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Products_TA__RenderProductThumbnail_73A69C954BBC59325A0A869631AA5439");
		return ptr;
	}


	void __GFxData_Products_TA__RenderProductThumbnail_73A69C954BBC59325A0A869631AA5439(const struct FProductThumbnailResult& ThumbnailResult);
};


// Class TAGame.__GFxData_Products_TA__LoadAdditionalProductReferences_1D5A2CA640B10D4D6A843ABA0617D28C
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Products_TA__LoadAdditionalProductReferences_1D5A2CA640B10D4D6A843ABA0617D28C : public UObject
{
public:
	class ULoadingProduct_TA*                          LoadingProduct;                                           // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Products_TA__LoadAdditionalProductReferences_1D5A2CA640B10D4D6A843ABA0617D28C");
		return ptr;
	}


	void ____GFxData_Products_TA__LoadAdditionalProductReferences_1D5A2CA640B10D4D6A843ABA0617D28C____GFxData_Products_TA__LoadAdditionalProductReferences_BBD6593D48A885F8068A578167414688_32B446944FA3FE69077EFC8DA279548C(const struct FAssetLoadResult& Result);
	void __GFxData_Products_TA__LoadAdditionalProductReferences_BBD6593D48A885F8068A578167414688(class UProductAttribute_TA* A);
	void __GFxData_Products_TA__LoadAdditionalProductReferences_210FD8BC40E5A526F35E74A24039A37B(const struct FAssetLoadResult& Result);
	void __GFxData_Products_TA__LoadAdditionalProductReferences_1D5A2CA640B10D4D6A843ABA0617D28C(const struct FAssetLoadResult& AssetResult);
};


// Class TAGame.__GFxData_Products_TA__StartLoadingProduct_B2976B58461EEE75F8097C8E993E341B
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Products_TA__StartLoadingProduct_B2976B58461EEE75F8097C8E993E341B : public UObject
{
public:
	class ULoadingProduct_TA*                          ProductToLoad;                                            // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Products_TA__StartLoadingProduct_B2976B58461EEE75F8097C8E993E341B");
		return ptr;
	}


	void __GFxData_Products_TA__StartLoadingProduct_869B1EC049CD0F01F92C98A5D2C8FD3F(const struct FAssetLoadResult& AssetResult);
	void __GFxData_Products_TA__StartLoadingProduct_B2976B58461EEE75F8097C8E993E341B(const struct FAssetLoadResult& PaintedAssetResult);
};


// Class TAGame.__GFxData_Products_TA__IsThumbnailReferenced_A1D678B84D60F41F0F4557846AF4B8C9
// 0x0011 (0x0071 - 0x0060)
class U__GFxData_Products_TA__IsThumbnailReferenced_A1D678B84D60F41F0F4557846AF4B8C9 : public UObject
{
public:
	class UProductAsset_TA*                            Asset;                                                    // 0x0060(0x0008)
	class UOnlineProduct_TA*                           OnlineProduct;                                            // 0x0068(0x0008)
	TEnumAsByte<EProductThumbnailSize>                 ThumbnailSize;                                            // 0x0070(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Products_TA__IsThumbnailReferenced_A1D678B84D60F41F0F4557846AF4B8C9");
		return ptr;
	}


	bool __GFxData_Products_TA__IsThumbnailReferenced_A1D678B84D60F41F0F4557846AF4B8C9(class ULoadingProduct_TA* L);
};


// Class TAGame.__GFxProductAttributeMap_TA__MapAttribute_4E95E70842291BB23C272783C3D253AF
// 0x0008 (0x0068 - 0x0060)
class U__GFxProductAttributeMap_TA__MapAttribute_4E95E70842291BB23C272783C3D253AF : public UObject
{
public:
	class UClass*                                      AttributeClass;                                           // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxProductAttributeMap_TA__MapAttribute_4E95E70842291BB23C272783C3D253AF");
		return ptr;
	}


	bool __GFxProductAttributeMap_TA__MapAttribute_4E95E70842291BB23C272783C3D253AF(class UClass* GFxClass);
};


// Class TAGame.GFxData_Replay_TA
// 0x0014 (0x00A8 - 0x0094)
class UGFxData_Replay_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	struct FString                                     FriendlyMapName;                                          // 0x0098(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Replay_TA");
		return ptr;
	}


	void SetReplay(class UReplay_TA* InReplay);
};


// Class TAGame.GFxData_ReplayManager_TA
// 0x0048 (0x00E0 - 0x0098)
class UGFxData_ReplayManager_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     ReplaySaveID;                                             // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ReplaySaveError;                                          // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	TArray<class UGFxData_Replay_TA*>                  ReplayData;                                               // 0x00B8(0x0010) (Transient, NeedCtorLink)
	class UGFxModal_X*                                 ModalProcessing;                                          // 0x00C8(0x0008) (Transient)
	struct FString                                     PendingSaveName;                                          // 0x00D0(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ReplayManager_TA");
		return ptr;
	}


	void PrintReplays();
	void HandleReplayImported(class UReplayManager_TA* Manager, class UReplay_TA* InReplay, class UError* Error);
	void RenameReplay(const struct FString& Id, const struct FString& NewReplayName);
	void DeleteReplay(const struct FString& Id);
	void StartReplayID(const struct FString& Id);
	int GetReplayIndexFromID(const struct FString& Id);
	void StartReplayIndex(int Index);
	void OnReplaysLoaded();
	void HandleHeadersLoaded(class UReplayManager_TA* Manager, TArray<struct FReplayHeaderLoadResult> Headers, class UError* Error);
	void MarkReplayEditorOpened();
	void LoadReplays();
	void OnReplayExportFailed();
	void OnReplayExportSuccess();
	void HandleReplayExported(class UReplayManager_TA* Manager, const struct FString& Id, class UError* Error);
	class AReplayDirector_TA* GetReplayDirector();
	bool CanSaveReplay(class UReplay_TA* Replay);
	void SaveReplay(const struct FString& SaveName);
	bool ShouldAutoSaveReplay();
};


// Class TAGame.GFxModal_Processing_TA
// 0x0000 (0x00C8 - 0x00C8)
class UGFxModal_Processing_TA : public UGFxModal_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxModal_Processing_TA");
		return ptr;
	}


	class UGFxModal_X* STATIC_CreateAndBind(class UGFxShell_TA* Shell, class UAsyncTask* Task);
	class UGFxModal_X* STATIC_CreateAndBindNoCancel(class UGFxShell_TA* Shell, class UAsyncTask* Task);
};


// Class TAGame.GFxData_ReplayViewer_TA
// 0x0088 (0x0120 - 0x0098)
class UGFxData_ReplayViewer_TA : public UGFxDataSingleton_X
{
public:
	int                                                CurrentFrame;                                             // 0x0098(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	TArray<struct FLocalizedCameraMode>                CameraModes;                                              // 0x00A0(0x0010) (NeedCtorLink, DataBinding)
	struct FName                                       DefaultCameraMode;                                        // 0x00B0(0x0008) (DataBinding)
	struct FName                                       CameraMode;                                               // 0x00B8(0x0008) (DataBinding)
	struct FString                                     FocusActorString;                                         // 0x00C0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     LastFocusActorString;                                     // 0x00D0(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bHighlightFocusActor : 1;                                 // 0x00E0(0x0004) (DataBinding)
	unsigned long                                      bShowReplayHUD : 1;                                       // 0x00E0(0x0004) (DataBinding)
	unsigned long                                      bShowMatchInfoHUD : 1;                                    // 0x00E0(0x0004) (DataBinding)
	unsigned long                                      bShowPlayerNames : 1;                                     // 0x00E0(0x0004) (DataBinding)
	unsigned long                                      bPausedForScrub : 1;                                      // 0x00E0(0x0004) (Transient)
	unsigned long                                      bChangesMade : 1;                                         // 0x00E0(0x0004) (DataBinding)
	float                                              Slomo;                                                    // 0x00E4(0x0004) (DataBinding)
	float                                              FOV;                                                      // 0x00E8(0x0004) (DataBinding)
	int                                                ViewRoll;                                                 // 0x00EC(0x0004) (DataBinding)
	class UReplay_TA*                                  Replay;                                                   // 0x00F0(0x0008) (Transient)
	int                                                PendingSkipToFrame;                                       // 0x00F8(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	class UGFxModal_X*                                 ModalProcessing;                                          // 0x0100(0x0008) (Transient)
	struct FScriptDelegate                             __EventHudVisibilityUpdated__Delegate;                    // 0x0108(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0108(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ReplayViewer_TA");
		return ptr;
	}


	void AddCameraTrackPoint();
	void HandleCameraTargetChanged(class ACamera_TA* InCamera, class AActor* InTarget);
	void HandleReplayExported(class UReplayManager_TA* Manager, const struct FString& Id, class UError* Error);
	void SaveReplayAndExit();
	void SetPausedForScrub(bool bPaused);
	void OnTimelineScrub();
	void OpenReplayFXMenu();
	void OpenHUDMenu(int KeyCode, int MouseButton);
	void OpenTimelineMenu(int KeyCode, int MouseButton);
	void OpenCameraMenu(int KeyCode, int MouseButton);
	void OpenFocusMenu(int KeyCode, int MouseButton);
	void OpenSpeedMenu(int KeyCode, int MouseButton);
	void RemoveKeyframe(int KeyframeIndex);
	void AddKeyframe(const struct FName& Type);
	void SetFOV(float InFOV);
	void SetShowPlayerNames(bool bVisible);
	void SetShowMatchInfoHUD(bool bVisible);
	void SetShowReplayHUD(bool bVisible);
	void SetSlomo(float NewSlomo);
	void TimerSkipToFrame();
	void AdvanceTime(float DeltaTime);
	void AdvanceToFrame(int frame);
	void SetCameraMode(const struct FName& Mode);
	void SetFocusActorString(const struct FString& InFocusActorString);
	void RefreshDisabledModes();
	void InitCameraModes();
	void UpdateReplayData();
	void SetReplay(class UReplay_TA* InReplay);
	void EventHudVisibilityUpdated();
};


// Class TAGame.CameraTrack_TA
// 0x0058 (0x00B8 - 0x0060)
class UCameraTrack_TA : public UObject
{
public:
	TArray<class UCameraTrackPoint_TA*>                Points;                                                   // 0x0060(0x0010) (NeedCtorLink)
	struct FInterpCurveVector                          LocationCurve;                                            // 0x0070(0x0018) (Transient, NeedCtorLink)
	struct FInterpCurveVector                          RotationCurve;                                            // 0x0088(0x0018) (Transient, NeedCtorLink)
	struct FInterpCurveFloat                           FOVCurve;                                                 // 0x00A0(0x0018) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraTrack_TA");
		return ptr;
	}


	struct FInterpCurvePointFloat __CameraTrack_TA__RebuildCurves_59DA583642F2026414A7BD946BC9CA69(class UCameraTrackPoint_TA* P, struct FInterpCurvePointFloat* StructInitializer_6C8F791C4877D9AD68F226A9B8954E43);
	struct FInterpCurvePointVector __CameraTrack_TA__RebuildCurves_899F64624E54F83EE4FB22B6AF4EF935(const struct FCameraTrackRotationPoint& R, struct FInterpCurvePointVector* StructInitializer_F2912E4B477A8E4FA729938D66FAB886);
	struct FInterpCurvePointVector __CameraTrack_TA__RebuildCurves_D99D3CCA435C2738E04157B95E90EBAD(class UCameraTrackPoint_TA* P, struct FInterpCurvePointVector* StructInitializer_FD9124154701BECB76299CB227D5D182);
	void ResetCurves();
	TArray<struct FCameraTrackRotationPoint> GenerateRotationPoints(struct FCameraTrackRotationPoint* StructInitializer_55049F9C4BC576ACE1FEC1BADCD3779E);
	void RebuildCurves(TArray<struct FInterpCurvePointVector>* MapLocal_CE14B75B46FBFD92BF6AFA96B8650AF7, TArray<struct FCameraTrackRotationPoint>* ArrayResultLocal_77B5093342B9081C69EE21AD4347C56E, TArray<struct FInterpCurvePointVector>* MapLocal_E311CC0E4CCC767A7EB81681A2FBDD80, TArray<struct FInterpCurvePointFloat>* MapLocal_F3A34C3044872AADF561BE9F2EC0C0AA);
	float GetEndTime();
	void GetPOV(float Time, struct FCameraOrientation* OutPOV, struct FCameraOrientation* StructInitializer_DC183769471B371968105B93975F38F1);
	void RemovePOV(int frame);
	void InsertPoint(class UCameraTrackPoint_TA* Point);
	void RecordPOV(int frame, float Time, struct FCameraOrientation* POV, class UCameraTrackPoint_TA** ObjectInitializer_4C5797164FCA000114CD7F9F8E5A974A);
};


// Class TAGame.GFxData_SaveData_TA
// 0x0008 (0x00A0 - 0x0098)
class UGFxData_SaveData_TA : public UGFxDataSingleton_X
{
public:
	class UUISavedValues_TA*                           SavedValues;                                              // 0x0098(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_SaveData_TA");
		return ptr;
	}


	void __GFxData_SaveData_TA__OnShellSet_5D4B9D8D467D40916034CAA57B14D8B0(class UUISavedValues_TA* Values);
	void SaveGlobalValue(const struct FName& Key, const struct FString& Value);
	bool HasGlobalValue(const struct FName& Key);
	struct FString GetGlobalValue(const struct FName& Key);
	void OnShellSet();
};


// Class TAGame.GFxData_Season_TA
// 0x0040 (0x00D8 - 0x0098)
class UGFxData_Season_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FSeasonTeamRank>                     TeamRankings;                                             // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FSeasonMatch>                        WeekMatches;                                              // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FSeasonWeek>                         Weeks;                                                    // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	class UProfile_TA*                                 Profile;                                                  // 0x00C8(0x0008) (Transient)
	class USeason_TA*                                  Season;                                                   // 0x00D0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Season_TA");
		return ptr;
	}


	int SortWeekMatch(const struct FSeasonMatch& A, const struct FSeasonMatch& B);
	void SetDifficulty(int NewDifficulty);
	void SetBots(const struct FString& BotID0, const struct FString& BotName0, const struct FString& BotID1, const struct FString& BotName1, const struct FString& BotID2, const struct FString& BotName2);
	void LoadWeekMatches(int Week, TArray<struct FSeasonMatch>* SortLocal_FBC593294EB73A9EF7A28BA29B38D386);
	void CalcCurrentWeekRankings();
	void UpdateSeasonWeeks();
	void HandleWeekSimulated(class USeason_TA* InSeason);
	void SetSeason(class USeason_TA* InSeason);
	void RelocalizeTeams();
	void LoadLatestSeason();
	void OnShellSet();
};


// Class TAGame.ProductAttribute_CannotBeArchived_TA
// 0x0000 (0x0080 - 0x0080)
class UProductAttribute_CannotBeArchived_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_CannotBeArchived_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_DisplayLabelSlot_TA
// 0x0008 (0x0088 - 0x0080)
class UProductAttribute_DisplayLabelSlot_TA : public UProductAttribute_TA
{
public:
	class UProductSlot_TA*                             DisplayLabelSlot;                                         // 0x0080(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_DisplayLabelSlot_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_Trademark_TA
// 0x0001 (0x0081 - 0x0080)
class UProductAttribute_Trademark_TA : public UProductAttribute_TA
{
public:
	TEnumAsByte<ETrademarkGlyph>                       Glyph;                                                    // 0x0080(0x0001) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Trademark_TA");
		return ptr;
	}


	struct FString GetGlyph();
};


// Class TAGame.GFxData_SeasonMode_TA
// 0x0058 (0x00F0 - 0x0098)
class UGFxData_SeasonMode_TA : public UGFxDataSingleton_X
{
public:
	TArray<class UProduct_TA*>                         PlayerBots;                                               // 0x0098(0x0010) (Edit, NeedCtorLink)
	int                                                NumSeasons;                                               // 0x00A8(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<struct FGFxLogoData>                        Logos;                                                    // 0x00B0(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FGFxBotData>                         Bots;                                                     // 0x00C0(0x0010) (NeedCtorLink, DataBinding)
	class UProductAsset_Logo_TA*                       TeamLogo;                                                 // 0x00D0(0x0008) (Transient)
	class USeasonSave_TA*                              SeasonSave;                                               // 0x00D8(0x0008) (Transient)
	class UCarPreviewSet_TA*                           PreviewSet;                                               // 0x00E0(0x0008) (Transient)
	unsigned long                                      bUseSeasonColors : 1;                                     // 0x00E8(0x0004) (Transient)
	int                                                CurrentTeamSize;                                          // 0x00EC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_SeasonMode_TA");
		return ptr;
	}


	bool InMainMenu();
	void DeleteSeason();
	void CreateSeason(int TeamSize, int Difficulty, int NumRegularWeeks, int NumPlayoffsTeams, const struct FString& TeamName, const struct FName& TeamLogoAsset, const struct FString& BotID0, const struct FString& BotID1, const struct FString& BotID2);
	void ClearBotPreviewActors();
	void TeamSizeChanged(int TeamSize);
	void SetBot(int BotIndex, const struct FString& BotID);
	void UpdateColors(class ACarPreviewActor_TA* PreviewActor);
	void RestoreStadiumColors();
	void SetLogo(const struct FName& LogoAsset);
	struct FString GetBotNameFromID(const struct FString& Id);
	void BuildBotData();
	void BuildLogoData();
	void HandlePreviewActorsChanged(class UCarPreviewSet_TA* G);
	void HandleSetProfile(class ACarPreviewActor_TA* Car);
	void OnShellSet();
};


// Class TAGame.GFxData_ServerBrowser_TA
// 0x0058 (0x00F0 - 0x0098)
class UGFxData_ServerBrowser_TA : public UGFxDataSingleton_X
{
public:
	class ULocalPlayer_TA*                             TAPlayer;                                                 // 0x0098(0x0008) (Transient)
	struct FString                                     ServerName;                                               // 0x00A0(0x0010) (Edit, NeedCtorLink, DataBinding)
	struct FString                                     Password;                                                 // 0x00B0(0x0010) (Edit, NeedCtorLink, DataBinding)
	TArray<struct FServerResult>                       Results;                                                  // 0x00C0(0x0010) (Edit, NeedCtorLink)
	class UGFxModal_X*                                 ProcessingModal;                                          // 0x00D0(0x0008) (Transient)
	struct FString                                     JoiningServerName;                                        // 0x00D8(0x0010) (NeedCtorLink)
	class UServerBrowserSettingsSave_TA*               SaveData;                                                 // 0x00E8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ServerBrowser_TA");
		return ptr;
	}


	void HandleCancelSearch(class UGFxModal_X* Modal);
	void HandleCancelJoin(class UGFxModal_X* Modal);
	void HandleJoinGameComplete(bool bSuccess, const struct FString& FailReason);
	void JoinServer(const struct FString& InServerName, const struct FString& Address, const struct FJoinMatchSettings& JoinSettings, struct FServerReservationData* StructInitializer_A78EBD984F49C5E352EDD387D6FB0FA7);
	void HandleLanSearchComplete(bool bCancelled);
	void HandleLanResponse(struct FServerResult* HostResponse);
	void HandleSearchComplete(TArray<struct FServerResult>* InResults);
	void HandleSearchError(const struct FString& msg);
	void CancelJoin();
	void CancelSearch();
	void StartLanSearch();
	void StartSearch();
	void SetPassword(const struct FString& InPassword);
	void SetServerName(const struct FString& InServerName);
	void HandleSaveDataLoad(class UServerBrowserSettingsSave_TA* InSaveData);
	void OnShellSet();
	class UOnlineGame_X* GetOnlineGame();
};


// Class TAGame.ServerBrowserSettingsSave_TA
// 0x0000 (0x0160 - 0x0160)
class UServerBrowserSettingsSave_TA : public UCustomMatchSettingsSave_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ServerBrowserSettingsSave_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_UserSetting_TA
// 0x014C (0x01E0 - 0x0094)
class UGFxData_UserSetting_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	TEnumAsByte<EUserSettingType>                      Type;                                                     // 0x0098(0x0001) (DataBinding)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	struct FName                                       Group;                                                    // 0x009C(0x0008) (DataBinding)
	struct FName                                       Id;                                                       // 0x00A4(0x0008) (DataBinding)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	struct FString                                     Label;                                                    // 0x00B0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     Description;                                              // 0x00C0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     Values;                                                   // 0x00D0(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FString>                             ValuesArray;                                              // 0x00E0(0x0010) (Transient, NeedCtorLink)
	struct FString                                     Labels;                                                   // 0x00F0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     Value;                                                    // 0x0100(0x0010) (NeedCtorLink, DataBinding)
	unsigned long                                      bUserSetting : 1;                                         // 0x0110(0x0004) (DataBinding)
	unsigned long                                      bEnabled : 1;                                             // 0x0110(0x0004) (DataBinding)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	struct FString                                     DefaultValue;                                             // 0x0118(0x0010) (NeedCtorLink)
	struct FProfileSliderLimits                        Limits;                                                   // 0x0128(0x000C) (Transient)
	unsigned char                                      UnknownData04[0x4];                                       // 0x0134(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __OnListValueGet__Delegate;                               // 0x0138(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0134(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnListValueSet__Delegate;                               // 0x0150(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0150(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnBooleanValueGet__Delegate;                            // 0x0168(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0168(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnBooleanValueSet__Delegate;                            // 0x0180(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0180(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnScalarValueGet__Delegate;                             // 0x0198(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0198(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnScalarValueSet__Delegate;                             // 0x01B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData10[0x8];                                       // 0x01B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __GetDefaultValue__Delegate;                              // 0x01C8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData11[0x8];                                       // 0x01C8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_UserSetting_TA");
		return ptr;
	}


	void Clear();
	void SetScalarValue(const struct FString& InValue);
	void SetBooleanValue(const struct FString& InValue, bool bVisualOnly);
	void SetListValue(const struct FString& InValue);
	void SetValue(const struct FString& InValue);
	class UGFxData_UserSetting_TA* AddEnumValue(int InValue, const struct FString& InLabel);
	class UGFxData_UserSetting_TA* AddLocalizedValue(const struct FString& InValue, const struct FString& InLabel);
	class UGFxData_UserSetting_TA* AddValue(const struct FString& InValue, const struct FString& Key);
	void SetScalarLimits(const struct FProfileSliderLimits& InLimits);
	void Init(TEnumAsByte<EUserSettingType> InType, const struct FName& InGroup, const struct FName& InID, const struct FString& InDefaultValue, bool bInUserSetting, bool bInEnabled);
	struct FString GetDefaultValue();
	void OnScalarValueSet(class UGFxData_UserSetting_TA* Setting, float InValue);
	float OnScalarValueGet(class UGFxData_UserSetting_TA* Setting);
	void OnBooleanValueSet(class UGFxData_UserSetting_TA* Setting, bool InValue);
	bool OnBooleanValueGet(class UGFxData_UserSetting_TA* Setting);
	void OnListValueSet(class UGFxData_UserSetting_TA* Setting, const struct FString& InValue);
	struct FString OnListValueGet(class UGFxData_UserSetting_TA* Setting);
};


// Class TAGame.GFxData_Settings_TA
// 0x01E0 (0x0278 - 0x0098)
class UGFxData_Settings_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FIntPoint>                           SupportedResolutions;                                     // 0x0098(0x0010) (Edit, NeedCtorLink)
	class UTAsyncResult__PrivilegeCheck_X*             CrossNetworkTask;                                         // 0x00A8(0x0008) (Edit)
	struct FProfileSliderLimits                        MouseSensitivityLimits;                                   // 0x00B0(0x000C) (Edit)
	struct FProfileSliderLimits                        ControllerDeadzoneLimits;                                 // 0x00BC(0x000C) (Edit)
	struct FProfileSliderLimits                        MouseDeadZoneLimits;                                      // 0x00C8(0x000C) (Edit)
	struct FProfileSliderLimits                        KeyboardAxisBlendLimits;                                  // 0x00D4(0x000C) (Edit)
	struct FProfileSliderLimits                        SteeringSensitivityLimits;                                // 0x00E0(0x000C) (Edit)
	struct FProfileSliderLimits                        AirControlSensitivityLimits;                              // 0x00EC(0x000C) (Edit)
	struct FProfileSliderLimits                        DodgeInputThresholdLimits;                                // 0x00F8(0x000C) (Edit)
	struct FProfileSliderLimits                        SafeZoneLimits;                                           // 0x0104(0x000C) (Edit)
	struct FProfileSliderLimits                        UIScaleLimits;                                            // 0x0110(0x000C) (Edit)
	struct FProfileSliderLimits                        NameplateScaleLimits;                                     // 0x011C(0x000C) (Edit)
	struct FProfileSliderLimits                        HDRBrightnessScaleLimits;                                 // 0x0128(0x000C) (Edit)
	struct FProfileSliderLimits                        HDRPaperWhiteScaleLimits;                                 // 0x0134(0x000C) (Edit)
	struct FProfileSliderLimits                        HDRGammaScaleLimits;                                      // 0x0140(0x000C) (Edit)
	struct FProfileSliderLimits                        ForceFeedbackScaleLimits;                                 // 0x014C(0x000C) (Edit)
	struct FString                                     LoadingString;                                            // 0x0158(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ShowBindingsModal_ErrorMessage;                           // 0x0168(0x0010) (Const, Localized, NeedCtorLink)
	class UGFxData_UserSetting_TA*                     CrossplaySetting;                                         // 0x0178(0x0008)
	TArray<class UGFxData_UserSetting_TA*>             UserSettings;                                             // 0x0180(0x0010) (Transient, NeedCtorLink)
	struct FString                                     OldResolution;                                            // 0x0190(0x0010) (Transient, NeedCtorLink)
	struct FString                                     OldWindowMode;                                            // 0x01A0(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      OldVSync : 1;                                             // 0x01B0(0x0004) (Transient)
	unsigned long                                      bSettingRenderDetail : 1;                                 // 0x01B0(0x0004) (Transient)
	unsigned long                                      bSettingCameraPreset : 1;                                 // 0x01B0(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01B4(0x0004) MISSED OFFSET
	class UProfile_TA*                                 Profile;                                                  // 0x01B8(0x0008) (Transient)
	class USaveData_TA*                                SaveData;                                                 // 0x01C0(0x0008) (Transient)
	class UGameViewportClient_X*                       Viewport;                                                 // 0x01C8(0x0008) (Transient)
	class UUserSettingObserver_TA*                     SettingObserver;                                          // 0x01D0(0x0008) (Edit, ExportObject, Component, EditInline)
	class USoundSettingsSave_TA*                       SoundSave;                                                // 0x01D8(0x0008) (Transient)
	class USoundSettingsControllerSave_TA*             SoundSaveController;                                      // 0x01E0(0x0008) (Transient)
	class UGameplaySettingsSave_TA*                    GameplaySave;                                             // 0x01E8(0x0008) (Transient)
	class UProfileGameplaySave_TA*                     ProfileGameplaySave;                                      // 0x01F0(0x0008) (Transient)
	class UNetworkSave_TA*                             NetworkSave;                                              // 0x01F8(0x0008) (Transient)
	class UConnectionQualitySave_TA*                   ConnectionQualitySave;                                    // 0x0200(0x0008) (Transient)
	class UProfileCameraSave_TA*                       ProfileCameraSave;                                        // 0x0208(0x0008) (Transient)
	class UProfileGamepadSave_TA*                      GamepadSave;                                              // 0x0210(0x0008) (Transient)
	class UVideoSettingsSave_TA*                       VideoSave;                                                // 0x0218(0x0008) (Transient)
	class UMusicPlayerSave_TA*                         MusicSave;                                                // 0x0220(0x0008) (Transient)
	class UProfileControlsSave_TA*                     ProfileControlsSave;                                      // 0x0228(0x0008) (Transient)
	class UNotificationSave_TA*                        NotificationSave;                                         // 0x0230(0x0008) (Transient)
	class UGFxData_UserSetting_TA*                     SteamInputSettings;                                       // 0x0238(0x0008) (Transient)
	int                                                ControllerCount;                                          // 0x0240(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0244(0x0004) MISSED OFFSET
	struct FString                                     WarnCrossPlatformTournament;                              // 0x0248(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     WarnCrossPlatformTournamentAndParty;                      // 0x0258(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     DisableAndLeave;                                          // 0x0268(0x0010) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Settings_TA");
		return ptr;
	}


	void __GFxData_Settings_TA__InitCameraSettings_02DDBC474AE1A98B8C800A9C6AE2DAD2(class UGFxData_UserSetting_TA* Setting, float Value);
	float __GFxData_Settings_TA__InitCameraSettings_981F74D04CC56174BE1A31ABBD9EB769(class UGFxData_UserSetting_TA* _);
	void __GFxData_Settings_TA__InitCameraSettings_71ACBBB74196DAED23204B80A9FF7E45(class UGFxData_UserSetting_TA* Setting, float Value);
	float __GFxData_Settings_TA__InitCameraSettings_BE10A7924DF0488741B612B5BFFA9545(class UGFxData_UserSetting_TA* _);
	void __GFxData_Settings_TA__InitCameraSettings_16884A484E9154E6B3D4F396C2178534(class UGFxData_UserSetting_TA* Setting, bool Value);
	bool __GFxData_Settings_TA__InitCameraSettings_4DE993564CCB6D34325F86B7BED026D2(class UGFxData_UserSetting_TA* _);
	void __GFxData_Settings_TA__InitNetworkSettings_0315C27344A151C64C9AD2AF9FE4D238(class UGFxData_UserSetting_TA* Setting, const struct FString& Value);
	struct FString __GFxData_Settings_TA__InitNetworkSettings_895B173F417E23F7E96FA5BB2D2B94F5(class UGFxData_UserSetting_TA* Setting);
	void __GFxData_Settings_TA__InitGameplaySettings_22C3E837434D96DB01ADA798A6A90B63(class UGFxData_UserSetting_TA* _, bool bValue);
	bool __GFxData_Settings_TA__InitGameplaySettings_48BD728C485D8D34BF167097B5E99B03(class UGFxData_UserSetting_TA* _);
	void __GFxData_Settings_TA__SetDefaults_79224E044D72444947B4F89C2E500B11(class UGFxData_UserSetting_TA* Setting);
	void TriggerSettingChangedEvent(const struct FName& SettingName);
	void InitReplayFXSettings();
	void SetDodgeInputThreshold(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetDodgeInputThreshold(class UGFxData_UserSetting_TA* UserSetting);
	void SetKeyboardAxisBlendTime(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetKeyboardAxisBlendTime(class UGFxData_UserSetting_TA* UserSetting);
	void SetControllerDeadzone(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetControllerDeadzone(class UGFxData_UserSetting_TA* UserSetting);
	void SetMouseSensitivity(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetMouseSensitivity(class UGFxData_UserSetting_TA* UserSetting);
	void SetAirControlSensitivity(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAirControlSensitivity(class UGFxData_UserSetting_TA* UserSetting);
	void SetSteeringSensitivity(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetSteeringSensitivity(class UGFxData_UserSetting_TA* UserSetting);
	void SetForceFeedbackMode(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetForceFeedbackMode(class UGFxData_UserSetting_TA* UserSetting);
	void SetForceFeedbackScale(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetForceFeedbackScale(class UGFxData_UserSetting_TA* UserSetting);
	void SetHoldMouseCameraEnabled(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetHoldMouseCameraEnabled(class UGFxData_UserSetting_TA* UserSetting);
	void SetMouseCameraSwivel(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetMouseCameraSwivel(class UGFxData_UserSetting_TA* UserSetting);
	void ShowBindings();
	void OnControllerRegistrationChanged(int LocalPlayerNum);
	void HandleUnregisteredController(int LocalPlayerNum);
	void HandleRegisteredController(int LocalPlayerNum, int ControllerId);
	void RefreshSteamInputSettings();
	struct FString SteamInputSettings_ControllerSelected(int ControllerId);
	struct FString SteamInputSettings_IgnoreInput();
	struct FString SteamInputSettings_Autodetect();
	int GetControllerIDFromValue(const struct FString& Value);
	void SetSteamInputSettings(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetSteamInputSettings(class UGFxData_UserSetting_TA* UserSetting);
	void SetBallTrajectoryEnabled(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetBallTrajectoryEnabled(class UGFxData_UserSetting_TA* UserSetting);
	void SetAimAssistEnabled(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetAimAssistEnabled(class UGFxData_UserSetting_TA* UserSetting);
	void SetAimAssistLevelOverride(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetAimAssistLevelOverride(class UGFxData_UserSetting_TA* UserSetting);
	void SetControlPreset(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetControlPreset(class UGFxData_UserSetting_TA* UserSetting);
	void AddToControlPresets(const struct FName& PresetName, TArray<struct FBindingPreset>* Presets);
	TArray<struct FBindingPreset> GetControlPresets();
	void InitControlsSettings();
	bool IsAutoCamSpectator();
	bool IsSpectator();
	void SetDefaults(const struct FName& Group, TArray<class UGFxData_UserSetting_TA*>* FilterLocal_AC3EA565442724555824ED8E4B2EFE43, TArray<class UGFxData_UserSetting_TA*>* SortLocal_9C2C674F4515C1DA3E02779350F1AAD7);
	int CompareSettingDefaultPriority(class UGFxData_UserSetting_TA* A, class UGFxData_UserSetting_TA* B);
	struct FString GetCrossplayDefaultValue();
	void SetCrossPlay(class UGFxData_UserSetting_TA* UserSetting, bool bNewValue);
	void CrossplayPartyValidation(class UGFxData_UserSetting_TA* UserSetting, bool RequestedValue);
	void HandleCrossPlatformEnabledChanged();
	bool GetCrossPlay(class UGFxData_UserSetting_TA* UserSetting);
	void SetNameplateScale(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetNameplateScale(class UGFxData_UserSetting_TA* UserSetting);
	void SetNameplateMode(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetNameplateMode(class UGFxData_UserSetting_TA* UserSetting);
	void SetShowInGameNotifications(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetShowInGameNotifications(class UGFxData_UserSetting_TA* UserSetting);
	void SetCompDivisions(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetCompDivisions(class UGFxData_UserSetting_TA* UserSetting);
	void SetMessageLevel(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetMessageLevel(class UGFxData_UserSetting_TA* UserSetting);
	void SetMetric(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetMetric(class UGFxData_UserSetting_TA* UserSetting);
	void SetBallIndicator(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetBallIndicator(class UGFxData_UserSetting_TA* UserSetting);
	void UpdateEnableSavingValue();
	void HandleSaveDataPostEnableComplete(class USaveGameManager_TA* SaveManager, class USaveData_TA* ForSaveData, class UError* Error);
	void SetInGameStatNotification(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetInGameStatNotification(class UGFxData_UserSetting_TA* UserSetting);
	void SetEnableSaving(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetEnableSaving(class UGFxData_UserSetting_TA* UserSetting);
	void SetSplitscreenMode(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetSplitscreenMode(class UGFxData_UserSetting_TA* UserSetting);
	void SetEnableFreeplayUnlimitedBoost(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetEnableFreeplayUnlimitedBoost(class UGFxData_UserSetting_TA* UserSetting);
	void SetChatFilter(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetChatFilter(class UGFxData_UserSetting_TA* UserSetting);
	void SetVoiceFilter(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetVoiceFilter(class UGFxData_UserSetting_TA* UserSetting);
	void SetTeamColoredBoostMeter(class UGFxData_UserSetting_TA* UserSetting, bool bValue);
	bool GetTeamColoredBoostMeter(class UGFxData_UserSetting_TA* UserSetting);
	void SetStatGraphLevel(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetStatGraphLevel(class UGFxData_UserSetting_TA* UserSetting);
	void InitInterfaceSettings();
	void InitGameplaySettings();
	bool ShowVoiceChat();
	void SetShowNetQualityIndicators(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetShowNetQualityIndicators(class UGFxData_UserSetting_TA* Setting);
	void SetIncomingBandwidth(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetIncomingBandwidth(class UGFxData_UserSetting_TA* Setting);
	void SetIncomingPacketFrequency(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetIncomingPacketFrequency(class UGFxData_UserSetting_TA* Setting);
	void SetOutgoingPacketFrequency(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetOutgoingPacketFrequency(class UGFxData_UserSetting_TA* Setting);
	void InitNetworkSettings();
	void InitCrossPlaySetting();
	bool GetFocusOnGoals(class UGFxData_UserSetting_TA* UserSetting);
	void SetFocusOnGoals(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetUseReplayCamera(class UGFxData_UserSetting_TA* UserSetting);
	void SetUseReplayCamera(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	float GetAutoCamAerialPrediction(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamAerialPrediction(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamPlayerFocusBlendSpeed(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamPlayerFocusBlendSpeed(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamAerialDistance(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamAerialDistance(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamRotateSpeed(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamRotateSpeed(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamMoveSpeedZ(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamMoveSpeedZ(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamMoveSpeed(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamMoveSpeed(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamZ(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamZ(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamDistance(class UGFxData_UserSetting_TA* UserSetting);
	void SetAutoCamDistance(class UGFxData_UserSetting_TA* UserSetting, float Value);
	void SetAutoCamFOV(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAutoCamFOV(class UGFxData_UserSetting_TA* UserSetting);
	void SetBallcamMode(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetBallcamMode(class UGFxData_UserSetting_TA* UserSetting);
	void SetBallcamIndicator(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetBallcamIndicator(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraType(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetCameraType(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraTransitionSpeed(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraTransitionSpeed(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraSwivelSpeed(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraSwivelSpeed(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraStiffness(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraStiffness(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraDistance(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraDistance(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraAngle(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraAngle(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraHeight(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraHeight(class UGFxData_UserSetting_TA* UserSetting);
	void SetGreenScreenColor(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetGreenScreenColor(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraBloomScale(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraBloomScale(class UGFxData_UserSetting_TA* UserSetting);
	struct FString GetImageOverlaySetting(class UGFxData_UserSetting_TA* UserSetting);
	struct FString GetImageFilterSetting(class UGFxData_UserSetting_TA* UserSetting);
	void SetFilterOverlayIntensity(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetFilterOverlayIntensity(class UGFxData_UserSetting_TA* UserSetting);
	void SetImageFilterIntensity(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetImageFilterIntensity(class UGFxData_UserSetting_TA* UserSetting);
	void SetImageOverlaySetting(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	void SetImageFilterSetting(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	void SetReplayTranslucent(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetReplayTranslucent(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraDOFKernel(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraDOFKernel(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraDOFMaxNear(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraDOFMaxNear(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraDOFMaxFar(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraDOFMaxFar(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraDOFDistance(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraDOF(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraFOV(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCameraFOV(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraShake(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetCameraShake(class UGFxData_UserSetting_TA* UserSetting);
	void SetLockSpectatorBallCam(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetLockSpectatorBallCam(class UGFxData_UserSetting_TA* UserSetting);
	void SetInvertSpectatorPitch(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetInvertSpectatorPitch(class UGFxData_UserSetting_TA* UserSetting);
	void SetInvertSwivelPitch(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetInvertSwivelPitch(class UGFxData_UserSetting_TA* UserSetting);
	void SetCameraSettingsPreset(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	void SaveCameraSettingsPreset(class UGFxData_UserSetting_TA* UserSetting);
	struct FString GetCameraSettingsPreset(class UGFxData_UserSetting_TA* UserSetting);
	void OnCameraOptionChanged();
	void InitCameraSettings();
	void SetPushToTalk(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetPushToTalk(class UGFxData_UserSetting_TA* UserSetting);
	void SetGameplayMusicSetting(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetGameplayMusicSetting(class UGFxData_UserSetting_TA* UserSetting);
	void SetDynamicRange(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetDynamicRange(class UGFxData_UserSetting_TA* UserSetting);
	void SetOutputType(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetOutputType(class UGFxData_UserSetting_TA* UserSetting);
	void SetControllerSoundMode(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetControllerSoundMode(class UGFxData_UserSetting_TA* UserSetting);
	void SetControllerVolume(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetControllerVolume(class UGFxData_UserSetting_TA* UserSetting);
	void SetVoiceVolume(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetVoiceVolume(class UGFxData_UserSetting_TA* UserSetting);
	void SetCrowdVolume(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetCrowdVolume(class UGFxData_UserSetting_TA* UserSetting);
	void SetAmbientVolume(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetAmbientVolume(class UGFxData_UserSetting_TA* UserSetting);
	void SetMusicVolume(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetMusicVolume(class UGFxData_UserSetting_TA* UserSetting);
	void SetGameVolume(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetGameVolume(class UGFxData_UserSetting_TA* UserSetting);
	void SetMasterVolume(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetMasterVolume(class UGFxData_UserSetting_TA* UserSetting);
	void InitAudioSettings();
	void SetUseTranslucentArenaShadersAdvancedOption(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	void SetUseTranslucentArenaShaders(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetUseTranslucentArenaShaders(class UGFxData_UserSetting_TA* UserSetting);
	void SetUIScale(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetUIScale(class UGFxData_UserSetting_TA* UserSetting);
	void SetSafeZone(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetSafeZone(class UGFxData_UserSetting_TA* UserSetting);
	void SetMotionBlur(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetMotionBlur(class UGFxData_UserSetting_TA* UserSetting);
	void SetDynamicShadows(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetDynamicShadows(class UGFxData_UserSetting_TA* UserSetting);
	void SetLensFlares(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetLensFlares(class UGFxData_UserSetting_TA* UserSetting);
	void SetLightShaftsAdvancedOption(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	void SetLightShafts(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetLightShafts(class UGFxData_UserSetting_TA* UserSetting);
	void SetBloom(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetBloom(class UGFxData_UserSetting_TA* UserSetting);
	void SetDepthOfField(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetDepthOfField(class UGFxData_UserSetting_TA* UserSetting);
	void SetAmbientOcclusion(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetAmbientOcclusion(class UGFxData_UserSetting_TA* UserSetting);
	void SetHighQualityShaders(class UGFxData_UserSetting_TA* UserSetting, bool Value);
	bool GetHighQualityShaders(class UGFxData_UserSetting_TA* UserSetting);
	void SetWorldDetail(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetParticleDetail(class UGFxData_UserSetting_TA* UserSetting);
	struct FString GetWorldDetail(class UGFxData_UserSetting_TA* UserSetting);
	void SetParticleDetail(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	void SetTextureDetail(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	void SetRenderDetail(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	void SaveVideoValueString(class UGFxData_UserSetting_TA* UserSetting);
	struct FString GetSavedVideoValueString(class UGFxData_UserSetting_TA* UserSetting);
	void SetRenderQuality(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetRenderQuality(class UGFxData_UserSetting_TA* UserSetting);
	void SetAntiAlias(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetAntiAlias(class UGFxData_UserSetting_TA* UserSetting);
	void OnAdvancedVideoOptionChanged();
	void InitVideoSettings();
	void SetEnableHDRSideBySideVisualizer(class UGFxData_UserSetting_TA* UserSetting, bool bValue);
	bool GetEnableHDRSideBySideVisualizer(class UGFxData_UserSetting_TA* UserSetting);
	void SetHDRGammaScale(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetHDRGammaScale(class UGFxData_UserSetting_TA* UserSetting);
	void SetHDRPaperWhiteScale(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetHDRPaperWhiteScale(class UGFxData_UserSetting_TA* UserSetting);
	void SetHDRBrightnessScale(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetHDRBrightnessScale(class UGFxData_UserSetting_TA* UserSetting);
	void SaveViewportSettings();
	void RevertViewportSettings();
	void SetViewportSettings(const struct FString& ResolutionValue, const struct FString& WindowModeValue, bool VSyncValue);
	void ApplyViewportSettings(const struct FString& ResolutionValue, const struct FString& WindowModeValue, bool VSyncValue);
	void SetMaxFPS(class UGFxData_UserSetting_TA* UserSetting, float Value);
	float GetMaxFPS(class UGFxData_UserSetting_TA* UserSetting);
	void SetShowPsyTags(class UGFxData_UserSetting_TA* UserSetting, bool bValue);
	bool GetShowPsyTags(class UGFxData_UserSetting_TA* UserSetting);
	void SetForceDefaultColors(class UGFxData_UserSetting_TA* UserSetting, bool bValue);
	bool GetForceDefaultColors(class UGFxData_UserSetting_TA* UserSetting);
	void SetColorBlind(class UGFxData_UserSetting_TA* UserSetting, bool bValue);
	bool GetColorBlind(class UGFxData_UserSetting_TA* UserSetting);
	void SetConsoleQualityMode(class UGFxData_UserSetting_TA* UserSetting, const struct FString& Value);
	struct FString GetConsoleQualityMode(class UGFxData_UserSetting_TA* UserSetting);
	void SetWeatherFX(class UGFxData_UserSetting_TA* UserSetting, bool bValue);
	bool GetWeatherFX(class UGFxData_UserSetting_TA* UserSetting);
	void SetVSync(class UGFxData_UserSetting_TA* UserSetting, bool bValue);
	bool GetVSync(class UGFxData_UserSetting_TA* UserSetting);
	struct FString GetWindowMode(class UGFxData_UserSetting_TA* UserSetting);
	struct FString GetResolution(class UGFxData_UserSetting_TA* UserSetting);
	void InitViewportSettings();
	int SortResolutions(const struct FIntPoint& A, const struct FIntPoint& B);
	int GetGreatestCommonDenominator(int X, int Y);
	void SetScalarValue(const struct FName& Id, float Value);
	void SetBooleanValue(const struct FName& Id, bool Value);
	void SetListValue(const struct FName& Id, const struct FString& Value);
	struct FString EnumToString(int Value);
	struct FString BoolToString(bool Value);
	bool StringToBool(const struct FString& Value);
	class UGFxData_UserSetting_TA* CreateScalarUserSetting(const struct FName& Group, const struct FName& Id, float DefaultValue, const struct FScriptDelegate& GetFunc, const struct FScriptDelegate& SetFunc, const struct FProfileSliderLimits& Limits, bool bUserSetting, bool bEnabled);
	class UGFxData_UserSetting_TA* CreateBooleanUserSetting(const struct FName& Group, const struct FName& Id, bool DefaultValue, const struct FScriptDelegate& GetFunc, const struct FScriptDelegate& SetFunc, bool bUserSetting, bool bEnabled);
	class UGFxData_UserSetting_TA* CreateListUserSetting(const struct FName& Group, const struct FName& Id, const struct FString& DefaultValue, const struct FScriptDelegate& GetFunc, const struct FScriptDelegate& SetFunc, bool bUserSetting, bool bEnabled);
	class UGFxData_UserSetting_TA* GetUserSetting(const struct FName& Id);
	int GetUserSettingIndex(const struct FName& Id);
	void LoadUserSettings();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.UserSettingObserverEventCache_TA
// 0x0030 (0x00A0 - 0x0070)
class UUserSettingObserverEventCache_TA : public UComponent
{
public:
	float                                              CacheTimeout;                                             // 0x0070(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	TArray<struct FSettingEvent>                       Events;                                                   // 0x0078(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventCacheTimeout__Delegate;                            // 0x0088(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0088(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.UserSettingObserverEventCache_TA");
		return ptr;
	}


	void __UserSettingObserverEventCache_TA__RecordSetting_52988F8045D2A030E17C03AD10347FC3();
	void Reset();
	void RecordSetting(const struct FUniqueNetId& PlayerID, const struct FName& Id, const struct FString& Value);
	void EventCacheTimeout(class UUserSettingObserverEventCache_TA* Cache);
};


// Class TAGame.UserSettingObserver_TA
// 0x0010 (0x0080 - 0x0070)
class UUserSettingObserver_TA : public UComponent
{
public:
	class UUserSettingObserverEventCache_TA*           Cache;                                                    // 0x0070(0x0008) (Edit, ExportObject, Component, EditInline)
	class UUserSettingMetrics_TA*                      Metrics;                                                  // 0x0078(0x0008) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.UserSettingObserver_TA");
		return ptr;
	}


	void __UserSettingObserver_TA__HandleCacheTimeout_BC738A3D451C8D252C8D5988FD6B04CE(const struct FSettingEvent& E);
	void HandleScalarValueSet(class UGFxData_UserSetting_TA* Setting, float Value);
	void HandleBooleanValueSet(class UGFxData_UserSetting_TA* Setting, bool Value);
	void HandleListValueSet(class UGFxData_UserSetting_TA* Setting, const struct FString& Value);
	void HandleCacheTimeout(class UUserSettingObserverEventCache_TA* InCache);
	void RecordSetting(class UGFxData_UserSetting_TA* Setting);
	void AddListener(class UGFxData_UserSetting_TA* Setting);
	void AddListeners(TArray<class UGFxData_UserSetting_TA*>* UserSettings);
	void Init();
};


// Class TAGame.SoundSettingsSave_TA
// 0x00E0 (0x01A8 - 0x00C8)
class USoundSettingsSave_TA : public USaveObject_TA
{
public:
	float                                              MasterVolume;                                             // 0x00C8(0x0004)
	float                                              SoundVolume;                                              // 0x00CC(0x0004)
	float                                              MusicVolume;                                              // 0x00D0(0x0004)
	float                                              AmbientVolume;                                            // 0x00D4(0x0004)
	float                                              CrowdVolume;                                              // 0x00D8(0x0004)
	float                                              VoiceVolume;                                              // 0x00DC(0x0004)
	TEnumAsByte<EAkOutputType>                         OutputType;                                               // 0x00E0(0x0001)
	TEnumAsByte<EAkDynamicRangeType>                   DynamicRangeType;                                         // 0x00E1(0x0001)
	unsigned char                                      UnknownData00[0x6];                                       // 0x00E2(0x0006) MISSED OFFSET
	struct FScriptDelegate                             __MasterVolume__ChangeNotify;                             // 0x00E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00E2(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __SoundVolume__ChangeNotify;                              // 0x0100(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0100(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __MusicVolume__ChangeNotify;                              // 0x0118(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0118(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __AmbientVolume__ChangeNotify;                            // 0x0130(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0130(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __CrowdVolume__ChangeNotify;                              // 0x0148(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0148(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __VoiceVolume__ChangeNotify;                              // 0x0160(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0160(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OutputType__ChangeNotify;                               // 0x0178(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0178(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __DynamicRangeType__ChangeNotify;                         // 0x0190(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0190(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SoundSettingsSave_TA");
		return ptr;
	}


	void __DynamicRangeType__ChangeNotifyFunc();
	void __OutputType__ChangeNotifyFunc();
	void __VoiceVolume__ChangeNotifyFunc();
	void __CrowdVolume__ChangeNotifyFunc();
	void __AmbientVolume__ChangeNotifyFunc();
	void __MusicVolume__ChangeNotifyFunc();
	void __SoundVolume__ChangeNotifyFunc();
	void __MasterVolume__ChangeNotifyFunc();
};


// Class TAGame.SoundSettingsControllerSave_TA
// 0x0038 (0x0100 - 0x00C8)
class USoundSettingsControllerSave_TA : public USaveObject_TA
{
public:
	float                                              Volume;                                                   // 0x00C8(0x0004)
	TEnumAsByte<EControllerSoundMode>                  SoundMode;                                                // 0x00CC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __Volume__ChangeNotify;                                   // 0x00D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00CD(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __SoundMode__ChangeNotify;                                // 0x00E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SoundSettingsControllerSave_TA");
		return ptr;
	}


	void __SoundMode__ChangeNotifyFunc();
	void __Volume__ChangeNotifyFunc();
};


// Class TAGame.NetworkSave_TA
// 0x0038 (0x0100 - 0x00C8)
class UNetworkSave_TA : public USaveObject_TA
{
public:
	unsigned long                                      bEnableCrossPlatform : 1;                                 // 0x00C8(0x0004)
	unsigned long                                      bDisableCrossPlay : 1;                                    // 0x00C8(0x0004)
	TEnumAsByte<ENetworkValue>                         IncomingPacketFrequency;                                  // 0x00CC(0x0001)
	TEnumAsByte<ENetworkValue>                         OutgoingPacketFrequency;                                  // 0x00CD(0x0001)
	TEnumAsByte<ENetworkValue>                         IncomingBandwidth;                                        // 0x00CE(0x0001)
	TEnumAsByte<ENetworkInputBuffer>                   NetworkInputBuffer;                                       // 0x00CF(0x0001)
	struct FScriptDelegate                             __bEnableCrossPlatform__ChangeNotify;                     // 0x00D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __NetworkInputBuffer__ChangeNotify;                       // 0x00E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NetworkSave_TA");
		return ptr;
	}


	void __NetworkInputBuffer__ChangeNotifyFunc();
	void __bEnableCrossPlatform__ChangeNotifyFunc();
	void Deprecated_SetCrossplayDisabled(bool bNewValue);
	bool Deprecated_GetCrossplayDisabled();
	int GetOutgoingPacketFrequencyValue();
	int GetIncomingBandwidthValue();
	int GetIncomingPacketFrequencyValue();
	void ApplySettings();
};


// Class TAGame.ConnectionQualitySave_TA
// 0x001C (0x00E4 - 0x00C8)
class UConnectionQualitySave_TA : public USaveObject_TA
{
public:
	float                                              RollingBadPingTime;                                       // 0x00C8(0x0004)
	float                                              RollingBadJitterTime;                                     // 0x00CC(0x0004)
	float                                              RollingBadPacketLossTime;                                 // 0x00D0(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x00D4(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.ConnectionQualitySave_TA.LastNotificationEpochSeconds
	unsigned long                                      bShowConnectionQualityIndicators : 1;                     // 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ConnectionQualitySave_TA");
		return ptr;
	}

};


// Class TAGame.VideoSettingsSave_TA
// 0x0010 (0x00D8 - 0x00C8)
class UVideoSettingsSave_TA : public USaveObject_TA
{
public:
	unsigned long                                      bVsync : 1;                                               // 0x00C8(0x0004)
	unsigned long                                      bShowWeatherFX : 1;                                       // 0x00C8(0x0004)
	unsigned long                                      bShowLightShafts : 1;                                     // 0x00C8(0x0004)
	unsigned long                                      bTranslucentArenaShaders : 1;                             // 0x00C8(0x0004)
	unsigned long                                      bShowLensFlares : 1;                                      // 0x00C8(0x0004)
	unsigned long                                      bEnableHDRSideBySideVisualizer : 1;                       // 0x00C8(0x0004)
	float                                              HDRBrightnessScale;                                       // 0x00CC(0x0004)
	float                                              HDRPaperWhiteScale;                                       // 0x00D0(0x0004)
	float                                              HDRGammaScale;                                            // 0x00D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VideoSettingsSave_TA");
		return ptr;
	}

};


// Class TAGame.NotificationSave_TA
// 0x0030 (0x00F8 - 0x00C8)
class UNotificationSave_TA : public USaveObject_TA
{
public:
	TArray<class UNotification_TA*>                    Notifications;                                            // 0x00C8(0x0010) (NeedCtorLink)
	unsigned long                                      bShowInGameNotifications : 1;                             // 0x00D8(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __bShowInGameNotifications__ChangeNotify;                 // 0x00E0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00DC(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NotificationSave_TA");
		return ptr;
	}


	void __bShowInGameNotifications__ChangeNotifyFunc();
	void AddNotification(class UNotification_TA* Notification);
};


// Class TAGame.VideoSettingsSavePC_TA
// 0x002C (0x0104 - 0x00D8)
class UVideoSettingsSavePC_TA : public UVideoSettingsSave_TA
{
public:
	int                                                WindowMode;                                               // 0x00D8(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	TArray<struct FOptionsValue>                       VideoOptions;                                             // 0x00E0(0x0010) (NeedCtorLink)
	struct FString                                     Resolution;                                               // 0x00F0(0x0010) (NeedCtorLink)
	int                                                MaxFPS;                                                   // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VideoSettingsSavePC_TA");
		return ptr;
	}

};


// Class TAGame.VideoSettingsSaveConsole_TA
// 0x0001 (0x00D9 - 0x00D8)
class UVideoSettingsSaveConsole_TA : public UVideoSettingsSave_TA
{
public:
	TEnumAsByte<EConsoleQualityMode>                   VideoQualityMode;                                         // 0x00D8(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VideoSettingsSaveConsole_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_WeatherToggled_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_WeatherToggled_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_WeatherToggled_TA");
		return ptr;
	}

};


// Class TAGame.__GFxData_Settings_TA__SetDefaults_E5FC8CE3455370B05CFF31BF4FA51195
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Settings_TA__SetDefaults_E5FC8CE3455370B05CFF31BF4FA51195 : public UObject
{
public:
	struct FName                                       Group;                                                    // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Settings_TA__SetDefaults_E5FC8CE3455370B05CFF31BF4FA51195");
		return ptr;
	}


	bool __GFxData_Settings_TA__SetDefaults_E5FC8CE3455370B05CFF31BF4FA51195(class UGFxData_UserSetting_TA* Setting);
};


// Class TAGame.SeqEvent_UserSettingChanged_TA
// 0x000C (0x0188 - 0x017C)
class USeqEvent_UserSettingChanged_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	struct FName                                       SettingName;                                              // 0x0180(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_UserSettingChanged_TA");
		return ptr;
	}

};


// Class TAGame.ProfileAimAssistSave_TA
// 0x0088 (0x0150 - 0x00C8)
class UProfileAimAssistSave_TA : public USaveObject_TA
{
public:
	unsigned long                                      bAimAssistEnabled : 1;                                    // 0x00C8(0x0004)
	unsigned long                                      bBallTrajectoryEnabled : 1;                               // 0x00C8(0x0004)
	unsigned long                                      bAirPitchSafetyEnabled : 1;                               // 0x00C8(0x0004)
	TEnumAsByte<ETernarySetting>                       TipSetting;                                               // 0x00CC(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00CD(0x0003) MISSED OFFSET
	int                                                AimAssistLevelOverride;                                   // 0x00D0(0x0004)
	int                                                MaxAimAssistLevelOverride;                                // 0x00D4(0x0004)
	struct FScriptDelegate                             __EventBallTrajectoryChanged__Delegate;                   // 0x00D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __bAimAssistEnabled__ChangeNotify;                        // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __bBallTrajectoryEnabled__ChangeNotify;                   // 0x0108(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0108(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __bAirPitchSafetyEnabled__ChangeNotify;                   // 0x0120(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0120(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __TipSetting__ChangeNotify;                               // 0x0138(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0138(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProfileAimAssistSave_TA");
		return ptr;
	}


	void __TipSetting__ChangeNotifyFunc();
	void __bAirPitchSafetyEnabled__ChangeNotifyFunc();
	void __bBallTrajectoryEnabled__ChangeNotifyFunc();
	void __bAimAssistEnabled__ChangeNotifyFunc();
	void SetBallTrajectoryEnabled(bool bEnable);
	void OnBallTrajectoryChanged();
	void SetAimAssistEnabled(bool bEnable);
	void SetAimAssistLevelOverride(int Level);
	void EventBallTrajectoryChanged();
};


// Class TAGame.__GFxData_Settings_TA__CrossplayPartyValidation_3B33709A403EEE92ED0BC58F7C84BD4F
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Settings_TA__CrossplayPartyValidation_3B33709A403EEE92ED0BC58F7C84BD4F : public UObject
{
public:
	class UGFxData_UserSetting_TA*                     UserSetting;                                              // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Settings_TA__CrossplayPartyValidation_3B33709A403EEE92ED0BC58F7C84BD4F");
		return ptr;
	}


	void __GFxData_Settings_TA__CrossplayPartyValidation_68EAD9E14A75C2CE145A6BA5F4D22516(class UGFxModal_X* _);
	void __GFxData_Settings_TA__CrossplayPartyValidation_4C302F88480A775CA1C757A52A019C32(class UGFxModal_X* _);
	void __GFxData_Settings_TA__CrossplayPartyValidation_40752DCD400552D4E4FCBAB9E8AC3E81(class UGFxModal_X* _);
	void __GFxData_Settings_TA__CrossplayPartyValidation_3B33709A403EEE92ED0BC58F7C84BD4F(class UGFxModal_X* _);
};


// Class TAGame.UIConfig_TA
// 0x0028 (0x00A0 - 0x0078)
class UUIConfig_TA : public UOnlineConfig_X
{
public:
	unsigned long                                      bReportServerButton : 1;                                  // 0x0078(0x0004) (DataBinding)
	unsigned long                                      bTournamentTeamColorSection : 1;                          // 0x0078(0x0004) (DataBinding)
	unsigned long                                      bShowCurrencyRechargeButton : 1;                          // 0x0078(0x0004) (DataBinding)
	unsigned long                                      bCrateRouletteEnabled : 1;                                // 0x0078(0x0004) (DataBinding)
	unsigned long                                      bPsyNetFriendListEnabled : 1;                             // 0x0078(0x0004) (DataBinding)
	unsigned long                                      bShowStatGraphOptions : 1;                                // 0x0078(0x0004)
	unsigned long                                      bUseCoherentBrowser : 1;                                  // 0x0078(0x0004)
	unsigned long                                      bRankedSportsEnabled : 1;                                 // 0x0078(0x0004) (DataBinding)
	int                                                FriendInvitationLimit;                                    // 0x007C(0x0004)
	int                                                ClubInvitationLimit;                                      // 0x0080(0x0004)
	TEnumAsByte<EMainMenuBackground>                   MainMenuBG;                                               // 0x0084(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0085(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __MainMenuBG__ChangeNotify;                               // 0x0088(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0085(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.UIConfig_TA");
		return ptr;
	}


	void __MainMenuBG__ChangeNotifyFunc();
};


// Class TAGame.Mutator_Freeplay_TA
// 0x003C (0x00A0 - 0x0064)
class UMutator_Freeplay_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	class ACar_TA*                                     CarArchetype;                                             // 0x0068(0x0008) (Edit)
	TArray<class ATeam_Soccar_TA*>                     TeamArchetypes;                                           // 0x0070(0x0010) (Edit, NeedCtorLink)
	class AGameEvent_Soccar_TA*                        SoccarGame;                                               // 0x0080(0x0008)
	TArray<struct FRumbleItemIndex>                    PlayerRumbleItems;                                        // 0x0088(0x0010) (NeedCtorLink)
	float                                              LastResetTime;                                            // 0x0098(0x0004)
	float                                              ResetCooldown;                                            // 0x009C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Freeplay_TA");
		return ptr;
	}


	void __Mutator_Freeplay_TA__Init_A381A87C456F1668273DA2872BE40DE4(class UGoal_TA* G);
	TArray<class AActor*> __Mutator_Freeplay_TA__HandleTeams_239F647740FE6F9776EF419AC1727B9D(class ATeam_Soccar_TA* T);
	void HandleBoost(class ACarComponent_Boost_TA* Boost, class UGameplaySettingsSave_TA* Settings);
	void HandleUnlimitedBoostChange(class ACar_TA* Car, class UGameplaySettingsSave_TA* Settings);
	void HandleGameplaySettingsSave(class ACar_TA* Car, class UGameplaySettingsSave_TA* Settings);
	class ASpecialPickup_TA* GetNextRumbleItem(class UGameEvent_Soccar_SubRules_Items_TA* Items, class APlayerController_TA* PC, struct FRumbleItemIndex* StructInitializer_2F1391044BD055AF6872FE9B4F760977);
	void GiveNextRumbleItem(class ACar_TA* Car);
	void HandleAttachedPickup(class ACar_TA* Car, class ASpecialPickup_TA* NewPickup);
	void MutateObject(class UObject* O);
	void HandleTeams(class AGameEvent_Team_TA* _, TArray<class ATeam_Soccar_TA*>* OfTypeLocal_01B8B4074BF922221C70078BD6ABA00B, TArray<class AActor*>* MapManyLocal_791A76ED4BBBBBB79D20B0B740F808A8);
	void HandlePlayerResetTraining(class AGameEvent_TA* _);
	void HandleLocalPlayerShell(class UGFxShell_X* Shell);
	void HandleLocalPlayer(class ULocalPlayer_TA* P);
	void SpawnDummyBot();
	bool ShouldStartRound();
	void CheckStartRound();
	void HandleGameStateChanged(class AGameEvent_TA* _);
	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.TAsyncResult__PrivilegeCheck_X
// 0x0050 (0x0120 - 0x00D0)
class UTAsyncResult__PrivilegeCheck_X : public UAsyncTask
{
public:
	class UPrivilegeCheck_X*                           Result;                                                   // 0x00D0(0x0008)
	struct FScriptDelegate                             __EventResult__Delegate;                                  // 0x00D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventResultComplete__Delegate;                          // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __ResultDelegate__Delegate;                               // 0x0108(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0108(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TAsyncResult__PrivilegeCheck_X");
		return ptr;
	}


	class UTAsyncResult__PrivilegeCheck_X* STATIC_CreateResultError(class UError* InError);
	class UTAsyncResult__PrivilegeCheck_X* STATIC_CreateResult(class UPrivilegeCheck_X* InResult);
	class UTAsyncResult__PrivilegeCheck_X* Copy();
	void ClearCallbacks();
	class UTAsyncResult__PrivilegeCheck_X* SetResultWhen(class UAsyncTask* Other, const struct FScriptDelegate& GetResultDelegate);
	class UTAsyncResult__PrivilegeCheck_X* SetResult(class UPrivilegeCheck_X* InResult, class UError* InError);
	class UTAsyncResult__PrivilegeCheck_X* NotifyOnResultComplete(const struct FScriptDelegate& Callback);
	class UTAsyncResult__PrivilegeCheck_X* NotifyOnResult(const struct FScriptDelegate& Callback);
	class UPrivilegeCheck_X* ResultDelegate();
	void EventResultComplete(class UPrivilegeCheck_X* OutResult, class UError* OutError);
	void EventResult(class UPrivilegeCheck_X* OutResult);
};


// Class TAGame.UserSettingMetrics_TA
// 0x0000 (0x0080 - 0x0080)
class UUserSettingMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.UserSettingMetrics_TA");
		return ptr;
	}


	void Changed(const struct FUniqueNetId& PlayerID, const struct FName& Id, const struct FString& Value);
};


// Class TAGame.__UserSettingObserverEventCache_TA__RecordSetting_116937B44571AD3ACC6FBCAEEF832F2F
// 0x0040 (0x00A0 - 0x0060)
class U__UserSettingObserverEventCache_TA__RecordSetting_116937B44571AD3ACC6FBCAEEF832F2F : public UObject
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0060(0x0038)
	struct FName                                       Id;                                                       // 0x0098(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__UserSettingObserverEventCache_TA__RecordSetting_116937B44571AD3ACC6FBCAEEF832F2F");
		return ptr;
	}


	bool __UserSettingObserverEventCache_TA__RecordSetting_116937B44571AD3ACC6FBCAEEF832F2F(const struct FSettingEvent& E);
};


// Class TAGame.GFxData_SplitscreenMatch_TA
// 0x0006 (0x01A0 - 0x019A)
class UGFxData_SplitscreenMatch_TA : public UGFxData_PrivateMatch_TA
{
public:
	unsigned char                                      UnknownData00[0x6];                                       // 0x019A(0x0006) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_SplitscreenMatch_TA");
		return ptr;
	}


	void StartSearch();
};


// Class TAGame.GFxData_StartMenu_TA
// 0x0040 (0x00D8 - 0x0098)
class UGFxData_StartMenu_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineGame_X*                               OnlineGame;                                               // 0x0098(0x0008) (Edit)
	struct FString                                     SigningInText;                                            // 0x00A0(0x0010) (Const, Localized, NeedCtorLink)
	class UGFxModal_X*                                 SignInModal;                                              // 0x00B0(0x0008) (Transient)
	int                                                ClickedControllerIndex;                                   // 0x00B8(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventTitleScreenClicked__Delegate;                      // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00BC(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_StartMenu_TA");
		return ptr;
	}


	void __GFxData_StartMenu_TA__SyncOnlineData_CC6E3BEA497F50F7EC6B599D11BA8AEC(class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError* Error);
	void OnRequiresLicenseAgreement(int ControllerIndex);
	void HandleSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError* Error);
	void OnPrimaryPlayerSet(int ControllerIndex);
	class ULocalPlayer_TA* GetPrimaryLocalPlayer();
	void OnContinueWithNoUser(class UGFxModal_X* Modal);
	void OnShowAccountPicker(class UGFxModal_X* Modal);
	void HandleLoginCancelled();
	void HandlePrimaryPlayerLoginFailed(unsigned char PlayerNum, TEnumAsByte<EOnlineServerConnectionStatus> ErrorCode);
	void HandlePrimaryPlayerLoginChange(unsigned char PlayerNum);
	void ClearPrimaryPlayerLoginDelegates(unsigned char PlayerNum);
	void ProgressToMainMenu(int ControllerIndex);
	void OnChoosePlayerName();
	void HandleSyncOnlinePlayerStorageStarted(class UOnlineStorageSyncManager_TA* OnlineStorageSyncManager, class UAsyncTask* SyncTask);
	void CreateOnlinePlayerStorageSyncTaskAndModal(class USaveData_TA* SaveData);
	bool SyncOnlineData();
	void TitleScreenClicked(int ControllerIndex);
	void OnKonamiCode();
	void OnRemoved();
	void OnShellSet();
	void EventTitleScreenClicked(class UGFxData_StartMenu_TA* StartMenu);
};


// Class TAGame.Eula_TA
// 0x0010 (0x0070 - 0x0060)
class UEula_TA : public UObject
{
public:
	int                                                EulaHash;                                                 // 0x0060(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	class UEulaConfig_TA*                              EulaConfig;                                               // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Eula_TA");
		return ptr;
	}


	void __Eula_TA__Construct_4B896F0F4ACAEDE4F6B51EA644FF0DB8(class UOnlineGame_X* OnlineGame);
	void AcceptEula();
	bool RequiresAcceptance();
	class UUISavedValues_TA* GetUISave();
	class UEulaSave_TA* GetEulaSave();
	void InitEula(class UOnlineLegalText_X* Eula);
	void Construct();
};


// Class TAGame.__GFxData_StartMenu_TA__HandleSyncOnlinePlayerStorageStarted_34503E0C441CEB2BEAA954B5CF202423
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_StartMenu_TA__HandleSyncOnlinePlayerStorageStarted_34503E0C441CEB2BEAA954B5CF202423 : public UObject
{
public:
	class UOnlineStorageSyncManager_TA*                OnlineStorageSyncManager;                                 // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_StartMenu_TA__HandleSyncOnlinePlayerStorageStarted_34503E0C441CEB2BEAA954B5CF202423");
		return ptr;
	}


	void __GFxData_StartMenu_TA__HandleSyncOnlinePlayerStorageStarted_34503E0C441CEB2BEAA954B5CF202423();
};


// Class TAGame.GFxData_Stats_TA
// 0x0020 (0x00B8 - 0x0098)
class UGFxData_Stats_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxStatData>                        Events;                                                   // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	TArray<class UStatEvent_TA*>                       StatEvents;                                               // 0x00A8(0x0010) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Stats_TA");
		return ptr;
	}


	bool __GFxData_Stats_TA__GetExcludedStats_64EC714B41FAFB6EAC261985F5194C5D(class UGameMode_TA* M);
	bool __GFxData_Stats_TA__GetExcludedStats_FEB53C1D4D59FE578E42D9AC303BF34E(class UGameMode_TA* M);
	void LoadSavedStats();
	void GetExcludedStats(TArray<struct FName>* Excluded);
	void SetupStatData(struct FGFxStatData* StructInitializer_4E5A6A14437BB615FD7DB4A56816E48F);
	void OnShellSet();
};


// Class TAGame.__GFxData_Stats_TA__SetupStatData_36E4E1A44D0DEA8DF180B5A45423BFD0
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Stats_TA__SetupStatData_36E4E1A44D0DEA8DF180B5A45423BFD0 : public UObject
{
public:
	class UStatEvent_TA*                               EventStat;                                                // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Stats_TA__SetupStatData_36E4E1A44D0DEA8DF180B5A45423BFD0");
		return ptr;
	}


	bool __GFxData_Stats_TA__SetupStatData_36E4E1A44D0DEA8DF180B5A45423BFD0(const struct FName& E);
};


// Class TAGame.__GFxData_System_TA__OnShellSet_268EE0524BA37446EF0414AA9E2093B6
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_System_TA__OnShellSet_268EE0524BA37446EF0414AA9E2093B6 : public UObject
{
public:
	class UEngineShare_X*                              EngineShare;                                              // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_System_TA__OnShellSet_268EE0524BA37446EF0414AA9E2093B6");
		return ptr;
	}


	void __GFxData_System_TA__OnShellSet_268EE0524BA37446EF0414AA9E2093B6();
};


// Class TAGame.GFxData_Training_TA
// 0x0058 (0x00F0 - 0x0098)
class UGFxData_Training_TA : public UGFxDataSingleton_X
{
public:
	struct FName                                       TrainingType;                                             // 0x0098(0x0008) (DataBinding)
	int                                                CurrentScore;                                             // 0x00A0(0x0004) (DataBinding)
	int                                                CurrentRound;                                             // 0x00A4(0x0004) (DataBinding)
	int                                                TotalRounds;                                              // 0x00A8(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	struct FString                                     Difficulty;                                               // 0x00B0(0x0010) (NeedCtorLink, DataBinding)
	struct FName                                       SelectedFreeplayMap;                                      // 0x00C0(0x0008) (DataBinding)
	unsigned long                                      bShowBoostMeter : 1;                                      // 0x00C8(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00CC(0x0004) MISSED OFFSET
	TArray<struct FUseAction>                          UseActions;                                               // 0x00D0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     TutorialTip;                                              // 0x00E0(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Training_TA");
		return ptr;
	}


	void OnRemoved();
	void SetCurrentPlaylist(const struct FName& Playlist);
	void StartTutorialV2(const struct FString& MapName, bool bAutoEntered);
	bool HasCompletedTraining(const struct FString& InType, const struct FString& InDifficulty);
	bool HasCompletedTutorial(TEnumAsByte<EV2TutorialType> InType);
	void PlayV2Tutorial(TEnumAsByte<EV2TutorialType> Type, bool bAutoEntered);
	void PlayTutorial(bool bAdvanced);
	void PlayFreeplayMap(const struct FName& Map);
	void PlayTraining(const struct FString& Type, const struct FString& TrainingDifficulty);
	void HandleBoostMeterChanged(class AGameEvent_Tutorial_TA* GameEvent);
	struct FString ParseDifficulty(TEnumAsByte<EDifficulty> InDifficulty);
	void HandleEditorDataChanged(class AGameEvent_TrainingEditor_TA* GameEvent);
	void HandleDifficultyUpdated(class AGameEvent_Tutorial_TA* GameEvent);
	void HandleScoreUpdated(class AGameEvent_Tutorial_TA* GameEvent);
	void SetTrainingEditorGameEvent(class AGameEvent_TrainingEditor_TA* InGameEvent);
	void SetTrainingGameEvent(class AGameEvent_Tutorial_TA* InGameEvent);
	void HandleTutorialTipChanged(class AGameEvent_Tutorial_TA* GameEvent, const struct FString& NewTip);
	void HandleUseActionsChanged(class AGameEvent_Tutorial_TA* GameEvent);
	void HandleTutorialEnded(class UTutorial_TA* Tutorial);
	void HandleMapPrefsSave(class UMapPrefsSave_TA* Save);
	void OnShellSet();
};


// Class TAGame.GameEvent_GameEditor_TA
// 0x0070 (0x0C98 - 0x0C28)
class AGameEvent_GameEditor_TA : public AGameEvent_Soccar_TA
{
public:
	class UClass*                                      SaveDataClass;                                            // 0x0C28(0x0008)
	class USaveData_GameEditor_TA*                     SaveData;                                                 // 0x0C30(0x0008)
	int                                                ActiveRoundNumber;                                        // 0x0C38(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0C3C(0x0004) MISSED OFFSET
	TArray<struct FSpawnArchetypeData>                 SpawnableArchetypes;                                      // 0x0C40(0x0010) (NeedCtorLink)
	TArray<class ADynamicSpawnPointMesh_TA*>           CarSpawnPoints;                                           // 0x0C50(0x0010) (NeedCtorLink)
	class AGameEditor_Pawn_TA*                         EditorPawnArchetype;                                      // 0x0C60(0x0008)
	int                                                MaxRounds;                                                // 0x0C68(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0C6C(0x0004) MISSED OFFSET
	TArray<struct FActorHistory>                       UndoHistory;                                              // 0x0C70(0x0010) (NeedCtorLink)
	int                                                HistoryPosition;                                          // 0x0C80(0x0004)
	int                                                MaxUndoHistory;                                           // 0x0C84(0x0004)
	class AFXActor_X*                                  FXActorArchetype;                                         // 0x0C88(0x0008) (Edit)
	class AFXActor_X*                                  FXActor;                                                  // 0x0C90(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_GameEditor_TA");
		return ptr;
	}


	void HandleTriggerTouched(class AGameEditor_Trigger_TA* Trigger, class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void RotateActor(class APlayerController_TA* PC, bool bSnapOrientation);
	void OnPlayerAdded(class AController* NewPlayer);
	void PrevRound();
	void NextRound();
	void DecreaseTime();
	void IncreaseTime();
	void StopEditing(class APlayerController_TA* PC);
	void StartEditing();
	void CycleActor(class APlayerController_TA* PC);
	void ReleaseGrabbedActor(class APlayerController_TA* PC);
	void ReleaseRotateActor(class APlayerController_TA* PC);
	void ToggleRotateActor(class APlayerController_TA* PC);
	void SetSaveData(class USaveData_GameEditor_TA* Data);
	void ToggleGrabActor(class APlayerController_TA* PC);
	void ToggleReleaseActor(class APlayerController_TA* PC);
	void ReleaseActor(class APlayerController_TA* PC);
	void GrabActor(class APlayerController_TA* PC);
	bool CanQueSaveReplay();
	bool ShouldUpdateCrosshair();
	int GetPlayerTeamNumber();
	bool CanAddHistory();
	void ToggleEditorRound();
	void CommitRedoRound();
	void ResetRound();
	void Save();
	void Redo(class APlayerController_TA* PC);
	void Undo(class APlayerController_TA* PC);
	class AActor* FindActorByName(const struct FName& actorName);
	bool RestoreFromHistory(class APlayerController_TA* PC, TEnumAsByte<EHistoryType> HistoryType, const struct FActorHistory& RestoreHistory);
	TEnumAsByte<EHistoryType> GetOtherHistoryType(TEnumAsByte<EHistoryType> HistoryType);
	void ClampUndoHistory();
	bool AddToHistoryArray(const TScriptInterface<class UInterface_GameEditor_TA>& EditorActor, const struct FActorHistory& NewHistory);
	bool HistoriesAreEqual(const TScriptInterface<class UInterface_GameEditor_TA>& EditorActor, const struct FActorHistory& H0, const struct FActorHistory& H1);
	bool AddUndoHistory(const TScriptInterface<class UInterface_GameEditor_TA>& EditorActor, TEnumAsByte<EHistory> HistoryEditType, bool bClearRedoHistory);
	bool AddHistory(TEnumAsByte<EHistoryType> HistoryType, const TScriptInterface<class UInterface_GameEditor_TA>& EditorActor, TEnumAsByte<EHistory> HistoryEditType, bool bClearRedoHistory);
	struct FActorHistory MakeHistory(const TScriptInterface<class UInterface_GameEditor_TA>& EditorActor, TEnumAsByte<EHistory> HistoryEditType);
	void ClearRedoHistory();
	void ClearAllHistory();
	class AActor* DeserializeAndSpawn(const struct FString& SerializedData, class UClass* ClassType, TEnumAsByte<EHistoryType> HistoryType);
	bool DestroyActor(class AActor* A, TEnumAsByte<EHistoryType> HistoryType);
	bool IsInEditorMode();
	void RemoveAllPointsFromScore(int TeamIndex);
	void RemovePointsFromScore(int PointsToRemove, int TeamIndex);
	struct FName GetDesiredSoundState();
	void DeleteAllExistingActorsBasedOffSpawnList();
	int GetSpawnedActorCount(const struct FSpawnArchetypeData& ArchetypeData);
	bool RoundContainsASwitch();
	void EnableTriggers(bool bEnable);
	void HideCarSpawnPoints(bool bHide);
	void ResetSpawnLocations();
	void OnSpawnedArchetype(class AActor* SpawnedActor, TEnumAsByte<EHistoryType> HistoryType);
	void SpawnArchetype(class APlayerController_TA* Controller, int ArchetypeIndex);
	struct FSpawnArchetypeData GetSelectedSpawnArchetype(int Index);
	void IncrementSelectedSpawnArchetypeIndex(int Direction, int* Index);
	bool CanChangeTeam();
	void ResetBallsToDefaultPosition();
	void FireBalls();
	void Interact();
	bool ShouldResetBalls();
	void OnVehicleSetup(class ACar_TA* Car);
	void HandleVehicleSetup(class ACar_TA* Car);
	void OnPlayerRestarted(class ACar_TA* PlayerCar);
	void GetSpawnLocationAndRotation(class AController* Player, struct FVector* SpawnLocation, struct FRotator* SpawnRotation);
	bool RestartPlayer(class AController* NewPlayer);
	class AGameEditor_Pawn_TA* SpawnEditorPawn(class AController* NewPlayer, const struct FVector& SpawnLoc, const struct FRotator& SpawnRot);
	void SetupInitialPawnOrientation(class APlayerController* NewPlayer);
	bool ChooseTeam(int TeamIndex, class APlayerController_TA* Player);
	void InitFX();
	void PostBeginPlay();
};


// Class TAGame.GameEvent_TrainingEditor_TA
// 0x00F8 (0x0D90 - 0x0C98)
class AGameEvent_TrainingEditor_TA : public AGameEvent_GameEditor_TA
{
public:
	float                                              MinRoundTime;                                             // 0x0C98(0x0004)
	float                                              MaxRoundTime;                                             // 0x0C9C(0x0004)
	unsigned long                                      bNoEditor : 1;                                            // 0x0CA0(0x0004) (Transient)
	unsigned long                                      bDisplayedRedoPenaltyMessage : 1;                         // 0x0CA0(0x0004) (Transient)
	unsigned long                                      bUnsavedChanges : 1;                                      // 0x0CA0(0x0004) (Transient)
	int                                                PointsScoredThisRound;                                    // 0x0CA4(0x0004) (Transient)
	class UGFxModal_X*                                 ResetModal;                                               // 0x0CA8(0x0008)
	int                                                ShotAttempt;                                              // 0x0CB0(0x0004) (Transient)
	int                                                GoalieScore;                                              // 0x0CB4(0x0004) (Transient)
	TEnumAsByte<EPlayTestType>                         PlayTestType;                                             // 0x0CB8(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0CB9(0x0007) MISSED OFFSET
	TArray<class AActor*>                              GoalMeshBlockers;                                         // 0x0CC0(0x0010) (Transient, NeedCtorLink)
	class AActor*                                      GoalMeshBlockerArchetype;                                 // 0x0CD0(0x0008)
	class USaveData_GameEditor_Training_TA*            TrainingData;                                             // 0x0CD8(0x0008) (Transient)
	struct FName                                       PrePlaytestState;                                         // 0x0CE0(0x0008) (Transient)
	float                                              SaveDelayTime;                                            // 0x0CE8(0x0004)
	float                                              SaveCooldown;                                             // 0x0CEC(0x0004)
	struct FString                                     TrainingFileName;                                         // 0x0CF0(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventRoundTimeChanged__Delegate;                        // 0x0D00(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0D00(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRoundChanged__Delegate;                            // 0x0D18(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0D18(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRoundFinished__Delegate;                           // 0x0D30(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0D30(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPlaytestStarted__Delegate;                         // 0x0D48(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0D48(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventUnsavedChanges__Delegate;                          // 0x0D60(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0D60(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSaveResult__Delegate;                              // 0x0D78(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0D78(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_TrainingEditor_TA");
		return ptr;
	}


	void OnLoadingMovieClosed();
	void HandlePrimaryPlayerChange(class ULocalPlayer* OldPrimary, class ULocalPlayer* NewPrimary);
	void TagHistoryChanges();
	void MarkAsDirty();
	void ForceTagHistoryChanges();
	void SetTracedCrosshairActor(class APlayerController_TA* PC, class AActor* NewActor);
	void HandleBallWentThruRing(class ABall_GameEditor_TA* Ball);
	bool AllowDynamicCrowd();
	void BroadcastGoMessage();
	int GetTotalRounds();
	TEnumAsByte<EDifficulty> GetDifficulty();
	TEnumAsByte<ETrainingType> GetTrainingType();
	bool DestroyBall(class ABall_TA* Ball);
	void Save();
	void HandleSaveResult(const struct FSaveObjectResult& Result);
	void SaveInternal(struct FSaveObjectResult* StructInitializer_EDF7D05C460D40D62E242098E8218044);
	void OnTrainingModeLoaded();
	void DuplicateRound(int Index);
	void SetMetaData(const struct FString& NewName, TEnumAsByte<ETrainingType> NewType, TEnumAsByte<EDifficulty> NewDifficulty, TArray<int> NewTags);
	void ReorderRound(int FromIndex, int ToIndex);
	void SetRoundTimeLimit(float NewRoundTime);
	bool HandleNextGame();
	void ResetBalls();
	class UTrainingEditorMetrics_TA* GetTrainingMetrics();
	void Load(const struct FString& SaveName, class APlayerController_TA* PC);
	class AActor* GetFirstFoundArchetype(const struct FName& ArchetypeName);
	void DestroyGoalMeshBlockers();
	void UpdateGoalMeshBlocker();
	int GetScore();
	void RemovePointsFromScore(int PointsToRemove, int TeamIndex);
	bool ShowScorerGoalMessage();
	void OnResetRoundCancel(class UGFxModal_X* Modal);
	void OnResetRoundConfirm(class UGFxModal_X* Modal);
	void ShowResetRoundMessage();
	bool ShowPenaltyMessage();
	int GetPlayerTeamNumber();
	int GetBallGoalScoreNumber();
	void RemoveAllPointsFromScore(int TeamIndex);
	bool IncrementRound(bool bLoop);
	int GetStoredArchetypeCount(int RoundNumber, class UClass* ClassType);
	void SetupInitialPawnOrientation(class APlayerController* NewPlayer);
	void LoadRoundData(const struct FEditorRoundData& Round, class UClass* ClassType);
	void LoadRound(const struct FEditorRoundData& Round);
	struct FVector AdjustToFloorLocation(const struct FVector& TraceStart, const struct FVector& CollsionExtent);
	class AActor* SpawnArchetypeAtAndAdjustToFloor(class AActor* Archetype, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	void SpawnBallAndStartPointAt(const struct FVector& BallSpawnLocation, const struct FRotator& BallSpawnRotation, const struct FVector& StartPointSpawnLocation, const struct FRotator& StartPointSpawnRotation);
	void SetupDefaultRound();
	void SwitchToRoundNumber(int RoundNumber, bool BackupCurrentRound);
	void SetRoundByNumber(int RoundNumber, const struct FEditorRoundData& RoundData);
	void DeleteRound(int RoundToDelete);
	struct FEditorRoundData GetCurrentRoundData();
	bool CanPlayTestRound(const struct FEditorRoundData& Round);
	void RestartPlayTest();
	void EndPlayTest();
	void StartPlayTest(TEnumAsByte<EPlayTestType> InPlayTestType);
	bool CanPlayTestRoundNumber(int RoundNumber);
	void SetUnsavedChanges(bool bInUnsavedChanges);
	void UpdateActiveRoundData();
	void StartNewRound();
	bool IsValidRoundIndex(int ArrayIndex);
	void AddLocalPlayer(class APlayerController_TA* Player);
	struct FName GetMatchTypeName();
	void OnInit();
	void Destroyed();
	void PostBeginPlay();
	void EventSaveResult(bool bSuccess);
	void EventUnsavedChanges(bool bOutUnsavedChanges);
	void EventPlaytestStarted(class AGameEvent_TrainingEditor_TA* GamEvent);
	void EventRoundFinished(class AGameEvent_TrainingEditor_TA* GamEvent);
	void EventRoundChanged(class AGameEvent_TrainingEditor_TA* GamEvent);
	void EventRoundTimeChanged(class AGameEvent_TrainingEditor_TA* GameEvent);
};


// Class TAGame.GFxData_Vote_TA
// 0x0024 (0x00B8 - 0x0094)
class UGFxData_Vote_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	TEnumAsByte<EVoteSubject>                          Subject;                                                  // 0x0098(0x0001) (DataBinding)
	TEnumAsByte<EVoteStatus>                           VoteStatus;                                               // 0x0099(0x0001) (DataBinding)
	TEnumAsByte<EVoteStatus>                           LocalVoteStatus;                                          // 0x009A(0x0001) (DataBinding)
	unsigned char                                      UnknownData01[0x1];                                       // 0x009B(0x0001) MISSED OFFSET
	int                                                YesVotes;                                                 // 0x009C(0x0004) (DataBinding)
	int                                                NoVotes;                                                  // 0x00A0(0x0004) (DataBinding)
	int                                                RequiredVotes;                                            // 0x00A4(0x0004) (DataBinding)
	int                                                TimeRemaining;                                            // 0x00A8(0x0004) (DataBinding)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	class AVoteActor_TA*                               VoteActor;                                                // 0x00B0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Vote_TA");
		return ptr;
	}


	void SetVoteStatus(TEnumAsByte<EVoteStatus> Status);
	void ClearVote();
	void VoteNo();
	void VoteYes();
	void HandleDestroyed(class AVoteActor_TA* InVoteActor);
	void HandleFinished(class AVoteActor_TA* InVoteActor);
	void UpdateData(class AVoteActor_TA* InVoteActor);
	void OnRemoved();
	void SetVoteActor(class AVoteActor_TA* InVoteActor);
};


// Class TAGame.LoadingScreen_TA
// 0x00E4 (0x0144 - 0x0060)
class ULoadingScreen_TA : public UObject
{
public:
	TArray<struct FString>                             ProtipMessages;                                           // 0x0060(0x0010) (Const, Localized, NeedCtorLink)
	TArray<struct FString>                             ProtipMessagesQueue;                                      // 0x0070(0x0010) (Transient, NeedCtorLink)
	struct FString                                     MaximumPlayerCounts;                                      // 0x0080(0x0010) (Transient, NeedCtorLink)
	class UGFxEngine_TA*                               GFxEngineRef;                                             // 0x0090(0x0008) (Transient)
	class UOnlineGame_X*                               OnlineGame;                                               // 0x0098(0x0008) (Transient)
	struct FLoadingMovieMapInfo                        LoadingScreenInfo;                                        // 0x00A0(0x00A0) (Transient, NeedCtorLink)
	unsigned long                                      bUnfairTeams : 1;                                         // 0x0140(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadingScreen_TA");
		return ptr;
	}


	void HandlePreLoadMap(const struct FString& MapName);
	struct FString GetProtipMessageWithIcons(const struct FString& ProtipMessage, const struct FString& OpenDelimiter, const struct FString& CloseDelimiter, TEnumAsByte<EInputPlatformType> InputType);
	TEnumAsByte<EInputPlatformType> GetProtipInputType();
	void OnLargeImageMapLoaded(const struct FMapImageLoadResult& LoadResult);
	void HandleCurrentPlaylistSet(class UOnlineGameAccount_X* InAccount, class UGameSettingPlaylist_X* NewPlaylist);
	void HandlePreLoadReplay(class UReplayManager_TA* ReplayManager, class UReplay_TA* Replay);
	void HandleMaxPlayersChanged(class UOnlineGameJoinGame_X* OnlineGameJoinGame, int MaxPlayers);
	void HandleJoiningGame(class UOnlineGameJoinGame_X* OnlineGameJoinGame);
	void HandleOnlineGameInitialized();
	void HandlePostLoadMap();
	void HandleLoadingUnfairMatch(class APlayerControllerBase_TA* PlayerControllerBase);
	struct FString GetLocalizedMaximumPlayerCounts(int MaxPlayers);
	void HandleMatchSettingsChanged(class AGameEvent_TA* GameEvent, const struct U_Types_X_FCustomMatchSettings& NewMatchSettings);
	void Init(class UGFxEngine_TA* NewGFxEngine);
};


// Class TAGame.GFxData_MultiItemDrops_TA
// 0x0060 (0x00F8 - 0x0098)
class UGFxData_MultiItemDrops_TA : public UGFxDataSingleton_X
{
public:
	class UGFxData_ItemDropGroup_TA*                   ActiveGroup;                                              // 0x0098(0x0008)
	TArray<class UItemDropGroup_TA*>                   PendingGroups;                                            // 0x00A0(0x0010) (NeedCtorLink)
	int                                                GroupsRemaining;                                          // 0x00B0(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	struct FString                                     DropTableName;                                            // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	class UProductsSave_TA*                            CurrentProductsSave;                                      // 0x00C8(0x0008)
	class UProductsOfflineSave_TA*                     CurrentOfflineProductsSave;                               // 0x00D0(0x0008)
	class UWallet_TA*                                  Wallet;                                                   // 0x00D8(0x0008)
	TArray<struct U_Types_TA_FOnlineXPReward>          RewardDrops;                                              // 0x00E0(0x0010) (Transient, NeedCtorLink)
	struct FName                                       DropGroupType_ALL;                                        // 0x00F0(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MultiItemDrops_TA");
		return ptr;
	}


	void __GFxData_MultiItemDrops_TA__OnShellSet_206D078740684877E277A78589136EF7(class USaveData_TA* _, class UOnlineProduct_TA* __);
	void __GFxData_MultiItemDrops_TA__OnShellSet_39EECD0B439ECF99E07DA7B076F2E7DE(class UWallet_TA* InWallet);
	void __GFxData_MultiItemDrops_TA__OnShellSet_9145929B49813278F8948EAF0A42141C(class UWallet_TA* W, struct FCurrency* Drop, TArray<struct FCurrency>* ArrayInitializer_2DE693974659B40B5AFD6FBD98EFFE36);
	void __GFxData_MultiItemDrops_TA__OnShellSet_B684C6114C0F2B2FC10256828FA274CB(class UShopsManager_TA* InShopsManager);
	void __GFxData_MultiItemDrops_TA__OnShellSet_D7342DAF43AC06DD580E209C13F87F6B(class APlayerControllerBase_TA* InController);
	void __GFxData_MultiItemDrops_TA__CheckForNewGarageSlots_21FEDDEE4BAFB64AFF8462960EC04E8A(class USaveData_TA* Data, class UProductSlot_TA* Slot);
	void __GFxData_MultiItemDrops_TA__HandleGroupSeen_09F9A0434DEE1E4BB9137C8D6C17B11C(const struct FProductDrop& P);
	void ForceDisplayUnseenContainerDrops();
	int GetTotalRewardPips();
	bool IsSlotInGroup(int SlotIndex);
	bool IsProductInGroup();
	TArray<struct FProductHashID> GetUnseenContainerDrops(TArray<struct FProductHashID>* ArrayInitializer_76A8F7704AC95505E355CF8FC48B4954);
	void RemoveContainerDrop(const struct FProductHashID& HashID);
	void ClearContainerDrops();
	void OnAllItemDropsHandled();
	bool AnyPlayerHasContainerDrops(TArray<struct FProductHashID>* ArrayResultLocal_FC509E72405B0B3E01DAD587D170D8E6);
	bool AnyPlayerHasUnlocks();
	void PlayerAllDropsHandled();
	class UProfile_TA* GetProfile();
	void EquipNow(const struct FProductHashID& HashID);
	bool CanEquipNow(const struct FProductHashID& HashID);
	void AllGroupsShown();
	void ShowedGroup();
	void ShowNextDropType(const struct FName& InTableName);
	int GetPendingDropCount(const struct FName& InTableName);
	void HandleGroupSeen(class UItemDropGroup_TA* DropGroup);
	void HandleActiveGroupSeen();
	void RemoveInvalidDrops();
	void ClearDropsByType(const struct FName& DropType, TArray<class UItemDropGroup_TA*>* DifferenceLocal_5ACFE3D0410CC168AEC9E1AF91C0B2C0);
	TArray<class UItemDropGroup_TA*> GetDropsByType(const struct FName& DropType, TArray<class UItemDropGroup_TA*>* FilterLocal_7615B50F46A946E917C0F48CC6E2A521);
	void RemoveDropsOfClassType(class UClass* DropClass);
	void ClearActiveGroup();
	void HandleGarageSlotDrop(class USaveData_TA* SaveData, class UProductSlot_TA* Slot);
	void HandleChallengeRewardCollected(class UChallengeManager_TA* ChallengeManager, class UChallenge_TA* Challenge, struct FOnlineReward* Reward);
	void HandleReceivedXPDrop(class URewardDrop_TA* RewardDrop);
	class UCompleteTaskDropGroup_TA* DropRewardGroup(class UClass* CompleteTaskClass, const struct FOnlineReward& Reward, const struct FString& Title, class UTexture* Icon, int XPChange, int PointChange, int PipChange, TArray<struct FCurrency>* Currency);
	void AddProductToGroup(class UItemDropGroup_TA* ItemGroup);
	void AddOfflineProductToGroup(int ProductID, class UItemDropGroup_TA* ItemGroup);
	void AddOnlineProductToGroup(class UItemDropGroup_TA* ItemGroup, struct FOnlineProductData* ProductData);
	void HandleRewardUnlocked(class USaveData_TA* Data, int ProductID);
	void CheckForNewGarageSlots(class USaveData_TA* SaveData, class UProductsOfflineSave_TA* ProductsOfflineSave);
	void CheckForNewOfflineProducts(class USaveData_TA* SaveData, class UProductsOfflineSave_TA* ProductsOfflineSave);
	void HandleNewOnlineItem(class USaveData_TA* InSaveData, class UOnlineProduct_TA* OnlineProduct);
	void CheckForNewOnlineProducts(class USaveData_TA* SaveData, class UProductsSave_TA* ProductsSave);
	void VerifyHashIDs(class UItemDropGroup_TA* InDropGroup);
	void HandleProductsOfflineSaveLoaded(class UProductsOfflineSave_TA* ProductsOfflineSave);
	void HandleProductsSaveLoaded(class UProductsSave_TA* ProductsSave);
	void HandleOnlineProductsSynced(class USaveData_TA* Data);
	void HandleSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError* Error);
	void MakeGroupActive(class UItemDropGroup_TA* InActiveGroup);
	void OnGroupAdded();
	void RequeueActiveGroup();
	class UItemDropGroup_TA* InternalAddGroup(class UItemDropGroup_TA* Group);
	class UItemDropGroup_TA* AddGroup(class UClass* GroupClass, TEnumAsByte<EDropGroupDisplayOrder> DisplayOrder);
	void DropXPGroup();
	void DropItemGroup(int XP, TArray<struct FOnlineProductData>* OnlineProducts, TArray<int>* OfflineProductIDs, TArray<struct FCurrency>* CurrencyDrops);
	struct FCurrency CreateCurrencyDrop(int Id, int Amount);
	void ProcessCurrencyDrop(struct FCurrency* Drop);
	void HandleShopPurchase(TArray<struct FOnlineProductData> PurchasedProducts, TArray<struct FCurrency> PurchasedCurrencies);
	void HandleReceivedCurrencyDrop(class APlayerControllerBase_TA* PC, const struct FCurrency& Drop);
	void OnShellSet();
};


// Class TAGame.GFxHUD_Spectator_TA
// 0x0040 (0x0548 - 0x0508)
class AGFxHUD_Spectator_TA : public AGFxHUD_TA
{
public:
	class UGFxData_ReplayViewer_TA*                    ViewerData;                                               // 0x0508(0x0008) (Transient)
	float                                              ZoomSpeed;                                                // 0x0510(0x0004) (Edit)
	float                                              ZoomClickTime;                                            // 0x0514(0x0004) (Edit)
	class AGFxHUD_TA*                                  GameHUD;                                                  // 0x0518(0x0008) (Transient)
	unsigned long                                      bZoomIn : 1;                                              // 0x0520(0x0004) (Transient)
	unsigned long                                      bZoomOut : 1;                                             // 0x0520(0x0004) (Transient)
	float                                              ZoomInTime;                                               // 0x0524(0x0004) (Transient)
	float                                              ZoomOutTime;                                              // 0x0528(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x052C(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __OpenMenuWithKeycodeDelegate__Delegate;                  // 0x0530(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x052C(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_Spectator_TA");
		return ptr;
	}


	void CycleNameplate();
	void HandleCanVoteForfeitChanged(class AGameEvent_TA* InGameEvent);
	class ACar_TA* GetFocusCar();
	class APRI_TA* GetPRIFromPlayerIDString(const struct FString& PlayerIDString);
	void HandleViewedPlayerTeamChanged(class APRI_X* InPRI);
	void ViewCycle(int Direction);
	void ViewPrev();
	void ViewNext();
	void GetViewableActors(TArray<struct FString>* Actors, int* CurrentIndex);
	void AddViewableActor(const struct FString& actorName, TArray<struct FString>* Actors, int* CurrentIndex);
	void ViewFly();
	void ViewAutoCam();
	void ViewDefault();
	void OnViewedPlayerChanged(const struct FString& PreviousPlayerIDString, class APRI_TA* NewPlayerPRI);
	void ViewPlayer(int Team, int Player);
	void OpenReplayFXMenu();
	void OpenHUDMenu();
	void OpenCameraMenu();
	void CycleCamera();
	void OpenFocusMenu();
	void CycleFocus();
	TArray<struct FString> GetFocusPlayerNames();
	void OpenMenuWithKeycode(const struct FScriptDelegate& Callback);
	void OpenMenuWithKeycodeDelegate(int KeyCode, int MouseButton);
	void UpdateHudVisibility();
	void CycleHUD();
	bool ProcessZoomPress(bool bPressed, int DeltaFOV, float* Time);
	void ZoomOut(bool bPressed);
	void ZoomIn(bool bPressed);
	void AdjustZoom(float DeltaFOV);
	void TickZoom(float DeltaTime, bool bZoom, float Speed, float* Time);
	void Tick(float DeltaTime);
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	class UGFxData_PRI_TA* CreateGFxPRIData();
	void HandleReservationsUpdated(class AGRI_X* GRI);
	void Destroyed();
	void InitGFx();
};


// Class TAGame.GFxNameplatesManager_TA
// 0x0068 (0x00D8 - 0x0070)
class UGFxNameplatesManager_TA : public UComponent
{
public:
	class UGFxMoviePlayer_X*                           MovieArchetype;                                           // 0x0070(0x0008) (Edit)
	class UNameplateMeshComponent_TA*                  NameplateMeshArchetype;                                   // 0x0078(0x0008) (Edit, ExportObject, Component, EditInline)
	class UGFxShell_X*                                 Shell;                                                    // 0x0080(0x0008) (Transient)
	class UGFxMoviePlayer_X*                           Movie;                                                    // 0x0088(0x0008) (Transient)
	unsigned long                                      bHidden : 1;                                              // 0x0090(0x0004) (Transient)
	unsigned long                                      bShowingShortcuts : 1;                                    // 0x0090(0x0004) (Transient)
	unsigned long                                      bDebug : 1;                                               // 0x0090(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	TArray<class UNameplateComponent_TA*>              ComponentSlots;                                           // 0x0098(0x0010) (ExportObject, Transient, Component, NeedCtorLink, EditInline)
	TArray<class UNameplateComponent_TA*>              PendingComponents;                                        // 0x00A8(0x0010) (ExportObject, Transient, Component, NeedCtorLink, EditInline)
	TArray<class UGFxData_Nameplate_TA*>               NameplateRows;                                            // 0x00B8(0x0010) (Transient, NeedCtorLink)
	TArray<class UNameplateMeshComponent_TA*>          Nameplates;                                               // 0x00C8(0x0010) (ExportObject, Transient, Component, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxNameplatesManager_TA");
		return ptr;
	}


	void DrawDebug(class UNameplateMeshComponent_TA* Nameplate);
	void SetShowShortcuts(bool bInShowShortcuts);
	void ToggleShowShortcuts();
	void Tick();
	void UpdateNameplatesVisibility();
	void SetHidden(bool bHide);
	class UNameplateMeshComponent_TA* GetNameplate(class UNameplateComponent_TA* InComponent);
	class UNameplateMeshComponent_TA* SetNameplate(int Index, class UNameplateComponent_TA* InComponent);
	void SetPlayerData(int Index, class UNameplateComponent_TA* InComponent);
	void Update();
	class UGameShare_TA* GetGameShare();
	void QueUpdate();
	void HandleGameStateChanged(class AGameEvent_TA* GameEvent);
	void HandlePRITAChanged(class APRI_TA* P);
	void HandlePRIXChanged(class APRI_X* P);
	void HandleVehicleChanged(class AVehicle_TA* Vehicle);
	void HandleCarChanged(class ACar_TA* Car);
	void UpdatePendingComponents();
	void HandleNameplateRemoved(class UGameShare_TA* G, class UNameplateComponent_TA* InComponent);
	void HandleNameplateAdded(class UGameShare_TA* G, class UNameplateComponent_TA* InComponent);
	void Destroyed();
	void Init(class UGFxShell_X* InShell);
};


// Class TAGame.TourSettings_TA
// 0x0100 (0x0160 - 0x0060)
class UTourSettings_TA : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TourSettings_TA.Id
	unsigned char                                      UnknownData01[0x8];                                       // 0x0068(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TourSettings_TA.ScheduleID
	struct FString                                     Title;                                                    // 0x0070(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     CreatorName;                                              // 0x0080(0x0010) (NeedCtorLink, DataBinding)
	struct FUniqueNetId                                CreatorPlayerID;                                          // 0x0090(0x0038) (DataBinding)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TourSettings_TA.StartTime
	int                                                MaxBracketSize;                                           // 0x00D0(0x0004) (DataBinding)
	int                                                TeamsRegistered;                                          // 0x00D4(0x0004) (DataBinding)
	int                                                RankMin;                                                  // 0x00D8(0x0004) (DataBinding)
	int                                                RankMax;                                                  // 0x00DC(0x0004) (DataBinding)
	struct FString                                     Region;                                                   // 0x00E0(0x0010) (NeedCtorLink)
	struct FString                                     RegionName;                                               // 0x00F0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     GameTags;                                                 // 0x0100(0x0010) (NeedCtorLink)
	unsigned char                                      GameMode;                                                 // 0x0110(0x0001) (DataBinding)
	TEnumAsByte<EMatchTieBreaker>                      TieBreaker;                                               // 0x0111(0x0001) (DataBinding)
	TEnumAsByte<ETourSeedType>                         SeedingType;                                              // 0x0112(0x0001) (DataBinding)
	unsigned char                                      UnknownData03[0x1];                                       // 0x0113(0x0001) MISSED OFFSET
	int                                                TeamSize;                                                 // 0x0114(0x0004) (DataBinding)
	TArray<struct FName>                               DisabledMaps;                                             // 0x0118(0x0010) (NeedCtorLink)
	TArray<int>                                        SeriesRoundLengths;                                       // 0x0128(0x0010) (NeedCtorLink)
	int                                                SeriesLength;                                             // 0x0138(0x0004)
	int                                                FinalSeriesLength;                                        // 0x013C(0x0004)
	unsigned long                                      bPublic : 1;                                              // 0x0140(0x0004) (DataBinding)
	int                                                MinPlayersPerTeam;                                        // 0x0144(0x0004) (DataBinding)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0148(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TourSettings_TA.MatchExpireTimestamp
	TArray<struct FString>                             Platforms;                                                // 0x0150(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourSettings_TA");
		return ptr;
	}


	void __TourSettings_TA__Init_EC524354490843B9F74BE690EDC002EE(const struct FString& Original, const struct FString& Sanitized);
	void __TourSettings_TA__Init_589F87E248F4212F7C775FA4371A6DB8(const struct FString& Original, const struct FString& Sanitized);
	bool __TourSettings_TA__HandleRegionsSynced_4A870A744381E5F2578C1694BADD19F1(const struct FGFxRegion& R);
	bool IsManualTournament();
	void HandleRegionsSynced(class UGFxData_Regions_TA* RegionsData);
	void UpdateRegion(class UGFxData_Regions_TA* RegionsData);
	void SetTeamsRegistered(int InValue);
	void Init(TArray<int>* ArrayInitializer_51B36840425DE7E7CE0623BA71AD8331);
};


// Class TAGame.FaceIt_TA
// 0x0120 (0x0180 - 0x0060)
class UFaceIt_TA : public UObject
{
public:
	struct FFaceItMatchInfo                            MatchInfo;                                                // 0x0060(0x0038) (NeedCtorLink)
	struct FServerReservationData                      ReservationData;                                          // 0x0098(0x0070) (NeedCtorLink)
	class UAsyncTask*                                  JoinTask;                                                 // 0x0108(0x0008)
	int                                                ConnectionAttempts;                                       // 0x0110(0x0004)
	float                                              FoundNewServerTimeoutSeconds;                             // 0x0114(0x0004)
	class UFaceItConfig_TA*                            Config;                                                   // 0x0118(0x0008) (Transient)
	class UOnlineGame_TA*                              OnlineGame;                                               // 0x0120(0x0008)
	class UOnlineGameParty_X*                          OnlineGameParty;                                          // 0x0128(0x0008)
	class UAsyncTask*                                  PendingFindMatchTask;                                     // 0x0130(0x0008) (Transient)
	struct FScriptDelegate                             __EventJoiningReservation__Delegate;                      // 0x0138(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventAddReservation__Delegate;                          // 0x0150(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0150(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventError__Delegate;                                   // 0x0168(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0168(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FaceIt_TA");
		return ptr;
	}


	void __FaceIt_TA__Construct_08FE367B4F1B1801EF16F28CECE884E6(class UPsyNetService_FaceItMatchComplete_TA* Service);
	void __FaceIt_TA__FindMatchForPlayer_DDA40D6349A2EC4B17E860BF3A3F0D43();
	void __FaceIt_TA__FindMatchForPlayer_B01589CC451EE2DF0050F19EBB0D6ACF(class URPC_FaceItFindMatchForPlayer_TA* RPC);
	void __FaceIt_TA__FindMatchForPlayer_02B240EC4523958EE5522E9776C959F3(class URPC_X* RPC);
	void __FaceIt_TA__JoinReservation_10EA93614DD01024515EE3BDB08B5A08();
	void __FaceIt_TA__OnFailedJoin_F3C51C7748B078A2BC89309CD4FAF236(class URPC_FaceItPlayerFailedJoin_TA* RPC);
	void __FaceIt_TA__OnFailedJoin_A526D304481987F126AF578ECB8145CA(class URPC_X* RPC);
	bool IsInOnlineGame();
	void EndJoinGameAttempts();
	void HandleFailedPlayerFailedJoin(class UError* Error);
	void OnFailedJoin();
	void HandleJoinComplete(bool bSuccess, const struct FString& FailReason);
	void HandleGameDataSelected(int PlaylistId, int MutatorIndex);
	void HandleGRISpawned(class AGRI_X* GRI);
	void ClearJoinGameAttempt();
	void ClearMatchInfo(int InMatchID);
	void JoinReservation(const struct FServerReservationData& Data, const struct FFaceItMatchInfo& InMatchInfo);
	class UErrorType* GetJoinReservationError(const struct FFaceItMatchInfo& InMatchInfo);
	class UAsyncTask* FindMatchForPlayer();
	void RemoveMatchNotification(int InMatchID, TArray<class UFaceItMatchNotification_TA*>* OfTypeLocal_395969ED4E96872359D978BD9B40BBFF);
	void HandleFaceItMatchCancelled(class UPsyNetService_FaceItMatchCancelled_TA* Service);
	void Construct();
	void EventError(class UError* InError);
	void EventAddReservation(const struct FServerReservationData& InReservationData, const struct FFaceItMatchInfo& InMatchInfo, bool bSuppressNotification);
	void EventJoiningReservation(class UAsyncTask* Task, struct FFaceItMatchInfo* InMatchInfo);
};


// Class TAGame.MutatorGameSettingPreset_TA
// 0x000C (0x0070 - 0x0064)
class UMutatorGameSettingPreset_TA : public UGameSetting_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	class UPresetMutators_X*                           Presets;                                                  // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MutatorGameSettingPreset_TA");
		return ptr;
	}

};


// Class TAGame.__GFxHUD_TA__HandleVoteFinished_58CDBA7445379FCEBEDA68AFE2050436
// 0x0008 (0x0068 - 0x0060)
class U__GFxHUD_TA__HandleVoteFinished_58CDBA7445379FCEBEDA68AFE2050436 : public UObject
{
public:
	class AVoteActor_TA*                               VoteActor;                                                // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxHUD_TA__HandleVoteFinished_58CDBA7445379FCEBEDA68AFE2050436");
		return ptr;
	}


	bool __GFxHUD_TA__HandleVoteFinished_58CDBA7445379FCEBEDA68AFE2050436(class AVoteActor_TA* OtherVote);
};


// Class TAGame.__GFxHUD_TA__GetVoteBySubject_611250804DE82AA4D505D7B394EBEC59
// 0x0001 (0x0061 - 0x0060)
class U__GFxHUD_TA__GetVoteBySubject_611250804DE82AA4D505D7B394EBEC59 : public UObject
{
public:
	TEnumAsByte<EVoteSubject>                          VoteSubject;                                              // 0x0060(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxHUD_TA__GetVoteBySubject_611250804DE82AA4D505D7B394EBEC59");
		return ptr;
	}


	bool __GFxHUD_TA__GetVoteBySubject_611250804DE82AA4D505D7B394EBEC59(class AVoteActor_TA* OtherVote);
};


// Class TAGame.GFxHUD_Replay_TA
// 0x0020 (0x0568 - 0x0548)
class AGFxHUD_Replay_TA : public AGFxHUD_Spectator_TA
{
public:
	class AGameInfo_Replay_TA*                         Game;                                                     // 0x0548(0x0008) (Transient)
	float                                              PrevKeyframeBufferTime;                                   // 0x0550(0x0004) (Edit)
	unsigned long                                      bUserPaused : 1;                                          // 0x0554(0x0004) (Transient)
	unsigned long                                      bPausedForEndOfReplay : 1;                                // 0x0554(0x0004) (Transient)
	TArray<class UProductAsset_TA*>                    ReferencedProducts;                                       // 0x0558(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_Replay_TA");
		return ptr;
	}


	void Destroyed();
	void ReplayPause();
	void ScrubTimeline(float DeltaTime);
	void OpenTimelineMenu();
	void OpenSpeedMenu();
	void PrevKeyframe();
	void NextKeyframe();
	void RemoveKeyframe();
	void AddKeyframe();
	void DrawLogs();
	void DrawHUD();
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	void HandleGameEventSet(class AGameInfo_Replay_TA* InGame);
	void SetPausedForEndOfReplay(bool bPaused);
	void HandlePostTimeSkip(class UReplay_TA* Replay);
	void HandlePreTimeSkip(class UReplay_TA* Replay);
	void HandlePlaybackStopped(class UReplay_TA* Replay);
	void HandleReplayStarted(class AGameInfo_Replay_TA* InGame);
	void InitGFx();
};


// Class TAGame.GFxHUD_Soccar_TA
// 0x0010 (0x0518 - 0x0508)
class AGFxHUD_Soccar_TA : public AGFxHUD_TA
{
public:
	class AGameEvent_Soccar_TA*                        SoccarGame;                                               // 0x0508(0x0008) (Transient)
	class UGFxData_ServerPerformanceStats_TA*          GFxServerPerformanceStats;                                // 0x0510(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_Soccar_TA");
		return ptr;
	}


	class APRI_TA* GetSelectedPRI();
	class APRI_TA* GetHoveredPRI();
	void UpdateCarData();
	void HandleReplicatedServerStats();
	void HandleShowIntroScene();
	void HandleTieBreakDecisionChanged();
	void HandleMatchWinnerSet(class AGameEvent_Soccar_TA* G);
	void HandlePlayerRemoved(class AGameEvent_TA* G, class APRI_TA* InPRI);
	void HandlePlayerAdded(class AGameEvent_TA* G, class APRI_TA* InPRI);
	void UpdateReplayData();
	void HandleScoreDataChanged(class AReplayDirector_TA* ReplayDirector);
	void HandleReplayDirectorSet(class AGameEvent_Soccar_TA* G);
	void HandleNextMatchTimeUpdated(class AGameEvent_TA* InGameEvent);
	void HandleWaitTimeUpdated();
	void HandleOvertimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleGameTimeUpdated(class AGameEvent_Soccar_TA* InGameEvent);
	void OnAllTeamsCreated();
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	void Destroyed();
	void Init();
};


// Class TAGame.GFxData_ServerPerformanceStats_TA
// 0x0008 (0x00A0 - 0x0098)
class UGFxData_ServerPerformanceStats_TA : public UGFxDataSingleton_X
{
public:
	TEnumAsByte<EConnectionQualityState>               ServerPerformanceStatus;                                  // 0x0098(0x0001) (DataBinding)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0099(0x0003) MISSED OFFSET
	unsigned long                                      bReportedServer : 1;                                      // 0x009C(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ServerPerformanceStats_TA");
		return ptr;
	}


	void ReportServer();
	void UpdateServerPerformanceStatus(TEnumAsByte<EConnectionQualityState> Status);
};


// Class TAGame.GFxHUD_Season_TA
// 0x0000 (0x0518 - 0x0518)
class AGFxHUD_Season_TA : public AGFxHUD_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_Season_TA");
		return ptr;
	}

};


// Class TAGame.GFxHUD_Training_TA
// 0x0008 (0x0520 - 0x0518)
class AGFxHUD_Training_TA : public AGFxHUD_Soccar_TA
{
public:
	class UGFxData_Training_TA*                        TrainingData;                                             // 0x0518(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_Training_TA");
		return ptr;
	}


	void SetGameEvent(class AGameEvent_TA* InGameEvent);
};


// Class TAGame.GFxModal_FriendJoin_TA
// 0x0030 (0x00F8 - 0x00C8)
class UGFxModal_FriendJoin_TA : public UGFxModal_X
{
public:
	struct FString                                     ConnectingTitleString;                                    // 0x00C8(0x0010) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     ConnectingBodyString;                                     // 0x00D8(0x0010) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     JoiningGameFailedString;                                  // 0x00E8(0x0010) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxModal_FriendJoin_TA");
		return ptr;
	}


	void HandlePasswordRequired();
	void HandleGameInviteComplete(bool bSuccess, const struct FString& FailReason);
	void SetGFxObject(class UGFxObject* Obj);
	void Close();
	class UOnlineGame_X* GetOnlineGame();
};


// Class TAGame.__GFxModal_Processing_TA__CreateAndBind_B710088D41BE8C59F87290A36D7AA189
// 0x0008 (0x0068 - 0x0060)
class U__GFxModal_Processing_TA__CreateAndBind_B710088D41BE8C59F87290A36D7AA189 : public UObject
{
public:
	class UAsyncTask*                                  Task;                                                     // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxModal_Processing_TA__CreateAndBind_B710088D41BE8C59F87290A36D7AA189");
		return ptr;
	}


	void __GFxModal_Processing_TA__CreateAndBind_B710088D41BE8C59F87290A36D7AA189(class UGFxModal_X* M);
};


// Class TAGame.__GFxModal_Processing_TA__CreateAndBindNoCancel_A0B6171E40DD8D4FEBE77AB0985A61FE
// 0x0008 (0x0068 - 0x0060)
class U__GFxModal_Processing_TA__CreateAndBindNoCancel_A0B6171E40DD8D4FEBE77AB0985A61FE : public UObject
{
public:
	class UGFxModal_X*                                 Modal;                                                    // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxModal_Processing_TA__CreateAndBindNoCancel_A0B6171E40DD8D4FEBE77AB0985A61FE");
		return ptr;
	}


	void __GFxModal_Processing_TA__CreateAndBindNoCancel_A0B6171E40DD8D4FEBE77AB0985A61FE();
};


// Class TAGame.GFxModal_RankedReconnect_TA
// 0x0020 (0x00E8 - 0x00C8)
class UGFxModal_RankedReconnect_TA : public UGFxModal_X
{
public:
	struct FString                                     ConnectingTitleString;                                    // 0x00C8(0x0010) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     ConnectingBodyString;                                     // 0x00D8(0x0010) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxModal_RankedReconnect_TA");
		return ptr;
	}


	void HandleJoin(bool bSuccess, const struct FString& FailReason);
	void SetGFxObject(class UGFxObject* Obj);
	void Close();
	class UOnlineGame_X* GetOnlineGame();
};


// Class TAGame.GFxModal_TextInput_TA
// 0x0018 (0x00E0 - 0x00C8)
class UGFxModal_TextInput_TA : public UGFxModal_X
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x00C8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxModal_TextInput_TA");
		return ptr;
	}


	void HandleInputComplete(const struct FString& InputText, bool bCanceled);
	void SetData(class UGFxObject* Data);
	class UGFxModal_TextInput_TA* SetTextInputData(const struct FScriptDelegate& InCallback, bool bDisplayAsPassword, const struct FString& DefaultText, int MaxLength);
};


// Class TAGame.GFxModal_Tutorial_TA
// 0x0000 (0x00C8 - 0x00C8)
class UGFxModal_Tutorial_TA : public UGFxModal_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxModal_Tutorial_TA");
		return ptr;
	}


	void HandleButtonClicked(int Index);
};


// Class TAGame.GFxData_Features_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_Features_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Features_TA");
		return ptr;
	}


	void OnShellSet();
};


// Class TAGame.GFxData_WebBrowser_TA
// 0x0028 (0x00C0 - 0x0098)
class UGFxData_WebBrowser_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     ActiveURL;                                                // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ActivePageTitle;                                          // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	class UUrlConfig_X*                                UrlConfig;                                                // 0x00B8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_WebBrowser_TA");
		return ptr;
	}


	void __GFxData_WebBrowser_TA__OnShellSet_6D528A954891A480E9D228BE4A9F854A(const struct FString& _);
	void HandleSwitchingMap();
	void HandleBrowserLoaded(const struct FString& PageTitle, const struct FString& URL);
	void HandleBrowserClosed();
	void HandleBrowserOpened(const struct FString& InURL);
	void CloseBrowser();
	void OpenBrowserToURL(const struct FString& URL, int BrowserWidth, int BrowserHeight);
	void OnShellSet();
};


// Class TAGame.GFxData_SeasonReward_TA
// 0x0020 (0x00B8 - 0x0098)
class UGFxData_SeasonReward_TA : public UGFxDataSingleton_X
{
public:
	int                                                Level;                                                    // 0x0098(0x0004) (DataBinding)
	int                                                Wins;                                                     // 0x009C(0x0004) (DataBinding)
	int                                                WinsRequired;                                             // 0x00A0(0x0004) (DataBinding)
	unsigned long                                      bCanProgress : 1;                                         // 0x00A4(0x0004) (DataBinding)
	class URankedConfig_X*                             RankedConfig;                                             // 0x00A8(0x0008)
	class UOnlineGameSkill_X*                          Skill;                                                    // 0x00B0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_SeasonReward_TA");
		return ptr;
	}


	void UpdateData();
	void HandleRewardUpdateOnGameJoin(bool bSuccess, const struct FString& FailReason);
	void HandleSkillObjectInjected();
};


// Class TAGame.ChampionshipTrophy_TA
// 0x0010 (0x0070 - 0x0060)
class UChampionshipTrophy_TA : public UObject
{
public:
	class AScreenDisplayActor_TA*                      ChampionshipTrophyArchetype;                              // 0x0060(0x0008)
	class UAkSoundCue*                                 ChampionshipTrophySound;                                  // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChampionshipTrophy_TA");
		return ptr;
	}


	void Spawn(class AActor* Owner);
};


// Class TAGame.RankedReconnectSave_TA
// 0x001C (0x00E4 - 0x00C8)
class URankedReconnectSave_TA : public USaveObject_TA
{
public:
	struct FString                                     Beacon;                                                   // 0x00C8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00D8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RankedReconnectSave_TA.EpochTime
	int                                                PlaylistId;                                               // 0x00E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RankedReconnectSave_TA");
		return ptr;
	}


	class USaveObject_TA* Reconcile(class USaveObject_TA* Remote);
	void ClearRankedReconnect();
	bool RankedReconnectAvailable();
	void SetRankedReconnect(const struct FString& BeaconAddress, int InPlaylistID);
};


// Class TAGame.__GFxShell_TA__ShowRankedReconnectModal_E158292B4DFFD8D135667EB0763DAE5C
// 0x0014 (0x0074 - 0x0060)
class U__GFxShell_TA__ShowRankedReconnectModal_E158292B4DFFD8D135667EB0763DAE5C : public UObject
{
public:
	struct FString                                     BeaconAddress;                                            // 0x0060(0x0010) (NeedCtorLink)
	int                                                PlaylistId;                                               // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxShell_TA__ShowRankedReconnectModal_E158292B4DFFD8D135667EB0763DAE5C");
		return ptr;
	}


	void __GFxShell_TA__ShowRankedReconnectModal_E158292B4DFFD8D135667EB0763DAE5C(class UGFxModal_X* _);
};


// Class TAGame.GoalVolume_TA
// 0x000C (0x02B0 - 0x02A4)
class AGoalVolume_TA : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	class UGoal_TA*                                    Goal;                                                     // 0x02A8(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GoalVolume_TA");
		return ptr;
	}

};


// Class TAGame.LightBarComponent_TA
// 0x002F (0x00CC - 0x009D)
class ULightBarComponent_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	class ATeam_TA*                                    Team;                                                     // 0x00A0(0x0008) (Transient)
	unsigned long                                      bStrobeActive : 1;                                        // 0x00A8(0x0004) (Transient)
	unsigned long                                      bRandStrobeColor : 1;                                     // 0x00A8(0x0004) (Transient)
	int                                                StrobeCount;                                              // 0x00AC(0x0004) (Transient)
	int                                                MaxStrobeCount;                                           // 0x00B0(0x0004) (Transient)
	float                                              StrobeTime;                                               // 0x00B4(0x0004) (Transient)
	TArray<struct FColor>                              StrobeColorList;                                          // 0x00B8(0x0010) (Transient, NeedCtorLink)
	int                                                StrobeColorIndex;                                         // 0x00C8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LightBarComponent_TA");
		return ptr;
	}


	void HandleBoostAmountChanged(class ACarComponent_Boost_TA* Boost);
	void HandleTeamChanged(class APRI_X* PRI);
	void Strobe_MVP(class ATeam_TA* InTeam);
	void Strobe_GoalScored(int ScoredOnTeam);
	void StrobeColor();
	void StartStrobeColor(float Duration, float InStrobeCount, bool bRandColor);
	void ResetColor();
	void SetColor(const struct FColor& NewColor);
};


// Class TAGame.LightEnvironment_TA
// 0x0004 (0x0190 - 0x018C)
class ULightEnvironment_TA : public UParticleLightEnvironmentComponent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x018C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LightEnvironment_TA");
		return ptr;
	}

};


// Class TAGame.__Loadout_TA__ValidateForcedProducts_0D3A62B64758D76297FCC88C142E2A32
// 0x000C (0x006C - 0x0060)
class U__Loadout_TA__ValidateForcedProducts_0D3A62B64758D76297FCC88C142E2A32 : public UObject
{
public:
	class UProductAttribute_TeamForcedProduct_TA*      TeamForcedProducts;                                       // 0x0060(0x0008)
	int                                                TeamIndex;                                                // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__Loadout_TA__ValidateForcedProducts_0D3A62B64758D76297FCC88C142E2A32");
		return ptr;
	}


	int __Loadout_TA__ValidateForcedProducts_0D3A62B64758D76297FCC88C142E2A32(int PID);
};


// Class TAGame.IForcedProduct
// 0x0000 (0x0060 - 0x0060)
class UIForcedProduct : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IForcedProduct");
		return ptr;
	}


	int GetForcedProductID();
};


// Class TAGame.__Loadout_TA__ApplyCompatibleAttributeProducts_92054FD14957AB36077C338A3BEAC0B3
// 0x0004 (0x0064 - 0x0060)
class U__Loadout_TA__ApplyCompatibleAttributeProducts_92054FD14957AB36077C338A3BEAC0B3 : public UObject
{
public:
	int                                                EquippedBodyID;                                           // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__Loadout_TA__ApplyCompatibleAttributeProducts_92054FD14957AB36077C338A3BEAC0B3");
		return ptr;
	}


	bool __Loadout_TA__ApplyCompatibleAttributeProducts_92054FD14957AB36077C338A3BEAC0B3(class UProduct_TA* B);
};


// Class TAGame.LoadoutRenderer_TA
// 0x0030 (0x0090 - 0x0060)
class ULoadoutRenderer_TA : public UObject
{
public:
	class UThumbnailRenderer_TA*                       ThumbnailRenderer;                                        // 0x0060(0x0008) (Edit)
	class UProductLoader_TA*                           Loader;                                                   // 0x0068(0x0008) (ExportObject, Component, EditInline)
	class ATeam_TA*                                    TeamArchetype;                                            // 0x0070(0x0008) (Transient)
	struct FScriptDelegate                             __EventLoadoutRendered__Delegate;                         // 0x0078(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutRenderer_TA");
		return ptr;
	}


	void HandleAllProductsLoaded(class UProductLoader_TA* InLoader);
	void RenderLoadout(const struct FClientLoadoutData& Loadout, class ATeam_TA* InTeamArchetype, const struct FScriptDelegate& Callback);
	void EventLoadoutRendered(class ULoadoutRenderer_TA* Renderer, class UTexture2D* Tex);
};


// Class TAGame.Mutator_Ball_TA
// 0x0064 (0x00C8 - 0x0064)
class UMutator_Ball_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	class AGameEvent_Soccar_TA*                        SoccarGame;                                               // 0x0068(0x0008)
	float                                              BallScale;                                                // 0x0070(0x0004)
	float                                              BallBounciness;                                           // 0x0074(0x0004)
	float                                              BallCarBounciness;                                        // 0x0078(0x0004)
	int                                                TotalGameBalls;                                           // 0x007C(0x0004)
	class ABall_TA*                                    BallArchetype;                                            // 0x0080(0x0008)
	float                                              BallGravityScale;                                         // 0x0088(0x0004)
	float                                              BallSloMoDuration;                                        // 0x008C(0x0004)
	float                                              BallSloMoDilation;                                        // 0x0090(0x0004)
	float                                              BallSloMoCooldown;                                        // 0x0094(0x0004)
	float                                              BallSloMoRadius;                                          // 0x0098(0x0004)
	float                                              BallSloMoDiffSpeed;                                       // 0x009C(0x0004)
	float                                              BallMaxLinearSpeedScale;                                  // 0x00A0(0x0004)
	float                                              BallMaxAngularSpeed;                                      // 0x00A4(0x0004)
	struct FVector                                     BallMagnusCoefficient;                                    // 0x00A8(0x000C)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	class UPhysicalMaterial*                           PhysMatOverride;                                          // 0x00B8(0x0008)
	float                                              BallLiftImpulse;                                          // 0x00C0(0x0004)
	float                                              BallLiftDelay;                                            // 0x00C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Ball_TA");
		return ptr;
	}


	class UBallSlomoComponent_TA* GetSlomoComponent(class ABall_TA* Ball);
	void MutateObject(class UObject* O);
	void ApplyBallLift();
	void HandleGameStateChanged(class AGameEvent_TA* _);
	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.BallSlomoComponent_TA
// 0x001C (0x00C0 - 0x00A4)
class UBallSlomoComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	float                                              BallSloMoRadius;                                          // 0x00A8(0x0004) (Transient)
	float                                              BallSloMoDuration;                                        // 0x00AC(0x0004) (Transient)
	float                                              BallSloMoDilation;                                        // 0x00B0(0x0004) (Transient)
	float                                              BallSloMoCooldown;                                        // 0x00B4(0x0004) (Transient)
	float                                              BallSloMoNext;                                            // 0x00B8(0x0004) (Transient)
	float                                              BallSloMoDiffSpeed;                                       // 0x00BC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BallSlomoComponent_TA");
		return ptr;
	}


	void RestoreTimeDilation();
	void Tick(float DeltaTime);
};


// Class TAGame.Mutator_Booster_TA
// 0x0018 (0x007C - 0x0064)
class UMutator_Booster_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	unsigned long                                      bNoBooster : 1;                                           // 0x0068(0x0004) (Edit)
	unsigned long                                      bUnlimitedBoost : 1;                                      // 0x0068(0x0004) (Edit)
	unsigned long                                      bOverrideStartBoost : 1;                                  // 0x0068(0x0004) (Edit)
	float                                              BoostStrength;                                            // 0x006C(0x0004) (Edit)
	float                                              BoostRechargeRate;                                        // 0x0070(0x0004) (Edit)
	float                                              BoostRechargeDelay;                                       // 0x0074(0x0004) (Edit)
	float                                              BoostStartAmount;                                         // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Booster_TA");
		return ptr;
	}


	void MutateObject(class UObject* O);
};


// Class TAGame.Mutator_Car_TA
// 0x000C (0x0070 - 0x0064)
class UMutator_Car_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	float                                              CarScale;                                                 // 0x0068(0x0004) (Edit)
	float                                              JumpScale;                                                // 0x006C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Car_TA");
		return ptr;
	}


	void MutateObject(class UObject* O);
};


// Class TAGame.Mutator_Demolish_TA
// 0x0006 (0x006A - 0x0064)
class UMutator_Demolish_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TEnumAsByte<EDemolishTarget>                       DemolishTarget;                                           // 0x0068(0x0001) (Edit)
	TEnumAsByte<EDemolishSpeed>                        DemolishSpeed;                                            // 0x0069(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Demolish_TA");
		return ptr;
	}


	void MutateObject(class UObject* O);
};


// Class TAGame.Mutator_GameSpeed_TA
// 0x0008 (0x006C - 0x0064)
class UMutator_GameSpeed_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	float                                              GameSpeed;                                                // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_GameSpeed_TA");
		return ptr;
	}


	void MutateObject(class UObject* O);
	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.Mutator_Gravity_TA
// 0x0008 (0x006C - 0x0064)
class UMutator_Gravity_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	float                                              Gravity;                                                  // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Gravity_TA");
		return ptr;
	}


	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.Mutator_Handicap_TA
// 0x0008 (0x006C - 0x0064)
class UMutator_Handicap_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	int                                                AutoBalanceDifference;                                    // 0x0068(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Handicap_TA");
		return ptr;
	}


	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.Mutator_Match_TA
// 0x0034 (0x0098 - 0x0064)
class UMutator_Match_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	int                                                MatchGames;                                               // 0x0068(0x0004) (Edit)
	int                                                GameTime;                                                 // 0x006C(0x0004) (Edit)
	int                                                FinishTime;                                               // 0x0070(0x0004) (Edit)
	int                                                GameScore;                                                // 0x0074(0x0004) (Edit)
	class UGameEvent_Soccar_SubRules_TA*               SubRules;                                                 // 0x0078(0x0008)
	unsigned long                                      bUnlimitedTime : 1;                                       // 0x0080(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	class UOvertimeSettings_TA*                        OvertimeComponent;                                        // 0x0088(0x0008) (Edit)
	class UMaxTimeComponent_TA*                        MaxTimeComponent;                                         // 0x0090(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Match_TA");
		return ptr;
	}


	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.OvertimeSettings_TA
// 0x0008 (0x0068 - 0x0060)
class UOvertimeSettings_TA : public UObject
{
public:
	TEnumAsByte<EMatchTieBreaker>                      TieBreaker;                                               // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	int                                                OvertimeGameTime;                                         // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OvertimeSettings_TA");
		return ptr;
	}

};


// Class TAGame.MaxTimeComponent_TA
// 0x0008 (0x0068 - 0x0060)
class UMaxTimeComponent_TA : public UObject
{
public:
	int                                                WarningTimeSeconds;                                       // 0x0060(0x0004) (Edit)
	int                                                TimeLimitSeconds;                                         // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MaxTimeComponent_TA");
		return ptr;
	}

};


// Class TAGame.Mutator_RespawnTime_TA
// 0x0010 (0x0074 - 0x0064)
class UMutator_RespawnTime_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	int                                                RespawnTime;                                              // 0x0068(0x0004)
	unsigned long                                      bDisableGoalDelay : 1;                                    // 0x006C(0x0004)
	float                                              BallRespawnTime;                                          // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_RespawnTime_TA");
		return ptr;
	}


	void STATIC_Mutate(class UMutator_RespawnTime_TA* Mutator, class UPlayerSpawnFeature_TA* Feature);
	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.PlayerSpawnFeature_TA
// 0x0010 (0x0070 - 0x0060)
class UPlayerSpawnFeature_TA : public UObject
{
public:
	int                                                RespawnDelaySeconds;                                      // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	class AGameEvent_TA*                               GameEvent;                                                // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerSpawnFeature_TA");
		return ptr;
	}

};


// Class TAGame.NameplateRenderTarget_TA
// 0x0008 (0x01B8 - 0x01B0)
class UNameplateRenderTarget_TA : public UScriptedTexture
{
public:
	class UGFxMoviePlayer_X*                           NameplatesMovie;                                          // 0x01B0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NameplateRenderTarget_TA");
		return ptr;
	}


	void Render(class UCanvas* C);
};


// Class TAGame.OnlineGameTourMatchmaking_TA
// 0x0078 (0x0170 - 0x00F8)
class UOnlineGameTourMatchmaking_TA : public UOnlineGameMatchmakingBase_X
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x00F8(0x0008) (Edit)
	class UTourConfig_TA*                              Config;                                                   // 0x0100(0x0008) (Edit)
	struct FString                                     FoundServerString;                                        // 0x0108(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     StartSearchFailString;                                    // 0x0118(0x0010) (Const, Localized, NeedCtorLink)
	class UTourEvent_TA*                               TourEvent;                                                // 0x0128(0x0008) (Transient)
	class UError*                                      Error;                                                    // 0x0130(0x0008) (Transient)
	unsigned long                                      bPlayerReadyForNextMatch : 1;                             // 0x0138(0x0004) (Transient)
	unsigned char                                      JoinServerAttemptCounter;                                 // 0x013C(0x0001) (Transient)
	unsigned char                                      MaxJoinServerAttempts;                                    // 0x013D(0x0001) (Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x013E(0x0002) MISSED OFFSET
	struct FScriptDelegate                             __EventError__Delegate;                                   // 0x0140(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x013E(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventFailedToJoinGame__Delegate;                        // 0x0158(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0158(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameTourMatchmaking_TA");
		return ptr;
	}


	void StartMatchmaking();
	void HandleError(class UError* InError);
	void HandleMatchmakingStartSuccess();
	void HandleStartSearch(class UAsyncTask* Task);
	void OnReceiveGameServer(const struct FServerReservationData& Reservation);
	void OnFailedToJoinGame(const struct FString& FailReason);
	void SetError(class UError* InError);
	void CreateMatchmakingUI(class UGFxEngine_X* GFxEngine, class UGFxShell_X* Shell);
	void OnFindGameWarning(const struct FString& FailReason);
	void OnExit();
	bool StartSearch();
	void HandleTourEventDeactivated(class UTourEvent_TA* InTourEvent);
	void Deactivate();
	void HandleGameDataSelected(int PlaylistId, int MutatorIndex);
	void HandleNextMatchReady(class UTourEventMatch_TA* TourEventMatch, struct FTourMatch* Match);
	void HandleStartTimeElapsed(class UTourEvent_TA* InTourEvent);
	void HandleTourActivated(class UOnlineGameTournaments_TA* InTournaments, class UTourEvent_TA* InTourEvent);
	void PlayerIsReadyForNextMatch();
	void OnNewGame();
	void EventFailedToJoinGame();
	void EventError(class UOnlineGameTourMatchmaking_TA* TourMatchmaking, class UError* InError);
};


// Class TAGame.LocalPlayerSkillSync_TA
// 0x0018 (0x0078 - 0x0060)
class ULocalPlayerSkillSync_TA : public UObject
{
public:
	class UOnlineGame_X*                               OnlineGame;                                               // 0x0060(0x0008)
	class UOnlineGameSkill_X*                          OnlineSkill;                                              // 0x0068(0x0008)
	class UPsyNet_X*                                   PsyNet;                                                   // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LocalPlayerSkillSync_TA");
		return ptr;
	}


	void SyncOnlinePlayerSkill(class UOnlinePlayer_X* Player);
	void SyncSkillsDelayed(float Delay);
	void SyncSkills();
	void HandlePsyNetConnection();
	void Construct();
};


// Class TAGame.PartyClubSync_TA
// 0x0028 (0x0088 - 0x0060)
class UPartyClubSync_TA : public UObject
{
public:
	class UOnlineGameParty_X*                          Party;                                                    // 0x0060(0x0008)
	class UOnlineClubProvider_X*                       Clubs;                                                    // 0x0068(0x0008)
	class UPsyNet_X*                                   PsyNet;                                                   // 0x0070(0x0008)
	TArray<struct FUniqueNetId>                        PlayerIDs;                                                // 0x0078(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyClubSync_TA");
		return ptr;
	}


	bool __PartyClubSync_TA__GetPartyMemberIDs_4BDCEE50462BEEC4D5EC8D809026ACD6(const struct FUniqueNetId& Id);
	struct FUniqueNetId __PartyClubSync_TA__GetPartyMemberIDs_EF78F7B24FA815FE9656ADB8E343D833(const struct FPartyMember& P);
	void ClearNonPartyClubData();
	void SyncPlayerClub(const struct FUniqueNetId& PlayerID);
	void HandlePartyClubChanged(class UOnlineMessageComponent_X* M, class UPartyMessage_ClubChanged_TA* Message);
	void HandleClubChanged(class UOnlineClubManager_X* M);
	void HandlePartyChanged(class UOnlineGameParty_X* P, TArray<struct FUniqueNetId>* DifferenceLocal_51E9AF3745C9A4370FB4F7A9133793B1);
	TArray<struct FUniqueNetId> GetPartyMemberIDs(TArray<struct FUniqueNetId>* MapLocal_330F3A9048384980E5E7C5A8764C05CB, TArray<struct FUniqueNetId>* FilterLocal_20722BB04C7EECB1570556BEB9A1CAEF);
	void HandlePsyNetLogout();
	void HandlePsyNetLogin();
	void Construct();
};


// Class TAGame.ClubNotificationsSync_TA
// 0x0000 (0x0060 - 0x0060)
class UClubNotificationsSync_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ClubNotificationsSync_TA");
		return ptr;
	}


	void HandleClubChanged(class UPsyNetClientService_X* Service);
	void HandleClubUpdated(class UPsyNetService_ClubsUpdate_TA* Update);
	void Construct();
};


// Class TAGame.ChallengeDefaultManager_TA
// 0x0050 (0x00B0 - 0x0060)
class UChallengeDefaultManager_TA : public UObject
{
public:
	TArray<class UChallengeDefault_TA*>                DefaultChallenges;                                        // 0x0060(0x0010) (NeedCtorLink)
	TArray<class UChallengeFolder_TA*>                 Folders;                                                  // 0x0070(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __EventChallengeAdded__Delegate;                          // 0x0080(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventChallengesSynced__Delegate;                        // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0098(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChallengeDefaultManager_TA");
		return ptr;
	}


	void __ChallengeDefaultManager_TA__AddDefaultChallenges_DF57950B4AEE289B9C9841A569EEFEEA(class UChallengeFolder_TA* F);
	void __ChallengeDefaultManager_TA__Cheat_SetFolders_B15134F34FF5E23AFC96AE9B819F6965(class UChallengeFolder_TA* F);
	void Cheat_SetFolders(TArray<class UChallengeFolder_TA*>* InFolders);
	int FindChallengeIndex(int Id);
	void RemoveDefaultChallenges();
	void RemoveDefaultChallenge(int Id);
	void AddDefaultChallenge(class UChallengeDefault_TA* ChallengeDefault);
	void AddDefaultChallenges(TArray<class UChallengeDefault_TA*>* InChallenges, TArray<class UChallengeFolder_TA*>* InFolders);
	void HandleChallengesPushed(class UPsyNetService_ChallengeDefault_TA* Message);
	void HandleChallengesSynced(class URPC_GetChallengeDefault_TA* RPC);
	void ResyncChallenges();
	void HandlePsyNetLogin();
	void Construct();
	void EventChallengesSynced(class UChallengeDefaultManager_TA* Manager);
	void EventChallengeAdded(class UChallengeDefaultManager_TA* Manager, class UChallengeDefault_TA* ChallengeDefault);
};


// Class TAGame.RocketPass_TA
// 0x0120 (0x0180 - 0x0060)
class URocketPass_TA : public UObject
{
public:
	TArray<struct FRocketPassRewardData>               FreeRewards;                                              // 0x0060(0x0010) (NeedCtorLink)
	TArray<struct FRocketPassRewardData>               PremiumRewards;                                           // 0x0070(0x0010) (NeedCtorLink)
	TArray<struct FRocketPassRewardData>               PrestigeRewards;                                          // 0x0080(0x0010) (NeedCtorLink)
	int                                                TierCap;                                                  // 0x0090(0x0004) (DataBinding)
	unsigned long                                      bIsPassActive : 1;                                        // 0x0094(0x0004) (DataBinding)
	unsigned long                                      bOwnsPremium : 1;                                         // 0x0094(0x0004) (DataBinding)
	unsigned long                                      bPrestigeItemsDirtied : 1;                                // 0x0094(0x0004)
	float                                              XPMultiplier;                                             // 0x0098(0x0004) (DataBinding)
	int                                                TierLevel;                                                // 0x009C(0x0004) (DataBinding)
	int                                                PipsPerLevel;                                             // 0x00A0(0x0004) (DataBinding)
	int                                                Pips;                                                     // 0x00A4(0x0004) (DataBinding)
	int                                                SecondsRemaining;                                         // 0x00A8(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	class URocketPassBundleContainer_TA*               Bundles;                                                  // 0x00B0(0x0008) (ExportObject, Component, EditInline)
	class UAsyncTask*                                  SyncAllInfoTask;                                          // 0x00B8(0x0008) (Transient)
	class UAsyncTask*                                  PendingPlayerInfoTask;                                    // 0x00C0(0x0008) (Transient)
	class UAsyncTask*                                  PendingRewardsTask;                                       // 0x00C8(0x0008) (Transient)
	class UAsyncTask*                                  PendingPrestigeRewardsTask;                               // 0x00D0(0x0008) (Transient)
	class UAsyncTask*                                  PurchasePremiumTask;                                      // 0x00D8(0x0008) (Transient)
	class UAsyncTask*                                  PurchaseTiersTask;                                        // 0x00E0(0x0008) (Transient)
	int                                                CodeRedemptionPurchasableID;                              // 0x00E8(0x0004) (Const)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	class URocketPassConfig_TA*                        RocketPassConfig;                                         // 0x00F0(0x0008) (Transient)
	class UOnlineGame_X*                               OnlineGame;                                               // 0x00F8(0x0008) (Transient)
	class UWallet_TA*                                  Wallet;                                                   // 0x0100(0x0008) (Transient)
	struct FScriptDelegate                             __EventError__Delegate;                                   // 0x0108(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0108(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRocketPassInfoChanged__Delegate;                   // 0x0120(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0120(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __FreeRewards__ChangeNotify;                              // 0x0138(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0138(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __PremiumRewards__ChangeNotify;                           // 0x0150(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0150(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __PrestigeRewards__ChangeNotify;                          // 0x0168(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0168(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RocketPass_TA");
		return ptr;
	}


	void __RocketPass_TA__BeginState_697B6DBE43E50B5F75CB3BBCAC1D99F8(class UWallet_TA* InWallet);
	void __RocketPass_TA__RequestPlayerInfo_4109BECF4F1CEAC7AAB1078A56501EDF();
	void __RocketPass_TA__RequestRewards_93BB6DEC49D10C8980814CBA19377029();
	void __RocketPass_TA__RequestPrestigeRewards_33EB1EE041D7FF3E2E5C599E44402937();
	void __RocketPass_TA__PurchasePremium_8134D2884C50CF808A9C769FD3DB3886();
	void __RocketPass_TA__PurchasePremium_B3DF702C4990245E094089834CC04952(class URPC_X* RPC);
	void __RocketPass_TA__PurchaseTiers_83602EAA4BACBE605E1F49AE0B2DC079();
	void __RocketPass_TA__PurchaseTiers_664CE53F468042DCE9BC63A631E579FE(class URPC_X* RPC);
	bool __RocketPass_TA__HandlePurchaseTiers_CFC641EE408B141F52418E83D3334721(const struct FRocketPassUnlock& Unlock);
	bool __RocketPass_TA__GetPremiumProduct_268AAC5949EF76634BA6BE9F1025EAC2(class UOnlineProduct_TA* Op);
	void __PrestigeRewards__ChangeNotifyFunc();
	void __PremiumRewards__ChangeNotifyFunc();
	void __FreeRewards__ChangeNotifyFunc();
	class UOnlineProduct_TA* GetPremiumProduct(TArray<class UOnlineProduct_TA*>* OnlineProducts);
	void HandleRedeemedOnlineProducts(class USaveData_TA* Data, TArray<class UOnlineProduct_TA*>* RedeemedOnlineProducts);
	void CheckForPremiumProduct();
	bool HasFreeRewards();
	bool HasPlayerInfo();
	TArray<class UAsyncTask*> RetrieveMissingData();
	void HandleReceivedRewardDrop(class URewardDrop_XPMultiplier_TA* InXPMultiplier);
	void AddPrestigeUnlock(const struct FRocketPassUnlock& Unlock);
	void GiveUnlocks(TArray<struct FRocketPassUnlock>* Unlocks);
	void HandlePurchaseTiers(class URPC_RocketPassPurchaseTiers_TA* RPC);
	class UAsyncTask* PurchaseTiers(int PurchasableID);
	void HandlePurchasePremium(class URPC_RocketPassPurchasePremium_TA* RPC);
	class UAsyncTask* PurchasePremium(int PurchasableID);
	void HandleGetPrestigeRewards(class URPC_RocketPassGetPlayerPrestigeRewards_TA* RPC);
	class UAsyncTask* RequestPrestigeRewards();
	void HandleGetRewards(class URPC_RocketPassGetRewardContent_TA* RPC);
	class UAsyncTask* RequestRewards();
	void ForceSetRocketPassInfo(const struct FRocketPassInfo& Info, const struct FRocketPassStore& Store, struct FRocketPassStore* StructInitializer_6FA6FD7B44DE44599ABEB6838DB3C4EA);
	void SetRocketPassInfo(const struct FRocketPassInfo& Info);
	void HandleGetPlayerInfo(class URPC_RocketPassGetPlayerInfo_TA* RPC);
	class UAsyncTask* RequestPlayerInfo();
	void UpdateSecondsRemaining();
	void RequestAllInfo(TArray<class UAsyncTask*>* ArrayInitializer_B141FCCA47D1B9A7FC4B509A7CD20857);
	void UpdateState();
	void HandleEventConfigChanged();
	void HandlePsyNetLogout();
	void HandlePsyNetLogin();
	void Construct();
	void EventRocketPassInfoChanged(class URocketPass_TA* RocketPass);
	void EventError(class UError* InError);
};


// Class TAGame.EnvironmentZone_TA
// 0x0000 (0x0060 - 0x0060)
class UEnvironmentZone_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EnvironmentZone_TA");
		return ptr;
	}


	int GetEnvironmentZone();
};


// Class TAGame.ClubPersonas_TA
// 0x0028 (0x0088 - 0x0060)
class UClubPersonas_TA : public UObject
{
public:
	class UOnlineClubCache_X*                          ClubCache;                                                // 0x0060(0x0008) (ExportObject, Component, EditInline)
	class UOnlineGameWordFilter_X*                     WordFilter;                                               // 0x0068(0x0008)
	TArray<class UPersonaClubData*>                    PersonaClubs;                                             // 0x0070(0x0010) (NeedCtorLink)
	class UActionQueue_X*                              ActionQueue;                                              // 0x0080(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ClubPersonas_TA");
		return ptr;
	}


	void ClubTagWithNameSanitized(class UPersonaClubData* PClub, const struct FString& ClubTag, const struct FString& Sanitized);
	void RefreshPersona(class UPersona_TA* Persona);
	void QueueRefresh(class UPersona_TA* Persona);
	void HandlePersonaAdded(class UPersonas_TA* Personas, class UPersona_TA* Persona);
	void HandleClubUpdated(class UOnlineClubCache_X* Cache, class UClubDetails_X* ClubDetails);
	void Construct();
};


// Class TAGame.ESportEvents_TA
// 0x0028 (0x0088 - 0x0060)
class UESportEvents_TA : public UObject
{
public:
	class UCacheTimer_X*                               CacheTimer;                                               // 0x0060(0x0008) (ExportObject, Component, EditInline)
	class UOnlineResource_X*                           OnlineResource;                                           // 0x0068(0x0008) (ExportObject, Component, EditInline)
	class UUrlConfig_X*                                UrlConfig;                                                // 0x0070(0x0008) (Edit)
	TArray<struct FESportEventData>                    Events;                                                   // 0x0078(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ESportEvents_TA");
		return ptr;
	}


	void __ESportEvents_TA__Construct_6D902ED949E2ABAEF98F80B10FE7ADA3(class UObject* _);
	void __ESportEvents_TA__Construct_6681BBF447E085B2CB984EA5DEF4DC7E(class UObject* _);
	void STATIC_GetNextEventTime(TArray<struct FESportEventData>* InEvents);
	void STATIC_EventToEpochTimes(const struct FESportEventData& Event);
	void UpdateEvents();
	void HandleImageDownloaded(class UTexture2DDynamic* Texture, const struct FString& URL);
	void DownloadEventImage(const struct FString& URL);
	void InitEvents();
	void HandleDataChanged(class UOnlineResource_X* Resource);
	void HandleCacheExpired(class UCacheTimer_X* Timer);
	void HandleUrlChanged();
	bool ShouldSync();
	void UpdateEnabled();
	void Construct();
};


// Class TAGame.OnlineGamePlayTogether_TA
// 0x0004 (0x007C - 0x0078)
class UOnlineGamePlayTogether_TA : public UOnline_X
{
public:
	int                                                PlayTogetherHostIndex;                                    // 0x0078(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGamePlayTogether_TA");
		return ptr;
	}


	void FinishHostStartPlayTogether();
	void OnCreatePlayTogetherParty(class UOnlineGameParty_X* InParty, bool bWasSuccessful);
	void UpdatePlayTogether();
	void HandlePlayTogetherLoginChanged(class UOnlinePlayerAuthentication_X* Auth);
	void OnTitleScreenClicked(class UGFxData_StartMenu_TA* StartMenu);
	void HandleHostStartPlayTogether(unsigned char LocalUserNum);
	void OnInit();
};


// Class TAGame.OnlineGameTourServer_TA
// 0x00E8 (0x0160 - 0x0078)
class UOnlineGameTourServer_TA : public UOnline_X
{
public:
	struct FTourServerSettings                         TourSettings;                                             // 0x0078(0x00D0) (Transient, NeedCtorLink)
	class UMapSet_TA*                                  MapSet;                                                   // 0x0148(0x0008) (Transient)
	class UTourGameUpdateDispatcher_TA*                GameUpdateDispatcher;                                     // 0x0150(0x0008) (Transient)
	class UTourServerInfo_TA*                          TourServerInfo;                                           // 0x0158(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameTourServer_TA");
		return ptr;
	}


	void __OnlineGameTourServer_TA__HandleGamePlaylistSet_A03004AA49B96AC2DCAAC692C2BEE185(class URPC_X* RPC);
	void __OnlineGameTourServer_TA__HandleGamePlaylistSet_2FA2546D49E0E671C05EE694488C2933(class URPC_TourGetMatchReservations_TA* RPC);
	bool __OnlineGameTourServer_TA__AllPlayersInGame_D362B521401C0BC285E3EDA699B4F2C0(const struct FTourTeam& T);
	bool __OnlineGameTourServer_TA__AllPlayersInGame_F2FB1D094CA968CABCF48CA3257A262C(const struct FTourPlayer& P);
	bool __OnlineGameTourServer_TA__HasMinPlayersPerTeam_57E0C9A14094720D00B76F98E257BA94(const struct FTourTeam& T, TArray<struct FTourPlayer>* FilterLocal_678810154C90D57224BD9880413D9E21);
	bool __OnlineGameTourServer_TA__HasMinPlayersPerTeam_E8C0AF014545A8DB97C890BFE205363E(const struct FTourPlayer& P);
	void __OnlineGameTourServer_TA__InitGameEventTeamScoresWhenInitialized_BD51B9D84EE0B49BABC78B88EDCA3861(class ATeam_Soccar_TA* T);
	void __OnlineGameTourServer_TA__InitGameEventTeamScoresWhenInitialized_09FD90714ED0CF255D6F04A44F85F938(const struct FTourTeam& T);
	void SetTeamDifficultiesByTeamID(int TeamID, int DifficultyValue);
	int GetTeamScore(int TeamIndex, TArray<struct FTourMatchGame>* FilterLocal_1541818F49B3404AD302A097249D27F9);
	void InitGameEventTeamScoresWhenInitialized(class AGameEvent_Soccar_TA* InGameEvent, TArray<class ATeam_Soccar_TA*>* OfTypeLocal_8A30D2A64B73CD3C4DE15DAF713AA361);
	void InitGameEventTeamScores(class AGameEvent_Soccar_TA* InGameEvent);
	int GetTeamIndexFromTeamID(int TeamID);
	void InitMatchSeriesScores(class UMatchSeries_TA* MatchSeries);
	void HandleActiveGameUpdated();
	void HandleError(class UError* Error);
	void HandleGameEventInitialized(class AGameEvent_Soccar_TA* InGameEvent);
	bool IsMatchCancelled();
	void GoToNextTourMap();
	void AllowPlayerLogin(const struct FString& Options, const struct FUniqueNetId& PlayerID, struct FString* ErrorMessage);
	bool AllowSplitscreenJoin(class APlayerReplicationInfo* PrimaryPRI, const struct FUniqueNetId& PlayerID, const struct FString& PlayerName, struct FString* Error);
	int GetNumAllowedSpectators();
	int GetTeamNum(struct FUniqueNetId* PlayerID);
	bool IsPlayerRegistered(const struct FUniqueNetId& PlayerID);
	bool AllPlayersRegistered(TArray<struct FReservationPlayerData>* Players);
	bool CanAcceptReservations(class UAddReservationMessagePublic_X* Message);
	TArray<class UMapData_TA*> STATIC_FilterMapData(int GameMode, TArray<struct FName>* FilterMaps, TArray<class UMapData_TA*>* FilterLocal_7C30EF6741CAD9F74371EAA40D219B57);
	void UpdatePlayerTeam(class APlayerReplicationInfo* PRI, class AGameEvent_Team_TA* GameEventTeam);
	bool HasMinPlayersPerTeam();
	bool AllPlayersInGame();
	bool IsBotTeam(int TeamID);
	void UpdatePlayerReservations();
	struct U_Types_X_FCustomMatchSettings STATIC_CreateMatchSettings(const struct FTourServerSettings& InSettings, class UTourServerInfo_TA* InTourServerInfo);
	void STATIC_EnsureDifferentTeamColors(struct FTourServerSettings* Settings);
	void InitTourSettings(struct FTourServerSettings* NewSettings);
	void HandleGamePlaylistSet(class UOnlineGameDedicatedServer_X* DedicatedServer);
	bool IsPlaylistName(const struct FName& PlaylistName);
	bool IsTournamentSet();
	bool IsTournamentPlaylist(int PlaylistId);
	bool HasTournamentPlaylist();
	void ClearSettings();
	void OnInit();
};


// Class TAGame.BinaryUploader_TA
// 0x0018 (0x0078 - 0x0060)
class UBinaryUploader_TA : public UObject
{
public:
	TArray<unsigned char>                              Data;                                                     // 0x0060(0x0010) (NeedCtorLink)
	class UStringMap*                                  Headers;                                                  // 0x0070(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BinaryUploader_TA");
		return ptr;
	}


	void Upload(const struct FString& URL);
	void SetHeader(const struct FString& Key, const struct FString& Value);
};


// Class TAGame.__OnlineGameDedicatedServer_TA__InitFlatbufferUpload_03E83E794915456560E6DE8DB8C7867C
// 0x0010 (0x0070 - 0x0060)
class U__OnlineGameDedicatedServer_TA__InitFlatbufferUpload_03E83E794915456560E6DE8DB8C7867C : public UObject
{
public:
	class URPC_RecordMatch_X*                          RPC;                                                      // 0x0060(0x0008)
	class ARLBot_SessionRecorder_TA*                   Session;                                                  // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineGameDedicatedServer_TA__InitFlatbufferUpload_03E83E794915456560E6DE8DB8C7867C");
		return ptr;
	}


	void __OnlineGameDedicatedServer_TA__InitFlatbufferUpload_03E83E794915456560E6DE8DB8C7867C(class URPC_X* _);
};


// Class TAGame.__OnlineGameDedicatedServer_TA__InitReplayUpload_B8C1A57E4A8559F46302FBB2E04F6537
// 0x0010 (0x0070 - 0x0060)
class U__OnlineGameDedicatedServer_TA__InitReplayUpload_B8C1A57E4A8559F46302FBB2E04F6537 : public UObject
{
public:
	class URPC_RecordMatch_X*                          RPC;                                                      // 0x0060(0x0008)
	class UBinaryUploader_TA*                          Uploader;                                                 // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineGameDedicatedServer_TA__InitReplayUpload_B8C1A57E4A8559F46302FBB2E04F6537");
		return ptr;
	}


	void __OnlineGameDedicatedServer_TA__InitReplayUpload_B8C1A57E4A8559F46302FBB2E04F6537(class URPC_X* _);
};


// Class TAGame.MapsConfig_TA
// 0x0010 (0x0088 - 0x0078)
class UMapsConfig_TA : public UOnlineConfig_X
{
public:
	TArray<struct FOnlineMapSet>                       OnlineMapSets;                                            // 0x0078(0x0010) (Edit, NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapsConfig_TA");
		return ptr;
	}


	class UMapData_TA* __MapsConfig_TA__Apply_5D5528944678C0CF61EB229AF211BC1F(const struct FOnlineMapData& M);
	bool GetMapFrequencyForSet(const struct FName& MapName, const struct FName& SetName, float* Frequency);
	class UMapSet_TA* GetMapSetByName(const struct FName& SetName);
	void Apply(class UMapSet_TA** ObjectInitializer_0DD7710F417D13B4A5E973BB51E4B96E, TArray<class UMapData_TA*>* MapLocal_FE9F966B4D9C27772D9D0F96787EFFD9);
};


// Class TAGame.ProductAssetCache_TA
// 0x0038 (0x00A8 - 0x0070)
class UProductAssetCache_TA : public UComponent
{
public:
	unsigned long                                      bDebug : 1;                                               // 0x0070(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	TArray<int>                                        NewProductIDs;                                            // 0x0078(0x0010) (Transient, NeedCtorLink)
	TArray<int>                                        LoadedProductIDs;                                         // 0x0088(0x0010) (Transient, NeedCtorLink)
	TArray<class UProductAsset_TA*>                    Assets;                                                   // 0x0098(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAssetCache_TA");
		return ptr;
	}


	struct FString GetDebugName();
	void HandleProductLoaded(const struct FAssetLoadResult& Result);
	void FinishedAddingProducts();
	void AddProducts(TArray<int> InProductIDs);
	void Clear();
};


// Class TAGame.OnlineGameJoinGame_TA
// 0x0008 (0x0438 - 0x0430)
class UOnlineGameJoinGame_TA : public UOnlineGameJoinGame_X
{
public:
	class UProductAssetCache_TA*                       AssetCache;                                               // 0x0430(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameJoinGame_TA");
		return ptr;
	}


	TArray<int> GetLoadout(const struct FUniqueNetId& PlayerID);
	class UAddReservationMessage_X* AddLoadoutsToMessage(class UAddReservationMessage_X* Message);
	void ClearAssetCache();
	void HandlePreLoadMap(const struct FString& MapName);
	void OnInit();
};


// Class TAGame.OnlineGameLanServer_TA
// 0x0010 (0x0240 - 0x0230)
class UOnlineGameLanServer_TA : public UOnlineGameLanServer_X
{
public:
	TArray<class UObject*>                             AllRelevantProducts;                                      // 0x0230(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameLanServer_TA");
		return ptr;
	}


	void HandleGameEventEnded(class AGameEvent_Soccar_TA* GameEvent);
	void StartMatch();
	class AGameEvent_TA* GetCurrentGameEvent();
	struct FName GetRandomMapName(int GameMode);
	void GoToNextMap();
	void LoadAllRelevantProducts();
	void OnInit();
};


// Class TAGame.PartyMessage_Loadout_TA
// 0x00A8 (0x0140 - 0x0098)
class UPartyMessage_Loadout_TA : public UPartyMessage_X
{
public:
	struct FPartyMemberLoadout                         MemberLoadout;                                            // 0x0098(0x00A8) (Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_Loadout_TA");
		return ptr;
	}


	class UPartyMessage_Loadout_TA* SetLoadout(struct FPartyMemberLoadout* InMemberLoadout);
};


// Class TAGame.PartyMessage_Rejoined_TA
// 0x0000 (0x0098 - 0x0098)
class UPartyMessage_Rejoined_TA : public UPartyMessage_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_Rejoined_TA");
		return ptr;
	}

};


// Class TAGame.PartyMessage_Chat_TA
// 0x0010 (0x00A8 - 0x0098)
class UPartyMessage_Chat_TA : public UPartyMessage_X
{
public:
	struct FString                                     Text;                                                     // 0x0098(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_Chat_TA");
		return ptr;
	}


	class UPartyMessage_Chat_TA* SetSender(const struct FUniqueNetId& InSender);
	class UPartyMessage_Chat_TA* SetText(const struct FString& InText);
};


// Class TAGame.RPC_ProductsTradePlayer_TA
// 0x00C0 (0x01C0 - 0x0100)
class URPC_ProductsTradePlayer_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	struct FUniqueNetId                                OtherPlayerID;                                            // 0x0138(0x0038)
	struct FGuid                                       TradeId;                                                  // 0x0170(0x0010)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0180(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_ProductsTradePlayer_TA.InstancesToGive
	unsigned char                                      UnknownData01[0x10];                                      // 0x0190(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_ProductsTradePlayer_TA.InstancesToGet
	TArray<struct FCurrency>                           CurrenciesToGive;                                         // 0x01A0(0x0010) (NeedCtorLink)
	TArray<struct FCurrency>                           CurrenciesToGet;                                          // 0x01B0(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsTradePlayer_TA");
		return ptr;
	}


	class UErrorType* OverrideErrorType(class UErrorType* ErrorType);
	class URPC_ProductsTradePlayer_TA* SetRemoteCurrencies(TArray<struct FCurrency>* InCurrencies);
	class URPC_ProductsTradePlayer_TA* SetLocalCurrencies(TArray<struct FCurrency>* InCurrencies);
	class URPC_ProductsTradePlayer_TA* SetRemoteProducts();
	class URPC_ProductsTradePlayer_TA* SetLocalProducts();
	class URPC_ProductsTradePlayer_TA* SetTradeId(const struct FGuid& InTradeId);
	class URPC_ProductsTradePlayer_TA* SetRemotePlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_ProductsTradePlayer_TA* SetLocalPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.__OnlineGameParty_TA__RestoreArchivedAndFavoritedPendingProductOffers_18B7E7054DBF487CC71394BB6FF26FE0
// 0x0018 (0x0078 - 0x0060)
class U__OnlineGameParty_TA__RestoreArchivedAndFavoritedPendingProductOffers_18B7E7054DBF487CC71394BB6FF26FE0 : public UObject
{
public:
	class UProductsFavoriteSave_TA*                    ProductsFavoriteSave;                                     // 0x0060(0x0008)
	class USaveData_TA*                                SaveData;                                                 // 0x0068(0x0008)
	class UProductsArchiveSave_TA*                     ArchiveSave;                                              // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineGameParty_TA__RestoreArchivedAndFavoritedPendingProductOffers_18B7E7054DBF487CC71394BB6FF26FE0");
		return ptr;
	}


	void __OnlineGameParty_TA__RestoreArchivedAndFavoritedPendingProductOffers_F2A942E84B476A636197498A38847272(const struct FProductHashID& P);
	void __OnlineGameParty_TA__RestoreArchivedAndFavoritedPendingProductOffers_18B7E7054DBF487CC71394BB6FF26FE0(const struct FProductHashID& P);
};


// Class TAGame.__OnlineGameParty_TA__SendTradeToBackEnd_132AEEB0432CAB07B42F4F93DFC4D15A
// 0x0010 (0x0070 - 0x0060)
class U__OnlineGameParty_TA__SendTradeToBackEnd_132AEEB0432CAB07B42F4F93DFC4D15A : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.__OnlineGameParty_TA__SendTradeToBackEnd_132AEEB0432CAB07B42F4F93DFC4D15A.LocalProductOffers

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineGameParty_TA__SendTradeToBackEnd_132AEEB0432CAB07B42F4F93DFC4D15A");
		return ptr;
	}


	void __OnlineGameParty_TA__SendTradeToBackEnd_132AEEB0432CAB07B42F4F93DFC4D15A(class ULocalPlayer_TA* P);
};


// Class TAGame.RPC_ProductsLoadoutGet_TA
// 0x0078 (0x0178 - 0x0100)
class URPC_ProductsLoadoutGet_TA : public URPC_X
{
public:
	TArray<struct FInstanceToSlotRow>                  InstanceToSlotTable;                                      // 0x0100(0x0010) (Transient, NeedCtorLink)
	struct FUniqueNetId                                PlayerID;                                                 // 0x0110(0x0038)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0148(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_ProductsLoadoutGet_TA.Loadout
	TArray<struct FOnlineProductData>                  ProductData;                                              // 0x0158(0x0010) (Transient, NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   Products;                                                 // 0x0168(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsLoadoutGet_TA");
		return ptr;
	}


	void GetProducts(int TeamIndex, TArray<class UOnlineProduct_TA*>* InLoadout);
	void OnSuccess();
	class URPC_ProductsLoadoutGet_TA* AddLoadout(int TeamIndex);
	class URPC_ProductsLoadoutGet_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.PartyMessage_TradeCurrencyUpdate_TA
// 0x0090 (0x0128 - 0x0098)
class UPartyMessage_TradeCurrencyUpdate_TA : public UPartyMessage_X
{
public:
	struct FUniqueNetId                                TradingMemberId;                                          // 0x0098(0x0038)
	struct FCurrency                                   CurrencyData;                                             // 0x00D0(0x0058) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_TradeCurrencyUpdate_TA");
		return ptr;
	}


	class UPartyMessage_TradeCurrencyUpdate_TA* SetCurrencyData(const struct FCurrency& InCurrencyData);
	class UPartyMessage_TradeCurrencyUpdate_TA* SetTradingMemberId(const struct FUniqueNetId& InTradingMemberId);
};


// Class TAGame.PartyMessage_TradeProductUpdate_TA
// 0x006C (0x0104 - 0x0098)
class UPartyMessage_TradeProductUpdate_TA : public UPartyMessage_X
{
public:
	struct FUniqueNetId                                TradingMemberId;                                          // 0x0098(0x0038)
	struct FOnlineProductData                          ProductData;                                              // 0x00D0(0x0030) (NeedCtorLink)
	unsigned long                                      bAddProduct : 1;                                          // 0x0100(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_TradeProductUpdate_TA");
		return ptr;
	}


	class UPartyMessage_TradeProductUpdate_TA* SetAddProduct(bool InAddProduct);
	class UPartyMessage_TradeProductUpdate_TA* SetProductData(const struct FOnlineProductData& InProductData);
	class UPartyMessage_TradeProductUpdate_TA* SetTradingMemberId(const struct FUniqueNetId& InTradingMemberId);
};


// Class TAGame.GFxData_TradeLobby_TA
// 0x00A0 (0x0138 - 0x0098)
class UGFxData_TradeLobby_TA : public UGFxDataSingleton_X
{
public:
	class UCurrencyProductSet_TA*                      LocalCurrencyProducts;                                    // 0x0098(0x0008) (Transient)
	class UCurrencyProductSet_TA*                      RemoteCurrencyProducts;                                   // 0x00A0(0x0008) (Transient)
	class UWallet_TA*                                  PlayerWallet;                                             // 0x00A8(0x0008) (Transient)
	class UOnlineGameParty_TA*                         OnlineParty;                                              // 0x00B0(0x0008) (Transient)
	class UProfile_TA*                                 Profile;                                                  // 0x00B8(0x0008) (Transient)
	class UProductTransactions_TA*                     ProductTransactions;                                      // 0x00C0(0x0008) (ExportObject, Transient, Component, EditInline)
	class UOnlineProductStoreSet_TA*                   RemoteProductSet;                                         // 0x00C8(0x0008) (ExportObject, Transient, Component, EditInline)
	class UGFxModal_X*                                 ModalProcessing;                                          // 0x00D0(0x0008) (Transient)
	unsigned long                                      bIsProcessingTrade : 1;                                   // 0x00D8(0x0004) (Transient)
	unsigned long                                      bVerifyingTrade : 1;                                      // 0x00D8(0x0004)
	struct FGuid                                       TradeId;                                                  // 0x00DC(0x0010) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	struct FUniqueNetId                                TradingPlayerID;                                          // 0x00F0(0x0038) (Transient)
	float                                              CountdownSecondsToTrade;                                  // 0x0128(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
	class UMtxConfig_TA*                               MtxConfig;                                                // 0x0130(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TradeLobby_TA");
		return ptr;
	}


	void __GFxData_TradeLobby_TA__OnShellSet_B76FD9B041CDD48AA53879ADE0F4123D(class UWallet_TA* InWallet);
	void __GFxData_TradeLobby_TA__IsValidTrade_8A7229AB417F5952A2EAF2AB582C0AB2(class UOnlineProduct_TA* Op);
	int __GFxData_TradeLobby_TA__GetLocalProductOfferings_0DDBC85A476EE46B091570AE0E0B4DEF(class UOnlineProduct_TA* Offering);
	int __GFxData_TradeLobby_TA__GetRemoteProductOfferings_78F2A0C345DC6543A6407C9843AE5F4B(class UOnlineProduct_TA* Offering);
	struct FProductHashID RocketBucksHashID();
	struct FProductHashID GetHashIDFromCurrencyID(int CurrencyID);
	bool IsAttemptingCurrencyExchange();
	bool IsAttemptingCurrencyGifting();
	struct FString GetRemotePlayerName();
	TArray<class UOnlineProduct_TA*> GetProductOfferings(class UOnlineProductStoreSet_TA* OfferingSet, TArray<class UOnlineProduct_TA*>* ArrayResultLocal_FC60E269413C5DE5F1D680A74A066B15, TArray<class UOnlineProduct_TA*>* FilterLocal_806FAC7E4FB6A144DE8B77ABD9B0184C);
	TArray<class UOnlineProduct_TA*> GetKeyOfferings(class UOnlineProductStoreSet_TA* OfferingSet, TArray<class UOnlineProduct_TA*>* ArrayResultLocal_CB5F700E40CE70016BB859B98BD3DBD6, TArray<class UOnlineProduct_TA*>* FilterLocal_B7EF47174216588273E076BEDFF25738);
	bool IsNotKeyProduct(class UOnlineProduct_TA* OnlineProduct);
	bool IsKeyProduct(class UOnlineProduct_TA* OnlineProduct);
	int GetRemoteKeyOfferingCount();
	int GetLocalKeyOfferingCount();
	struct FString GetRemoteProductOfferings(TArray<int>* MapLocal_B0F870964C94D78A270DB48C663C1ACB);
	struct FString GetLocalProductOfferings(TArray<int>* MapLocal_F22ED06F48EE96095505B2BFDE0778AA);
	void OnTradePlayerComplete();
	void HandleTradePlayerComplete(class UOnlineGameParty_TA* PartyObject, class URPC_ProductsTradePlayerStatus_TA* RPC);
	void RefreshProducts();
	void HandleTradePlayerError(class UOnlineGameParty_TA* PartyObject, class UError* Error, struct FGuid* InTradeId);
	void SendTradeToBackEnd();
	bool STATIC_TradeCompareAttributes(TArray<class UProductAttribute_TA*>* Left, TArray<class UProductAttribute_TA*>* Right);
	bool STATIC_TradeCompare(class UOnlineProduct_TA* A, class UOnlineProduct_TA* B);
	bool VerifyRemoteOffering(class UOnlineProduct_TA* OnlineProduct);
	void HandleVerifyTradeTimeOut(class UOnlineGameParty_X* PartyObject);
	bool ConfigAllowsTrade();
	bool IsValidTrade(TArray<class UOnlineProduct_TA*>* InRemoteProducts);
	void HandleVerifyTrade(class UOnlineGameParty_X* PartyObject, TArray<class UOnlineProduct_TA*> Products);
	void SendVerifyTradeToBackEnd();
	bool IsProcessingTrade();
	void StartCountdownToTrade(int CountdownTime);
	void HandleSendVerifyTradeToBackEnd(class UOnlineGameParty_X* PartyObject, TArray<struct FCurrency>* ArrayResultLocal_8CF856734DEE1C08A90B97AA8ED90818, TArray<struct FCurrency>* ArrayResultLocal_61755A664A66B2E5AB59209F346A2D23);
	void HandleNotReadyToTrade(class UOnlineGameParty_X* PartyObject);
	void HandleReadyToTrade(class UOnlineGameParty_X* PartyObject);
	void SetRemotePlayerReadyToTrade(bool bReadyToTrade);
	void SetLocalPlayerReadyToTrade(bool bReadyToTrade);
	void SetReadyToTrade(bool bReadyToTrade);
	void UpdateOfferings(bool bLocal);
	void RemoveRemoteOffering();
	void RemoveLocalOffering(const struct FProductHashID& HashID);
	void AddRemoteOffering(class UOnlineProduct_TA* InOnlineProduct);
	void HandleTradeCurrencyUpdate(class UOnlineGameParty_TA* PartyObject, const struct FCurrency& CurrencyData);
	void HandleTradeProductUpdate(class UOnlineGameParty_TA* PartyObject, const struct FOnlineProductData& ProductData, bool bAddProduct);
	void UpdateTradeQuantity(const struct FProductHashID& HashID, bool bAddProduct, TArray<class UOnlineProduct_TA*>* PrevTransactionProducts, TArray<struct FCurrency>* TransactionCurrencies, TArray<class UOnlineProduct_TA*>* DifferenceLocal_6AF25437446ADC22F7FE419331863000, TArray<class UOnlineProduct_TA*>* DifferenceLocal_F69212114675106241472E8A4A69348C);
	void SetTransactionQuantity(const struct FProductHashID& HashID, int Quantity, TArray<struct FCurrency>* ArrayResultLocal_A911BF4C40A0575EB2F9A3AEFC4F9327, TArray<struct FCurrency>* DifferenceLocal_1FFDED324DAB9885F62101A8599E01FF);
	void CloseTradingWindow(bool bWasCanceled, bool bNoReceivedProducts);
	void CancelTrading();
	void HandleCloseInviteToTrade(class UOnlineGameParty_X* PartyObject, bool bWasCanceled);
	void CloseTradeLobby(struct FGuid* StructInitializer_A018D67E419A2467196E4BAEDEEC304D, struct FUniqueNetId* StructInitializer_337ED7FD43A0D3E5D5D35F893B86F2BD);
	void HandleAcceptedInviteToTrade(class UOnlineGameParty_X* PartyObject);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.__OnlineGameParty_TA__HandleCrossplayEnabledChanged_81692AA4490BD6221E0440844FA61496
// 0x0008 (0x0068 - 0x0060)
class U__OnlineGameParty_TA__HandleCrossplayEnabledChanged_81692AA4490BD6221E0440844FA61496 : public UObject
{
public:
	class UAccountSettingsComponent_TA*                AccountSettings;                                          // 0x0060(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineGameParty_TA__HandleCrossplayEnabledChanged_81692AA4490BD6221E0440844FA61496");
		return ptr;
	}


	void __OnlineGameParty_TA__HandleCrossplayEnabledChanged_81692AA4490BD6221E0440844FA61496();
};


// Class TAGame.__OnlineGameParty_TA__AddPlayerPartyServiceLobbyMessage_6A40A79B4760FE4E9D6B34A5562963AC
// 0x0010 (0x0070 - 0x0060)
class U__OnlineGameParty_TA__AddPlayerPartyServiceLobbyMessage_6A40A79B4760FE4E9D6B34A5562963AC : public UObject
{
public:
	struct FString                                     Message;                                                  // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineGameParty_TA__AddPlayerPartyServiceLobbyMessage_6A40A79B4760FE4E9D6B34A5562963AC");
		return ptr;
	}


	void __OnlineGameParty_TA__AddPlayerPartyServiceLobbyMessage_6A40A79B4760FE4E9D6B34A5562963AC(class UPersona_TA* P);
};


// Class TAGame.SpecialEventConfig_TA
// 0x01A0 (0x0218 - 0x0078)
class USpecialEventConfig_TA : public UOnlineConfig_X
{
public:
	TArray<struct FSpecialEventStoreConfigs>           StoreConfigs;                                             // 0x0078(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FDebugMicroEventPlaylistID>          DebugMicroEventPlaylistIDs;                               // 0x0088(0x0010) (Edit, NeedCtorLink, DataBinding)
	int                                                CurrencyID;                                               // 0x0098(0x0004) (Edit, DataBinding)
	int                                                ShopID;                                                   // 0x009C(0x0004) (Edit, DataBinding)
	struct FString                                     Title;                                                    // 0x00A0(0x0010) (Edit, NeedCtorLink, DataBinding)
	struct FString                                     Subtitle;                                                 // 0x00B0(0x0010) (Edit, NeedCtorLink, DataBinding)
	struct FString                                     RedemptionTitle;                                          // 0x00C0(0x0010) (Edit, NeedCtorLink, DataBinding)
	struct FString                                     Description;                                              // 0x00D0(0x0010) (Edit, NeedCtorLink, DataBinding)
	struct FString                                     RedemptionDescription;                                    // 0x00E0(0x0010) (Edit, NeedCtorLink, DataBinding)
	struct FString                                     CurrencyName;                                             // 0x00F0(0x0010) (Edit, NeedCtorLink, DataBinding)
	struct FString                                     CurrencyImageURL;                                         // 0x0100(0x0010) (Edit, NeedCtorLink)
	struct FString                                     CurrencyImageLargeURL;                                    // 0x0110(0x0010) (Edit, NeedCtorLink)
	struct FString                                     BackgroundImageURL;                                       // 0x0120(0x0010) (Edit, NeedCtorLink)
	struct FString                                     LogoImageURL;                                             // 0x0130(0x0010) (Edit, NeedCtorLink)
	int                                                CurrencyColor;                                            // 0x0140(0x0004) (Edit, DataBinding)
	int                                                BackgroundColor;                                          // 0x0144(0x0004) (Edit, DataBinding)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0148(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SpecialEventConfig_TA.StartTime
	struct FString                                     StartTimeString;                                          // 0x0150(0x0010) (Transient, NeedCtorLink, DataBinding)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0160(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SpecialEventConfig_TA.EndTime
	struct FString                                     EndTimeString;                                            // 0x0168(0x0010) (Transient, NeedCtorLink, DataBinding)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0178(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.SpecialEventConfig_TA.RedemptionEndTime
	struct FString                                     RedemptionEndTimeString;                                  // 0x0180(0x0010) (Transient, NeedCtorLink, DataBinding)
	class UTexture*                                    BackgroundImage;                                          // 0x0190(0x0008) (Transient, DataBinding)
	class UTexture*                                    CurrencyImage;                                            // 0x0198(0x0008) (Transient, DataBinding)
	class UTexture*                                    CurrencyImageLarge;                                       // 0x01A0(0x0008) (Transient, DataBinding)
	class UTexture*                                    LogoImage;                                                // 0x01A8(0x0008) (Transient, DataBinding)
	unsigned long                                      bApplied : 1;                                             // 0x01B0(0x0004) (Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x01B4(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __CurrencyID__ChangeNotify;                               // 0x01B8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x01B4(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __CurrencyImage__ChangeNotify;                            // 0x01D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x01D0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __CurrencyImageLarge__ChangeNotify;                       // 0x01E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x01E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __bApplied__ChangeNotify;                                 // 0x0200(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0200(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialEventConfig_TA");
		return ptr;
	}


	void __SpecialEventConfig_TA__Apply_3CEFFDBA4FEDCA5F445ADCBA3D0E6080(class UTexture2DDynamic* Texture);
	void __SpecialEventConfig_TA__Apply_C9EB24BD4CAD0DC025784385C1B1EEAC(class UTexture2DDynamic* Texture);
	void __SpecialEventConfig_TA__Apply_DC0B6BBC418337AB6DA5ABA2ADB972CE(class UTexture2DDynamic* Texture);
	void __SpecialEventConfig_TA__Apply_65CD3863417343BD6A244C94B1835441(class UTexture2DDynamic* Texture);
	void __bApplied__ChangeNotifyFunc();
	void __CurrencyImageLarge__ChangeNotifyFunc();
	void __CurrencyImage__ChangeNotifyFunc();
	void __CurrencyID__ChangeNotifyFunc();
	int GetSecondsRemaining();
	TEnumAsByte<ESpecialEventState> GetState();
	void SyncImageForIndex(class UWebImageCache_X* WebImageCache, int I);
	void Apply();
};


// Class TAGame.__OnlineGamePlaylists_TA__IsDebugMicroEventPlaylist_70CB7D354EAFB2FC3062CEBB388CDC01
// 0x0008 (0x0068 - 0x0060)
class U__OnlineGamePlaylists_TA__IsDebugMicroEventPlaylist_70CB7D354EAFB2FC3062CEBB388CDC01 : public UObject
{
public:
	struct FName                                       PlaylistName;                                             // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineGamePlaylists_TA__IsDebugMicroEventPlaylist_70CB7D354EAFB2FC3062CEBB388CDC01");
		return ptr;
	}


	bool __OnlineGamePlaylists_TA__IsDebugMicroEventPlaylist_70CB7D354EAFB2FC3062CEBB388CDC01(const struct FDebugMicroEventPlaylistID& DebugPlaylist);
};


// Class TAGame.OnlineGameRegions_TA
// 0x0008 (0x0118 - 0x0110)
class UOnlineGameRegions_TA : public UOnlineGameRegions_X
{
public:
	class URegionPingCache_TA*                         RegionPingCache;                                          // 0x0110(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameRegions_TA");
		return ptr;
	}


	void OnInit();
};


// Class TAGame.RegionPingCache_TA
// 0x0018 (0x0078 - 0x0060)
class URegionPingCache_TA : public UObject
{
public:
	TArray<struct FCachedRegionPing>                   CachedRegionPings;                                        // 0x0060(0x0010) (NeedCtorLink)
	class UOnlineGameRegions_TA*                       OnlineGameRegionsRef;                                     // 0x0070(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RegionPingCache_TA");
		return ptr;
	}


	struct FString GetSaveFileName();
	void HandleRegionsPinged(class UOnlineGameRegions_X* RegionsObj);
	void HandleImportFinished(class ULocalCache_X* Cache, class URegionPingCache_TA* CacheObject, class UError* Error);
	void Init(class UOnlineGameRegions_TA* OnlineGameRegions);
};


// Class TAGame.OnlineGameReservations_TA
// 0x0010 (0x0150 - 0x0140)
class UOnlineGameReservations_TA : public UOnlineGameReservations_X
{
public:
	TArray<struct FReservationLoadout>                 Loadouts;                                                 // 0x0140(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameReservations_TA");
		return ptr;
	}


	bool __OnlineGameReservations_TA__AddLoadout_556E25CB48A475A9B07D6581BE55C63C(int Id);
	int __OnlineGameReservations_TA__AddLoadout_C2B0D1D641F2F96B9087F58E5206E3DD(int Id);
	bool ShouldCheckPlatformRestrictions(class UAddReservationMessagePublic_X* Message);
	bool CanAcceptReservations(class UAddReservationMessagePublic_X* Message);
	TArray<int> GetPrecacheProductIDs();
	class UReservationsReadyMessage_X* CreateReadyMessage();
	void ClearReservations();
	void RemoveReservationIndex(int Index);
	void AddLoadout(const struct FUniqueNetId& PlayerID, TArray<int> ProductIDs, TArray<int>* MapLocal_9A0DAD8F4272C3D78323E1A97DFCCF1F, TArray<int>* FilterLocal_966EDA4E41DCEE1B2BA9E6869556CEEB, TArray<int>* DistinctLocal_F04115F94A021C0684C506B8B1660151);
	TArray<struct FReservationData> AddPlayersFromReservationMessage(class UAddReservationMessage_X* ReservationMessage, const TScriptInterface<class UIReservationConnection_X>& Connection);
};


// Class TAGame.OnlineGameSkill_TA
// 0x0000 (0x00D0 - 0x00D0)
class UOnlineGameSkill_TA : public UOnlineGameSkill_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameSkill_TA");
		return ptr;
	}


	void ClientSetSkill(const struct FPlayerSkillRating& Rating, int Playlist);
	void ReplicatePlayerSkillRating(const struct FUniqueNetId& PlayerID, int Playlist);
	void ReplicateSkillUpdate(class UMatchData_X* MatchData);
	void HandleSkillsUpdateFailed(class URPC_X* RPCObject);
	void HandleSkillsUpdated(class URPC_UpdateSkills_X* RPCObject);
};


// Class TAGame.ChallengeManager_TA
// 0x0090 (0x00F0 - 0x0060)
class UChallengeManager_TA : public UObject
{
public:
	TArray<class UChallenge_TA*>                       Challenges;                                               // 0x0060(0x0010) (NeedCtorLink)
	TArray<int>                                        ChallengeProgressSyncIDs;                                 // 0x0070(0x0010) (NeedCtorLink)
	TArray<int>                                        ClearNewInfoChallengeIDQueue;                             // 0x0080(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __EventChallengeAdded__Delegate;                          // 0x0090(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0090(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventChallengeCompleted__Delegate;                      // 0x00A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00A8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventChallengeRewardCollected__Delegate;                // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventChallengeProgressChanged__Delegate;                // 0x00D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChallengeManager_TA");
		return ptr;
	}


	void __ChallengeManager_TA__Construct_58E5F4BE48C03186790705867C1F5102(class UChallengeDefault_TA* C);
	void __ChallengeManager_TA__Construct_EF8EB1F0406C73375C37D8A17ED8CC90(class UChallengeDefaultManager_TA* _, class UChallengeDefault_TA* C);
	void __ChallengeManager_TA__HandleChallengesReceived_4E126B6C438533C3E58538BF1AAF3BF8(const struct FChallengeProgress& P);
	void __ChallengeManager_TA__HandleChallengeProgressPushed_F1711AA64C58D71E32F7C7A67D6E5360(const struct FChallengeProgress& P);
	void __ChallengeManager_TA__RemoveChallenges_7B47BBBD4A02BAFC8C030C8CE48255C3(class UChallenge_TA* C);
	class ULocalPlayer_TA* GetLocalPlayer();
	class APlayerControllerBase_TA* GetPC();
	class UChallenge_TA* FindChallenge(int Id);
	int FindChallengeIndex(int Id);
	void HandleTrainingCompleted(class AGameEvent_Training_TA* Training);
	void HandleTutorialCompleted(class UTutorial_TA* Tutorial);
	void TriggerChallengeCompleteNotification(class UChallenge_TA* Challenge);
	void NotifyChallengeCompleted(class UChallenge_TA* Challenge);
	void OnChallengeComplete(class UChallenge_TA* Challenge);
	void NotifyChallengeAvailable(class UChallenge_TA* Challenge);
	void SetChallengeProgress(struct FChallengeProgress* Progress);
	void RemoveChallenges();
	void RemoveChallenge(int Id);
	class UChallenge_TA* AddChallenge(class UChallengeDefault_TA* ChallengeDefault);
	void ClearPendingNewInfoChallenges();
	void ClearNewInfoDelayed(int ChallengeID);
	void HandleChallengeProgressPushed(class UPsyNetService_ChallengeProgress_TA* Message);
	void HandleChallengesReceived(class URPC_GetChallengeProgress_TA* RPC);
	void SyncPendingChallengeProgress();
	void Construct();
	void EventChallengeProgressChanged(class UChallengeManager_TA* Manager);
	void EventChallengeRewardCollected(class UChallengeManager_TA* Manager, class UChallenge_TA* Challenge, struct FOnlineReward* Reward);
	void EventChallengeCompleted(class UChallengeManager_TA* Manager, class UChallenge_TA* Challenge);
	void EventChallengeAdded(class UChallengeManager_TA* Manager, class UChallenge_TA* Challenge);
};


// Class TAGame.StatusTriggerManager_TA
// 0x0020 (0x0080 - 0x0060)
class UStatusTriggerManager_TA : public UObject
{
public:
	TArray<class UStatusObserver_X*>                   Observers;                                                // 0x0060(0x0010) (NeedCtorLink)
	TArray<class UTriggerCondition_TA*>                Conditions;                                               // 0x0070(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatusTriggerManager_TA");
		return ptr;
	}


	class UStatusObserver_X* __StatusTriggerManager_TA__Init_4811872542ABFB12E56F949F8E3E7E6F(class UClass* Ob);
	void DebugPrint();
	void CheckModifiedCondition(class UTriggerCondition_TA* InCondition);
	void RemoveTriggers(class UTriggerCondition_TA* InCondition);
	void RemoveTriggerCondition(class UTriggerCondition_TA* InCondition);
	void RegisterTriggers(class UTriggerCondition_TA* InCondition, TArray<class UStatusTrigger_X*> InTriggers);
	void AddTriggerCondition(class UTriggerCondition_TA* InCondition);
	void Init(class ULocalPlayer_TA* LP, TArray<class UClass*>* ArrayInitializer_C7ACCDC040B3F30690294F9168B84FFD, TArray<class UClass*>* FilterLocal_32BF22554D98D974817267AE638B2A35, TArray<class UStatusObserver_X*>* MapLocal_775487CB4FC68082DCB600BE30C031B0);
};


// Class TAGame.OnlinePlayerMTX_TA
// 0x0038 (0x0098 - 0x0060)
class UOnlinePlayerMTX_TA : public UObject
{
public:
	unsigned long                                      bEntitlementsDirty : 1;                                   // 0x0060(0x0004)
	unsigned long                                      bClaimingEntitlements : 1;                                // 0x0060(0x0004)
	unsigned long                                      bMtxCodeExpired : 1;                                      // 0x0060(0x0004)
	unsigned long                                      bAllowEntitlements : 1;                                   // 0x0060(0x0004) (Const, Config)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventClaimedEntitlements__Delegate;                     // 0x0068(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0064(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventEntitlementsError__Delegate;                       // 0x0080(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0080(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlinePlayerMTX_TA");
		return ptr;
	}


	void HandleClaimFail(class URPC_MicroTransactions_ClaimEntitlements_TA* RPC);
	void HandleClaimSuccess(class URPC_MicroTransactions_ClaimEntitlements_TA* RPC);
	void HandleMtxCode(bool bSuccess, const struct FString& Code);
	void ConditionalClaimEntitlements();
	void ClaimEntitlements();
	void HandlePsyNetDisconnected(class UPsyNetConnection_X* C);
	void HandlePsyNetConnected(class UPsyNetConnection_X* C);
	void Construct();
	void EventEntitlementsError(class UOnlinePlayerMTX_TA* MTX, class UError* Error);
	void EventClaimedEntitlements(class UOnlinePlayerMTX_TA* MTX, TArray<class UOnlineProduct_TA*> Products);
};


// Class TAGame.PlayerProgressionManager_TA
// 0x0000 (0x0060 - 0x0060)
class UPlayerProgressionManager_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerProgressionManager_TA");
		return ptr;
	}


	void Init(class APlayerController* PlayerCon);
};


// Class TAGame.OnlinePlayerFriends_TA
// 0x0018 (0x02B0 - 0x0298)
class UOnlinePlayerFriends_TA : public UOnlinePlayerFriends_X
{
public:
	struct FScriptDelegate                             __EventPsyNetRecentPlayers__Delegate;                     // 0x0298(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0298(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlinePlayerFriends_TA");
		return ptr;
	}


	void DownloadRecentPlayerDetails(const struct FScriptDelegate& Callback, TArray<struct FUniqueNetId>* RecentPlayerIds);
	void EventPsyNetRecentPlayers(TArray<struct FOnlineFriend>* RecentPlayerData);
};


// Class TAGame.__OnlinePlayerFriends_TA__DownloadRecentPlayerDetails_F2E0DE87418D397BC586F099DD9E56ED
// 0x0018 (0x0078 - 0x0060)
class U__OnlinePlayerFriends_TA__DownloadRecentPlayerDetails_F2E0DE87418D397BC586F099DD9E56ED : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlinePlayerFriends_TA__DownloadRecentPlayerDetails_F2E0DE87418D397BC586F099DD9E56ED");
		return ptr;
	}


	void __OnlinePlayerFriends_TA__DownloadRecentPlayerDetails_F2E0DE87418D397BC586F099DD9E56ED(class URPC_GetPersonaInfo_TA* R);
};


// Class TAGame.__OnlineProduct_TA__SortOnlineProductsByQuality_E192709246C40191B88B5CA56B2775FF
// 0x0004 (0x0064 - 0x0060)
class U__OnlineProduct_TA__SortOnlineProductsByQuality_E192709246C40191B88B5CA56B2775FF : public UObject
{
public:
	int                                                I;                                                        // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineProduct_TA__SortOnlineProductsByQuality_E192709246C40191B88B5CA56B2775FF");
		return ptr;
	}


	bool __OnlineProduct_TA__SortOnlineProductsByQuality_E192709246C40191B88B5CA56B2775FF(class UOnlineProduct_TA* P);
};


// Class TAGame.__OnlineProduct_TA__RemoveAttributes_D7C61F3B4F70723524828CA5EEA05DCE
// 0x0008 (0x0068 - 0x0060)
class U__OnlineProduct_TA__RemoveAttributes_D7C61F3B4F70723524828CA5EEA05DCE : public UObject
{
public:
	class UClass*                                      AttributeClass;                                           // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineProduct_TA__RemoveAttributes_D7C61F3B4F70723524828CA5EEA05DCE");
		return ptr;
	}


	bool __OnlineProduct_TA__RemoveAttributes_D7C61F3B4F70723524828CA5EEA05DCE(class UProductAttribute_TA* A);
};


// Class TAGame.__PlayerControllerBase_TA__InitFromProfile_EBEAEE5347E63DF4D99264967176A538
// 0x0008 (0x0068 - 0x0060)
class U__PlayerControllerBase_TA__InitFromProfile_EBEAEE5347E63DF4D99264967176A538 : public UObject
{
public:
	class UProfile_TA*                                 Profile;                                                  // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__PlayerControllerBase_TA__InitFromProfile_EBEAEE5347E63DF4D99264967176A538");
		return ptr;
	}


	void __PlayerControllerBase_TA__InitFromProfile_EBEAEE5347E63DF4D99264967176A538(class UGFxShell_X* Shell);
};


// Class TAGame.SpectatorVolume_TA
// 0x0004 (0x02A8 - 0x02A4)
class ASpectatorVolume_TA : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpectatorVolume_TA");
		return ptr;
	}

};


// Class TAGame.AudioSpectatorMixComponent_TA
// 0x0084 (0x0128 - 0x00A4)
class UAudioSpectatorMixComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FName                                       SpectatorCameraModeStateGroup;                            // 0x00A8(0x0008)
	struct FName                                       SpectatorCameraMode_Fly;                                  // 0x00B0(0x0008)
	struct FName                                       SpectatorCameraMode_Director_Base;                        // 0x00B8(0x0008)
	struct FName                                       SpectatorCameraMode_Director_Countdown;                   // 0x00C0(0x0008)
	struct FName                                       SpectatorCameraMode_None;                                 // 0x00C8(0x0008)
	struct FName                                       CurrentGameState;                                         // 0x00D0(0x0008)
	struct FName                                       CurrentCameraState;                                       // 0x00D8(0x0008)
	struct FName                                       ActorCameraFocusRTPC;                                     // 0x00E0(0x0008)
	struct FName                                       ActorInViewRTPC;                                          // 0x00E8(0x0008)
	struct FName                                       ReplayCarFocusRTPC;                                       // 0x00F0(0x0008)
	struct FName                                       ReplayCameraViewFocusRTPC;                                // 0x00F8(0x0008)
	struct FName                                       IsLocalRPTC;                                              // 0x0100(0x0008)
	class ACar_TA*                                     TargetCar;                                                // 0x0108(0x0008)
	unsigned long                                      bShouldFocusCar : 1;                                      // 0x0110(0x0004)
	unsigned long                                      bShouldFocusCameraView : 1;                               // 0x0110(0x0004)
	unsigned long                                      bShouldFocusCarBeLocal : 1;                               // 0x0110(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	class ACamera_Replay_TA*                           ReplayCamera;                                             // 0x0118(0x0008)
	class AGameEvent_Soccar_TA*                        GameEvent;                                                // 0x0120(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AudioSpectatorMixComponent_TA");
		return ptr;
	}


	void __AudioSpectatorMixComponent_TA__ClearIsLocalRTPCs_3BC2A4EC47040DC79FD10EA196258C8E(class ACar_TA* C);
	void __AudioSpectatorMixComponent_TA__ClearInCameraViewRTPCs_1F1AFAFD4D0EA6AE983AD88910C35DFF(class ACar_TA* C);
	void SetAkState(const struct FName& InState);
	void ClearInCameraViewRTPCs();
	void ClearIsLocalRTPCs();
	void UpdateInCameraViewRTPCs();
	void ClearReplayCarFocusRTPCs();
	void SetReplayCarFocusRTPC(class ACar_TA* InCar);
	void UpdateCarIsLocal(class ACar_TA* InCar);
	void HandleCameraProxyChanged(class UCameraState_Replay_TA* NewCameraState, class UCameraState_X* NewCameraProxyState);
	void HandleTargetChanged(class ACamera_TA* InCamera, class AActor* NewTarget);
	void HandleCameraModeChanged();
	void HandleGameStateChanged(class AGameEvent_TA* NewGameState);
	void HandleGameEventSet(class AGameEvent_Soccar_TA* InGameEvent);
	void Tick(float DeltaTime);
	void Detached();
	void Attached();
};


// Class TAGame.AudioFieldSideComponent_TA
// 0x0024 (0x00C8 - 0x00A4)
class UAudioFieldSideComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FName                                       FieldSideRTPC;                                            // 0x00A8(0x0008)
	float                                              OneOverFieldLength;                                       // 0x00B0(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	class AGameEvent_Soccar_TA*                        GameEvent;                                                // 0x00B8(0x0008)
	class UArenaReflectionsManager_TA*                 ArenaReflectionsManager;                                  // 0x00C0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AudioFieldSideComponent_TA");
		return ptr;
	}


	void HandleGameEventSet(class AGameEvent_Soccar_TA* NewGameEvent);
	void HandleReflectionsManagerSet(class UArenaReflectionsManager_TA* NewReflectionsManager);
	void UpdateFieldSideParams();
	void UpdateCanTick();
	void Tick(float DeltaTime);
	void Detached();
	void Attached();
};


// Class TAGame.PlayerInputSequence_TA
// 0x0048 (0x0118 - 0x00D0)
class UPlayerInputSequence_TA : public UInteraction
{
public:
	TArray<struct FName>                               Sequence;                                                 // 0x00D0(0x0010) (Edit, NeedCtorLink)
	struct FString                                     ConsoleCommand;                                           // 0x00E0(0x0010) (Edit, NeedCtorLink)
	float                                              Timeout;                                                  // 0x00F0(0x0004) (Edit)
	unsigned long                                      bOrderMatters : 1;                                        // 0x00F4(0x0004) (Edit)
	unsigned long                                      bCheat : 1;                                               // 0x00F4(0x0004) (Edit)
	unsigned long                                      bRemoveOnComplete : 1;                                    // 0x00F4(0x0004) (Edit)
	unsigned long                                      bRemoveAfterSplashScreen : 1;                             // 0x00F4(0x0004) (Edit)
	unsigned long                                      bCaptureInput : 1;                                        // 0x00F4(0x0004) (Edit)
	unsigned long                                      bConfirm : 1;                                             // 0x00F4(0x0004) (Edit)
	unsigned long                                      bPrimaryPlayerOnly : 1;                                   // 0x00F4(0x0004) (Edit)
	struct FString                                     Message;                                                  // 0x00F8(0x0010) (Edit, NeedCtorLink)
	TArray<struct FName>                               CurrentSequence;                                          // 0x0108(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInputSequence_TA");
		return ptr;
	}


	void OnCommandConfirmed(class UGFxModal_X* Modal);
	void RemoveSequence();
	void OnSequenceCompleted();
	void ResetSequence();
	bool HandleFinalInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	bool HandleInputKey(int ControllerId, const struct FName& Key, TEnumAsByte<EInputEvent> EventType, float AmountDepressed, bool bGamepad);
	void SwapIndexes(const struct FName& A, const struct FName& B);
	void Initialize();
	bool ShouldInstance(class APlayerController* ForPC);
};


// Class TAGame.PlayerInput_Menu_TA
// 0x0010 (0x04D8 - 0x04C8)
class UPlayerInput_Menu_TA : public UPlayerInput_TA
{
public:
	TArray<struct FName>                               AllowedActions;                                           // 0x04C8(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_Menu_TA");
		return ptr;
	}


	void RemoveAllActionsBut(TArray<struct FName>* KeepActions, TArray<struct FPlayerBinding>* OutBindings);
	void OnActiveBindingsChanged();
};


// Class TAGame.PlayerController_Replay_TA
// 0x0010 (0x0958 - 0x0948)
class APlayerController_Replay_TA : public APlayerControllerBase_TA
{
public:
	class AHUD*                                        SplitscreenHUDArchetype;                                  // 0x0948(0x0008) (Edit)
	class AGameEvent_TA*                               GameEvent;                                                // 0x0950(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerController_Replay_TA");
		return ptr;
	}


	void PrintDebugInfo(class UDebugDrawer* Drawer);
	void Destroyed();
	void ReceivedPlayer();
};


// Class TAGame.AudioParamsSuperSonicReplayComponent_TA
// 0x000C (0x00B0 - 0x00A4)
class UAudioParamsSuperSonicReplayComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class ACar_TA*                                     ReplayFocus;                                              // 0x00A8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AudioParamsSuperSonicReplayComponent_TA");
		return ptr;
	}


	void __AudioParamsSuperSonicReplayComponent_TA__Attached_8F32B77549C00CF621F8BDBE92202418(class ACamera_TA* C, class AActor* T);
	void __AudioParamsSuperSonicReplayComponent_TA__Attached_ACC23D224165C54893FB1BB8CA856689(class ACamera_X* C, class UCameraState_X* CS);
	void __AudioParamsSuperSonicReplayComponent_TA__Attached_15860073467244199F9D9DBF117C9CDA(class APlayerController_X* _);
	void HandleSuperSonicChanged(class ACar_TA* Car);
	void UpdateReplayCameraLocalView(class ACamera_Replay_TA* Camera);
	void Attached();
};


// Class TAGame.AudioParamsSuperSonicComponent_TA
// 0x0004 (0x00A8 - 0x00A4)
class UAudioParamsSuperSonicComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AudioParamsSuperSonicComponent_TA");
		return ptr;
	}


	void __AudioParamsSuperSonicComponent_TA__Construct_9BF787DC4FEF1C3B60B25096C695F26A(class APlayerController_X* _);
	void STATIC_SetSuperSonic(bool bSuperSonic);
	void HandleDemolished(class ACar_TA* Victim, const struct FDemolishData& Data);
	void HandlePawnChange(class APlayerController_X* PC, class ACar_TA* OldPawn, class ACar_TA* NewPawn);
	void HandleSuperSonicChanged(class ACar_TA* Car);
	void UpdateNumLocalPlayers(class UGameViewportClient_TA* GVC, int LocalPlayerCount);
	void Construct();
};


// Class TAGame.CameraState_DirectorProxy_TA
// 0x00CC (0x0190 - 0x00C4)
class UCameraState_DirectorProxy_TA : public UCameraState_Replay_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	class AGameEvent_Soccar_TA*                        GameEvent;                                                // 0x00C8(0x0008) (Edit)
	class UGameObserver_TA*                            GameObserver;                                             // 0x00D0(0x0008) (Edit, ExportObject, Component, EditInline)
	float                                              MinimumStateTime;                                         // 0x00D8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           DistToBallWeight;                                         // 0x00E0(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           PlayersInViewWeight;                                      // 0x00F8(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           ViewPitchWeight;                                          // 0x0110(0x0018) (Edit, NeedCtorLink)
	float                                              GoalInViewWeight;                                         // 0x0128(0x0004) (Edit)
	float                                              CanSeeNewViewContinuity;                                  // 0x012C(0x0004) (Edit)
	struct FInterpCurveFloat                           SimilarOrientationContinuity;                             // 0x0130(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           SimilarCarVelocityContinuity;                             // 0x0148(0x0018) (Edit, NeedCtorLink)
	struct FVector                                     FieldForward;                                             // 0x0160(0x000C) (Transient)
	struct FVector                                     FieldSide;                                                // 0x016C(0x000C) (Transient)
	unsigned long                                      bActive : 1;                                              // 0x0178(0x0004)
	unsigned char                                      UnknownData02[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	class UCameraState_Director_TA*                    Director;                                                 // 0x0180(0x0008) (Transient)
	class UProfileCameraSave_TA*                       CameraSave;                                               // 0x0188(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_DirectorProxy_TA");
		return ptr;
	}


	void __CameraState_DirectorProxy_TA__Init_DE5C31C3478F2D580309D48617865D61(class UProfileCameraSave_TA* SO);
	class AActor* GetFocusActor();
	float GetCarContinuityRating(const struct FVector& ViewStart, const struct FRotator& ViewRotation, float FOV, const struct FVector& CarVelocity, const struct FVector& OtherCarVelocity);
	float GetContinuityRating(const struct FVector& ViewStart, const struct FRotator& ViewRotation, float FOV);
	float GetViewRating(const struct FVector& ViewStart, const struct FRotator& ViewRotation, float FOV);
	float GetAspectRatio();
	bool AllowSwivel();
	bool ShouldKeepExecuting();
	float GetActiveTime();
	void Init(class ACamera_X* InCamera);
	void OnSetGameObserver();
	void EndCameraState();
	void BeginCameraState();
};


// Class TAGame.CameraState_DirectorPlayerView_TA
// 0x00D4 (0x0264 - 0x0190)
class UCameraState_DirectorPlayerView_TA : public UCameraState_DirectorProxy_TA
{
public:
	class UCameraState_CarRef_TA*                      BallCameraState;                                          // 0x0190(0x0008) (Edit)
	float                                              MinimumHit;                                               // 0x0198(0x0004) (Edit)
	float                                              MinimumHitSeparation;                                     // 0x019C(0x0004) (Edit)
	float                                              StaleDistance;                                            // 0x01A0(0x0004) (Edit)
	float                                              MinimumTimeToBall;                                        // 0x01A4(0x0004) (Edit)
	float                                              CarChangeTimePadding;                                     // 0x01A8(0x0004) (Edit)
	struct FViewTargetTransitionParams                 CarChangeBlendParams;                                     // 0x01AC(0x0010) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01BC(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           CarChangeBlendTimeForDistance;                            // 0x01C0(0x0018) (Edit, NeedCtorLink)
	float                                              MinBlendContinuity;                                       // 0x01D8(0x0004) (Edit)
	float                                              MaxBlendDistance;                                         // 0x01DC(0x0004) (Edit)
	float                                              MaintainCurrentDistance;                                  // 0x01E0(0x0004) (Edit)
	float                                              MaintainCurrentHitBias;                                   // 0x01E4(0x0004) (Edit)
	float                                              MaintainBallScorability;                                  // 0x01E8(0x0004) (Edit)
	float                                              MaintainBallScorabilityViewRating;                        // 0x01EC(0x0004) (Edit)
	struct FInterpCurveFloat                           ContinuityBias;                                           // 0x01F0(0x0018) (Edit, NeedCtorLink)
	float                                              MinimumViewRating;                                        // 0x0208(0x0004) (Edit)
	float                                              AttackerBias;                                             // 0x020C(0x0004) (Edit)
	float                                              AttackingGoalDistance;                                    // 0x0210(0x0004) (Edit)
	float                                              BadFocusDistance;                                         // 0x0214(0x0004) (Edit)
	float                                              BadFocusViewRating;                                       // 0x0218(0x0004) (Edit)
	float                                              BadFocusViewRatingDuration;                               // 0x021C(0x0004) (Edit)
	class ACar_TA*                                     FocusCar;                                                 // 0x0220(0x0008) (Transient)
	float                                              LastCarChangeTime;                                        // 0x0228(0x0004) (Transient)
	unsigned long                                      bIsRelevant : 1;                                          // 0x022C(0x0004) (Transient)
	unsigned long                                      bBlending : 1;                                            // 0x022C(0x0004) (Transient)
	unsigned long                                      bExceptionallyBadFocus : 1;                               // 0x022C(0x0004) (Transient)
	unsigned long                                      bBadViewRating : 1;                                       // 0x022C(0x0004) (Transient)
	float                                              BlendTime;                                                // 0x0230(0x0004) (Transient)
	struct FCameraOrientation                          SnapshotPOV;                                              // 0x0234(0x002C) (Transient)
	float                                              BadViewRatingStart;                                       // 0x0260(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_DirectorPlayerView_TA");
		return ptr;
	}


	bool IsCarAttacking(class ACar_TA* Car);
	void HandleFocusCarDemolished(class ACar_TA* Victim, const struct FDemolishData& Data);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	bool ShouldKeepExecuting();
	bool ShouldExecute();
	float TimeSinceChange();
	bool CanConsiderCar(const struct FCarData& Data);
	void FindFocusCar();
	void SetFocusCar(class ACar_TA* InCar);
	void EndCameraState();
	void BeginCameraState();
	void Init(class ACamera_X* InCamera);
};


// Class TAGame.AudioSlomoReplayComponent_TA
// 0x003C (0x00E0 - 0x00A4)
class UAudioSlomoReplayComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FName                                       ReplayPlaybackSpeedStateGroup;                            // 0x00A8(0x0008)
	struct FName                                       ReplayPlaybackSpeed_201;                                  // 0x00B0(0x0008)
	struct FName                                       ReplayPlaybackSpeed_101;                                  // 0x00B8(0x0008)
	struct FName                                       ReplayPlaybackSpeed_51;                                   // 0x00C0(0x0008)
	struct FName                                       ReplayPlaybackSpeed_26;                                   // 0x00C8(0x0008)
	struct FName                                       ReplayPlaybackSpeed_11;                                   // 0x00D0(0x0008)
	struct FName                                       ReplayPlaybackSpeed_05;                                   // 0x00D8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AudioSlomoReplayComponent_TA");
		return ptr;
	}


	void HandleSlomoChanged();
	void Detached();
	void Attached();
};


// Class TAGame.PlatformMetrics_TA
// 0x0004 (0x0084 - 0x0080)
class UPlatformMetrics_TA : public UMetricsGroup_X
{
public:
	unsigned long                                      bDroveWithGP : 1;                                         // 0x0080(0x0004) (Transient)
	unsigned long                                      bDroveWithKBM : 1;                                        // 0x0080(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlatformMetrics_TA");
		return ptr;
	}


	void DriveWithKBM();
	void DriveWithGP();
	void RecordDriveInput(class UPlayerInput_TA* PlayerInput);
	void RecordInput(class UPlayerInput_TA* PlayerInput);
};


// Class TAGame.GameMusicComponent_TA
// 0x0000 (0x0070 - 0x0070)
class UGameMusicComponent_TA : public UComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameMusicComponent_TA");
		return ptr;
	}


	void Tick(float DeltaTime);
	void ShutDown();
	void Init();
};


// Class TAGame.ProductMetrics_TA
// 0x0000 (0x0080 - 0x0080)
class UProductMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductMetrics_TA");
		return ptr;
	}


	bool __ProductMetrics_TA__GetLoadoutMetricsData_D7B0882248BE2918A4CCBCA7B785897A(const struct FProductMetricsData& P);
	struct FOnlineProductAttribute __ProductMetrics_TA__GetLoadoutMetricsData_593339C348A4FE307889F492F3B9937B(class UProductAttribute_TA* Attribute);
	TArray<struct FProductMetricsData> GetLoadoutMetricsData(class ULoadout_TA* Loadout, struct FProductMetricsData* StructInitializer_B6634D7D40EB25AAA62F16BBADF3016B, TArray<struct FOnlineProductAttribute>* MapLocal_EA2D3FA8423B0E533F5BA8AC467A6AC2, TArray<struct FProductMetricsData>* FilterLocal_B5AF1335441006F94C566596A50DB36B);
	struct FPaintMetricsData GetPaintMetricsData(const struct FLoadoutTeamPaint& Paint);
	void PlayWithLoadout(const struct FUniqueNetId& PlayerID, bool bPrimaryPlayer, int Team, TArray<struct FProductMetricsData> Products, const struct FPaintMetricsData& Paint);
	void RecordLoadout(class ULocalPlayer* Player, int Team, class ULoadout_TA* Loadout);
	void RecordLoadoutSet(class ULocalPlayer* Player, class UProfile_TA* Profile);
};


// Class TAGame.__PlayerController_TA__ClientNotifyServerShutdown_EC6D78D7451E8BB58928508FE29B5D7D
// 0x0038 (0x0098 - 0x0060)
class U__PlayerController_TA__ClientNotifyServerShutdown_EC6D78D7451E8BB58928508FE29B5D7D : public UObject
{
public:
	class UOnlineGame_X*                               OnlineGame;                                               // 0x0060(0x0008)
	struct FString                                     NewDedicatedServerIP;                                     // 0x0068(0x0010) (NeedCtorLink)
	struct FJoinMatchSettings                          Settings;                                                 // 0x0078(0x0020) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__PlayerController_TA__ClientNotifyServerShutdown_EC6D78D7451E8BB58928508FE29B5D7D");
		return ptr;
	}


	void __PlayerController_TA__ClientNotifyServerShutdown_EC6D78D7451E8BB58928508FE29B5D7D(struct FServerReservationData* StructInitializer_162060BA4D73976B0F14C2883B14DEF3);
};


// Class TAGame.PlayerReportComponent_TA
// 0x0023 (0x00C0 - 0x009D)
class UPlayerReportComponent_TA : public UActorComponent
{
public:
	unsigned char                                      UnknownData00[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	TArray<struct FUniqueNetId>                        ReportablePlayers;                                        // 0x00A0(0x0010) (Transient, NeedCtorLink)
	TArray<struct FReportedPlayerInfo>                 ReportedPlayers;                                          // 0x00B0(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerReportComponent_TA");
		return ptr;
	}


	void HandleDestroyed(class AGameEvent_TA* InGameEvent);
	void AddReportedPlayer(struct FReportedPlayerInfo* ReportedPlayer);
	void HandlePlayerAdded(class AGameEvent_TA* InGameEvent, class APRI_TA* PRI);
	void Construct();
};


// Class TAGame.Interface_GameEditor_TA
// 0x0000 (0x0060 - 0x0060)
class UInterface_GameEditor_TA : public UInterface
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Interface_GameEditor_TA");
		return ptr;
	}


	void EditingEnd();
	void EditingBegin();
	void NotifyOnSelectionChange(const struct FScriptDelegate& Callback);
	bool SerializedDataIsEqual(const struct FString& S0, const struct FString& S1);
	void Deserialize(class UJsonObject* Data);
	struct FString Serialize();
	struct FVector CollisionExtent();
	struct FVector GetCameraPositionOffset();
	struct FVector GetGrabRotationOffset(const struct FRotator& CurrentRotation);
	void ModfiyBlendedRotation(const struct FRotator& ControllerRot, const struct FRotator& DeltaRot, struct FRotator* out_Rotation);
	struct FRotator GetDesiredRotation();
	struct FVector EditorGetLocation();
	bool EditorSetLocation(const struct FVector& NewLocation);
	bool EditorMoveToLocation(const struct FVector& NewLocation);
	bool CanEdit();
	struct FRotator EditorGetRotation();
	void EditorSetRotation(const struct FRotator& NewRotation);
	void EditorSetRotationFromInput(float Forward, float Strafe);
	void EventSelectionChange(const TScriptInterface<class UInterface_GameEditor_TA>& Object, bool bSelected);
};


// Class TAGame.Ball_GameEditor_TA
// 0x00D8 (0x0AD8 - 0x0A00)
class ABall_GameEditor_TA : public ABall_TA
{
public:
	struct FVector                                     StartLocation;                                            // 0x0A00(0x000C)
	struct FRotator                                    StartRotation;                                            // 0x0A0C(0x000C)
	float                                              VelocityStartSpeed;                                       // 0x0A18(0x0004)
	struct FRotator                                    VelocityStartRotation;                                    // 0x0A1C(0x000C)
	float                                              BallResetTime;                                            // 0x0A28(0x0004)
	float                                              FirstHitTime;                                             // 0x0A2C(0x0004)
	struct FVector                                     CameraPositionOffset;                                     // 0x0A30(0x000C)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0A3C(0x0004) MISSED OFFSET
	class AFXActor_X*                                  EditingFXActorArchetype;                                  // 0x0A40(0x0008) (Edit)
	class AFXActor_X*                                  EditingFXActor;                                           // 0x0A48(0x0008) (Transient)
	unsigned long                                      bUpdateTrajectory : 1;                                    // 0x0A50(0x0004)
	struct FVector                                     ToLocation;                                               // 0x0A54(0x000C)
	struct FScriptDelegate                             __EventBallWentThruRing__Delegate;                        // 0x0A60(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0A60(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventVelocityStartSpeedChanged__Delegate;               // 0x0A78(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0A78(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventFire__Delegate;                                    // 0x0A90(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0A90(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventReset__Delegate;                                   // 0x0AA8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0AA8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSelectionChange__Delegate;                         // 0x0AC0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0AC0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Ball_GameEditor_TA");
		return ptr;
	}


	void EditingEnd();
	void EditingBegin();
	void NotifyOnSelectionChange(const struct FScriptDelegate& Callback);
	struct FVector GetCameraPositionOffset();
	struct FVector CollisionExtent();
	void ModfiyBlendedRotation(const struct FRotator& ControllerRot, const struct FRotator& DeltaRot, struct FRotator* out_Rotation);
	bool CanEdit();
	struct FRotator EditorGetRotation();
	struct FVector EditorGetLocation();
	bool SerializedDataIsEqual(const struct FString& S0, const struct FString& S1);
	void Deserialize(class UJsonObject* Data);
	struct FString Serialize();
	struct FVector GetGrabRotationOffset(const struct FRotator& CurrentRotation);
	void Tick(float DeltaTime);
	struct FRotator GetDesiredRotation();
	void EditorSetRotationFromInput(float Forward, float Strafe);
	void EditorSetRotation(const struct FRotator& NewRotation);
	bool EditorSetLocation(const struct FVector& NewLocation);
	bool EditorMoveToLocation(const struct FVector& Loc);
	void WentThruRing();
	void OnWentThruRing();
	void NotifyIfWentThruRing();
	bool IsRoundActive();
	void OnCarTouch(class ACar_TA* HitCar, TEnumAsByte<EBallHitType> HitType);
	void OnHitWorld(const struct FVector& HitLoc, const struct FVector& HitNormal, class UPhysicalMaterial* PhysMat);
	void Reset();
	void Fire();
	struct FVector GetBallFireVelocity();
	void AddVelocityStartSpeed(float Amount);
	void AddVelocityStartRotation(const struct FRotator& Amount, float MaxDegrees);
	void RecordCarHit(class ACar_TA* HitCar, const struct FVector& HitLocation, const struct FVector& HitNormal, TEnumAsByte<EBallHitType> HitType);
	bool ShouldDrawTrajectory();
	struct FVector GetTrajectoryStartVelocity();
	struct FRotator GetTrajectoryStartRotation();
	struct FVector GetTrajectoryStartLocation();
	bool CanEverShowTrajectory();
	void InitFX();
	void PostBeginPlay();
	void EventSelectionChange(const TScriptInterface<class UInterface_GameEditor_TA>& Object, bool bSelected);
	void EventReset(class ABall_GameEditor_TA* Ball);
	void EventFire(class ABall_GameEditor_TA* Ball);
	void EventVelocityStartSpeedChanged(class ABall_GameEditor_TA* Ball);
	void EventBallWentThruRing(class ABall_GameEditor_TA* Ball);
};


// Class TAGame.GameEditor_Actor_TA
// 0x0048 (0x02B0 - 0x0268)
class AGameEditor_Actor_TA : public AActor
{
public:
	class UPrimitiveComponent*                         Mesh;                                                     // 0x0268(0x0008) (ExportObject, Component, EditInline)
	struct FVector                                     RotateCameraOffset;                                       // 0x0270(0x000C)
	float                                              MaxRotatePitch;                                           // 0x027C(0x0004)
	float                                              MaxInputRotatePitch;                                      // 0x0280(0x0004)
	unsigned long                                      bModifiyPitchOnEditorSetRotation : 1;                     // 0x0284(0x0004)
	class AFXActor_X*                                  FXActorArchetype;                                         // 0x0288(0x0008) (Edit)
	class AFXActor_X*                                  FXActor;                                                  // 0x0290(0x0008) (Transient)
	struct FScriptDelegate                             __EventSelectionChange__Delegate;                         // 0x0298(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0298(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEditor_Actor_TA");
		return ptr;
	}


	void EditingEnd();
	void EditingBegin();
	void NotifyOnSelectionChange(const struct FScriptDelegate& Callback);
	struct FVector EditorGetLocation();
	struct FRotator EditorGetRotation();
	bool CanEdit();
	bool SerializedDataIsEqual(const struct FString& S0, const struct FString& S1);
	void Deserialize(class UJsonObject* Data);
	struct FString Serialize();
	struct FVector GetCameraPositionOffset();
	struct FVector CollisionExtent();
	void ModfiyBlendedRotation(const struct FRotator& ControllerRot, const struct FRotator& DeltaRot, struct FRotator* out_Rotation);
	struct FVector GetGrabRotationOffset(const struct FRotator& CurrentRotation);
	struct FRotator GetDesiredRotation();
	void ReInitPhysics();
	void ReInitPhysicsDelayed();
	bool EditorSetLocation(const struct FVector& NewLocation);
	bool EditorMoveToLocation(const struct FVector& NewLocation);
	void AddToRotation(const struct FRotator& Rot, float MaxDegrees);
	void EditorSetRotationFromInput(float Forward, float Strafe);
	void EditorSetRotation(const struct FRotator& NewRotation);
	void InitFX();
	void PostBeginPlay();
	void EventSelectionChange(const TScriptInterface<class UInterface_GameEditor_TA>& Object, bool bSelected);
};


// Class TAGame.GameEditor_Trigger_TA
// 0x0020 (0x02D0 - 0x02B0)
class AGameEditor_Trigger_TA : public AGameEditor_Actor_TA
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x02B0(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x02B4(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __OnTriggerTouched__Delegate;                             // 0x02B8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02B4(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEditor_Trigger_TA");
		return ptr;
	}


	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void EnableTrigger(bool bEnable);
	void OnTriggerTouched(class AGameEditor_Trigger_TA* Trigger, class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
};


// Class TAGame.GameEditor_Ring_TA
// 0x0030 (0x0300 - 0x02D0)
class AGameEditor_Ring_TA : public AGameEditor_Trigger_TA
{
public:
	TArray<struct FActorTouchRecordData>               ActorTouchRecords;                                        // 0x02D0(0x0010) (NeedCtorLink)
	float                                              MaxRadius;                                                // 0x02E0(0x0004)
	TEnumAsByte<EDetectionType>                        DetectionType;                                            // 0x02E4(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x02E5(0x0003) MISSED OFFSET
	struct FScriptDelegate                             __OnRingScored__Delegate;                                 // 0x02E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x02E5(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEditor_Ring_TA");
		return ptr;
	}


	void ModfiyBlendedRotation(const struct FRotator& ControllerRot, const struct FRotator& DeltaRot, struct FRotator* out_Rotation);
	void EnableTrigger(bool bEnable);
	struct FRotator GetDesiredRotation();
	void Tick(float DeltaTime);
	struct FVector GetTouchDirection(class AActor* A);
	void OnActorWentThruRing(int RecordIndex);
	bool ActorWentThruRing(const struct FActorTouchRecordData& TouchRecord);
	void UnTouch(class AActor* Other);
	bool AddToBallTouchRecords(const struct FActorTouchRecordData& NewTouchRecord);
	void Touch(class AActor* Other, class UPrimitiveComponent* OtherComp, const struct FVector& HitLocation, const struct FVector& HitNormal);
	bool IsTouchableActor(class AActor* A);
	void PostBeginPlay();
	void OnRingScored(class AGameEditor_Ring_TA* Ring, class AActor* Other);
};


// Class TAGame.ClientStayAsPartyVoteBeginEvent_TA
// 0x0000 (0x0060 - 0x0060)
class UClientStayAsPartyVoteBeginEvent_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ClientStayAsPartyVoteBeginEvent_TA");
		return ptr;
	}

};


// Class TAGame.TourEventMatch_TA
// 0x0118 (0x0178 - 0x0060)
class UTourEventMatch_TA : public UObject
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0060(0x0008) (Edit)
	class UTourConfig_TA*                              Config;                                                   // 0x0068(0x0008) (Edit)
	class UOnlineGameTourMatchmaking_TA*               TourMatchmaking;                                          // 0x0070(0x0008) (Edit)
	struct FUniqueNetId                                PlayerID;                                                 // 0x0078(0x0038) (Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TourEventMatch_TA.TournamentID
	int                                                TeamID;                                                   // 0x00B8(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	struct FTourMatch                                  DependentMatch;                                           // 0x00C0(0x0020) (Transient, NeedCtorLink)
	struct FTourMatch                                  NextMatch;                                                // 0x00E0(0x0020) (Transient, NeedCtorLink)
	int                                                PrevMatchID;                                              // 0x0100(0x0004) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	class UError*                                      Error;                                                    // 0x0108(0x0008) (Transient)
	class UAsyncTask*                                  GetMatchTask;                                             // 0x0110(0x0008) (Transient)
	struct FScriptDelegate                             __EventDependentMatchUpdated__Delegate;                   // 0x0118(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0118(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventNextMatchReady__Delegate;                          // 0x0130(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0130(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventError__Delegate;                                   // 0x0148(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0148(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventCurrentMatchUpdated__Delegate;                     // 0x0160(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0160(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourEventMatch_TA");
		return ptr;
	}


	void HandleGetMatch(const struct FTourMatch& Match);
	void HandleGetMatchError(class UError* InError);
	void SendRequestDelayed();
	void SendRequest();
	void NotifyOnError(const struct FScriptDelegate& Callback);
	void NotifyOnDependentMatchUpdated(const struct FScriptDelegate& Callback);
	bool IsWaitingForMatchResults();
	bool HasNextMatch();
	void NotifyOnMatchReady(const struct FScriptDelegate& Callback);
	bool IsFirstRound();
	bool IsFinalRound();
	void StartNextRound();
	void Deactivate();
	void Init(const struct FUniqueNetId& InPlayerId, int InTeamID);
	void EventCurrentMatchUpdated(struct FTourMatch* Match);
	void EventError(class UTourEventMatch_TA* TourEventMatch, class UError* InError);
	void EventNextMatchReady(class UTourEventMatch_TA* TourEventMatch, struct FTourMatch* Match);
	void EventDependentMatchUpdated(class UTourEventMatch_TA* TourEventMatch, struct FTourMatch* Match);
};


// Class TAGame.MatchCompleteMetrics_TA
// 0x0010 (0x0090 - 0x0080)
class UMatchCompleteMetrics_TA : public UMetricsGroup_X
{
public:
	TArray<struct FMatchCompleteHistory>               History;                                                  // 0x0080(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchCompleteMetrics_TA");
		return ptr;
	}


	void RewardsReceived(const struct FString& MatchGUID, const struct FUniqueNetId& PlayerID, float LatencyFromMatchComplete);
	void RecordRewardsReceived(const struct FString& MatchGUID, const struct FUniqueNetId& PlayerID);
	void RecordMatchComplete(const struct FString& MatchGUID, const struct FUniqueNetId& PlayerID);
	int GetHistoryIndex(const struct FString& MatchGUID);
};


// Class TAGame.__PlayerController_TA__HandleProfileGamepadSave_7BBA27FF45CA1FD618D394A1CF3D0953
// 0x0008 (0x0068 - 0x0060)
class U__PlayerController_TA__HandleProfileGamepadSave_7BBA27FF45CA1FD618D394A1CF3D0953 : public UObject
{
public:
	class UProfileGamepadSave_TA*                      GamepadSave;                                              // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__PlayerController_TA__HandleProfileGamepadSave_7BBA27FF45CA1FD618D394A1CF3D0953");
		return ptr;
	}


	void __PlayerController_TA__HandleProfileGamepadSave_7BBA27FF45CA1FD618D394A1CF3D0953(class APRI_TA* InPRI);
};


// Class TAGame.__PlayerController_TA__InitNetworkSave_6CCD738B46BE3F2A0F47668E4C04C0A3
// 0x0008 (0x0068 - 0x0060)
class U__PlayerController_TA__InitNetworkSave_6CCD738B46BE3F2A0F47668E4C04C0A3 : public UObject
{
public:
	class UNetworkSave_TA*                             NetworkSave;                                              // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__PlayerController_TA__InitNetworkSave_6CCD738B46BE3F2A0F47668E4C04C0A3");
		return ptr;
	}


	void __PlayerController_TA__InitNetworkSave_6CCD738B46BE3F2A0F47668E4C04C0A3();
};


// Class TAGame.AudioMixStateComponent_TA
// 0x009C (0x0140 - 0x00A4)
class UAudioMixStateComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FName                                       CameraBallFocusStateGroup;                                // 0x00A8(0x0008)
	struct FName                                       CameraBallFocus_On;                                       // 0x00B0(0x0008)
	struct FName                                       CameraBallFocus_Off;                                      // 0x00B8(0x0008)
	struct FName                                       GameState;                                                // 0x00C0(0x0008)
	struct FName                                       PlayerCountStateGroup;                                    // 0x00C8(0x0008)
	struct FName                                       PlayerCount_4s;                                           // 0x00D0(0x0008)
	struct FName                                       PlayerCount_3s;                                           // 0x00D8(0x0008)
	struct FName                                       PlayerCount_2s;                                           // 0x00E0(0x0008)
	struct FName                                       PlayerCount_1s;                                           // 0x00E8(0x0008)
	struct FName                                       PlayerCount_None;                                         // 0x00F0(0x0008)
	struct FName                                       MajorityFarStateGroup;                                    // 0x00F8(0x0008)
	struct FName                                       MajorityFar_True;                                         // 0x0100(0x0008)
	struct FName                                       MajorityFar_None;                                         // 0x0108(0x0008)
	struct FName                                       MajorityFarRTPC;                                          // 0x0110(0x0008)
	struct FName                                       IsTeamRTPC;                                               // 0x0118(0x0008)
	struct FName                                       FocusCarRTPC;                                             // 0x0120(0x0008)
	struct FName                                       LiveReplay_InCameraViewRTPC;                              // 0x0128(0x0008)
	int                                                NumLocalPlayers;                                          // 0x0130(0x0004)
	unsigned long                                      bPlayerUsingBallCam : 1;                                  // 0x0134(0x0004)
	unsigned long                                      bIsActiveState : 1;                                       // 0x0134(0x0004)
	unsigned long                                      bSpectating : 1;                                          // 0x0134(0x0004)
	unsigned long                                      bIsMajorityFar : 1;                                       // 0x0134(0x0004)
	unsigned long                                      bInLiveReplay : 1;                                        // 0x0134(0x0004)
	float                                              MajorityFarMinDistanceSq;                                 // 0x0138(0x0004)
	float                                              BallListenerOffset;                                       // 0x013C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AudioMixStateComponent_TA");
		return ptr;
	}


	void SetPlayerCountState(int PlayerCount);
	void UpdateNumLocalPlayers(class UGameViewportClient_TA* GVC, int LocalPlayerCount);
	void BallCamToggle();
	bool IsActiveState(const struct FName& InGameState);
	void HandlePlayerCountChanged(class AGameEvent_TA* GameEvent, class APRI_TA* PRI, TArray<class APRI_TA*>* FilterLocal_71A8272948D6E5157451AD8A8EEC6819);
	bool IsNotSpectator(class APRI_TA* InPRI);
	void HandlePawnTypeChanged(class APRI_TA* InPRI);
	void HandleFocusCarChanged(class AActor* NewFocusCar);
	void HandleGameEventSet(class APRI_TA* NewPRI);
	void HandlePersistentCameraSet(class APRI_TA* PRI);
	void HandleStateChanged(class AGameEvent_TA* GameEvent);
	void HandleBallCamToggle(class ACameraSettingsActor_TA* Cam);
	void HandleCarSet(class APRI_TA* InPRI);
	void HandlePawnChange(class APlayerController_X* InPC, class APawn* OldPawn, class APawn* NewPawn);
	void ClearInCameraViewRTPCs();
	void UpdateInCameraViewRTPCs();
	void ClearFocusCarRTPCs();
	void ClearMajorityFarRTPCs();
	void UpdateMajorityFarRTPCs();
	void SetMajorityFar(bool bSet);
	float GetProportionalCarDistance(class ACar_TA* InCar);
	void UpdateMajorityFar();
	void UpdateIsTeamRTPCs();
	void UpdateBallListenerPosition();
	void Tick(float DeltaTime);
	void UpdateTickEnabled();
	void Detached();
	void Attached();
};


// Class TAGame.ControllerEventInfo_TA
// 0x0010 (0x0278 - 0x0268)
class AControllerEventInfo_TA : public AActor
{
public:
	class APlayerController_TA*                        PC;                                                       // 0x0268(0x0008)
	class AGameEvent_TA*                               GameEvent;                                                // 0x0270(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ControllerEventInfo_TA");
		return ptr;
	}


	bool PlayerCanRestart();
	void HandleGameEventChanged(class APRI_TA* PRI);
	void HandleReceivedPRI(class APlayerController_X* InPC);
	void OnOwnerChanged();
};


// Class TAGame.PlayerInput_Game_TA
// 0x0000 (0x04C8 - 0x04C8)
class UPlayerInput_Game_TA : public UPlayerInput_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_Game_TA");
		return ptr;
	}


	void OnActiveBindingsChanged();
};


// Class TAGame.PlayerBindingUtils_TA
// 0x0000 (0x0060 - 0x0060)
class UPlayerBindingUtils_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerBindingUtils_TA");
		return ptr;
	}


	bool STATIC_BindingsIdentical(TArray<struct FPlayerBinding>* Left, TArray<struct FPlayerBinding>* Right);
	void STATIC_CheckForNewBindings(TArray<struct FPlayerBinding> DefaultBindings, TArray<struct FPlayerBinding>* Bindings);
	TArray<struct FPlayerBinding> STATIC_MergeUserBindings(TArray<struct FPlayerBinding>* DefaultBindings, TArray<struct FPlayerBinding>* UserBindings);
	void STATIC_RemoveDefaultBindings(TArray<struct FPlayerBinding>* DefaultBindings, TArray<struct FPlayerBinding>* Bindings);
	void STATIC_RemoveDuplicateBindingIndexes(TArray<int>* Indexes, TArray<struct FPlayerBinding>* Bindings, TArray<int>* SortLocal_4206B06A44CB81F0C00DB3B7F5F1AE46);
	TArray<int> STATIC_FindDuplicateBindingIndexes(TArray<struct FPlayerBinding>* Bindings);
	void STATIC_SetDefaultRemappable(const struct FName& Action, TArray<struct FPlayerBinding>* DefaultBindings, TArray<struct FPlayerBinding>* Bindings);
	void STATIC_SetDefaultPressType(const struct FName& Action, TArray<struct FPlayerBinding>* DefaultBindings, TArray<struct FPlayerBinding>* Bindings);
	void STATIC_RemoveBinding(const struct FName& Action, TArray<struct FPlayerBinding>* Bindings);
	void STATIC_ResetBinding(const struct FName& Action, TArray<struct FPlayerBinding>* DefaultBindings, TArray<struct FPlayerBinding>* Bindings);
};


// Class TAGame.PlayerInput_Replay_TA
// 0x0000 (0x04C8 - 0x04C8)
class UPlayerInput_Replay_TA : public UPlayerInput_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_Replay_TA");
		return ptr;
	}


	void OnActiveBindingsChanged();
};


// Class TAGame.PlayerInput_Spectator_TA
// 0x0000 (0x04C8 - 0x04C8)
class UPlayerInput_Spectator_TA : public UPlayerInput_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_Spectator_TA");
		return ptr;
	}


	void OnActiveBindingsChanged();
};


// Class TAGame.SeqEvent_InputSequence_TA
// 0x000C (0x0188 - 0x017C)
class USeqEvent_InputSequence_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	struct FName                                       SequenceName;                                             // 0x0180(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_InputSequence_TA");
		return ptr;
	}

};


// Class TAGame.PointInSpace_TA
// 0x0010 (0x0278 - 0x0268)
class APointInSpace_TA : public AActor
{
public:
	class USpriteComponent*                            Sprite;                                                   // 0x0268(0x0008) (Edit, ExportObject, Component, EditInline)
	class UArrowComponent*                             Arrow;                                                    // 0x0270(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PointInSpace_TA");
		return ptr;
	}

};


// Class TAGame.CameraSettingsActorCopy_TA
// 0x0000 (0x02D8 - 0x02D8)
class ACameraSettingsActorCopy_TA : public ACameraSettingsActor_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraSettingsActorCopy_TA");
		return ptr;
	}


	void Tick(float DeltaTime);
};


// Class TAGame.OnlineGamePlayerTitles_TA
// 0x0050 (0x00C8 - 0x0078)
class UOnlineGamePlayerTitles_TA : public UOnline_X
{
public:
	float                                              PlayerTitleCacheTime;                                     // 0x0078(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	TArray<struct FCachedPlayerData>                   PlayerCache;                                              // 0x0080(0x0010) (Transient, NeedCtorLink)
	class UPlayerTitleConfig_X*                        TitleConfig;                                              // 0x0090(0x0008)
	struct FScriptDelegate                             __EventPlayerTitleUpdated__Delegate;                      // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0098(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPlayerTitlesChanged__Delegate;                     // 0x00B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGamePlayerTitles_TA");
		return ptr;
	}


	int GetIndex(struct FUniqueNetId* PlayerID);
	void HandleOnlineProductsSynced(class USaveData_TA* SaveData);
	void HandleSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* SaveData, class UError* Error);
	TArray<struct FPlayerTitleData> GetPlayerTitleData(const struct FUniqueNetId& PlayerID, TArray<struct FName>* ArrayResultLocal_39CF0FF046A081F4FDFC9CB685E190BD, TArray<struct FPlayerTitleData>* MapLocal_C62AF7E24FB52978A0BB758D9195ED68);
	struct FPlayerTitleData GetTitleData(const struct FName& TitleId);
	TArray<struct FName> GetPlayerTitles(const struct FUniqueNetId& PlayerID);
	void HandlePlayerTitlesRPC(class URPC_GetPlayerTitles_X* RPC);
	void SyncPlayerTitles(const struct FUniqueNetId& PlayerID, const struct FScriptDelegate& Callback);
	void HandlePlayerPsyNetLogin(class UOnlinePlayer_X* Player);
	void HandleTitlesChanged();
	void OnInit();
	void EventPlayerTitlesChanged(class UOnlineGamePlayerTitles_TA* Titles);
	void EventPlayerTitleUpdated(class UOnlineGamePlayerTitles_TA* Titles, const struct FUniqueNetId& PlayerID);
};


// Class TAGame.GFxData_PartyInvite_TA
// 0x0068 (0x0100 - 0x0098)
class UGFxData_PartyInvite_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FInviteDatabind>                     Invites;                                                  // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FInviteTarget>                       PendingInvites;                                           // 0x00A8(0x0010) (Transient, NeedCtorLink)
	TArray<struct FUniqueNetId>                        SilentSentInvites;                                        // 0x00B8(0x0010) (Transient, NeedCtorLink)
	class UParties_X*                                  PsyNetParty;                                              // 0x00C8(0x0008)
	class UOnlineGameParty_X*                          OnlineGameParty;                                          // 0x00D0(0x0008)
	class UCrossplayConfig_X*                          CrossplayConfig;                                          // 0x00D8(0x0008) (Edit)
	class UPersonas_TA*                                PersonasData;                                             // 0x00E0(0x0008) (Transient)
	struct FScriptDelegate                             __SendPartyInvitation__Delegate;                          // 0x00E8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00E8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PartyInvite_TA");
		return ptr;
	}


	struct FString __GFxData_PartyInvite_TA__InviteToPartyInternal_31ECCF5844C07A6BE46B319302913D9E(const struct FPartyMember& M);
	bool __GFxData_PartyInvite_TA__InviteToPartyInternal_14068F094B968D7B285CB9B536079B21(const struct FPartyMember& Member);
	bool __GFxData_PartyInvite_TA__HandlePartyChanged_D910DD7E4538B0247BA20E898B538766(class UPartyInviteNotification_TA* N);
	bool __GFxData_PartyInvite_TA__HandlePartyChanged_EDCC90D74D743236CB5C74815DBA9849(const struct FInviteDatabind& I);
	void HandleBlockStatusChanged(class UPersona_TA* Persona);
	void ShowPlatformInviteUI();
	bool CanShowPlatformInviteUI();
	void HandlePartyChanged(class UOnlineGameParty_X* Party, TArray<struct FInviteDatabind>* FilterLocal_09112F594EFA27087AB923AAE45C0EDB, TArray<class UPartyInviteNotification_TA*>* OfTypeLocal_99C5B5A24D010DB1B7B4118B4F163B10, TArray<class UPartyInviteNotification_TA*>* FilterLocal_A385001F470A30772B5F0796B8B0EB1D);
	void HandlePlayerInvitePending(const struct FUniqueLobbyId& InLobby, const struct FUniqueNetId& InFromUser, const struct FString& InFromName, struct FUniqueNetId* StructInitializer_EDE5FC6F427237D8E78C93924201551C);
	void OnInvited();
	void SetUserInvitedResponse(int InviteIndex, bool bAccepted);
	void HandlePartyInviteNotificationResponse(const struct FUniqueNetId& InPlayerId, bool bAccepted);
	void OnPartyCreatedFromInvite();
	void OnJoinLobbyComplete(bool bWasSuccessful, const struct FString& Error, struct FActiveLobbyInfo* LobbyInfo, struct FUniqueLobbyId* LobbyId);
	void OnPartyCreated(class UOnlineGameParty_X* OnlineParty, bool bWasSuccessful);
	void ShowPartyInviteError(const struct FString& ErrorMessage);
	void OnPartyInviteComplete(bool bSucceeded, const struct FUniqueNetId& InviteeID, const struct FString& Error);
	void InviteToPartyInternal(const struct FUniqueNetId& ToPlayer, const struct FScriptDelegate& InviteHandler, TArray<struct FPartyMember>* FilterLocal_39498D564DD91105F8C3C7B48C91C197, TArray<struct FString>* MapLocal_2DFD467744AA3901AA679DB27582DC4E, struct FInviteTarget* StructInitializer_0F7F97BB4F7A119324FC2AB87F35C976);
	void InviteToParty(const struct FUniqueNetId& PlayerID);
	void InviteToPartySilent(const struct FUniqueNetId& PlayerID);
	void ShowInviteUI();
	void OnRemoved();
	void OnShellSet();
	void SendPartyInvitation(const struct FUniqueNetId& ToPlayer);
};


// Class TAGame.ServerInviteeConfirmedMergeEvent_TA
// 0x0000 (0x0060 - 0x0060)
class UServerInviteeConfirmedMergeEvent_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ServerInviteeConfirmedMergeEvent_TA");
		return ptr;
	}

};


// Class TAGame.StayAsPartyLeader_TA
// 0x0038 (0x0098 - 0x0060)
class UStayAsPartyLeader_TA : public UObject
{
public:
	struct FUniqueNetId                                LeaderID;                                                 // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StayAsPartyLeader_TA");
		return ptr;
	}

};


// Class TAGame.BotReplacement_TA
// 0x0008 (0x0068 - 0x0060)
class UBotReplacement_TA : public UObject
{
public:
	class APRI_TA*                                     ReplacingBotPRI;                                          // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BotReplacement_TA");
		return ptr;
	}

};


// Class TAGame.ProductsConfig_TA
// 0x0010 (0x0088 - 0x0078)
class UProductsConfig_TA : public UOnlineConfig_X
{
public:
	TArray<struct FReplacementProduct>                 ProhibitedProducts;                                       // 0x0078(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductsConfig_TA");
		return ptr;
	}


	bool __ProductsConfig_TA__Apply_C5C5B17E4B009B3935104F981EA25F6B(const struct FReplacementProduct& P);
	class UOnlineProduct_TA* GetReplacementOnlineProduct(int ProductID, struct FOnlineProductData* StructInitializer_4B038BDB409A4F3260B036ABC43C146D);
	bool CanShowForOwningClient(int ProductID);
	bool IsProductIDProhibited(int ProductID);
	void Apply(TArray<struct FReplacementProduct>* FilterLocal_64EC55E946D9B6FEC0604F8825D5A77F, struct FOnlineProductData* StructInitializer_B4938E304623FF8A115D8D8AE1B82A84);
};


// Class TAGame.StayAsPartyVoteYes_TA
// 0x0008 (0x0270 - 0x0268)
class AStayAsPartyVoteYes_TA : public AActor
{
public:
	class AStayAsPartyVoter_TA*                        Voter;                                                    // 0x0268(0x0008) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StayAsPartyVoteYes_TA");
		return ptr;
	}


	void Destroyed();
	void OnOwnerChanged();
	void ReplicatedEvent(const struct FName& VarName);
};


// Class TAGame.ProductAsset_AntennaPack_TA
// 0x0000 (0x00E0 - 0x00E0)
class UProductAsset_AntennaPack_TA : public UProductAsset_Pack_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_AntennaPack_TA");
		return ptr;
	}

};


// Class TAGame.__ProductAsset_Attachment_TA__ModifyThumbnailScene_8205C0244AE6F888AB4B0BBC41D28A26
// 0x0008 (0x0068 - 0x0060)
class U__ProductAsset_Attachment_TA__ModifyThumbnailScene_8205C0244AE6F888AB4B0BBC41D28A26 : public UObject
{
public:
	class USkeletalMeshComponent*                      AttachSKC;                                                // 0x0060(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductAsset_Attachment_TA__ModifyThumbnailScene_8205C0244AE6F888AB4B0BBC41D28A26");
		return ptr;
	}


	void __ProductAsset_Attachment_TA__ModifyThumbnailScene_8205C0244AE6F888AB4B0BBC41D28A26(class UAttachmentBehavior_TA* X);
};


// Class TAGame.ProductAsset_CountryFlags_TA
// 0x0000 (0x00E0 - 0x00E0)
class UProductAsset_CountryFlags_TA : public UProductAsset_Pack_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_CountryFlags_TA");
		return ptr;
	}

};


// Class TAGame.__ProductAsset_Skin_TA__GetSkinParameters_3AE717FD47CD8591CF9BCC9CB0C381D4
// 0x0004 (0x0064 - 0x0060)
class U__ProductAsset_Skin_TA__GetSkinParameters_3AE717FD47CD8591CF9BCC9CB0C381D4 : public UObject
{
public:
	int                                                ForBodyID;                                                // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductAsset_Skin_TA__GetSkinParameters_3AE717FD47CD8591CF9BCC9CB0C381D4");
		return ptr;
	}


	bool __ProductAsset_Skin_TA__GetSkinParameters_3AE717FD47CD8591CF9BCC9CB0C381D4(const struct FSkinBodySettings& Setting);
};


// Class TAGame.ProductAsset_UnderGlow_TA
// 0x0000 (0x00F8 - 0x00F8)
class UProductAsset_UnderGlow_TA : public UProductAsset_Attachment_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_UnderGlow_TA");
		return ptr;
	}

};


// Class TAGame.ProductStat_BoostTime_TA
// 0x0010 (0x00C0 - 0x00B0)
class UProductStat_BoostTime_TA : public UProductStat_TA
{
public:
	class ACarComponent_Boost_TA*                      BoostComponent;                                           // 0x00B0(0x0008) (Transient)
	float                                              BoostStartTime;                                           // 0x00B8(0x0004) (Transient)
	float                                              LeftoverTime;                                             // 0x00BC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_BoostTime_TA");
		return ptr;
	}


	struct FString STATIC_GetDisplayValue(class APlayerControllerBase_TA* ForPC, int StatValue);
	void FinalizeTime();
	void HandleActivationChanged(class ACarComponent_TA* InComponent);
	void HandleBoostAdded(class ACarComponent_Boost_TA* InBoost);
	void SetCar(class ACar_TA* InCar);
};


// Class TAGame.ProductStat_SoccarEventBase_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_SoccarEventBase_TA : public UProductStat_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_SoccarEventBase_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
	void HandleStatEvent(class APRI_TA* InPRI, class UStatEvent_TA* StatEvent, int Count);
	void ShutDown();
	void OnInit();
};


// Class TAGame.ProductStat_Demolishes_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_Demolishes_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Demolishes_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_DistanceDriven_TA
// 0x000C (0x00BC - 0x00B0)
class UProductStat_DistanceDriven_TA : public UProductStat_TA
{
public:
	struct FVector                                     OldLocation;                                              // 0x00B0(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_DistanceDriven_TA");
		return ptr;
	}


	struct FString STATIC_GetDisplayValue(class APlayerControllerBase_TA* ForPC, int StatValue);
	void UpdateDistance();
	void SetCar(class ACar_TA* InCar);
};


// Class TAGame.ProductStat_GamesPlayed_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_GamesPlayed_TA : public UProductStat_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_GamesPlayed_TA");
		return ptr;
	}


	void OnInit();
};


// Class TAGame.ProductStat_Goals_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_Goals_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Goals_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_Saves_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_Saves_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Saves_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_TimePlayed_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_TimePlayed_TA : public UProductStat_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_TimePlayed_TA");
		return ptr;
	}


	struct FString STATIC_GetDisplayValue(class APlayerControllerBase_TA* ForPC, int StatValue);
	void UpdateTime();
	void SetCar(class ACar_TA* InCar);
};


// Class TAGame.ProductStat_Wins_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_Wins_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Wins_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.PlayerVanitySave_TA
// 0x0028 (0x00F0 - 0x00C8)
class UPlayerVanitySave_TA : public USaveObject_TA
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.PlayerVanitySave_TA.InstanceID
	int                                                SelectedColorValue;                                       // 0x00D0(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventVanityChanged__Delegate;                           // 0x00D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00D4(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerVanitySave_TA");
		return ptr;
	}


	TArray<class UProductAttribute_TA*> GetAttributes(TArray<class UProductAttribute_TA*>* ArrayInitializer_76DBBD8449BC6DC613458A90E3C4A146);
	void SetSelectedColorValue(int InColor);
	void SetInstanceID();
	void Validate(class UProfile_TA* ForProfile);
	void EventVanityChanged();
	class UProductSlot_TA* GetPlayerSlot();
	int GetDefaultProductID();
};


// Class TAGame.PlayerBannerSave_TA
// 0x0000 (0x00F0 - 0x00F0)
class UPlayerBannerSave_TA : public UPlayerVanitySave_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerBannerSave_TA");
		return ptr;
	}


	class UProductSlot_TA* GetPlayerSlot();
	int GetDefaultProductID();
};


// Class TAGame.TournamentSettingsSave_TA
// 0x00B0 (0x0178 - 0x00C8)
class UTournamentSettingsSave_TA : public USaveObject_TA
{
public:
	struct FTourCreateSettings                         TourCreateSettings;                                       // 0x00C8(0x0038) (NeedCtorLink)
	struct FTourSearchSettings                         TourSearchSettings;                                       // 0x0100(0x0060) (NeedCtorLink)
	class UGameTags_TA*                                GameTags;                                                 // 0x0160(0x0008)
	struct FString                                     CheckInTeamName;                                          // 0x0168(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TournamentSettingsSave_TA");
		return ptr;
	}


	void SetTourCreateSettings(struct U_Types_X_FCustomMatchSettings* MatchSettings);
	struct U_Types_X_FCustomMatchSettings GetTourCreateSettings();
	void OnLoad();
};


// Class TAGame.ExhibitionMatchSettingsSave_TA
// 0x0000 (0x0160 - 0x0160)
class UExhibitionMatchSettingsSave_TA : public UCustomMatchSettingsSave_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ExhibitionMatchSettingsSave_TA");
		return ptr;
	}

};


// Class TAGame.PlayerAvatarBorderSave_TA
// 0x0000 (0x00F0 - 0x00F0)
class UPlayerAvatarBorderSave_TA : public UPlayerVanitySave_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerAvatarBorderSave_TA");
		return ptr;
	}


	class UProductSlot_TA* GetPlayerSlot();
	int GetDefaultProductID();
};


// Class TAGame.GameTags_TA
// 0x0028 (0x0088 - 0x0060)
class UGameTags_TA : public UObject
{
public:
	TArray<struct FKeyValuePair>                       Tags;                                                     // 0x0060(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __Tags__ChangeNotify;                                     // 0x0070(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0070(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameTags_TA");
		return ptr;
	}


	void __Tags__ChangeNotifyFunc();
	void STATIC_ConvertToGameTags(class UObject* InOuter, TArray<class UGameTags_TA*>* GameTags, TArray<struct FKeyValuePair>* Pairs, TArray<class UGameTags_TA*>* MapLocal_C5E01B494E41F1FCB0267CB6E51FAA22);
	void RemoveValue(const struct FString& Value);
	struct FString CreateGameTagsStr();
	void SetValue(const struct FString& Key, const struct FString& Value);
	struct FString GetValue(const struct FString& Key);
	void ResetTags();
	void InitTags(const struct FString& AllTags);
};


// Class TAGame.__Profile_TA__ValidateLoadoutsWithProduct_73D94AE44EA715C3EC701E8966FA7588
// 0x0008 (0x0068 - 0x0060)
class U__Profile_TA__ValidateLoadoutsWithProduct_73D94AE44EA715C3EC701E8966FA7588 : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__Profile_TA__ValidateLoadoutsWithProduct_73D94AE44EA715C3EC701E8966FA7588.OnlineID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__Profile_TA__ValidateLoadoutsWithProduct_73D94AE44EA715C3EC701E8966FA7588");
		return ptr;
	}


	bool __Profile_TA__ValidateLoadoutsWithProduct_73D94AE44EA715C3EC701E8966FA7588(class ULoadoutSet_TA* L);
};


// Class TAGame.ProfileVersions_TA
// 0x0000 (0x0060 - 0x0060)
class UProfileVersions_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProfileVersions_TA");
		return ptr;
	}


	struct FCustomMatchTeamSettings STATIC_ConvertTeamColorSettings(const struct FCustomMatchTeamSettings& Settings);
	struct U_Types_X_FCustomMatchSettings STATIC_ConvertClubColorSettings(const struct U_Types_X_FCustomMatchSettings& Settings);
	void STATIC_ClubColors2(class UProfile_TA* Profile);
	void STATIC_ClearSeasons(class UProfile_TA* Profile);
	void STATIC_ClearTutorial(class UProfile_TA* Profile);
	void STATIC_SparseBindingsArrays(class UProfile_TA* Profile);
	void STATIC_GamepadSettings(class UProfile_TA* Profile);
	void STATIC_LoadoutData(class UProfile_TA* Profile);
	bool STATIC_GetEnableHorizontalSplitscreenForSaveDataMigration(class UProfile_TA* Profile);
	void STATIC_QuickChatSettings(class UProfile_TA* Profile);
	void STATIC_CameraSettings(class UProfile_TA* Profile);
	void STATIC_HandleAimAssist(class UProfile_TA* Profile, class UProfileAimAssistSave_TA** ObjectInitializer_65733F1C452AAB8801C3ADBFCB32E6E5);
	void STATIC_HandlePCBindings(class UProfile_TA* Profile);
	void STATIC_HandleControlSettings(class UProfile_TA* Profile);
	void STATIC_HandleStatsMigration(class UProfile_TA* Profile);
	void STATIC_HandleBannerSettings(class UProfile_TA* Profile);
	void STATIC_ResetAccountSelectNNX(class UProfile_TA* Profile);
	void STATIC_GameplaySettings(class UProfile_TA* Profile);
	void STATIC_MusicPlaylistSelector(class UProfile_TA* Profile);
	void STATIC_PaintFinishInLoadouts(class UProfile_TA* Profile);
	void STATIC_ChatGamepadBindingConsoleOnly(class UProfile_TA* Profile);
	void STATIC_CarColors2(class UProfile_TA* Profile, TArray<class ULoadoutSet_TA*>* ArrayResultLocal_D1CD91D449A88BF988BBCAAF5AC3723E);
	void STATIC_CarColors(class UProfile_TA* Profile);
	void STATIC_TeamLoadouts(class UProfile_TA* Profile);
	void STATIC_ChatSettings(class UProfile_TA* Profile);
	void STATIC_CustomMatchSettings(class UProfile_TA* Profile);
	void STATIC_DingoChatFix(class UProfile_TA* Profile);
	void STATIC_ChatRebind(class UProfile_TA* Profile);
	void STATIC_SaveReplayInput(class UProfile_TA* Profile);
	void STATIC_LoadoutPlayerTitle(class UProfile_TA* Profile);
	void STATIC_Update(class UProfile_TA* Profile, const struct FScriptDelegate& VersionChangedCallback, int VersionMax);
};


// Class TAGame.VehiclePartSkeletalMeshComponent_TA
// 0x0000 (0x07B0 - 0x07B0)
class UVehiclePartSkeletalMeshComponent_TA : public USkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePartSkeletalMeshComponent_TA");
		return ptr;
	}

};


// Class TAGame.__ReplayManager_TA__PlayReplayFile_D7038C6A4AFA636959471F82AA706C7A
// 0x0020 (0x0080 - 0x0060)
class U__ReplayManager_TA__PlayReplayFile_D7038C6A4AFA636959471F82AA706C7A : public UObject
{
public:
	struct FString                                     Map;                                                      // 0x0060(0x0010) (NeedCtorLink)
	struct FString                                     URL;                                                      // 0x0070(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ReplayManager_TA__PlayReplayFile_D7038C6A4AFA636959471F82AA706C7A");
		return ptr;
	}


	void __ReplayManager_TA__PlayReplayFile_D7038C6A4AFA636959471F82AA706C7A(class UReplayManager_TA* _, class UReplay_TA* Replay, class UError* Error);
};


// Class TAGame.RPC_ProductsPlayerClear_TA
// 0x0038 (0x0138 - 0x0100)
class URPC_ProductsPlayerClear_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsPlayerClear_TA");
		return ptr;
	}


	class URPC_ProductsPlayerClear_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_ProductsPlayerGet_TA
// 0x0078 (0x0178 - 0x0100)
class URPC_ProductsPlayerGet_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	TArray<struct FOnlineProductData>                  ProductData;                                              // 0x0138(0x0010) (Transient, NeedCtorLink)
	TArray<struct FOnlineProductData>                  ExpiredProducts;                                          // 0x0148(0x0010) (Transient, NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   Products;                                                 // 0x0158(0x0010) (Transient, NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   ExpiredOnlineProducts;                                    // 0x0168(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsPlayerGet_TA");
		return ptr;
	}


	void OnSuccess();
	class URPC_ProductsPlayerGet_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_ReportPlayer_TA
// 0x0020 (0x0120 - 0x0100)
class URPC_ReportPlayer_TA : public URPC_X
{
public:
	TArray<struct FReportedPlayerInfo>                 Reports;                                                  // 0x0100(0x0010) (NeedCtorLink)
	struct FString                                     GameID;                                                   // 0x0110(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ReportPlayer_TA");
		return ptr;
	}


	class URPC_ReportPlayer_TA* SetGameID(const struct FString& InGameID);
	class URPC_ReportPlayer_TA* SetReports(TArray<struct FReportedPlayerInfo> InReports);
};


// Class TAGame.OnlineProductExpirationHelper_TA
// 0x0038 (0x0098 - 0x0060)
class UOnlineProductExpirationHelper_TA : public UObject
{
public:
	TArray<class UOnlineProduct_TA*>                   ExpirationProducts;                                       // 0x0060(0x0010) (Transient, NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   ExpiredProducts;                                          // 0x0070(0x0010) (Transient, NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   ExpiredProductNotificationQueue;                          // 0x0080(0x0010) (Transient, NeedCtorLink)
	class UOnlineProductStoreSet_TA*                   ExpiredProductsSet;                                       // 0x0090(0x0008) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineProductExpirationHelper_TA");
		return ptr;
	}


	void HandleAcceptNotification(class UProductExpirationNotification_TA* Notification);
	void ExpireProduct(class UOnlineProduct_TA* InProduct);
	void HandleNotificationSaveAdded(class UNotificationSave_TA* NotificationSave);
	void CheckForExpiredProducts();
	void FindNextExpirationTime();
	void RemoveProduct(class UOnlineProduct_TA* InProduct);
	void AddExpirationProduct(class UOnlineProduct_TA* InProduct);
	void CheckProductForExpiration(class UOnlineProduct_TA* InProduct);
	void ClearExpirationProducts();
	void Construct();
};


// Class TAGame.InitialUserSettingsSender_TA
// 0x0018 (0x0078 - 0x0060)
class UInitialUserSettingsSender_TA : public UObject
{
public:
	unsigned long                                      bSent : 1;                                                // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	class ULocalPlayer_TA*                             Player;                                                   // 0x0068(0x0008) (Transient)
	class UGFxShell_X*                                 Shell;                                                    // 0x0070(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.InitialUserSettingsSender_TA");
		return ptr;
	}


	bool __InitialUserSettingsSender_TA__TryToSendInitialSettings_FFFD602A4A067829DCBA14B75C5FB0B7(class UGFxData_UserSetting_TA* S);
	void TryToSendInitialSettings(TArray<class UGFxData_UserSetting_TA*>* FilterLocal_76BE9E234CF9C2888CDB17AABE9F7370);
	void HandlePsyNetLoginChange(class UOnlinePlayerAuthentication_X* Auth);
	void HandleGFxShellCreated(class UGFxEngine_X* Engine, class UGFxShell_X* InShell);
	void Init(class ULocalPlayer_TA* InPlayer);
};


// Class TAGame.ProductTransactions_TA
// 0x0010 (0x0080 - 0x0070)
class UProductTransactions_TA : public UComponent
{
public:
	class UOnlineProductStoreSet_TA*                   InventoryProductSet;                                      // 0x0070(0x0008) (ExportObject, Component, EditInline)
	class UOnlineProductStoreSet_TA*                   TransactionProductSet;                                    // 0x0078(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductTransactions_TA");
		return ptr;
	}


	void __ProductTransactions_TA__GetEquippedProducts_60F279044F8F79D4D80284A4C41D0491(class UOnlineProduct_TA* EquippedProduct);
	void __ProductTransactions_TA__GetUnequippedProducts_EF6A2BF74BBD60536823BE97A0CB6879(class UOnlineProduct_TA* EquippedProduct);
	TArray<class UOnlineProduct_TA*> GetTransactionProducts();
	void GetAllTransactionIDs();
	void ResetTransactionProducts();
	void Remove(class UOnlineProduct_TA* Product);
	void AddOnlineProduct(class UOnlineProduct_TA* OnlineProduct);
	void ClearOnlineProducts();
	void Unload();
	TArray<class UOnlineProduct_TA*> GetUnequippedProducts(TArray<class UOnlineProduct_TA*>* OnlineProductSet, TArray<class UOnlineProduct_TA*>* AllEquippedProducts, TArray<class UOnlineProduct_TA*>* FilterLocal_10ED4C1843FFEE79771E3B8571AD6703);
	TArray<class UOnlineProduct_TA*> GetEquippedProducts(TArray<class UOnlineProduct_TA*>* OnlineProductSet, TArray<class UOnlineProduct_TA*>* AllEquippedProducts, TArray<class UOnlineProduct_TA*>* FilterLocal_EB64BF4D4B4B00186D8222A11B31FA9E);
	void RemoveQuantity(const struct FProductHashID& HashID, int Quantity, TArray<class UOnlineProduct_TA*> AllEquippedProducts);
	void AddQuantity(const struct FProductHashID& HashID, int Quantity, TArray<class UOnlineProduct_TA*> AllEquippedProducts);
	bool SetTransactionQuantity(const struct FProductHashID& HashID, int Quantity, TArray<class UOnlineProduct_TA*> AllEquippedProducts, TArray<class UOnlineProduct_TA*>* ArrayResultLocal_441BB2304A016F417AFBBAA8AA506098);
	void SetOnlineProducts(TArray<class UOnlineProduct_TA*>* InOnlineProducts);
	void Init();
};


// Class TAGame.SaveDataVersions_TA
// 0x0008 (0x0068 - 0x0060)
class USaveDataVersions_TA : public UObject
{
public:
	int                                                KeyProductID;                                             // 0x0060(0x0004) (Const)
	int                                                DecryptorProductID;                                       // 0x0064(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveDataVersions_TA");
		return ptr;
	}


	void STATIC___SaveDataVersions_TA__UpdateNewOnlineProductsRemoved_E78510E54D52599847F403BF893C5F8A(int Id);
	void STATIC_RemoveKeyProducts(class USaveData_TA* SaveData);
	void STATIC_UpdateCrossplayFlip(class USaveData_TA* SaveData);
	void STATIC_UpdateFavoriteHashIDs(class USaveData_TA* SaveData, struct FProductHashID* StructInitializer_84C2222C49DBDB8004A68EA0F0C5C06B, struct FProductHashID* StructInitializer_C91A51E347515412847ECE964F3532E0);
	void STATIC_ResetNetworkSettings(class USaveData_TA* SaveData);
	void STATIC_UpdateLevelThresholds(class USaveData_TA* SaveData);
	void STATIC_UpdateConsoleLensFlares(class USaveData_TA* SaveData);
	void STATIC_UpdateMatchesPlayed(class USaveData_TA* SaveData);
	void STATIC_UpdateFreeplayMap(class USaveData_TA* SaveData);
	void STATIC_UpdateCustomMatchSettings(class USaveData_TA* SaveData);
	void STATIC_UpdateGameplaySettings(class USaveData_TA* SaveData);
	void STATIC_UpdateVideoSettings(class USaveData_TA* SaveData);
	void STATIC_UpdateSaveSingleSeason(class USaveData_TA* SaveData, TArray<class USeason_TA*>* ArrayInitializer_9640E7BC4947633FB3143CBE0D9471DD);
	void STATIC_UpdateSeasons(class USaveData_TA* SaveData);
	void STATIC_UpdateTournamentSettings(class USaveData_TA* SaveData);
	void STATIC_UpdateClientXP(class USaveData_TA* SaveData);
	void STATIC_UpdateMatchmakingSettings(class USaveData_TA* SaveData);
	void STATIC_UpdatePlaylistSkillData(class USaveData_TA* SaveData);
	void STATIC_UpdateProductSettings(class USaveData_TA* SaveData, class UProductsSave_TA** ObjectInitializer_702F449B41492402BDB3B0BAF90DE8A0);
	void STATIC_UpdateBlogTileSave(class USaveData_TA* SaveData);
	void STATIC_UpdateTutorial(class USaveData_TA* SaveData);
	void STATIC_UpdateAchievements(class USaveData_TA* SaveData);
	void STATIC_UpdateNetwork(class USaveData_TA* SaveData);
	void STATIC_UpdateRankedReconnect(class USaveData_TA* SaveData, class URankedReconnectSave_TA** ObjectInitializer_39406071447FE700E0DEFF864EE31DE3);
	void STATIC_HandleMapPrefs(class USaveData_TA* SaveData);
	void STATIC_UISavedValues(class USaveData_TA* SaveData);
	void STATIC_UpdateSoundSettings(class USaveData_TA* SaveData);
	void STATIC_UpdateInvisitek(class USaveData_TA* SaveData);
	void STATIC_UpdateNewOnlineProductsRemoved(class USaveData_TA* SaveData);
	void STATIC_UpdateLightShafts(class USaveData_TA* SaveData);
	void STATIC_Update(class USaveData_TA* SaveData, const struct FScriptDelegate& VersionChangedCallback, int VersionMax);
};


// Class TAGame.PsyNetService_RewardDropReceived_TA
// 0x0078 (0x0108 - 0x0090)
class UPsyNetService_RewardDropReceived_TA : public UPsyNetClientService_X
{
public:
	struct FRocketPassInfo                             RocketPassInfo;                                           // 0x0090(0x0014)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	TArray<struct FOnlineProductData>                  ProductData;                                              // 0x00A8(0x0010) (NeedCtorLink)
	TArray<struct U_Types_TA_FOnlineXPReward>          RewardDrops;                                              // 0x00B8(0x0010) (NeedCtorLink)
	TArray<struct FOnlineReward>                       ChallengeRewards;                                         // 0x00C8(0x0010) (NeedCtorLink)
	TArray<struct FOnlineReward>                       AchievementRewards;                                       // 0x00D8(0x0010) (NeedCtorLink)
	TArray<struct FCurrency>                           CurrencyDrops;                                            // 0x00E8(0x0010) (NeedCtorLink)
	struct FString                                     MatchGUID;                                                // 0x00F8(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_RewardDropReceived_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_NoNotify_TA
// 0x0000 (0x0080 - 0x0080)
class UProductAttribute_NoNotify_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_NoNotify_TA");
		return ptr;
	}

};


// Class TAGame.__SaveData_TA__HandleOnlineProductsReceived_58E50439435A68972BA076AD607BE5F9
// 0x0008 (0x0068 - 0x0060)
class U__SaveData_TA__HandleOnlineProductsReceived_58E50439435A68972BA076AD607BE5F9 : public UObject
{
public:
	class UProductsSave_TA*                            ProductsSave;                                             // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__SaveData_TA__HandleOnlineProductsReceived_58E50439435A68972BA076AD607BE5F9");
		return ptr;
	}


	void __SaveData_TA__HandleOnlineProductsReceived_58E50439435A68972BA076AD607BE5F9();
};


// Class TAGame.__SaveData_TA__GetOnlineProductQuantity_E12324414AA394097DF47A8CD7C21ECB
// 0x0020 (0x0080 - 0x0060)
class U__SaveData_TA__GetOnlineProductQuantity_E12324414AA394097DF47A8CD7C21ECB : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.__SaveData_TA__GetOnlineProductQuantity_E12324414AA394097DF47A8CD7C21ECB.EquippedOnlineProducts
	TArray<struct FProfileProduct>                     EquippedProfileProducts;                                  // 0x0070(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__SaveData_TA__GetOnlineProductQuantity_E12324414AA394097DF47A8CD7C21ECB");
		return ptr;
	}


	bool __SaveData_TA__GetOnlineProductQuantity_0FAFDE62496D04886A7F069C60E75423(class UOnlineProduct_TA* Op);
	bool __SaveData_TA__GetOnlineProductQuantity_E12324414AA394097DF47A8CD7C21ECB(class UOnlineProduct_TA* Op);
};


// Class TAGame.RewardDrop_TA
// 0x0008 (0x0068 - 0x0060)
class URewardDrop_TA : public UObject
{
public:
	struct FName                                       RewardName;                                               // 0x0060(0x0008) (Const, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RewardDrop_TA");
		return ptr;
	}


	struct U_Types_TA_FOnlineXPReward OnlineXPReward(struct U_Types_TA_FOnlineXPReward* StructInitializer_5C9450EB4711553FE722E49CFC355A29);
};


// Class TAGame.RewardDrop_XP_TA
// 0x0090 (0x00F8 - 0x0068)
class URewardDrop_XP_TA : public URewardDrop_TA
{
public:
	float                                              Total;                                                    // 0x0068(0x0004) (DataBinding)
	int                                                Base;                                                     // 0x006C(0x0004) (DataBinding)
	int                                                BaseLevel;                                                // 0x0070(0x0004) (DataBinding)
	int                                                Level;                                                    // 0x0074(0x0004) (DataBinding)
	TArray<struct FGFxLevelThreshold>                  LevelThresholds;                                          // 0x0078(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FOnlineXPModifier>                   Modifiers;                                                // 0x0088(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FName>                               PremiumModifierNames;                                     // 0x0098(0x0010) (Edit, Const, NeedCtorLink)
	TArray<struct FName>                               PenaltyModifierNames;                                     // 0x00A8(0x0010) (Edit, Const, NeedCtorLink)
	struct FName                                       WeeklyCapReached;                                         // 0x00B8(0x0008) (Const)
	struct FName                                       WeeklyWinsCapReached;                                     // 0x00C0(0x0008) (Const)
	struct FString                                     RewardModifiers_SectionName;                              // 0x00C8(0x0010) (Const, NeedCtorLink)
	struct FString                                     RewardModifiers_PackageName;                              // 0x00D8(0x0010) (Const, NeedCtorLink)
	struct FName                                       WeeklyCap;                                                // 0x00E8(0x0008) (Const)
	struct FName                                       RestXP;                                                   // 0x00F0(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RewardDrop_XP_TA");
		return ptr;
	}


	struct FGFxLevelThreshold STATIC___RewardDrop_XP_TA__CreateInstance_61D4EED04CBBEBF9C8C671BB7B8F3DCC(int XP, struct FGFxLevelThreshold* StructInitializer_5D2157D54543FDB31C0EB5849F68EA51);
	int __RewardDrop_XP_TA__OnlineXPReward_87C084C147100422170BB4B904182C35(const struct FGFxLevelThreshold& XP);
	struct U_Types_TA_FOnlineXPReward OnlineXPReward(struct U_Types_TA_FOnlineXPReward* StructInitializer_494DF7334810D116652376A22947873C, TArray<int>* MapLocal_6D03723A44FD5C0A725811903A6DE950);
	struct FString STATIC_LocalizeModifier(class URewardDrop_XP_TA* RewardDrop, const struct FOnlineXPModifier& Modifier);
	class URewardDrop_TA* STATIC_CreateInstance(struct U_Types_TA_FOnlineXPReward* XPDrop, class URewardDrop_XP_TA** ObjectInitializer_5A85D5EF4C5C413C210056A2848E00BE, TArray<struct FGFxLevelThreshold>* MapLocal_9427B2174D81B11E3B82978447C8185D);
};


// Class TAGame.__SaveData_TA__FilterEquippedOnlineProducts_C4510342481294B37F9C738EFCA31845
// 0x0010 (0x0070 - 0x0060)
class U__SaveData_TA__FilterEquippedOnlineProducts_C4510342481294B37F9C738EFCA31845 : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.__SaveData_TA__FilterEquippedOnlineProducts_C4510342481294B37F9C738EFCA31845.EquippedInstanceIDs

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__SaveData_TA__FilterEquippedOnlineProducts_C4510342481294B37F9C738EFCA31845");
		return ptr;
	}


	bool __SaveData_TA__FilterEquippedOnlineProducts_C4510342481294B37F9C738EFCA31845(class UOnlineProduct_TA* Op);
};


// Class TAGame.__SaveData_TA__ValidateMatchesPlayed_C5354906478A9D21C26049A73608BE00
// 0x0010 (0x0070 - 0x0060)
class U__SaveData_TA__ValidateMatchesPlayed_C5354906478A9D21C26049A73608BE00 : public UObject
{
public:
	int                                                MatchesPlayed;                                            // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	class UProductsOfflineSave_TA*                     ProductsOfflineSave;                                      // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__SaveData_TA__ValidateMatchesPlayed_C5354906478A9D21C26049A73608BE00");
		return ptr;
	}


	bool __SaveData_TA__ValidateMatchesPlayed_492F7ADA479E408CA0820B886137BAE4(class UProductSlot_TA* Slot);
	bool __SaveData_TA__ValidateMatchesPlayed_C5354906478A9D21C26049A73608BE00(class UProductSlot_TA* Slot);
};


// Class TAGame.__SaveData_TA__CheckForNewGarageSlots_1C34FF0343FCCD601FD760BE0C7706EF
// 0x0008 (0x0068 - 0x0060)
class U__SaveData_TA__CheckForNewGarageSlots_1C34FF0343FCCD601FD760BE0C7706EF : public UObject
{
public:
	class UProductsOfflineSave_TA*                     ProductsOfflineSave;                                      // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__SaveData_TA__CheckForNewGarageSlots_1C34FF0343FCCD601FD760BE0C7706EF");
		return ptr;
	}


	bool __SaveData_TA__CheckForNewGarageSlots_1C34FF0343FCCD601FD760BE0C7706EF(class UProductSlot_TA* Slot);
};


// Class TAGame.PlaylistSkillDataSave_TA
// 0x0010 (0x00D8 - 0x00C8)
class UPlaylistSkillDataSave_TA : public USaveObject_TA
{
public:
	TArray<struct FPlaylistSkillData>                  SkillData;                                                // 0x00C8(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlaylistSkillDataSave_TA");
		return ptr;
	}


	bool CompareMatchesPlayed(const struct FPlaylistSkillData& LocalSkill, TArray<struct FPlaylistSkillData>* RemoteSkillData);
	class USaveObject_TA* Reconcile(class USaveObject_TA* Remote);
};


// Class TAGame.ContentSave_TA
// 0x0018 (0x00E0 - 0x00C8)
class UContentSave_TA : public USaveObject_TA
{
public:
	class UContentConfig_TA*                           Config;                                                   // 0x00C8(0x0008) (Transient)
	TArray<struct FContentPair>                        ContentMap2;                                              // 0x00D0(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ContentSave_TA");
		return ptr;
	}


	void HandleConfigChange();
	void OnLoad(class UContentConfig_TA** ObjectInitializer_222D7DB4414799039F0FB297F38892AA);
};


// Class TAGame.EulaSave_TA
// 0x0010 (0x00D8 - 0x00C8)
class UEulaSave_TA : public USaveObject_TA
{
public:
	TArray<struct FEulaVersion>                        AcceptedEulas;                                            // 0x00C8(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EulaSave_TA");
		return ptr;
	}


	void Accepted(int TextHash);
	bool RequiresAcceptance(int TextHash);
};


// Class TAGame.ChallengeSave_TA
// 0x0040 (0x0108 - 0x00C8)
class UChallengeSave_TA : public USaveObject_TA
{
public:
	int                                                RocketPassID;                                             // 0x00C8(0x0004)
	int                                                RocketPassGroupNotifyIndex;                               // 0x00CC(0x0004)
	unsigned long                                      bNotifyRocketPassPage : 1;                                // 0x00D0(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	struct FString                                     RocketPassChallengesName;                                 // 0x00D8(0x0010) (Const, NeedCtorLink)
	class URocketPassConfig_TA*                        RocketPassConfig;                                         // 0x00E8(0x0008) (Transient)
	struct FScriptDelegate                             __EventNewGroupAvaliable__Delegate;                       // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChallengeSave_TA");
		return ptr;
	}


	void __ChallengeSave_TA__OnLoad_ADF39AC6408D60314637BC9F9827B0FF(class UChallengeDefaultManager_TA* _);
	void OnRocketPassPageNotifyShown();
	bool UpdatedAvaliableRocketPassGroups();
	void UpdateAvaliableGroups();
	void HandleRocketPassConfigChanged();
	void OnLoad();
	void EventNewGroupAvaliable(class UChallengeSave_TA* ChallengeSave);
};


// Class TAGame.RPC_SchematicResourcesGet_TA
// 0x003C (0x013C - 0x0100)
class URPC_SchematicResourcesGet_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	int                                                TotalSchematicResources;                                  // 0x0138(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_SchematicResourcesGet_TA");
		return ptr;
	}


	class URPC_SchematicResourcesGet_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RewardDrop_PIP_TA
// 0x0000 (0x00F8 - 0x00F8)
class URewardDrop_PIP_TA : public URewardDrop_XP_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RewardDrop_PIP_TA");
		return ptr;
	}


	struct FGFxLevelThreshold STATIC___RewardDrop_PIP_TA__CreateInstance_7A3D3AF04F2FD5874E21278F5946D3B0(int Pips, struct FGFxLevelThreshold* StructInitializer_56B98FB04F1989289A879F889191AB98);
	class URewardDrop_TA* STATIC_CreateInstance(struct U_Types_TA_FOnlineXPReward* PIPDrop, class URewardDrop_PIP_TA** ObjectInitializer_21D8BA4044C9C221D1C3AF859C1F7645, TArray<struct FGFxLevelThreshold>* MapLocal_5C0FAC564677DBECD82F298AD0CCAFB4);
};


// Class TAGame.ListenObject_TA
// 0x0020 (0x0080 - 0x0060)
class UListenObject_TA : public UObject
{
public:
	int                                                Id;                                                       // 0x0060(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventRemoved__Delegate;                                 // 0x0068(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0064(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ListenObject_TA");
		return ptr;
	}


	void Remove();
	void HandleChallengeObjectRemoved(class UListenObject_TA* inObj);
	void ListenForRemove(class UListenObject_TA* inObj);
	void Init(class UListenObject_TA* inObj);
	void EventRemoved(class UListenObject_TA* Obj);
};


// Class TAGame.ChallengeDefault_TA
// 0x0078 (0x00F8 - 0x0080)
class UChallengeDefault_TA : public UListenObject_TA
{
public:
	struct FString                                     Title;                                                    // 0x0080(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     Description;                                              // 0x0090(0x0010) (NeedCtorLink, DataBinding)
	int                                                GroupIndex;                                               // 0x00A0(0x0004) (DataBinding)
	int                                                Points;                                                   // 0x00A4(0x0004) (DataBinding)
	unsigned long                                      bIsAchievement : 1;                                       // 0x00A8(0x0004) (DataBinding)
	unsigned long                                      bIsRepeatable : 1;                                        // 0x00A8(0x0004) (DataBinding)
	unsigned long                                      bIsPremium : 1;                                           // 0x00A8(0x0004) (DataBinding)
	unsigned long                                      bAutoClaimRewards : 1;                                    // 0x00A8(0x0004) (DataBinding)
	int                                                XPUnlockLevel;                                            // 0x00AC(0x0004) (DataBinding)
	struct FString                                     IconURL;                                                  // 0x00B0(0x0010) (NeedCtorLink)
	class UChallengeReward_TA*                         Rewards;                                                  // 0x00C0(0x0008)
	TArray<class UChallengeRequirement_TA*>            Requirements;                                             // 0x00C8(0x0010) (NeedCtorLink)
	class UTexture*                                    Icon;                                                     // 0x00D8(0x0008) (DataBinding)
	struct FScriptDelegate                             __EventIconChanged__Delegate;                             // 0x00E0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00E0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChallengeDefault_TA");
		return ptr;
	}


	void __ChallengeDefault_TA__Setup_C3D36F384028A31255B4BAB4F0FD333C(class UChallengeRequirement_TA* R);
	void __ChallengeDefault_TA__RequestIcon_F4F4D549411CEEB7B50341B31CEBC832(class UTexture2DDynamic* Texture);
	void HandleImageDownloaded(const struct FString& URL, class UTexture2DDynamic* Texture);
	void RequestIcon();
	void Setup();
	void EventIconChanged(class UChallengeDefault_TA* Challenge);
};


// Class TAGame.Challenge_TA
// 0x0020 (0x0118 - 0x00F8)
class UChallenge_TA : public UChallengeDefault_TA
{
public:
	unsigned long                                      bIsHidden : 1;                                            // 0x00F8(0x0004) (DataBinding)
	unsigned long                                      bRewardsAvailable : 1;                                    // 0x00F8(0x0004) (DataBinding)
	unsigned long                                      bNotifyNewInfo : 1;                                       // 0x00F8(0x0004) (DataBinding)
	unsigned long                                      bComplete : 1;                                            // 0x00F8(0x0004) (DataBinding)
	int                                                CompleteCount;                                            // 0x00FC(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.Challenge_TA.ProgressResetTimeUTC
	TArray<class UChallengeRequirement_TA*>            RequirementProgress;                                      // 0x0108(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Challenge_TA");
		return ptr;
	}


	void __Challenge_TA__OnTimeElapsed_B6A8387B42CF5F1C89D84B9E9FCE7954(class UChallengeRequirement_TA* Requirement);
	class UChallengeManager_TA* GetChallengeManager();
	void OnRewardsCollected(struct FOnlineReward* Reward);
	void OnTimeElapsed();
	bool IsAvailable();
	void HandleChallengeObjectRemoved(class UListenObject_TA* ChallengeObject);
	void HandleIconChanged(class UChallengeDefault_TA* Challenge);
	void SetRequirementProgress(TArray<struct FChallengeRequirementProgress>* Progress);
	void SetChallengeProgress(const struct FChallengeProgress& Progress);
	void Init(class UListenObject_TA* ChallengeObject);
};


// Class TAGame.RewardDrop_XPMultiplier_TA
// 0x0004 (0x006C - 0x0068)
class URewardDrop_XPMultiplier_TA : public URewardDrop_TA
{
public:
	float                                              Total;                                                    // 0x0068(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RewardDrop_XPMultiplier_TA");
		return ptr;
	}


	class URewardDrop_XPMultiplier_TA* STATIC_CreateInstance(struct U_Types_TA_FOnlineXPReward* XPMultiplier, class URewardDrop_XPMultiplier_TA** ObjectInitializer_84B903874E453E80D3F2D6B07C12ED4B);
};


// Class TAGame.RPC_XPRequest_TA
// 0x0058 (0x0158 - 0x0100)
class URPC_XPRequest_TA : public URPC_X
{
public:
	struct FXPInfo                                     XPInfoResponse;                                           // 0x0100(0x0020) (Transient, NeedCtorLink)
	struct FUniqueNetId                                PlayerID;                                                 // 0x0120(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_XPRequest_TA");
		return ptr;
	}


	class URPC_XPRequest_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GarageSlotDropGroup_TA
// 0x000C (0x00BC - 0x00B0)
class UGarageSlotDropGroup_TA : public UItemDropGroup_TA
{
public:
	class UTexture*                                    Icon;                                                     // 0x00B0(0x0008) (DataBinding)
	int                                                SlotIndex;                                                // 0x00B8(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GarageSlotDropGroup_TA");
		return ptr;
	}

};


// Class TAGame.__SaveData_TA__ValidateLoadoutsWithProduct_B7E75EAE4D4340B809A6CB88384B1D13
// 0x0008 (0x0068 - 0x0060)
class U__SaveData_TA__ValidateLoadoutsWithProduct_B7E75EAE4D4340B809A6CB88384B1D13 : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__SaveData_TA__ValidateLoadoutsWithProduct_B7E75EAE4D4340B809A6CB88384B1D13.OnlineID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__SaveData_TA__ValidateLoadoutsWithProduct_B7E75EAE4D4340B809A6CB88384B1D13");
		return ptr;
	}


	void __SaveData_TA__ValidateLoadoutsWithProduct_B7E75EAE4D4340B809A6CB88384B1D13(class UProfile_TA* P);
};


// Class TAGame.EngineAudioUnlocker_TA
// 0x0000 (0x0060 - 0x0060)
class UEngineAudioUnlocker_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EngineAudioUnlocker_TA");
		return ptr;
	}


	int STATIC___EngineAudioUnlocker_TA__FixupUnlockedEngineAudio_578671AB4AF25D854CEF089BBA59B5F3(class UProduct_TA* P);
	int STATIC___EngineAudioUnlocker_TA__FixupUnlockedEngineAudio_B1D7D69A4CDA9196E8551F99E09D38E2(class UProduct_TA* P);
	class UProduct_TA* STATIC___EngineAudioUnlocker_TA__FixupUnlockedEngineAudio_AEF2D5614A28F876601A7CAA02D7B0F8(const struct FBodyToEngineAudioPair& Pair);
	bool STATIC___EngineAudioUnlocker_TA__FixupUnlockedEngineAudio_BBE737C848EAE433A91E54A0CC6E2437(class UProduct_TA* Product);
	bool STATIC___EngineAudioUnlocker_TA__FixupUnlockedEngineAudio_01FD10F742D45105755B55B60DE88FDF(class UProduct_TA* Product);
	bool STATIC___EngineAudioUnlocker_TA__FixupUnlockedEngineAudio_D80EAD41499321C8ED345EA5725EE7B0(class UProduct_TA* Product);
	int STATIC___EngineAudioUnlocker_TA__FixupUnlockedEngineAudio_42162680495BF735DC514A81C0BD5175(class UOnlineProduct_TA* Product);
	class UProduct_TA* STATIC___EngineAudioUnlocker_TA__UnlockEnginesForBody_5D0C16EE483E4A4A81216794A840D920(const struct FBodyToEngineAudioPair& Pair);
	void STATIC_UnlockEnginesForBody(class UProductsOfflineSave_TA* ProductsOfflineSave, class UProduct_TA* Body, TArray<struct FBodyToEngineAudioPair>* FilterLocal_38A04F224E65581B2667C6AE2FCC116C, TArray<class UProduct_TA*>* MapLocal_EDB2EF54478B874DA2039BA8FAF6F88A, TArray<class UProduct_TA*>* DistinctLocal_79304E3A4BBD454F672F7BB71AEA6B43);
	void STATIC_FixupUnlockedEngineAudio(class USaveData_TA* SaveData, TArray<int>* MapLocal_DB51C4D14F7305EBF4AE078490B12C2F, TArray<int>* ConcatLocal_6121EE8349D9C97F4DD4C4AF323E129F, TArray<class UProduct_TA*>* MapLocal_62EB099C441D9971C9F7A09720D93FEF, TArray<class UProduct_TA*>* FilterLocal_7982A16244AB8BAEFE844885D52B95F3, TArray<class UProduct_TA*>* DistinctLocal_E547DB6045E2199349A8B698BC3E8B22, TArray<class UProduct_TA*>* FilterLocal_F76A7E4046147BFD8A6B55AB47D7312B, TArray<class UProduct_TA*>* FilterLocal_0B82782D4F7461D7D58608B53CC1F3FA, TArray<struct FBodyToEngineAudioPair>* FilterLocal_30E1B5774ADE1BBDDEA5C38C798B08D2, TArray<class UProduct_TA*>* MapLocal_354EE511445C27C6D5D638B44580FC35, TArray<class UProduct_TA*>* DistinctLocal_56B0792946746F4E158FD382962DB6EA, TArray<class UProduct_TA*>* DifferenceLocal_F5039DEC4DD5C4DB14E25F9DFD8D40B3, TArray<int>* MapLocal_29B74F2E48FAD7A6CAE93791A058B3DE, TArray<int>* MapLocal_A38702F848C9F6230EDD29B875735822);
};


// Class TAGame.__ProductTransactions_TA__GetUnequippedProducts_CEB24BCD478D8C3DD9420D922F90D973
// 0x0010 (0x0070 - 0x0060)
class U__ProductTransactions_TA__GetUnequippedProducts_CEB24BCD478D8C3DD9420D922F90D973 : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.__ProductTransactions_TA__GetUnequippedProducts_CEB24BCD478D8C3DD9420D922F90D973.AllEquippedInstanceIDs

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductTransactions_TA__GetUnequippedProducts_CEB24BCD478D8C3DD9420D922F90D973");
		return ptr;
	}


	bool __ProductTransactions_TA__GetUnequippedProducts_CEB24BCD478D8C3DD9420D922F90D973(class UOnlineProduct_TA* OnlineProduct);
};


// Class TAGame.__ProductTransactions_TA__GetEquippedProducts_236A52BB4D28C1633D0DD79529C9E4EE
// 0x0010 (0x0070 - 0x0060)
class U__ProductTransactions_TA__GetEquippedProducts_236A52BB4D28C1633D0DD79529C9E4EE : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.__ProductTransactions_TA__GetEquippedProducts_236A52BB4D28C1633D0DD79529C9E4EE.AllEquippedInstanceIDs

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductTransactions_TA__GetEquippedProducts_236A52BB4D28C1633D0DD79529C9E4EE");
		return ptr;
	}


	bool __ProductTransactions_TA__GetEquippedProducts_236A52BB4D28C1633D0DD79529C9E4EE(class UOnlineProduct_TA* OnlineProductEquipped);
};


// Class TAGame.Scout_TA
// 0x0000 (0x05B0 - 0x05B0)
class AScout_TA : public AScout
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Scout_TA");
		return ptr;
	}

};


// Class TAGame.ScreenDisplayActor_TA
// 0x0064 (0x032C - 0x02C8)
class AScreenDisplayActor_TA : public ADynamicSMActor_Spawnable
{
public:
	class APlayerControllerBase_TA*                    PC;                                                       // 0x02C8(0x0008)
	struct FVector                                     StartLocationOffset;                                      // 0x02D0(0x000C)
	struct FVector                                     LocationOffset;                                           // 0x02DC(0x000C)
	struct FRotator                                    CurrentRotation;                                          // 0x02E8(0x000C)
	float                                              RotationSpeed;                                            // 0x02F4(0x0004)
	float                                              StartRotationOffset;                                      // 0x02F8(0x0004)
	float                                              BlendInSpeed;                                             // 0x02FC(0x0004)
	float                                              BlendInAmount;                                            // 0x0300(0x0004)
	float                                              CameraShakeDuration;                                      // 0x0304(0x0004)
	float                                              CameraShakeAmplitude;                                     // 0x0308(0x0004)
	float                                              CameraShakeFrequency;                                     // 0x030C(0x0004)
	class UParticleSystem*                             ParticleFX;                                               // 0x0310(0x0008)
	class UParticleSystemComponent*                    ParticleComponent;                                        // 0x0318(0x0008) (ExportObject, Component, EditInline)
	struct FVector                                     FXOffset;                                                 // 0x0320(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ScreenDisplayActor_TA");
		return ptr;
	}


	void SpawnFX();
	void PlayBlendInCameraShake();
	void OnOffsetBlendedIn();
	void Tick(float DeltaTime);
	void Init();
};


// Class TAGame.ScriptedTextureComponent_TA
// 0x0034 (0x00D8 - 0x00A4)
class UScriptedTextureComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FVector                                     Resolution;                                               // 0x00A8(0x000C) (Edit)
	float                                              Height;                                                   // 0x00B4(0x0004) (Edit)
	unsigned long                                      bFaceCamera : 1;                                          // 0x00B8(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	class UStaticMeshComponent*                        Mesh;                                                     // 0x00C0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UScriptedTexture*                            TextureTarget;                                            // 0x00C8(0x0008) (Transient)
	class APlayerController*                           Viewer;                                                   // 0x00D0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ScriptedTextureComponent_TA");
		return ptr;
	}


	void FaceViewer();
	void Tick(float DeltaTime);
	void Detached();
	void Attached();
};


// Class TAGame.SeqAct_AddGameBall_TA
// 0x0038 (0x0198 - 0x0160)
class USeqAct_AddGameBall_TA : public USequenceAction
{
public:
	class ABall_TA*                                    SpawnedBall;                                              // 0x0160(0x0008)
	class AActor*                                      Instigator;                                               // 0x0168(0x0008)
	class AActor*                                      SpawnTransform;                                           // 0x0170(0x0008)
	class AActor*                                      PlacedBall;                                               // 0x0178(0x0008)
	unsigned long                                      bWake : 1;                                                // 0x0180(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0184(0x0004) MISSED OFFSET
	struct FString                                     BallArchetype;                                            // 0x0188(0x0010) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_AddGameBall_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_ApplyCarProducts_TA
// 0x0048 (0x01A8 - 0x0160)
class USeqAct_ApplyCarProducts_TA : public USequenceAction
{
public:
	TArray<class UProductAsset_TA*>                    Assets;                                                   // 0x0160(0x0010) (Edit, NeedCtorLink)
	struct FLinearColor                                TeamColor;                                                // 0x0170(0x0010) (Edit)
	struct FLinearColor                                AccentColor;                                              // 0x0180(0x0010) (Edit)
	class UProductAsset_PaintFinish_TA*                TeamFinish;                                               // 0x0190(0x0008) (Edit)
	class UProductAsset_PaintFinish_TA*                CustomFinish;                                             // 0x0198(0x0008) (Edit)
	class ACarPreviewActor_TA*                         CarPreviewActor;                                          // 0x01A0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_ApplyCarProducts_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_ControlCarMovement_TA
// 0x0008 (0x0168 - 0x0160)
class USeqAct_ControlCarMovement_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x0160(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_ControlCarMovement_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_DisplayMessage_TA
// 0x0050 (0x01B0 - 0x0160)
class USeqAct_DisplayMessage_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x0160(0x0008)
	struct FString                                     Title;                                                    // 0x0168(0x0010) (Edit, NeedCtorLink)
	struct FString                                     Body;                                                     // 0x0178(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bShowButtonOne : 1;                                       // 0x0188(0x0004) (Edit)
	unsigned long                                      bShowButtonTwo : 1;                                       // 0x0188(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x018C(0x0004) MISSED OFFSET
	struct FString                                     ButtonOneTitle;                                           // 0x0190(0x0010) (Edit, NeedCtorLink)
	struct FString                                     ButtonTwoTitle;                                           // 0x01A0(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_DisplayMessage_TA");
		return ptr;
	}


	void HandleButtonTwoClick(class UGFxModal_X* Modal);
	void HandleButtonOneClick(class UGFxModal_X* Modal);
	void DisplayMessage(class APlayerController_TA* PC);
	void Activated();
};


// Class TAGame.SeqAct_DriveSpline_TA
// 0x0028 (0x01A0 - 0x0178)
class USeqAct_DriveSpline_TA : public USeqAct_Latent
{
public:
	float                                              ForwardOffset;                                            // 0x0178(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	class ASplineActor*                                Spline;                                                   // 0x0180(0x0008) (Edit)
	float                                              Throttle;                                                 // 0x0188(0x0004) (Edit)
	unsigned long                                      bDebug : 1;                                               // 0x018C(0x0004) (Edit)
	TArray<struct FCarSplineData>                      Cars;                                                     // 0x0190(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_DriveSpline_TA");
		return ptr;
	}


	float GetSteer(class ACar_TA* Car, const struct FVector& Destination);
	struct FCarSplineData DriveSpline(const struct FCarSplineData& CarData, float DeltaTime);
	bool Update(float DeltaTime);
	void Activated();
};


// Class TAGame.SeqAct_EndTutorial_TA
// 0x0008 (0x0168 - 0x0160)
class USeqAct_EndTutorial_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x0160(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_EndTutorial_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_ExplodeGameBall_TA
// 0x0000 (0x0160 - 0x0160)
class USeqAct_ExplodeGameBall_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_ExplodeGameBall_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetDetailMode_TA
// 0x0000 (0x0160 - 0x0160)
class USeqAct_GetDetailMode_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetDetailMode_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetSaveData_TA
// 0x0008 (0x0168 - 0x0160)
class USeqAct_GetSaveData_TA : public USequenceAction
{
public:
	class USaveData_TA*                                SaveData;                                                 // 0x0160(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetSaveData_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetTutorialType_TA
// 0x0000 (0x0160 - 0x0160)
class USeqAct_GetTutorialType_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetTutorialType_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetWeatherEnabled_TA
// 0x0004 (0x0164 - 0x0160)
class USeqAct_GetWeatherEnabled_TA : public USequenceAction
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0160(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetWeatherEnabled_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GiveBoost_TA
// 0x000C (0x016C - 0x0160)
class USeqAct_GiveBoost_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x0160(0x0008)
	float                                              BoostAmount;                                              // 0x0168(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GiveBoost_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_IsActionPressed_TA
// 0x0010 (0x0170 - 0x0160)
class USeqAct_IsActionPressed_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x0160(0x0008)
	struct FName                                       ActionName;                                               // 0x0168(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_IsActionPressed_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_IsHumanPlayer_TA
// 0x0010 (0x0170 - 0x0160)
class USeqAct_IsHumanPlayer_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x0160(0x0008)
	class AActor*                                      Target;                                                   // 0x0168(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_IsHumanPlayer_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_NotifyEventOnTutorial_TA
// 0x0018 (0x0178 - 0x0160)
class USeqAct_NotifyEventOnTutorial_TA : public USequenceAction
{
public:
	struct FString                                     EventName;                                                // 0x0160(0x0010) (Edit, NeedCtorLink)
	class AActor*                                      Instigator;                                               // 0x0170(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_NotifyEventOnTutorial_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_ScreenFade
// 0x0014 (0x0174 - 0x0160)
class USeqAct_ScreenFade : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x0160(0x0008)
	struct FColor                                      FadeColor;                                                // 0x0168(0x0004) (Edit)
	float                                              FadeTime;                                                 // 0x016C(0x0004) (Edit)
	unsigned long                                      bFadeAudio : 1;                                           // 0x0170(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_ScreenFade");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_ScreenFade_TA
// 0x0014 (0x0174 - 0x0160)
class USeqAct_ScreenFade_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x0160(0x0008)
	struct FColor                                      FadeColor;                                                // 0x0168(0x0004) (Edit)
	float                                              FadeTime;                                                 // 0x016C(0x0004) (Edit)
	unsigned long                                      bFadeAudio : 1;                                           // 0x0170(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_ScreenFade_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetBallCamTarget_TA
// 0x0014 (0x0174 - 0x0160)
class USeqAct_SetBallCamTarget_TA : public USequenceAction
{
public:
	class AActor*                                      Target;                                                   // 0x0160(0x0008)
	class APlayerController_TA*                        Instigator;                                               // 0x0168(0x0008)
	unsigned long                                      bForceBallCamTarget : 1;                                  // 0x0170(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetBallCamTarget_TA");
		return ptr;
	}


	void SetBallCamTarget(bool bEnable);
	void Activated();
};


// Class TAGame.SeqAct_SetBallMaterial_TA
// 0x0014 (0x0174 - 0x0160)
class USeqAct_SetBallMaterial_TA : public USequenceAction
{
public:
	class ABall_TA*                                    Ball;                                                     // 0x0160(0x0008)
	class UMaterialInterface*                          Material;                                                 // 0x0168(0x0008) (Edit)
	int                                                MaterialID;                                               // 0x0170(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetBallMaterial_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetCarTransform_TA
// 0x0010 (0x0170 - 0x0160)
class USeqAct_SetCarTransform_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x0160(0x0008)
	class AActor*                                      Transform;                                                // 0x0168(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetCarTransform_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.__SeqAct_SetLoadout_TA__ApplyNewChangesToProductAssets_A640C12647993590DDB009BCFF44D147
// 0x001C (0x007C - 0x0060)
class U__SeqAct_SetLoadout_TA__ApplyNewChangesToProductAssets_A640C12647993590DDB009BCFF44D147 : public UObject
{
public:
	class UCarMeshComponent_TA*                        Mesh;                                                     // 0x0060(0x0008) (ExportObject, Component, EditInline)
	class UProductPaint_TA*                            Paint;                                                    // 0x0068(0x0008)
	class UAssetAttribute_TeamEdition_TA*              TeamEdition;                                              // 0x0070(0x0008)
	int                                                TeamID;                                                   // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__SeqAct_SetLoadout_TA__ApplyNewChangesToProductAssets_A640C12647993590DDB009BCFF44D147");
		return ptr;
	}


	void __SeqAct_SetLoadout_TA__ApplyNewChangesToProductAssets_DF89C7104B44FDF063A7C0921ECEC8BC(const struct FAttachment& A);
	void __SeqAct_SetLoadout_TA__ApplyNewChangesToProductAssets_3D8A44AF4EA5C54A2A7EECA1EB076851(const struct FWheelFX& T);
	void __SeqAct_SetLoadout_TA__ApplyNewChangesToProductAssets_F98240E74E962EE3B6DBF0B5069BE21C(const struct FFXAttachment& A);
	void __SeqAct_SetLoadout_TA__ApplyNewChangesToProductAssets_D3DCB8FD4D31FC9F12A349B6FBC7EE11(const struct FProductAttachment& A);
	void __SeqAct_SetLoadout_TA__ApplyNewChangesToProductAssets_A640C12647993590DDB009BCFF44D147(class UAntennaComponent_TA* A);
};


// Class TAGame.SeqAct_SetMatInstParam_Vector
// 0x001C (0x017C - 0x0160)
class USeqAct_SetMatInstParam_Vector : public USequenceAction
{
public:
	struct FName                                       ParamName;                                                // 0x0160(0x0008) (Edit)
	class AMaterialInstanceActor*                      MatInstActor;                                             // 0x0168(0x0008) (Edit)
	struct FVector                                     VectorValue;                                              // 0x0170(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetMatInstParam_Vector");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetStadiumTeamColors_TA
// 0x0020 (0x0180 - 0x0160)
class USeqAct_SetStadiumTeamColors_TA : public USequenceAction
{
public:
	TArray<struct FLinearColor>                        BlueColors;                                               // 0x0160(0x0010) (Edit, NeedCtorLink)
	TArray<struct FLinearColor>                        OrangeColors;                                             // 0x0170(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetStadiumTeamColors_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetTutorialGameEvent_TA
// 0x0010 (0x0170 - 0x0160)
class USeqAct_SetTutorialGameEvent_TA : public USequenceAction
{
public:
	struct FString                                     TutorialType;                                             // 0x0160(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetTutorialGameEvent_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetVehicleInput_TA
// 0x0020 (0x0180 - 0x0160)
class USeqAct_SetVehicleInput_TA : public USequenceAction
{
public:
	struct FVehicleInputs                              Input;                                                    // 0x0160(0x0020) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetVehicleInput_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SpawnBot_TA
// 0x001C (0x017C - 0x0160)
class USeqAct_SpawnBot_TA : public USequenceAction
{
public:
	class ACar_TA*                                     SpawnedBot;                                               // 0x0160(0x0008)
	class AActor*                                      SpawnTransform;                                           // 0x0168(0x0008)
	float                                              SkillLevel;                                               // 0x0170(0x0004) (Edit)
	unsigned long                                      bDisableAllLogic : 1;                                     // 0x0174(0x0004) (Edit)
	unsigned long                                      bCollideWithBall : 1;                                     // 0x0174(0x0004) (Edit)
	unsigned long                                      bCollideWithVehicle : 1;                                  // 0x0174(0x0004) (Edit)
	int                                                TeamIndex;                                                // 0x0178(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SpawnBot_TA");
		return ptr;
	}


	void ChooseTeam(class AAIController_TA* AIC);
	void Activated();
};


// Class TAGame.SeqAct_SpawnCarColors_TA
// 0x0074 (0x01D4 - 0x0160)
class USeqAct_SpawnCarColors_TA : public USequenceAction
{
public:
	struct FSpawnCarColorSet                           AccentColors;                                             // 0x0160(0x0010) (Edit)
	struct FLinearColor                                AccentTeamColor;                                          // 0x0170(0x0010) (Edit)
	struct FSpawnCarColorSet                           BlueTeamColors;                                           // 0x0180(0x0010) (Edit)
	struct FSpawnCarColorSet                           OrangeTeamColors;                                         // 0x0190(0x0010) (Edit)
	struct FLinearColor                                TeamAccentColor;                                          // 0x01A0(0x0010) (Edit)
	class UProductAsset_Body_TA*                       Body;                                                     // 0x01B0(0x0008) (Edit)
	class UProductAsset_Skin_TA*                       Skin;                                                     // 0x01B8(0x0008) (Edit)
	int                                                CarYaw;                                                   // 0x01C0(0x0004) (Edit)
	float                                              CarOffsetX;                                               // 0x01C4(0x0004) (Edit)
	float                                              CarOffsetY;                                               // 0x01C8(0x0004) (Edit)
	float                                              SetOffsetY;                                               // 0x01CC(0x0004) (Edit)
	float                                              BaseOffsetY;                                              // 0x01D0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SpawnCarColors_TA");
		return ptr;
	}


	class ACarPreviewActor_TA* SpawnCar(const struct FLinearColor& TeamColor, const struct FLinearColor& AccentColor, float OffsetX, float OffsetY);
	struct FLinearColor GetRGBFromColorSet(const struct FLinearColor& Hue, const struct FLinearColor& SV);
	void SpawnTeamCars(class UCarColorSet_TA* TeamColorSet, const struct FLinearColor& AccentColor);
	void SpawnAccentCars(class UCarColorSet_TA* AccentColorSet, const struct FLinearColor& TeamColor);
	class UProductAsset_Body_TA* GetOctaneBody();
	void Activated();
};


// Class TAGame.SeqAct_StartTutorial_TA
// 0x0018 (0x0178 - 0x0160)
class USeqAct_StartTutorial_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x0160(0x0008)
	struct FString                                     TutorialName;                                             // 0x0168(0x0010) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_StartTutorial_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_UpdateAd_TA
// 0x0008 (0x0168 - 0x0160)
class USeqAct_UpdateAd_TA : public USequenceAction
{
public:
	class AStaticMeshActor*                            MeshActor;                                                // 0x0160(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_UpdateAd_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SkyLightVolume_TA
// 0x000E (0x02B2 - 0x02A4)
class ASkyLightVolume_TA : public AVolume
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x02A4(0x0004) MISSED OFFSET
	class USkyLightVolumeComponent_TA*                 SkyLight;                                                 // 0x02A8(0x0008) (Edit, ExportObject, Component, EditInline)
	TEnumAsByte<EPaintTeam>                            UpperPaintTeam;                                           // 0x02B0(0x0001) (Edit)
	TEnumAsByte<EPaintTeam>                            LowerPaintTeam;                                           // 0x02B1(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkyLightVolume_TA");
		return ptr;
	}


	void HandleTeamColorsChanged(class ATeam_TA* Team);
	void HandleAllTeamsCreated(class AGameEvent_Team_TA* TeamGameEvent);
	void HandleGameEventAdded(class AGameEvent_Team_TA* TeamGameEvent);
	void SetTeamColorListeners();
	void PostBeginPlay();
};


// Class TAGame.SeqEvent_TutorialStarted_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_TutorialStarted_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_TutorialStarted_TA");
		return ptr;
	}

};


// Class TAGame.Tutorial_Boost_TA
// 0x0000 (0x0248 - 0x0248)
class UTutorial_Boost_TA : public UTutorial_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Tutorial_Boost_TA");
		return ptr;
	}


	void OnActionNameToDetectReleased();
};


// Class TAGame.Tutorial_Dodge_TA
// 0x000C (0x0254 - 0x0248)
class UTutorial_Dodge_TA : public UTutorial_TA
{
public:
	unsigned long                                      bDidDodge : 1;                                            // 0x0248(0x0004)
	unsigned long                                      bBallHitGoal : 1;                                         // 0x0248(0x0004)
	unsigned long                                      bCheckFailOnLand : 1;                                     // 0x0248(0x0004)
	int                                                Dodges;                                                   // 0x024C(0x0004)
	int                                                MaxDodges;                                                // 0x0250(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Tutorial_Dodge_TA");
		return ptr;
	}


	void CheckBallHitGoal();
	void HandleHitGoal(class ABall_TA* Ball, class UGoal_TA* Goal);
	void HandleCarTouch(class ABall_TA* Ball, class ACar_TA* HitCar, TEnumAsByte<EBallHitType> HitType);
	void HandleCarLanded(class ACar_TA* Car);
	void OnDodged();
	void HandleDodgeActivationChanged(class ACarComponent_TA* CarComponent);
	void HandleVehicleSetup(class AGameEvent_Tutorial_TA* InGameEvent, class ACar_TA* Car);
};


// Class TAGame.Tutorial_HandBrake_TA
// 0x0018 (0x0260 - 0x0248)
class UTutorial_HandBrake_TA : public UTutorial_TA
{
public:
	unsigned long                                      bCheckHandbrakeDir : 1;                                   // 0x0248(0x0004)
	unsigned long                                      bTriggerTouched : 1;                                      // 0x0248(0x0004)
	struct FVector                                     HandbrakeStartDir;                                        // 0x024C(0x000C)
	float                                              MinHandbrakeDotAngleForStart;                             // 0x0258(0x0004)
	float                                              MinHandbrakeDotAngleForComplete;                          // 0x025C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Tutorial_HandBrake_TA");
		return ptr;
	}


	bool HasGoodStartRotation();
	void OnActionNameToDetectReleased();
	void OnActionNameToDetectPressed();
	void CheckActionNameToDetect();
	void NotifyEventOnTutorial(const struct FString& EventName);
};


// Class TAGame.__MapSet_TA__GetMap_181B0567440EC98CF68598A1197DF17D
// 0x0008 (0x0068 - 0x0060)
class U__MapSet_TA__GetMap_181B0567440EC98CF68598A1197DF17D : public UObject
{
public:
	struct FName                                       MapName;                                                  // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__MapSet_TA__GetMap_181B0567440EC98CF68598A1197DF17D");
		return ptr;
	}


	bool __MapSet_TA__GetMap_181B0567440EC98CF68598A1197DF17D(class UMapData_TA* M);
};


// Class TAGame.SplineLoftActorSpawnable_TA
// 0x0000 (0x0338 - 0x0338)
class ASplineLoftActorSpawnable_TA : public ASplineLoftActorMovable
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SplineLoftActorSpawnable_TA");
		return ptr;
	}

};


// Class TAGame.__GameObserver_TA__GetCarDataForPRI_766258F743CB55DBF16D648242628EBA
// 0x0008 (0x0068 - 0x0060)
class U__GameObserver_TA__GetCarDataForPRI_766258F743CB55DBF16D648242628EBA : public UObject
{
public:
	class APRI_TA*                                     PRI;                                                      // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameObserver_TA__GetCarDataForPRI_766258F743CB55DBF16D648242628EBA");
		return ptr;
	}


	bool __GameObserver_TA__GetCarDataForPRI_766258F743CB55DBF16D648242628EBA(const struct FCarData& C);
};


// Class TAGame.__GarageFolderUnlocker_TA__FixupUnlockedGarageFolders_B0B489C44787F1E8619578A42137A7FE
// 0x0008 (0x0068 - 0x0060)
class U__GarageFolderUnlocker_TA__FixupUnlockedGarageFolders_B0B489C44787F1E8619578A42137A7FE : public UObject
{
public:
	class UProductsOfflineSave_TA*                     ProductsOfflineSave;                                      // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GarageFolderUnlocker_TA__FixupUnlockedGarageFolders_B0B489C44787F1E8619578A42137A7FE");
		return ptr;
	}


	void __GarageFolderUnlocker_TA__FixupUnlockedGarageFolders_E10A50A44AA453E981807EB2832DEA09(int ProductID);
	void __GarageFolderUnlocker_TA__FixupUnlockedGarageFolders_B0B489C44787F1E8619578A42137A7FE(int ProductID);
};


// Class TAGame.GFxData_ItemDropGroup_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_ItemDropGroup_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ItemDropGroup_TA");
		return ptr;
	}


	bool IsValid();
	TEnumAsByte<EDropGroupDisplayOrder> GetDisplayOrder();
};


// Class TAGame.InputBufferUtil_TA
// 0x0000 (0x0060 - 0x0060)
class UInputBufferUtil_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.InputBufferUtil_TA");
		return ptr;
	}


	TArray<struct FClientFrameData> STATIC_MergeFrames(TArray<struct FClientFrameData>* ArrayA, TArray<struct FClientFrameData>* ArrayB);
};


// Class TAGame.ClientJitterBuffer_STS_TA
// 0x0008 (0x0084 - 0x007C)
class UClientJitterBuffer_STS_TA : public UClientJitterBuffer_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	float                                              PrevBufferTime;                                           // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ClientJitterBuffer_STS_TA");
		return ptr;
	}


	void ReceivedPacket();
};


// Class TAGame.GFxData_Notification_TA
// 0x0004 (0x0098 - 0x0094)
class UGFxData_Notification_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Notification_TA");
		return ptr;
	}


	class UNotification_TA* GetNotification();
	void SetShown(bool bValue);
	void ClickDeny();
	void ClickAccept();
	void DismissNotification();
	void ClearPopUp();
	void HandleRemoveNotification(class UNotification_TA* Notification);
	void SetNotification(class UNotification_TA* Notification);
};


// Class TAGame.GFxData_GenericNotification_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_GenericNotification_TA : public UGFxData_Notification_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_GenericNotification_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_ClubMember_TA
// 0x0084 (0x0118 - 0x0094)
class UGFxData_ClubMember_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x0094(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_ClubMember_TA.ClubID
	struct FUniqueNetId                                MemberId;                                                 // 0x00A0(0x0038) (DataBinding)
	struct FString                                     MemberName;                                               // 0x00D8(0x0010) (NeedCtorLink, DataBinding)
	class UTexture*                                    Avatar;                                                   // 0x00E8(0x0008) (DataBinding)
	struct FString                                     UnsanitizedName;                                          // 0x00F0(0x0010) (Transient, NeedCtorLink)
	class UOnlineSubsystem*                            OnlineSubsytem;                                           // 0x0100(0x0008)
	class UOnlineGameWordFilter_X*                     WordFilter;                                               // 0x0108(0x0008)
	class UOnlineGame_X*                               OnlineGame;                                               // 0x0110(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ClubMember_TA");
		return ptr;
	}


	void HandleGetAvatar(const struct FUniqueNetId& InPlayerId, class UTexture* InAvatar, const struct FString& OnlinePlayerName);
	void UpdateAvatar(TArray<struct FUniqueNetId>* ArrayInitializer_C573EAFF45E4DD465EAE2DB415D2A53C);
	void HandleSanitizedName(const struct FString& Original, const struct FString& Sanitized);
	void UpdateName();
	void SetMember(const struct FUniqueNetId& InID, const struct FString& InName);
};


// Class TAGame.GFxData_ClubInvite_TA
// 0x0028 (0x0140 - 0x0118)
class UGFxData_ClubInvite_TA : public UGFxData_ClubMember_TA
{
public:
	struct FString                                     ClubName;                                                 // 0x0118(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ClubTag;                                                  // 0x0128(0x0010) (NeedCtorLink, DataBinding)
	class UClubInvite_X*                               Invite;                                                   // 0x0138(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ClubInvite_TA");
		return ptr;
	}


	void HandleSanitizedClubTag(const struct FString& Original, const struct FString& Sanitized);
	void HandleSanitizedClubName(const struct FString& Original, const struct FString& Sanitized);
	void SetInvite(class UClubInvite_X* InInvite);
};


// Class TAGame.FriendRequestNotification_TA
// 0x0038 (0x0140 - 0x0108)
class UFriendRequestNotification_TA : public UNotification_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0108(0x0038) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FriendRequestNotification_TA");
		return ptr;
	}


	bool ShouldShow();
	struct FUniqueNetId GetSenderID();
	class UFriendRequestNotification_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.ChallengeNotification_TA
// 0x000C (0x0114 - 0x0108)
class UChallengeNotification_TA : public UNotification_TA
{
public:
	class UTexture*                                    Icon;                                                     // 0x0108(0x0008) (Transient, DataBinding)
	int                                                ChallengeID;                                              // 0x0110(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChallengeNotification_TA");
		return ptr;
	}


	void RemoveNotification();
	void HandleIconChanged(class UChallengeDefault_TA* Challenge);
	class UChallengeNotification_TA* SetChallenge(class UChallengeDefault_TA* Challenge);
};


// Class TAGame.ProductAttribute_UserColorable_TA
// 0x0010 (0x0090 - 0x0080)
class UProductAttribute_UserColorable_TA : public UProductAttribute_TA
{
public:
	struct FLinearColor                                DefaultColor;                                             // 0x0080(0x0010) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_UserColorable_TA");
		return ptr;
	}

};


// Class TAGame.__PlayerVanity_TA__EquipProduct_3568A77645EB5026EE7AC99DDA2341A2
// 0x0018 (0x0078 - 0x0060)
class U__PlayerVanity_TA__EquipProduct_3568A77645EB5026EE7AC99DDA2341A2 : public UObject
{
public:
	struct FProductHashSource                          ProductSource;                                            // 0x0060(0x0018)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__PlayerVanity_TA__EquipProduct_3568A77645EB5026EE7AC99DDA2341A2");
		return ptr;
	}


	void __PlayerVanity_TA__EquipProduct_3568A77645EB5026EE7AC99DDA2341A2(const struct FAssetLoadResult& Result);
};


// Class TAGame.ProductOverride_SkeletalMesh_TA
// 0x0008 (0x0068 - 0x0060)
class UProductOverride_SkeletalMesh_TA : public UProductOverride_TA
{
public:
	class USkeletalMesh*                               Mesh;                                                     // 0x0060(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_SkeletalMesh_TA");
		return ptr;
	}


	void ApplyToObject(class UObject* Target);
};


// Class TAGame.ProductOverride_StaticMesh_TA
// 0x0008 (0x0068 - 0x0060)
class UProductOverride_StaticMesh_TA : public UProductOverride_TA
{
public:
	class UStaticMesh*                                 Mesh;                                                     // 0x0060(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_StaticMesh_TA");
		return ptr;
	}


	void ApplyToObject(class UObject* Target);
};


// Class TAGame.ProductOverride_Materials_TA
// 0x0010 (0x0070 - 0x0060)
class UProductOverride_Materials_TA : public UProductOverride_TA
{
public:
	TArray<class UMaterialInterface*>                  Materials;                                                // 0x0060(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_Materials_TA");
		return ptr;
	}


	void ApplyToObject(class UObject* Target);
};


// Class TAGame.__ProductAttribute_Painted_TA__ApplyToSetParameter_D93AF43E405FF66BEB9FE680D5C344F5
// 0x0020 (0x0080 - 0x0060)
class U__ProductAttribute_Painted_TA__ApplyToSetParameter_D93AF43E405FF66BEB9FE680D5C344F5 : public UObject
{
public:
	TScriptInterface<class UISetParameter>             Target;                                                   // 0x0060(0x0010)
	class UProductAttribute_PaintSettings_TA*          PaintSettings;                                            // 0x0070(0x0008)
	class UProductPaint_TA*                            Paint;                                                    // 0x0078(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductAttribute_Painted_TA__ApplyToSetParameter_D93AF43E405FF66BEB9FE680D5C344F5");
		return ptr;
	}


	void __ProductAttribute_Painted_TA__ApplyToSetParameter_D93AF43E405FF66BEB9FE680D5C344F5(const struct FPaintAttributeParameter& PaintParam);
};


// Class TAGame.__ProductAttribute_Painted_TA__ApplyPaintOverridesToObject_ACF0B8E04740DCAD2F50BAAFBBDD7CB3
// 0x0010 (0x0070 - 0x0060)
class U__ProductAttribute_Painted_TA__ApplyPaintOverridesToObject_ACF0B8E04740DCAD2F50BAAFBBDD7CB3 : public UObject
{
public:
	class UProductPaint_TA*                            Paint;                                                    // 0x0060(0x0008)
	class UObject*                                     Target;                                                   // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductAttribute_Painted_TA__ApplyPaintOverridesToObject_ACF0B8E04740DCAD2F50BAAFBBDD7CB3");
		return ptr;
	}


	void __ProductAttribute_Painted_TA__ApplyPaintOverridesToObject_E2A8F699484CFF6F2474DF8F035C7DE1(class UProductOverride_TA* PaintOverride);
	bool __ProductAttribute_Painted_TA__ApplyPaintOverridesToObject_ACF0B8E04740DCAD2F50BAAFBBDD7CB3(const struct FPaintWithOverride& O);
};


// Class TAGame.ProductAsset_ESportsTeam_TA
// 0x0010 (0x00F0 - 0x00E0)
class UProductAsset_ESportsTeam_TA : public UProductAsset_TA
{
public:
	struct FName                                       TeamName;                                                 // 0x00E0(0x0008) (Edit)
	class UTexture*                                    TeamLogo;                                                 // 0x00E8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_ESportsTeam_TA");
		return ptr;
	}

};


// Class TAGame.__ProductOverride_TA__ApplyOverrides_B9EF43124B724963AC6B469E2B800B40
// 0x0008 (0x0068 - 0x0060)
class U__ProductOverride_TA__ApplyOverrides_B9EF43124B724963AC6B469E2B800B40 : public UObject
{
public:
	class UObject*                                     Target;                                                   // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductOverride_TA__ApplyOverrides_B9EF43124B724963AC6B469E2B800B40");
		return ptr;
	}


	void __ProductOverride_TA__ApplyOverrides_B9EF43124B724963AC6B469E2B800B40(class UProductOverride_TA* O);
};


// Class TAGame.__ProductOverride_MaterialParameter_TA__ApplyOverrideToMesh_0AF8A881403361BEC87ECD9C52BDC1AB
// 0x0008 (0x0068 - 0x0060)
class U__ProductOverride_MaterialParameter_TA__ApplyOverrideToMesh_0AF8A881403361BEC87ECD9C52BDC1AB : public UObject
{
public:
	class UMaterialInstanceConstant*                   MIC;                                                      // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductOverride_MaterialParameter_TA__ApplyOverrideToMesh_0AF8A881403361BEC87ECD9C52BDC1AB");
		return ptr;
	}


	void __ProductOverride_MaterialParameter_TA__ApplyOverrideToMesh_0CE4B49E46EF3173938E0BAF915FDED8(const struct FVectorParameterValue& Param);
	void __ProductOverride_MaterialParameter_TA__ApplyOverrideToMesh_BE8124324A46AA9D5C3E23BFE27C2900(const struct FTextureParameterValue& Param);
	void __ProductOverride_MaterialParameter_TA__ApplyOverrideToMesh_D933CD1A4CA8A075AEC1538A3E08722B(const struct FScalarParameterValue& Param);
	void __ProductOverride_MaterialParameter_TA__ApplyOverrideToMesh_0AF8A881403361BEC87ECD9C52BDC1AB(const struct FFontParameterValue& Param);
};


// Class TAGame.WheelSkelMeshMAT_TA
// 0x0000 (0x07B0 - 0x07B0)
class UWheelSkelMeshMAT_TA : public USkeletalMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.WheelSkelMeshMAT_TA");
		return ptr;
	}

};


// Class TAGame.WheelStaticMeshMAT_TA
// 0x0000 (0x0308 - 0x0308)
class UWheelStaticMeshMAT_TA : public UStaticMeshComponent
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.WheelStaticMeshMAT_TA");
		return ptr;
	}

};


// Class TAGame.__PerfStatGraph_TA__UpdateGraphRanges_9E6E23F74BC6143FC43ACA83E7AE17E1
// 0x0004 (0x0064 - 0x0060)
class U__PerfStatGraph_TA__UpdateGraphRanges_9E6E23F74BC6143FC43ACA83E7AE17E1 : public UObject
{
public:
	float                                              TargetMS;                                                 // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__PerfStatGraph_TA__UpdateGraphRanges_9E6E23F74BC6143FC43ACA83E7AE17E1");
		return ptr;
	}


	void __PerfStatGraph_TA__UpdateGraphRanges_9E6E23F74BC6143FC43ACA83E7AE17E1(class USampleHistory_TA* History);
};


// Class TAGame.__VanityQuery_TA__CompleteRequests_C13AE1874A5BECB1522F1CAD5DE518C0
// 0x0004 (0x0064 - 0x0060)
class U__VanityQuery_TA__CompleteRequests_C13AE1874A5BECB1522F1CAD5DE518C0 : public UObject
{
public:
	int                                                I;                                                        // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__VanityQuery_TA__CompleteRequests_C13AE1874A5BECB1522F1CAD5DE518C0");
		return ptr;
	}


	bool __VanityQuery_TA__CompleteRequests_C13AE1874A5BECB1522F1CAD5DE518C0(const struct FUniqueNetId& PID);
};


// Class TAGame.RPC_PsyNetGetVanities_TA
// 0x0040 (0x0140 - 0x0100)
class URPC_PsyNetGetVanities_TA : public URPC_X
{
public:
	TArray<int>                                        VanityTypes;                                              // 0x0100(0x0010) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        PlayerIDs;                                                // 0x0110(0x0010) (NeedCtorLink)
	TArray<struct FVanityProductInfo>                  VanityLoadouts;                                           // 0x0120(0x0010) (Transient, NeedCtorLink)
	TArray<struct FVanityProductData>                  VanityProducts;                                           // 0x0130(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_PsyNetGetVanities_TA");
		return ptr;
	}


	void OnSuccess(struct FVanityProductData* StructInitializer_6F794F534FB7B8079485F9AA54A5B925);
	class URPC_PsyNetGetVanities_TA* AddVanityType(int InType);
	class URPC_PsyNetGetVanities_TA* AddPlayerIDs(TArray<struct FUniqueNetId> InPlayerIDs, TArray<struct FUniqueNetId>* UnionLocal_EBD5646343FB356047D20493EBC4FE76);
	class URPC_PsyNetGetVanities_TA* AddPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.__VanitySetManager_TA__RequestsBorders_08A4B9BB425DA0B367190BB3F62A8D23
// 0x0038 (0x0098 - 0x0060)
class U__VanitySetManager_TA__RequestsBorders_08A4B9BB425DA0B367190BB3F62A8D23 : public UObject
{
public:
	struct FUniqueNetId                                EmptyID;                                                  // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__VanitySetManager_TA__RequestsBorders_08A4B9BB425DA0B367190BB3F62A8D23");
		return ptr;
	}


	bool __VanitySetManager_TA__RequestsBorders_08A4B9BB425DA0B367190BB3F62A8D23(const struct FUniqueNetId& P);
};


// Class TAGame.__VanitySetManager_TA__RequestBanners_A3459CE042BCC985AA6370B8C60E4591
// 0x0038 (0x0098 - 0x0060)
class U__VanitySetManager_TA__RequestBanners_A3459CE042BCC985AA6370B8C60E4591 : public UObject
{
public:
	struct FUniqueNetId                                EmptyID;                                                  // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__VanitySetManager_TA__RequestBanners_A3459CE042BCC985AA6370B8C60E4591");
		return ptr;
	}


	bool __VanitySetManager_TA__RequestBanners_A3459CE042BCC985AA6370B8C60E4591(const struct FUniqueNetId& P);
};


// Class TAGame.__VanitySetManager_TA__RequestAvatars_870ED2A54358D4BB45BF159E330306D0
// 0x0038 (0x0098 - 0x0060)
class U__VanitySetManager_TA__RequestAvatars_870ED2A54358D4BB45BF159E330306D0 : public UObject
{
public:
	struct FUniqueNetId                                EmptyID;                                                  // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__VanitySetManager_TA__RequestAvatars_870ED2A54358D4BB45BF159E330306D0");
		return ptr;
	}


	bool __VanitySetManager_TA__RequestAvatars_870ED2A54358D4BB45BF159E330306D0(const struct FUniqueNetId& P);
};


// Class TAGame.__VanitySetManager_TA__ReadVanity_Internal_BC7371D2412DE3E7240D74A3AD1980D8
// 0x0038 (0x0098 - 0x0060)
class U__VanitySetManager_TA__ReadVanity_Internal_BC7371D2412DE3E7240D74A3AD1980D8 : public UObject
{
public:
	struct FUniqueNetId                                EmptyID;                                                  // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__VanitySetManager_TA__ReadVanity_Internal_BC7371D2412DE3E7240D74A3AD1980D8");
		return ptr;
	}


	bool __VanitySetManager_TA__ReadVanity_Internal_BC7371D2412DE3E7240D74A3AD1980D8(const struct FUniqueNetId& P);
};


// Class TAGame.____SaveData_TA__GetOnlineProductQuantity_E12324414AA394097DF47A8CD7C21ECB____SaveData_TA__GetOnlineProductQuantity_0FAFDE62496D04886A7F069C60E75423_571E05D04331CCE09C871C831CCEAFB1
// 0x0008 (0x0068 - 0x0060)
class U____SaveData_TA__GetOnlineProductQuantity_E12324414AA394097DF47A8CD7C21ECB____SaveData_TA__GetOnlineProductQuantity_0FAFDE62496D04886A7F069C60E75423_571E05D04331CCE09C871C831CCEAFB1 : public UObject
{
public:
	class UOnlineProduct_TA*                           Op;                                                       // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.____SaveData_TA__GetOnlineProductQuantity_E12324414AA394097DF47A8CD7C21ECB____SaveData_TA__GetOnlineProductQuantity_0FAFDE62496D04886A7F069C60E75423_571E05D04331CCE09C871C831CCEAFB1");
		return ptr;
	}


	bool ____SaveData_TA__GetOnlineProductQuantity_E12324414AA394097DF47A8CD7C21ECB____SaveData_TA__GetOnlineProductQuantity_0FAFDE62496D04886A7F069C60E75423_571E05D04331CCE09C871C831CCEAFB1(const struct FProfileProduct& PP);
};


// Class TAGame.__BanSync_TA__GetBanMessage_9393487B4DB6A06F5431E78FA4AF9B02
// 0x0040 (0x00A0 - 0x0060)
class U__BanSync_TA__GetBanMessage_9393487B4DB6A06F5431E78FA4AF9B02 : public UObject
{
public:
	TEnumAsByte<EBanType>                              BanType;                                                  // 0x0060(0x0001)
	unsigned char                                      UnknownData00[0x7];                                       // 0x0061(0x0007) MISSED OFFSET
	struct FUniqueNetId                                PlayerID;                                                 // 0x0068(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__BanSync_TA__GetBanMessage_9393487B4DB6A06F5431E78FA4AF9B02");
		return ptr;
	}


	bool __BanSync_TA__GetBanMessage_9393487B4DB6A06F5431E78FA4AF9B02(class UBanMessage_X* M);
};


// Class TAGame.__BanSync_TA__GetPlayerBanMessages_2C5B1F384412BF89F0F9C09DDCA33452
// 0x0038 (0x0098 - 0x0060)
class U__BanSync_TA__GetPlayerBanMessages_2C5B1F384412BF89F0F9C09DDCA33452 : public UObject
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__BanSync_TA__GetPlayerBanMessages_2C5B1F384412BF89F0F9C09DDCA33452");
		return ptr;
	}


	bool __BanSync_TA__GetPlayerBanMessages_2C5B1F384412BF89F0F9C09DDCA33452(class UBanMessage_X* M);
};


// Class TAGame.__BanSync_TA__GetBanMessageTypes_DF6CBF1B481B85752971B1B493C96628
// 0x0001 (0x0061 - 0x0060)
class U__BanSync_TA__GetBanMessageTypes_DF6CBF1B481B85752971B1B493C96628 : public UObject
{
public:
	TEnumAsByte<EBanType>                              BanType;                                                  // 0x0060(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__BanSync_TA__GetBanMessageTypes_DF6CBF1B481B85752971B1B493C96628");
		return ptr;
	}


	bool __BanSync_TA__GetBanMessageTypes_DF6CBF1B481B85752971B1B493C96628(class UBanMessage_X* M);
};


// Class TAGame.RPC_GetBanStatus_TA
// 0x0020 (0x0120 - 0x0100)
class URPC_GetBanStatus_TA : public URPC_X
{
public:
	TArray<struct FUniqueNetId>                        Players;                                                  // 0x0100(0x0010) (NeedCtorLink)
	TArray<class UBanMessage_X*>                       BanMessages;                                              // 0x0110(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetBanStatus_TA");
		return ptr;
	}


	class URPC_GetBanStatus_TA* SetPlayers(TArray<struct FUniqueNetId>* InPlayers);
};


// Class TAGame.CameraTrackPoint_TA
// 0x0024 (0x0084 - 0x0060)
class UCameraTrackPoint_TA : public UObject
{
public:
	int                                                frame;                                                    // 0x0060(0x0004)
	float                                              Time;                                                     // 0x0064(0x0004)
	struct FVector                                     Location;                                                 // 0x0068(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x0074(0x000C)
	float                                              FOV;                                                      // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraTrackPoint_TA");
		return ptr;
	}

};


// Class TAGame.ChallengeRequirement_TA
// 0x0018 (0x0098 - 0x0080)
class UChallengeRequirement_TA : public UListenObject_TA
{
public:
	struct FString                                     DisplayName;                                              // 0x0080(0x0010) (NeedCtorLink, DataBinding)
	int                                                RequiredCount;                                            // 0x0090(0x0004) (DataBinding)
	int                                                ProgressCount;                                            // 0x0094(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChallengeRequirement_TA");
		return ptr;
	}


	void SetProgress(struct FChallengeRequirementProgress* Progress);
};


// Class TAGame.ChallengeReward_TA
// 0x0038 (0x00B8 - 0x0080)
class UChallengeReward_TA : public UListenObject_TA
{
public:
	int                                                XP;                                                       // 0x0080(0x0004) (DataBinding)
	int                                                Pips;                                                     // 0x0084(0x0004) (DataBinding)
	TArray<class UChallengeCurrency_TA*>               Currency;                                                 // 0x0088(0x0010) (NeedCtorLink)
	TArray<struct FOnlineProductData>                  Products;                                                 // 0x0098(0x0010) (NeedCtorLink)
	struct FString                                     ProductIDs;                                               // 0x00A8(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChallengeReward_TA");
		return ptr;
	}


	void Init(class UListenObject_TA* ListenObj);
};


// Class TAGame.__ChallengeManager_TA__FindChallengeIndex_25DF0AC947EAC6CE85BCA69FE4175AFC
// 0x0004 (0x0064 - 0x0060)
class U__ChallengeManager_TA__FindChallengeIndex_25DF0AC947EAC6CE85BCA69FE4175AFC : public UObject
{
public:
	int                                                Id;                                                       // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ChallengeManager_TA__FindChallengeIndex_25DF0AC947EAC6CE85BCA69FE4175AFC");
		return ptr;
	}


	bool __ChallengeManager_TA__FindChallengeIndex_25DF0AC947EAC6CE85BCA69FE4175AFC(class UChallenge_TA* C);
};


// Class TAGame.RPC_Challenge_TrainingComplete_TA
// 0x0060 (0x0160 - 0x0100)
class URPC_Challenge_TrainingComplete_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	struct FString                                     TrainingType;                                             // 0x0138(0x0010) (NeedCtorLink)
	struct FString                                     Difficulty;                                               // 0x0148(0x0010) (NeedCtorLink)
	int                                                Score;                                                    // 0x0158(0x0004)
	int                                                TotalRounds;                                              // 0x015C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_Challenge_TrainingComplete_TA");
		return ptr;
	}


	class URPC_Challenge_TrainingComplete_TA* SetFromTraining(class AGameEvent_Training_TA* Training);
	class URPC_Challenge_TrainingComplete_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_Challenge_TutorialComplete_TA
// 0x0048 (0x0148 - 0x0100)
class URPC_Challenge_TutorialComplete_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	struct FString                                     TutorialType;                                             // 0x0138(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_Challenge_TutorialComplete_TA");
		return ptr;
	}


	class URPC_Challenge_TutorialComplete_TA* SetTutorialType(const struct FString& Type);
	class URPC_Challenge_TutorialComplete_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.ChallengeCompleteNotification_TA
// 0x0004 (0x0118 - 0x0114)
class UChallengeCompleteNotification_TA : public UChallengeNotification_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0114(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChallengeCompleteNotification_TA");
		return ptr;
	}


	class UChallengeNotification_TA* SetChallenge(class UChallengeDefault_TA* Challenge);
};


// Class TAGame.RPC_Challenge_CompleteReceived_TA
// 0x003C (0x013C - 0x0100)
class URPC_Challenge_CompleteReceived_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	int                                                Id;                                                       // 0x0138(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_Challenge_CompleteReceived_TA");
		return ptr;
	}


	class URPC_Challenge_CompleteReceived_TA* SetChallengeID(int ChallengeID);
	class URPC_Challenge_CompleteReceived_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_Challenge_AvailableReceived_TA
// 0x003C (0x013C - 0x0100)
class URPC_Challenge_AvailableReceived_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	int                                                Id;                                                       // 0x0138(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_Challenge_AvailableReceived_TA");
		return ptr;
	}


	class URPC_Challenge_AvailableReceived_TA* SetChallengeID(int ChallengeID);
	class URPC_Challenge_AvailableReceived_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.ChallengeAvailableNotification_TA
// 0x0004 (0x0118 - 0x0114)
class UChallengeAvailableNotification_TA : public UChallengeNotification_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0114(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChallengeAvailableNotification_TA");
		return ptr;
	}


	class UChallengeNotification_TA* SetChallenge(class UChallengeDefault_TA* Challenge);
};


// Class TAGame.RPC_Challenge_ClearNewInfo_TA
// 0x0048 (0x0148 - 0x0100)
class URPC_Challenge_ClearNewInfo_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	TArray<int>                                        ChallengeIDs;                                             // 0x0138(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_Challenge_ClearNewInfo_TA");
		return ptr;
	}


	class URPC_Challenge_ClearNewInfo_TA* SetChallengeIDs(TArray<int> InChallengeIDs);
	class URPC_Challenge_ClearNewInfo_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.PsyNetService_ChallengeProgress_TA
// 0x0010 (0x00A0 - 0x0090)
class UPsyNetService_ChallengeProgress_TA : public UPsyNetClientService_X
{
public:
	TArray<struct FChallengeProgress>                  Challenges;                                               // 0x0090(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_ChallengeProgress_TA");
		return ptr;
	}

};


// Class TAGame.RPC_GetChallengeProgress_TA
// 0x0058 (0x0158 - 0x0100)
class URPC_GetChallengeProgress_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	TArray<int>                                        ChallengeIDs;                                             // 0x0138(0x0010) (NeedCtorLink)
	TArray<struct FChallengeProgress>                  ProgressData;                                             // 0x0148(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetChallengeProgress_TA");
		return ptr;
	}


	class URPC_GetChallengeProgress_TA* SetRequestedIDs(TArray<int>* Ids);
	class URPC_GetChallengeProgress_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.ChallengeFolder_TA
// 0x0068 (0x00C8 - 0x0060)
class UChallengeFolder_TA : public UObject
{
public:
	struct FString                                     CodeName;                                                 // 0x0060(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     DisplayName;                                              // 0x0070(0x0010) (NeedCtorLink, DataBinding)
	int                                                DefaultActiveIndex;                                       // 0x0080(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x0084(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.ChallengeFolder_TA.EndTime
	TEnumAsByte<EChallengeSort>                        ChallengeFolderSort;                                      // 0x0090(0x0001)
	unsigned char                                      UnknownData02[0x7];                                       // 0x0091(0x0007) MISSED OFFSET
	TArray<int>                                        ChallengeIDs;                                             // 0x0098(0x0010) (NeedCtorLink)
	TArray<class UChallengeFolder_TA*>                 SubFolders;                                               // 0x00A8(0x0010) (NeedCtorLink)
	struct FString                                     SubFolderNames;                                           // 0x00B8(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChallengeFolder_TA");
		return ptr;
	}


	void GetSortedChallenges(TArray<class UChallenge_TA*>* AllChallenges, TArray<class UChallenge_TA*>* Out_SortedChallenges);
	void Init();
};


// Class TAGame.RocketPassConfig_TA
// 0x0048 (0x00C0 - 0x0078)
class URocketPassConfig_TA : public UOnlineConfig_X
{
public:
	int                                                RocketPassID;                                             // 0x0078(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x007C(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RocketPassConfig_TA.StartTime
	unsigned char                                      UnknownData02[0x8];                                       // 0x0088(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RocketPassConfig_TA.EndTime
	int                                                StartRangeSeconds;                                        // 0x0090(0x0004)
	unsigned char                                      UnknownData03[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData04[0x8];                                       // 0x0094(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RocketPassConfig_TA.FinalStartTime
	unsigned long                                      bIsActive : 1;                                            // 0x00A0(0x0004) (Transient)
	unsigned char                                      UnknownData05[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __bIsActive__ChangeNotify;                                // 0x00A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x00A4(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RocketPassConfig_TA");
		return ptr;
	}


	void __bIsActive__ChangeNotifyFunc();
	void UpdateActiveState();
	bool IsActive();
	void GetFinalStartTime();
	bool IsValid();
	void Apply();
};


// Class TAGame.ConnectionQualityConfig_TA
// 0x0060 (0x00D8 - 0x0078)
class UConnectionQualityConfig_TA : public UOnlineConfig_X
{
public:
	float                                              ClientPollRate;                                           // 0x0078(0x0004)
	float                                              ClientDelayBeforePolling;                                 // 0x007C(0x0004)
	float                                              ClientUpdateDelay;                                        // 0x0080(0x0004)
	float                                              MediocrePing;                                             // 0x0084(0x0004)
	float                                              BadPing;                                                  // 0x0088(0x0004)
	float                                              RecentBadPingFlagPercent;                                 // 0x008C(0x0004)
	float                                              BadAckTime;                                               // 0x0090(0x0004)
	float                                              BadReceiveTime;                                           // 0x0094(0x0004)
	float                                              MediocreJitter;                                           // 0x0098(0x0004)
	float                                              BadJitter;                                                // 0x009C(0x0004)
	float                                              JitterRollingAverageTimespan;                             // 0x00A0(0x0004)
	float                                              RecentBadJitterFlagPercent;                               // 0x00A4(0x0004)
	float                                              MediocrePacketLossPercent;                                // 0x00A8(0x0004)
	float                                              BadPacketLossPercent;                                     // 0x00AC(0x0004)
	float                                              PacketLossRollingAverageTimespan;                         // 0x00B0(0x0004)
	float                                              RecentBadPacketLossFlagPercent;                           // 0x00B4(0x0004)
	float                                              RecentPoorConnectionRollingTimespan;                      // 0x00B8(0x0004)
	float                                              NotificationDelayInDays;                                  // 0x00BC(0x0004)
	unsigned long                                      bShouldProvidePoorConnectionHelp : 1;                     // 0x00C0(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	struct FString                                     PoorConnectionHelpNotificationURL;                        // 0x00C8(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ConnectionQualityConfig_TA");
		return ptr;
	}

};


// Class TAGame.__EngineAudioUnlocker_TA__FixupUnlockedEngineAudio_1AAB4FAB46E1324CAE67A4BE2F8FB0C8
// 0x0018 (0x0078 - 0x0060)
class U__EngineAudioUnlocker_TA__FixupUnlockedEngineAudio_1AAB4FAB46E1324CAE67A4BE2F8FB0C8 : public UObject
{
public:
	TArray<class UProduct_TA*>                         UnlockedBodies;                                           // 0x0060(0x0010) (NeedCtorLink)
	class UProductsOfflineSave_TA*                     ProductsOfflineSave;                                      // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__EngineAudioUnlocker_TA__FixupUnlockedEngineAudio_1AAB4FAB46E1324CAE67A4BE2F8FB0C8");
		return ptr;
	}


	void __EngineAudioUnlocker_TA__FixupUnlockedEngineAudio_211F3CFF4B5DC35F53F4279FD78C5420(int Id);
	void __EngineAudioUnlocker_TA__FixupUnlockedEngineAudio_AD49CE45469C37EB376C82A50D81D767(int Id);
	bool __EngineAudioUnlocker_TA__FixupUnlockedEngineAudio_1AAB4FAB46E1324CAE67A4BE2F8FB0C8(const struct FBodyToEngineAudioPair& Pair);
};


// Class TAGame.__EngineAudioUnlocker_TA__UnlockEnginesForBody_DB56DE084A82DD6090F8399756D13C13
// 0x0010 (0x0070 - 0x0060)
class U__EngineAudioUnlocker_TA__UnlockEnginesForBody_DB56DE084A82DD6090F8399756D13C13 : public UObject
{
public:
	class UProduct_TA*                                 Body;                                                     // 0x0060(0x0008)
	class UProductsOfflineSave_TA*                     ProductsOfflineSave;                                      // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__EngineAudioUnlocker_TA__UnlockEnginesForBody_DB56DE084A82DD6090F8399756D13C13");
		return ptr;
	}


	void __EngineAudioUnlocker_TA__UnlockEnginesForBody_DA3F62654DE0807D7BAAE3903B58BA1C(class UProduct_TA* Product);
	bool __EngineAudioUnlocker_TA__UnlockEnginesForBody_DB56DE084A82DD6090F8399756D13C13(const struct FBodyToEngineAudioPair& Pair);
};


// Class TAGame.PsyNetService_FaceItMatchComplete_TA
// 0x0004 (0x0094 - 0x0090)
class UPsyNetService_FaceItMatchComplete_TA : public UPsyNetClientService_X
{
public:
	int                                                MatchID;                                                  // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_FaceItMatchComplete_TA");
		return ptr;
	}

};


// Class TAGame.RPC_FaceItFindMatchForPlayer_TA
// 0x00E8 (0x01E8 - 0x0100)
class URPC_FaceItFindMatchForPlayer_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	struct FServerReservationData                      ReservationData;                                          // 0x0138(0x0070) (Transient, NeedCtorLink)
	struct FFaceItMatchInfo                            MatchInfo;                                                // 0x01A8(0x0038) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01E0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_FaceItFindMatchForPlayer_TA.Expiration

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_FaceItFindMatchForPlayer_TA");
		return ptr;
	}


	class UErrorType* OverrideErrorType(class UErrorType* ErrorType);
	class URPC_FaceItFindMatchForPlayer_TA* SetPlayerID(const struct FUniqueNetId& Value);
};


// Class TAGame.RPC_FaceItPlayerFailedJoin_TA
// 0x00B8 (0x01B8 - 0x0100)
class URPC_FaceItPlayerFailedJoin_TA : public URPC_X
{
public:
	int                                                MatchID;                                                  // 0x0100(0x0004)
	int                                                FailedJoinServerID;                                       // 0x0104(0x0004)
	struct FServerReservationData                      ReservationData;                                          // 0x0108(0x0070) (Transient, NeedCtorLink)
	struct FFaceItMatchInfo                            MatchInfo;                                                // 0x0178(0x0038) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x01B0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_FaceItPlayerFailedJoin_TA.Expiration

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_FaceItPlayerFailedJoin_TA");
		return ptr;
	}


	class UErrorType* OverrideErrorType(class UErrorType* ErrorType);
	class URPC_FaceItPlayerFailedJoin_TA* SetServerID(int InServerID);
	class URPC_FaceItPlayerFailedJoin_TA* SetMatchID(int InMatchID);
};


// Class TAGame.FaceItErrors_TA
// 0x0048 (0x00C8 - 0x0080)
class UFaceItErrors_TA : public UErrorList
{
public:
	class UErrorType*                                  MatchHasBeenCancelled;                                    // 0x0080(0x0008) (Const)
	class UErrorType*                                  CannotJoinCrossPlatformMatch;                             // 0x0088(0x0008) (Const)
	class UErrorType*                                  CannotJoinWhileInParty;                                   // 0x0090(0x0008) (Const)
	class UErrorType*                                  CannotJoinWhilePlayingSplitscreen;                        // 0x0098(0x0008) (Const)
	class UErrorType*                                  CannotJoinWhileOnline;                                    // 0x00A0(0x0008) (Const)
	class UErrorType*                                  ReturnToMainMenuToJoin;                                   // 0x00A8(0x0008) (Const)
	class UErrorType*                                  JoinGameFailed;                                           // 0x00B0(0x0008) (Const)
	class UErrorType*                                  NoFaceItMatchFound;                                       // 0x00B8(0x0008) (Const)
	class UErrorType*                                  FaceItGameServerPending;                                  // 0x00C0(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FaceItErrors_TA");
		return ptr;
	}

};


// Class TAGame.FaceItConfig_TA
// 0x0008 (0x0080 - 0x0078)
class UFaceItConfig_TA : public UOnlineConfig_X
{
public:
	int                                                MaxConnectionAttempts;                                    // 0x0078(0x0004)
	unsigned long                                      bEnabled : 1;                                             // 0x007C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FaceItConfig_TA");
		return ptr;
	}

};


// Class TAGame.FaceItMatchNotification_TA
// 0x00A8 (0x01B0 - 0x0108)
class UFaceItMatchNotification_TA : public UNotification_TA
{
public:
	struct FServerReservationData                      ReservationData;                                          // 0x0108(0x0070) (NeedCtorLink)
	struct FFaceItMatchInfo                            MatchInfo;                                                // 0x0178(0x0038) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FaceItMatchNotification_TA");
		return ptr;
	}


	bool ShouldShow();
	void ClickAccept();
	class UFaceItMatchNotification_TA* SetReservationService(const struct FServerReservationData& InReservationData, const struct FFaceItMatchInfo& InMatchInfo);
};


// Class TAGame.PsyNetService_FaceItMatchCancelled_TA
// 0x0004 (0x0094 - 0x0090)
class UPsyNetService_FaceItMatchCancelled_TA : public UPsyNetClientService_X
{
public:
	int                                                MatchID;                                                  // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_FaceItMatchCancelled_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_PlayerTitle_TA
// 0x0000 (0x00E0 - 0x00E0)
class UProductAsset_PlayerTitle_TA : public UProductAsset_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_PlayerTitle_TA");
		return ptr;
	}

};


// Class TAGame.Save_TA
// 0x003C (0x009C - 0x0060)
class USave_TA : public UObject
{
public:
	class USaveObjectManager_TA*                       SaveObjectManager;                                        // 0x0060(0x0008) (Transient)
	struct FString                                     DirectoryPath;                                            // 0x0068(0x0010) (NeedCtorLink)
	struct FString                                     SaveType;                                                 // 0x0078(0x0010) (NeedCtorLink)
	struct FString                                     SaveExt;                                                  // 0x0088(0x0010) (NeedCtorLink)
	unsigned long                                      bExactFileMatch : 1;                                      // 0x0098(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Save_TA");
		return ptr;
	}


	void CancelGetHeaders(const struct FScriptDelegate& Callback);
	void GetHeaders(class ULocalPlayer_TA* Player, const struct FString& FolderPath, const struct FString& Pattern, const struct FScriptDelegate& Callback);
	struct FString GetFullSavePath(class ULocalPlayer_TA* Player, const struct FString& SaveName);
	struct FString GetFullSaveDirectory(class ULocalPlayer_TA* Player);
	void Delete(class ULocalPlayer_TA* Player, const struct FString& SavePath);
	void Save(class ULocalPlayer_TA* Player, const struct FString& SaveName);
	void LoadAsync(class ULocalPlayer_TA* Player, const struct FString& SaveFileName, const struct FScriptDelegate& Callback);
	bool Load(class ULocalPlayer_TA* Player, const struct FString& SaveFileName);
	struct FString GetUniqueSaveKey(class ULocalPlayer_TA* Player);
	void Init();
};


// Class TAGame.SaveData_GameEditor_TA
// 0x0004 (0x00A0 - 0x009C)
class USaveData_GameEditor_TA : public USave_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveData_GameEditor_TA");
		return ptr;
	}

};


// Class TAGame.GameEditor_Switch_TA
// 0x0000 (0x02D0 - 0x02D0)
class AGameEditor_Switch_TA : public AGameEditor_Trigger_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEditor_Switch_TA");
		return ptr;
	}

};


// Class TAGame.DynamicSpawnPointMesh_TA
// 0x0000 (0x02B0 - 0x02B0)
class ADynamicSpawnPointMesh_TA : public AGameEditor_Actor_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DynamicSpawnPointMesh_TA");
		return ptr;
	}

};


// Class TAGame.GameEditor_Pawn_TA
// 0x0000 (0x0558 - 0x0558)
class AGameEditor_Pawn_TA : public APawn_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEditor_Pawn_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_GarageSlotDropGroup_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_GarageSlotDropGroup_TA : public UGFxData_ItemDropGroup_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_GarageSlotDropGroup_TA");
		return ptr;
	}

};


// Class TAGame.MapPrefsMetrics_TA
// 0x0000 (0x0080 - 0x0080)
class UMapPrefsMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapPrefsMetrics_TA");
		return ptr;
	}


	void MapPrefs(TArray<struct FMapPrefsMetric> Playlists);
	struct FMapPrefsMetric GetMetric(struct FPlaylistMapPrefs* InPrefs);
	TArray<struct FMapPrefsMetric> GetAllMetrics(TArray<struct FPlaylistMapPrefs>* InMapPrefs);
	void RecordMapPrefs(TArray<struct FPlaylistMapPrefs>* InMapPrefs);
};


// Class TAGame.MapGroups_TA
// 0x0000 (0x0060 - 0x0060)
class UMapGroups_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MapGroups_TA");
		return ptr;
	}


	TArray<class UMapData_TA*> STATIC___MapGroups_TA__BuildMaps_55E418CB41EE4803F7C005AC10120E54(const struct FMapGroup& Group);
	TArray<class UMapData_TA*> STATIC_BuildMaps(TArray<struct FMapGroup>* Groups, TArray<class UMapData_TA*>* MapManyLocal_F2F4421846E89BE1B75CBE8CE326B416, TArray<class UMapData_TA*>* DistinctLocal_E4AC2D6D4D5EF21407C4EDA786480F25);
	TArray<struct FMapGroup> STATIC_BuildGroups(TArray<class UMapData_TA*>* AvailableMaps, TArray<struct FMapGroup>* SourceGroups, TArray<class UMapData_TA*>* IntersectLocal_E0A01E87458F119FA5253096892C5EBB);
};


// Class TAGame.__OnlineGameTournaments_TA__GetBannedErrorString_1737AE7C49881CCEF475D6BC8779245A
// 0x0008 (0x0068 - 0x0060)
class U__OnlineGameTournaments_TA__GetBannedErrorString_1737AE7C49881CCEF475D6BC8779245A : public UObject
{
public:
	class UOnlineGameParty_X*                          OnlineGameParty;                                          // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineGameTournaments_TA__GetBannedErrorString_1737AE7C49881CCEF475D6BC8779245A");
		return ptr;
	}


	struct FString __OnlineGameTournaments_TA__GetBannedErrorString_1737AE7C49881CCEF475D6BC8779245A(const struct FString& P);
};


// Class TAGame.TourConfig_TA
// 0x0068 (0x00E0 - 0x0078)
class UTourConfig_TA : public UOnlineConfig_X
{
public:
	unsigned long                                      bEnableUI : 1;                                            // 0x0078(0x0004) (Edit, DataBinding)
	unsigned long                                      bEnableRewards : 1;                                       // 0x0078(0x0004) (Edit, DataBinding)
	unsigned long                                      bHideBetaUI : 1;                                          // 0x0078(0x0004) (Edit, DataBinding)
	int                                                CheckInWindowMinutes;                                     // 0x007C(0x0004) (Edit)
	int                                                CreateFutureMinutes;                                      // 0x0080(0x0004) (Edit)
	int                                                ActivityWindowMinutes;                                    // 0x0084(0x0004) (Edit)
	float                                              NextMatchPollIntervalSeconds;                             // 0x0088(0x0004) (Edit)
	float                                              PausedRpcDelaySeconds;                                    // 0x008C(0x0004) (Edit)
	int                                                CreateFutureMaxDays;                                      // 0x0090(0x0004) (Edit, DataBinding)
	float                                              BracketCacheSeconds;                                      // 0x0094(0x0004) (Edit)
	TArray<int>                                        AllowedTeamSizes;                                         // 0x0098(0x0010) (Edit, NeedCtorLink)
	struct FString                                     AllowedTeamSizesCSV;                                      // 0x00A8(0x0010) (Transient, NeedCtorLink, DataBinding)
	int                                                MaxBracketSize;                                           // 0x00B8(0x0004) (Edit, DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	TArray<struct FName>                               TeamSizeToPlaylistMap;                                    // 0x00C0(0x0010) (NeedCtorLink)
	TArray<struct FName>                               GameModeToPlaylistMap;                                    // 0x00D0(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourConfig_TA");
		return ptr;
	}


	float GetPausedPollDelay();
	struct FName GetPlaylistName(int GameMode, int TeamSize);
	void Apply();
};


// Class TAGame.TourSubscriptions_TA
// 0x0108 (0x0168 - 0x0060)
class UTourSubscriptions_TA : public UObject
{
public:
	class UTourList_TA*                                TourList;                                                 // 0x0060(0x0008) (Edit, ExportObject, Component, EditInline)
	class UGFxTourList_TA*                             GFxTourList;                                              // 0x0068(0x0008) (Edit, ExportObject, Component, EditInline)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0070(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.TourSubscriptions_TA.Created
	unsigned char                                      UnknownData01[0x10];                                      // 0x0080(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.TourSubscriptions_TA.AdminOf
	unsigned char                                      UnknownData02[0x10];                                      // 0x0090(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.TourSubscriptions_TA.RegisteredTo
	class UTourCheckInWindowWatcher_TA*                WindowWatcher;                                            // 0x00A0(0x0008) (Transient)
	class URPC_X*                                      GetSubscriptionsRPC;                                      // 0x00A8(0x0008) (Transient)
	unsigned long                                      bSynced : 1;                                              // 0x00B0(0x0004) (Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	class UError*                                      SyncError;                                                // 0x00B8(0x0008) (Transient)
	struct FScriptDelegate                             __EventSubscriptionsSynced__Delegate;                     // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventUnsubscribe__Delegate;                             // 0x00D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x00D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSubscribe__Delegate;                               // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x00F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTourCancelled__Delegate;                           // 0x0108(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0108(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __Created__ChangeNotify;                                  // 0x0120(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x0120(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __AdminOf__ChangeNotify;                                  // 0x0138(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData09[0x8];                                       // 0x0138(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __RegisteredTo__ChangeNotify;                             // 0x0150(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData10[0x8];                                       // 0x0150(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourSubscriptions_TA");
		return ptr;
	}


	void __TourSubscriptions_TA__Unsubscribe_E9FCFA0B44012424FB3ADA9CA391BD57(class URPC_TourUnsubscribe_TA* RPC);
	void __RegisteredTo__ChangeNotifyFunc();
	void __AdminOf__ChangeNotifyFunc();
	void __Created__ChangeNotifyFunc();
	bool IsSubscribed();
	bool IsRegistered();
	bool IsAdmin();
	void Cancel();
	void SwapOutActiveTournament(class UTourSettings_TA* NewTourSettings, const struct FTourTeam& Team);
	void HandleUnsubscribe();
	class UAsyncTask* Unsubscribe(const struct FUniqueNetId& PlayerID);
	TArray<class UTourSettings_TA*> Select(TArray<class UTourSettings_TA*>* FilterLocal_FCC1336E451208C2B030DEAE8BF1FEC9);
	class UTourSettings_TA* GetTournament();
	void HandleTourActivated(class UOnlineGameTournaments_TA* Tournament, class UTourEvent_TA* TourEvent);
	void HandleCheckInWindowChange(class UTourCheckInWindowWatcher_TA* Watcher, class UTourSettings_TA* Tournament);
	void UpdateNextCheckInWindow();
	void HandleTourRegistered(class UTourSettings_TA* Tournament);
	void HandleTourCreated(class UTourSettings_TA* Tournament);
	void NotifyWhenSynced(const struct FScriptDelegate& Callback);
	void HandleCrossPlatformChanged();
	void HandleSubscriptionsSynced(class URPC_TourGetSubscriptions_TA* RPC);
	void InitGFxTourList(class UGFxEngine_X* GFxEngine, class UGFxShell_X* Shell);
	void HandlePsyNetLogin();
	void Init(class UOnlineGameTournaments_TA* Tournament);
	void EventTourCancelled();
	void EventSubscribe(class UTourSubscriptions_TA* Subscriptions);
	void EventUnsubscribe(class UTourSubscriptions_TA* Subscriptions);
	void EventSubscriptionsSynced(class UTourSubscriptions_TA* Subscriptions, class UError* Error);
};


// Class TAGame.TourCheckInWindowWatcher_TA
// 0x0038 (0x0098 - 0x0060)
class UTourCheckInWindowWatcher_TA : public UObject
{
public:
	class UTourConfig_TA*                              Config;                                                   // 0x0060(0x0008) (Edit)
	class UTourSettings_TA*                            NextTournament;                                           // 0x0068(0x0008) (Transient)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0070(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TourCheckInWindowWatcher_TA.CheckInWindowSeconds
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TourCheckInWindowWatcher_TA.ActivityWindowSeconds
	struct FScriptDelegate                             __EventWindowChange__Delegate;                            // 0x0080(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0080(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourCheckInWindowWatcher_TA");
		return ptr;
	}


	bool CanShowActivityNotifications();
	bool CanCheckIn();
	float GetTimeToNextWindow();
	void HandleCheckInWindowEvent();
	void ClearCheckInTimer();
	void UpdateCheckInTimer();
	void GetWindowOpenTime();
	void STATIC_StaticGetWindowOpenTime();
	void STATIC_GetNextWindowEventTime();
	class UTourSettings_TA* STATIC_FindNextWindow(TArray<class UTourSettings_TA*>* Tournaments);
	void HandleConfigChange();
	void Stopwatch();
	void StartWatch(TArray<class UTourSettings_TA*> Tournaments);
	void EventWindowChange(class UTourCheckInWindowWatcher_TA* Watcher, class UTourSettings_TA* Tournament);
};


// Class TAGame.TourBracketCache_TA
// 0x0060 (0x00C0 - 0x0060)
class UTourBracketCache_TA : public UObject
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0060(0x0008) (Edit)
	class UTourConfig_TA*                              Config;                                                   // 0x0068(0x0008) (Edit)
	TArray<struct FBracketResult>                      Brackets;                                                 // 0x0070(0x0010) (NeedCtorLink)
	TArray<struct FBracketRequest>                     Requests;                                                 // 0x0080(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __OnBracketRetrieved__Delegate;                           // 0x0090(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0090(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnBracketError__Delegate;                               // 0x00A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00A8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourBracketCache_TA");
		return ptr;
	}


	bool __TourBracketCache_TA__RequestCached_635EED3E4DB31899972B38A9F721CCDE(const struct FTourMatch& M);
	void __TourBracketCache_TA__Dispose_592DB8184DDBF3DD43C7D7A67CB33D44(const struct FBracketRequest& R);
	void Dispose();
	int GetBracketIndex();
	void HandleDownload(const struct FTourBracket& Bracket);
	void ClearOnBracketChanged(const struct FScriptDelegate& Callback);
	void NotifyOnBracketChanged(const struct FScriptDelegate& Callback);
	void HandleGetBracketError(class UError* Error);
	void NotifyOnBracketError(const struct FScriptDelegate& Callback);
	class UAsyncTask* Request(const struct FUniqueNetId& PlayerID, const struct FScriptDelegate& Callback);
	class UAsyncTask* RequestCached(const struct FUniqueNetId& PlayerID, const struct FScriptDelegate& Callback);
	void OnBracketError(class UError* Error);
	void OnBracketRetrieved(struct FTourBracket* Bracket);
};


// Class TAGame.TourService_TA
// 0x0090 (0x00F0 - 0x0060)
class UTourService_TA : public UObject
{
public:
	struct FScriptDelegate                             __OnTournamentResult__Delegate;                           // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnCheckIn__Delegate;                                    // 0x0078(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnGetBracket__Delegate;                                 // 0x0090(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0090(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnGetMatch__Delegate;                                   // 0x00A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00A8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnGetRewards__Delegate;                                 // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __OnStartMatchmaking__Delegate;                           // 0x00D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x00D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourService_TA");
		return ptr;
	}


	class UAsyncTask* StartMatchmaking(const struct FUniqueNetId& PlayerID, const struct FScriptDelegate& Callback);
	void OnStartMatchmaking();
	class UAsyncTask* GetRewards(const struct FUniqueNetId& PlayerID, const struct FScriptDelegate& Callback);
	void OnGetRewards(TArray<struct FTourReward> Rewards);
	class UAsyncTask* GetMatch(const struct FUniqueNetId& PlayerID, const struct FScriptDelegate& Callback);
	void OnGetMatch(const struct FTourMatch& Match);
	class UAsyncTask* GetBracket(const struct FUniqueNetId& PlayerID, const struct FScriptDelegate& Callback);
	void OnGetBracket(const struct FTourBracket& Bracket);
	class UAsyncTask* CheckIn(const struct FUniqueNetId& PlayerID, const struct FCustomMatchTeamSettings& Settings, TArray<struct FUniqueNetId> Team, int TeamID, const struct FScriptDelegate& Callback);
	void OnCheckIn(const struct FUniqueNetId& PlayerID, const struct FTourTeam& Team);
	class UAsyncTask* RegisterTournament(const struct FUniqueNetId& PlayerID, const struct FTourPrivateCredentials& Credentials, const struct FScriptDelegate& Callback);
	class UAsyncTask* CreateTournament(const struct FUniqueNetId& PlayerID, const struct FTourCreateSettings& Settings, const struct FScriptDelegate& Callback);
	void OnTournamentResult(class UTourSettings_TA* NewTournament);
};


// Class TAGame.TourRegistration_TA
// 0x0028 (0x0088 - 0x0060)
class UTourRegistration_TA : public UObject
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0060(0x0008) (Transient)
	class UTourSubscriptions_TA*                       Subscriptions;                                            // 0x0068(0x0008) (Transient)
	struct FScriptDelegate                             __OnRegistered__Delegate;                                 // 0x0070(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0070(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourRegistration_TA");
		return ptr;
	}


	class UErrorType* CheckRegistrationError(class UTourSettings_TA* Settings);
	class UAsyncTask* Register(const struct FUniqueNetId& PlayerID, class UTourSettings_TA* Settings, const struct FTourPrivateCredentials& Credentials, const struct FScriptDelegate& Callback);
	void Init(class UOnlineGameTournaments_TA* InTournaments);
	void OnRegistered(class UTourSettings_TA* TourSettings);
};


// Class TAGame.TourCheckIn_TA
// 0x0008 (0x0068 - 0x0060)
class UTourCheckIn_TA : public UObject
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0060(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourCheckIn_TA");
		return ptr;
	}


	class UErrorType* STATIC_GetCheckInError(const struct FUniqueNetId& PlayerID, class UTourSettings_TA* InSettings, int TeamID);
	void HandleCheckIn(const struct FUniqueNetId& PlayerID, const struct FTourTeam& Team);
	class UAsyncTask* CheckIn(const struct FUniqueNetId& PlayerID, class UTourSettings_TA* Settings, const struct FCustomMatchTeamSettings& TeamSettings, int TeamID);
	void Init(class UOnlineGameTournaments_TA* InTournaments);
};


// Class TAGame.TourPartyCheckIn_TA
// 0x0020 (0x0080 - 0x0060)
class UTourPartyCheckIn_TA : public UObject
{
public:
	struct FString                                     MemberCheckInError;                                       // 0x0060(0x0010) (Const, Localized, NeedCtorLink)
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0070(0x0008) (Transient)
	class UOnlineGameParty_X*                          Party;                                                    // 0x0078(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourPartyCheckIn_TA");
		return ptr;
	}


	void __TourPartyCheckIn_TA__HandleLeaderCheckIn_493E17C040FCD5B1BD247AA050CF45B1(class UTourSettings_TA* TourSettings, class UError* Error);
	void HandlePreCheckInMessage(class UOnlineMessageComponent_X* Component, class UPartyMessage_TourPreCheckIn_TA* Message);
	void HandleMemberCheckInError(const struct FUniqueNetId& PartyMemberID, class UError* Error);
	void HandleMemberCheckInErrorMessage(class UOnlineMessageComponent_X* Component, class UPartyMessage_TourCheckInError_TA* Message);
	void HandleError(class UError* Error);
	void TournamentCheckIn(class UPartyMessage_TourCheckIn_TA* Message, class UTourPartyCheckInTransaction_TA* Transaction);
	void HandleLeaderCheckIn(class UOnlineMessageComponent_X* Component, class UPartyMessage_TourCheckIn_TA* Message);
	void BroadcastTournamentCheckIn();
	void Init(class UOnlineGameTournaments_TA* InTournaments, class UOnlineGameParty_X* InParty);
};


// Class TAGame.TourPartyLeaderLeave_TA
// 0x0010 (0x0070 - 0x0060)
class UTourPartyLeaderLeave_TA : public UObject
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0060(0x0008) (Transient)
	class UOnlineGameParty_X*                          Party;                                                    // 0x0068(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourPartyLeaderLeave_TA");
		return ptr;
	}


	void __TourPartyLeaderLeave_TA__HandleLeaveTournamentMessage_566C2B0442EE19B0B02EF6ABCE50D7D0(class UGFxModal_X* Modal);
	class UGFxShell_TA* GetGFxShell();
	void HandleLeaveTournamentConfirm(class UGFxModal_X* Modal);
	void HandleLeaveTournamentMessage(class UOnlineMessageComponent_X* Component, class UPartyMessage_TourLeaveTournament_TA* Message);
	void HandleUnsubscribe(class UTourSubscriptions_TA* Subscriptions);
	void Init(class UOnlineGameTournaments_TA* InTournaments, class UOnlineGameParty_X* InParty);
};


// Class TAGame.TourStatus_TA
// 0x0018 (0x0078 - 0x0060)
class UTourStatus_TA : public UObject
{
public:
	TArray<struct FTourStatus>                         Statuses;                                                 // 0x0060(0x0010) (NeedCtorLink, DataBinding)
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0070(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourStatus_TA");
		return ptr;
	}


	void __TourStatus_TA__Init_89BF4F42418BDBE9ED5347A1FB120C31(class UOnlineGameTourMatchmaking_TA* _, class UError* Error);
	void __TourStatus_TA__Init_45B677104021A9C96E6C93B0961792B2();
	void __TourStatus_TA__HandleSubscriptions_1093552A4CF2F59A1DA11BB722CFAAE6(class UTourSettings_TA* T);
	void __TourStatus_TA__HandleTourActivated_8E5D697A4658B7C3A1153783F15DD6A5(class UTourEvent_TA* InTourEvent);
	void __TourStatus_TA__HandleTourActivated_44B6BEEC4C51D0750BDF3E9582BA4EC8(class UTourEventMatch_TA* EventMatch, class UError* Error);
	void HandleError(class UError* Error);
	void HandleTourActivated(class UOnlineGameTournaments_TA* Tournament, class UTourEvent_TA* TourEvent);
	void UpdateStatus(TEnumAsByte<ETourStatus> Status);
	int GetStatusIndex();
	void HandleBracketError(class UError* Error);
	void HandleSubscriptions(class UTourList_TA* TourList);
	TEnumAsByte<ETourStatus> GetStatus();
	void Init(class UOnlineGameTourMatchmaking_TA* TourMatchmaking);
};


// Class TAGame.TourSettingsCache_TA
// 0x0010 (0x0070 - 0x0060)
class UTourSettingsCache_TA : public UObject
{
public:
	TArray<class UTourList_TA*>                        TourLists;                                                // 0x0060(0x0010) (ExportObject, Component, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourSettingsCache_TA");
		return ptr;
	}


	class UTourSettings_TA* STATIC_StaticFind();
	class UTourSettings_TA* Find();
	void Remove(class UTourList_TA* List);
	void Add(class UTourList_TA* List);
};


// Class TAGame.TourCheckInError_TA
// 0x0090 (0x00F0 - 0x0060)
class UTourCheckInError_TA : public UObject
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0060(0x0008) (Edit)
	class UOnlineGameParty_X*                          Party;                                                    // 0x0068(0x0008) (Edit)
	struct FUniqueNetId                                PlayerID;                                                 // 0x0070(0x0038)
	struct FString                                     MemberPreCheckInError;                                    // 0x00A8(0x0010) (Const, Localized, NeedCtorLink)
	class UTourSettings_TA*                            Settings;                                                 // 0x00B8(0x0008) (Transient)
	struct FString                                     PartyError;                                               // 0x00C0(0x0010) (Transient, NeedCtorLink)
	class UErrorType*                                  PartyErrorType;                                           // 0x00D0(0x0008) (Transient)
	struct FString                                     Error;                                                    // 0x00D8(0x0010) (Transient, NeedCtorLink)
	class UErrorType*                                  ErrorType;                                                // 0x00E8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourCheckInError_TA");
		return ptr;
	}


	void HandleMemberPreCheckInErrorMessage(class UOnlineMessageComponent_X* Component, class UPartyMessage_TourPreCheckInError_TA* Message);
	void ClearPartyError();
	void HandlePartyDestroyed(class UOnlineGameParty_X* PartyObject);
	void UpdatePartyError();
	void UpdateError();
	void EndErrorCheck();
	void BeginErrorCheck(const struct FUniqueNetId& InPlayerId);
	void UpdateErrorData(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.TourRewards_TA
// 0x0038 (0x0098 - 0x0060)
class UTourRewards_TA : public UObject
{
public:
	TArray<struct FRewardsResult>                      Results;                                                  // 0x0060(0x0010) (NeedCtorLink)
	TArray<struct FRewardsRequest>                     Requests;                                                 // 0x0070(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __OnGetRewards__Delegate;                                 // 0x0080(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourRewards_TA");
		return ptr;
	}


	void HandleGetRewards(TArray<struct FTourReward> Rewards);
	class UAsyncTask* Request(class UTourService_TA* Service, const struct FUniqueNetId& PlayerID, const struct FScriptDelegate& Callback);
	void OnGetRewards(TArray<struct FTourReward> Rewards);
};


// Class TAGame.TourCredentials_TA
// 0x0010 (0x0070 - 0x0060)
class UTourCredentials_TA : public UObject
{
public:
	TArray<struct FCredentialItem>                     CredentialsMap;                                           // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourCredentials_TA");
		return ptr;
	}


	bool Get(struct FTourPrivateCredentials* Credentials);
	void Set(const struct FTourPrivateCredentials& Credentials);
};


// Class TAGame.TourMatchServerBrowser_TA
// 0x0020 (0x0080 - 0x0060)
class UTourMatchServerBrowser_TA : public UObject
{
public:
	class UAsyncTask*                                  GetMatchTask;                                             // 0x0060(0x0008)
	struct FScriptDelegate                             __OnGetMatchServer__Delegate;                             // 0x0068(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourMatchServerBrowser_TA");
		return ptr;
	}


	void __TourMatchServerBrowser_TA__GetMatchServer_D75D88674EEE7D0FFF0EAA9EB5EE6A62(class UError* _);
	class UAsyncTask* GetMatchServer(const struct FUniqueNetId& PlayerID, int MatchID, const struct FScriptDelegate& Callback);
	void OnGetMatchServer(const struct FServerReservationData& Reservation);
};


// Class TAGame.AutoTour_TA
// 0x00D8 (0x0138 - 0x0060)
class UAutoTour_TA : public UObject
{
public:
	TArray<struct FScheduledTournament>                Schedules;                                                // 0x0060(0x0010) (NeedCtorLink)
	TArray<struct FTournamentWeek>                     CycleResults;                                             // 0x0070(0x0010) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.AutoTour_TA.IneligibleScheduleID
	unsigned char                                      UnknownData01[0x8];                                       // 0x0088(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.AutoTour_TA.CycleID
	unsigned char                                      UnknownData02[0x8];                                       // 0x0090(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.AutoTour_TA.CycleEndTime
	unsigned char                                      UnknownData03[0x8];                                       // 0x0098(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.AutoTour_TA.WeekEndTime
	TArray<struct FShopCurrencyInfo>                   WeeklyCurrencies;                                         // 0x00A0(0x0010) (NeedCtorLink, DataBinding)
	TArray<int>                                        MaxTierScores;                                            // 0x00B0(0x0010) (Transient, NeedCtorLink)
	float                                              DataRefreshTime;                                          // 0x00C0(0x0004)
	float                                              LastSyncTime;                                             // 0x00C4(0x0004)
	struct FString                                     RegionID;                                                 // 0x00C8(0x0010) (Transient, NeedCtorLink)
	class UOnlineGame_X*                               OnlineGame;                                               // 0x00D8(0x0008)
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x00E0(0x0008) (Edit)
	class UTourList_TA*                                TourList;                                                 // 0x00E8(0x0008) (Edit, ExportObject, Component, EditInline)
	struct FScriptDelegate                             __Schedules__ChangeNotify;                                // 0x00F0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00F0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __CycleResults__ChangeNotify;                             // 0x0108(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0108(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __IneligibleScheduleID__ChangeNotify;                     // 0x0120(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0120(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AutoTour_TA");
		return ptr;
	}


	void __AutoTour_TA__Construct_D8F560FC47565B9BBDA10C9DCA9552F2(class UTourSubscriptions_TA* S, class UError* E);
	void __AutoTour_TA__SyncSchedule_094DDDAB463E580A601F5082039CE1CD(class URPC_AutoTour_GetSchedule_TA* RPC);
	TArray<class UTourSettings_TA*> __AutoTour_TA__SetSchedules_907A2943422D25FC6B6DB7A3D4F9B53C(const struct FScheduledTournament& S);
	bool __AutoTour_TA__UpdateIneligibleTournament_0E5001184BDD74C2B8E2BA88AE02A501(class UTourSettings_TA* T);
	void __IneligibleScheduleID__ChangeNotifyFunc();
	void __CycleResults__ChangeNotifyFunc();
	void __Schedules__ChangeNotifyFunc();
	void OnReceivedBracket(struct FTourBracket* Bracket);
	void UpdateIneligibleTournament(TArray<class UTourSettings_TA*>* ArrayResultLocal_635FDB2A439E948E619AA5B88BC66993, TArray<class UTourSettings_TA*>* FilterLocal_D916CBA2415F3ACE01D44B99427F14AD);
	void HandleTourEventDeactivated(class UTourEvent_TA* Event, class UTournamentCompletedEvent_TA** ObjectInitializer_A3BBD1704400DCC324BC0A8A96D8208B);
	void HandleTourActivated(class UOnlineGameTournaments_TA* Tournament, class UTourEvent_TA* Event);
	void HandleTourFound(class UPsyNetService_AutoTourFound_TA* Service);
	void SetWeeksResults(int InWeekIndex, TArray<struct FTournamentResult>* NewWeeksResults);
	void HandleCycleSynced(class URPC_AutoTour_GetCycleData_TA* RPC);
	void ClearScheduleRefreshTimer();
	void SyncAllTournamentData();
	void RefreshTournamentData(bool bForce);
	void SetSchedules(TArray<struct FScheduledTournament>* InSchedules, TArray<class UTourSettings_TA*>* MapManyLocal_4637CCC6481CEE521A6A98B23B66CEF0);
	void SyncCycleData();
	void SyncSchedule();
	void HandleRegionsPinged(class UOnlineGameRegions_X* RegionsObj);
	void HandlePsyNetLogin();
	void Construct();
};


// Class TAGame.RPC_ProductsClearExpired_TA
// 0x0010 (0x0110 - 0x0100)
class URPC_ProductsClearExpired_TA : public URPC_X
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0100(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_ProductsClearExpired_TA.InstanceIDs

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsClearExpired_TA");
		return ptr;
	}


	class URPC_ProductsClearExpired_TA* SetInstanceIDs();
};


// Class TAGame.ProductExpirationNotification_TA
// 0x0030 (0x0138 - 0x0108)
class UProductExpirationNotification_TA : public UNotification_TA
{
public:
	struct FProductHashID                              HashID;                                                   // 0x0108(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	struct FString                                     ExpiredTitle;                                             // 0x0110(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     ExpiredBody;                                              // 0x0120(0x0010) (Const, Localized, NeedCtorLink)
	class UOnlineProduct_TA*                           OnlineProduct;                                            // 0x0130(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductExpirationNotification_TA");
		return ptr;
	}


	class UProductExpirationNotification_TA* SetOnlineProduct(class UOnlineProduct_TA* InProduct);
};


// Class TAGame.__OnlineProductExpirationHelper_TA__HandleNotificationSaveAdded_38DBFE7B4AAF4A8FC4914FA6721C9AEA
// 0x0008 (0x0068 - 0x0060)
class U__OnlineProductExpirationHelper_TA__HandleNotificationSaveAdded_38DBFE7B4AAF4A8FC4914FA6721C9AEA : public UObject
{
public:
	class UOnlineProduct_TA*                           OnlineProduct;                                            // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineProductExpirationHelper_TA__HandleNotificationSaveAdded_38DBFE7B4AAF4A8FC4914FA6721C9AEA");
		return ptr;
	}


	bool __OnlineProductExpirationHelper_TA__HandleNotificationSaveAdded_38DBFE7B4AAF4A8FC4914FA6721C9AEA(class UNotification_TA* N);
};


// Class TAGame.__OnlineStorageSyncManager_TA__SyncCloudData_1F63CD21428BA5117D53CF932C666F30
// 0x0008 (0x0068 - 0x0060)
class U__OnlineStorageSyncManager_TA__SyncCloudData_1F63CD21428BA5117D53CF932C666F30 : public UObject
{
public:
	class URPC_X*                                      ProductsPlayerGet;                                        // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineStorageSyncManager_TA__SyncCloudData_1F63CD21428BA5117D53CF932C666F30");
		return ptr;
	}


	void __OnlineStorageSyncManager_TA__SyncCloudData_1F63CD21428BA5117D53CF932C666F30();
};


// Class TAGame.__PlaylistSkillDataSave_TA__Reconcile_075B63CF458D7A4187F2568D057E4937
// 0x0008 (0x0068 - 0x0060)
class U__PlaylistSkillDataSave_TA__Reconcile_075B63CF458D7A4187F2568D057E4937 : public UObject
{
public:
	class UPlaylistSkillDataSave_TA*                   Other;                                                    // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__PlaylistSkillDataSave_TA__Reconcile_075B63CF458D7A4187F2568D057E4937");
		return ptr;
	}


	bool __PlaylistSkillDataSave_TA__Reconcile_075B63CF458D7A4187F2568D057E4937(const struct FPlaylistSkillData& S);
};


// Class TAGame.__ProductsHashSave_TA__UpdateInstanceIDs_49E496234957975504D4DB8A47D842D0
// 0x0010 (0x0070 - 0x0060)
class U__ProductsHashSave_TA__UpdateInstanceIDs_49E496234957975504D4DB8A47D842D0 : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.__ProductsHashSave_TA__UpdateInstanceIDs_49E496234957975504D4DB8A47D842D0.Instances

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductsHashSave_TA__UpdateInstanceIDs_49E496234957975504D4DB8A47D842D0");
		return ptr;
	}


	bool __ProductsHashSave_TA__UpdateInstanceIDs_49E496234957975504D4DB8A47D842D0();
};


// Class TAGame.__ProductsOfflineSave_TA__CacheOfflineProducts_254960D247B489D82165889784D802D9
// 0x0008 (0x0068 - 0x0060)
class U__ProductsOfflineSave_TA__CacheOfflineProducts_254960D247B489D82165889784D802D9 : public UObject
{
public:
	class UCachedUnlockedProducts_TA*                  OfflineProducts;                                          // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductsOfflineSave_TA__CacheOfflineProducts_254960D247B489D82165889784D802D9");
		return ptr;
	}


	void __ProductsOfflineSave_TA__CacheOfflineProducts_254960D247B489D82165889784D802D9(int P);
};


// Class TAGame.ProductAttribute_RocketPassPremium_TA
// 0x0000 (0x0080 - 0x0080)
class UProductAttribute_RocketPassPremium_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_RocketPassPremium_TA");
		return ptr;
	}

};


// Class TAGame.RPC_RocketPassPurchaseTiers_TA
// 0x0078 (0x0178 - 0x0100)
class URPC_RocketPassPurchaseTiers_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0138(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_RocketPassPurchaseTiers_TA.InstanceIDs
	int                                                PurchasableID;                                            // 0x0148(0x0004)
	int                                                Pips;                                                     // 0x014C(0x0004) (Transient)
	int                                                TierLevel;                                                // 0x0150(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	TArray<struct FRocketPassUnlock>                   Unlocks;                                                  // 0x0158(0x0010) (Transient, NeedCtorLink)
	TArray<struct FCurrency>                           WalletCurrencies;                                         // 0x0168(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_RocketPassPurchaseTiers_TA");
		return ptr;
	}


	class URPC_RocketPassPurchaseTiers_TA* SetPurchasable(int InPurchasableID);
	class URPC_RocketPassPurchaseTiers_TA* SetKeys();
	class URPC_RocketPassPurchaseTiers_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_RocketPassPurchasePremium_TA
// 0x0078 (0x0178 - 0x0100)
class URPC_RocketPassPurchasePremium_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0138(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_RocketPassPurchasePremium_TA.InstanceIDs
	int                                                PurchasableID;                                            // 0x0148(0x0004)
	unsigned long                                      bOwnsPremium : 1;                                         // 0x014C(0x0004) (Transient)
	int                                                TierLevel;                                                // 0x0150(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	TArray<struct FRocketPassUnlock>                   Unlocks;                                                  // 0x0158(0x0010) (Transient, NeedCtorLink)
	TArray<struct FCurrency>                           WalletCurrencies;                                         // 0x0168(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_RocketPassPurchasePremium_TA");
		return ptr;
	}


	class URPC_RocketPassPurchasePremium_TA* SetPurchasable(int InPurchasableID);
	class URPC_RocketPassPurchasePremium_TA* SetKeys();
	class URPC_RocketPassPurchasePremium_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_RocketPassGetPlayerPrestigeRewards_TA
// 0x0050 (0x0150 - 0x0100)
class URPC_RocketPassGetPlayerPrestigeRewards_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	int                                                RocketPassID;                                             // 0x0138(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x013C(0x0004) MISSED OFFSET
	TArray<struct FRocketPassRewardData>               PrestigeRewards;                                          // 0x0140(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_RocketPassGetPlayerPrestigeRewards_TA");
		return ptr;
	}


	class URPC_RocketPassGetPlayerPrestigeRewards_TA* SetRocketPassID(int InRocketPassID);
	class URPC_RocketPassGetPlayerPrestigeRewards_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_RocketPassGetRewardContent_TA
// 0x0028 (0x0128 - 0x0100)
class URPC_RocketPassGetRewardContent_TA : public URPC_X
{
public:
	int                                                RocketPassID;                                             // 0x0100(0x0004)
	int                                                TierCap;                                                  // 0x0104(0x0004)
	TArray<struct FRocketPassRewardData>               FreeRewards;                                              // 0x0108(0x0010) (Transient, NeedCtorLink)
	TArray<struct FRocketPassRewardData>               PremiumRewards;                                           // 0x0118(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_RocketPassGetRewardContent_TA");
		return ptr;
	}


	class URPC_RocketPassGetRewardContent_TA* SetRocketPassID(int InRocketPassID);
};


// Class TAGame.RocketPassBundleContainer_TA
// 0x0048 (0x00B8 - 0x0070)
class URocketPassBundleContainer_TA : public UComponent
{
public:
	struct FName                                       RocketPassMenuName;                                       // 0x0070(0x0008) (Edit, Const)
	TArray<struct FRocketPassBundleInfo>               Premium;                                                  // 0x0078(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FRocketPassBundleInfo>               Tier;                                                     // 0x0088(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     RocketPassPackageName;                                    // 0x0098(0x0010) (Const, NeedCtorLink)
	struct FString                                     TierBundleFileNameBase;                                   // 0x00A8(0x0010) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RocketPassBundleContainer_TA");
		return ptr;
	}


	class UGFxData_MenuStack_TA* GetMenuStack();
	void HandleImageDownloaded(const struct FOnlineImageDownload& DownloadResult);
	void UpdateBundleImages(class UOnlineImageDownloaderWeb* ImageDownloader, const struct FString& DefaultTextureNameBase, TArray<struct FRocketPassBundleInfo>* Bundles, TArray<struct FString>* RequiredURLs);
	void DownloadBundleImages();
	void HandleTopMenuChanged(const struct FName& PrevMenu, const struct FName& NewMenu);
	void SetBundleInfo(const struct FRocketPassStore& RPInfo, class URocketPass_TA* InRocketPass);
};


// Class TAGame.RPC_RocketPassGetPlayerInfo_TA
// 0x0070 (0x0170 - 0x0100)
class URPC_RocketPassGetPlayerInfo_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	int                                                RocketPassID;                                             // 0x0138(0x0004)
	struct FRocketPassInfo                             RocketPassInfo;                                           // 0x013C(0x0014)
	struct FRocketPassStore                            RocketPassStore;                                          // 0x0150(0x0020) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_RocketPassGetPlayerInfo_TA");
		return ptr;
	}


	class URPC_RocketPassGetPlayerInfo_TA* SetRocketPassID(int InRocketPassID);
	class URPC_RocketPassGetPlayerInfo_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.__SaveDataVersions_TA__UpdateFavoriteHashIDs_ACA6026C45504E96639B4DB7C995D64A
// 0x0004 (0x0064 - 0x0060)
class U__SaveDataVersions_TA__UpdateFavoriteHashIDs_ACA6026C45504E96639B4DB7C995D64A : public UObject
{
public:
	int                                                Id;                                                       // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__SaveDataVersions_TA__UpdateFavoriteHashIDs_ACA6026C45504E96639B4DB7C995D64A");
		return ptr;
	}


	bool __SaveDataVersions_TA__UpdateFavoriteHashIDs_ACA6026C45504E96639B4DB7C995D64A(class UOnlineProduct_TA* P);
};


// Class TAGame.TourEventMatchComplete_TA
// 0x0020 (0x0080 - 0x0060)
class UTourEventMatchComplete_TA : public UObject
{
public:
	class AGameEvent_Soccar_TA*                        GameEvent;                                                // 0x0060(0x0008) (Transient)
	struct FScriptDelegate                             __EventMatchComplete__Delegate;                           // 0x0068(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0068(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourEventMatchComplete_TA");
		return ptr;
	}


	void OnMatchComplete();
	void HandleGRISpawned(class AGRI_X* GRI);
	void HandleGameStateChanged(class AGameEvent_TA* G);
	void HandleGameEventRemoved(class UObject* Obj);
	void HandleGameEventAdded(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleGameDataSelected(int PlaylistId, int MutatorIndex);
	void Deactivate();
	void Construct();
	void EventMatchComplete();
};


// Class TAGame.PsyNetService_CurrencyAdded_TA
// 0x0008 (0x0098 - 0x0090)
class UPsyNetService_CurrencyAdded_TA : public UPsyNetClientService_X
{
public:
	int                                                CurrencyID;                                               // 0x0090(0x0004) (Transient)
	int                                                Amount;                                                   // 0x0094(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_CurrencyAdded_TA");
		return ptr;
	}

};


// Class TAGame.__Wallet_TA__GetCurrency_0F69AF0E4B7114BCAE05668E15F91FE6
// 0x0004 (0x0064 - 0x0060)
class U__Wallet_TA__GetCurrency_0F69AF0E4B7114BCAE05668E15F91FE6 : public UObject
{
public:
	int                                                InCurrencyID;                                             // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__Wallet_TA__GetCurrency_0F69AF0E4B7114BCAE05668E15F91FE6");
		return ptr;
	}


	bool __Wallet_TA__GetCurrency_0F69AF0E4B7114BCAE05668E15F91FE6(const struct FCurrency& C);
};


// Class TAGame.RPC_GetWallet_TA
// 0x0048 (0x0148 - 0x0100)
class URPC_GetWallet_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	TArray<struct FCurrency>                           Currencies;                                               // 0x0138(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetWallet_TA");
		return ptr;
	}


	class URPC_GetWallet_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.CameraStateSelector_TA
// 0x0018 (0x0088 - 0x0070)
class UCameraStateSelector_TA : public UComponent
{
public:
	TArray<class UCameraState_X*>                      States;                                                   // 0x0070(0x0010) (Edit, NeedCtorLink)
	class ACamera_X*                                   Camera;                                                   // 0x0080(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraStateSelector_TA");
		return ptr;
	}


	class UCameraState_X* SelectState(class UCameraState_X* InCurrentState);
	void SetActive();
	void Init(class ACamera_X* InCamera);
};


// Class TAGame.GFxData_ChallengeAvaliableNotification_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_ChallengeAvaliableNotification_TA : public UGFxData_Notification_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ChallengeAvaliableNotification_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_ChallengeCompleteNotification_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_ChallengeCompleteNotification_TA : public UGFxData_Notification_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ChallengeCompleteNotification_TA");
		return ptr;
	}

};


// Class TAGame.PsyNetService_ChallengeDefault_TA
// 0x0030 (0x00C0 - 0x0090)
class UPsyNetService_ChallengeDefault_TA : public UPsyNetClientService_X
{
public:
	TArray<class UChallengeFolder_TA*>                 Folders;                                                  // 0x0090(0x0010) (NeedCtorLink)
	TArray<class UChallengeDefault_TA*>                Challenges;                                               // 0x00A0(0x0010) (NeedCtorLink)
	TArray<int>                                        ChallengeIDsToRemove;                                     // 0x00B0(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_ChallengeDefault_TA");
		return ptr;
	}

};


// Class TAGame.RPC_GetChallengeDefault_TA
// 0x0020 (0x0120 - 0x0100)
class URPC_GetChallengeDefault_TA : public URPC_X
{
public:
	TArray<class UChallengeDefault_TA*>                Challenges;                                               // 0x0100(0x0010) (NeedCtorLink)
	TArray<class UChallengeFolder_TA*>                 Folders;                                                  // 0x0110(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetChallengeDefault_TA");
		return ptr;
	}

};


// Class TAGame.__ChallengeReward_TA__Init_DA49F9B74D2A16601E1D64B7717FAD00
// 0x0018 (0x0078 - 0x0060)
class U__ChallengeReward_TA__Init_DA49F9B74D2A16601E1D64B7717FAD00 : public UObject
{
public:
	TArray<int>                                        Ids;                                                      // 0x0060(0x0010) (NeedCtorLink)
	class UListenObject_TA*                            ListenObj;                                                // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ChallengeReward_TA__Init_DA49F9B74D2A16601E1D64B7717FAD00");
		return ptr;
	}


	void __ChallengeReward_TA__Init_A3115AB7432A1B28A05C798213883EBE(class UChallengeCurrency_TA* C);
	void __ChallengeReward_TA__Init_DA49F9B74D2A16601E1D64B7717FAD00(const struct FOnlineProductData& P);
};


// Class TAGame.ChallengeCurrency_TA
// 0x0008 (0x0088 - 0x0080)
class UChallengeCurrency_TA : public UListenObject_TA
{
public:
	int                                                CurrencyID;                                               // 0x0080(0x0004) (DataBinding)
	int                                                Amount;                                                   // 0x0084(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChallengeCurrency_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_FaceItMatchNotification_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_FaceItMatchNotification_TA : public UGFxData_Notification_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_FaceItMatchNotification_TA");
		return ptr;
	}

};


// Class TAGame.__GameTags_TA__ConvertToGameTags_89A617B0494D2E456062D38D26FFEDE6
// 0x0008 (0x0068 - 0x0060)
class U__GameTags_TA__ConvertToGameTags_89A617B0494D2E456062D38D26FFEDE6 : public UObject
{
public:
	class UObject*                                     InOuter;                                                  // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameTags_TA__ConvertToGameTags_89A617B0494D2E456062D38D26FFEDE6");
		return ptr;
	}


	class UGameTags_TA* __GameTags_TA__ConvertToGameTags_89A617B0494D2E456062D38D26FFEDE6(class UGameTags_TA* G);
};


// Class TAGame.GFxData_TourMatchmaking_TA
// 0x0018 (0x00B0 - 0x0098)
class UGFxData_TourMatchmaking_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineGameTourMatchmaking_TA*               TourMatchmaking;                                          // 0x0098(0x0008) (Edit)
	class UOnlineGameVersion_X*                        GameVersion;                                              // 0x00A0(0x0008) (Edit)
	class UGFxData_OnlineMatchStatus_TA*               SearchStatusData;                                         // 0x00A8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourMatchmaking_TA");
		return ptr;
	}


	void HandleMatchmakingError(const struct FString& NewStatus);
	void HandleFindGameStateChanged(const struct FName& NewState);
	void OnShellSet();
};


// Class TAGame.ProductStat_MVPs_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_MVPs_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_MVPs_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductAttribute_ShopItem_TA
// 0x0008 (0x0088 - 0x0080)
class UProductAttribute_ShopItem_TA : public UProductAttribute_TA
{
public:
	class UProductAssetReference_TA*                   ShopItemReference;                                        // 0x0080(0x0008) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_ShopItem_TA");
		return ptr;
	}


	bool HasLoadedAllAdditionalReferences(class ULoadingProduct_TA* ProductData);
	void LoadAdditionalAssets(const struct FScriptDelegate& Callback);
	bool ShouldLoadAdditionalAssets();
};


// Class TAGame.ProductAsset_ShopItem_TA
// 0x0010 (0x00F0 - 0x00E0)
class UProductAsset_ShopItem_TA : public UProductAsset_TA
{
public:
	class UTexture*                                    BackgroundImage;                                          // 0x00E0(0x0008) (Edit)
	class UTexture*                                    ItemLogo;                                                 // 0x00E8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_ShopItem_TA");
		return ptr;
	}

};


// Class TAGame.ProductStat_Baskets_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_Baskets_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Baskets_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductAttribute_SwapMICParameterValues_TA
// 0x0010 (0x0090 - 0x0080)
class UProductAttribute_SwapMICParameterValues_TA : public UProductAttribute_TA
{
public:
	TArray<struct FMICSwapParameters>                  Parameters;                                               // 0x0080(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_SwapMICParameterValues_TA");
		return ptr;
	}


	void SwapParameterValue(class UMaterialInstanceConstant* MICToChange, const struct FName& FirstParam, const struct FName& SecondParam, class UMeshComponent* ObjectToModify);
	void ChangeValues(class UMeshComponent* ObjectToModify);
	void ApplyToObject(class UProductAsset_TA* Asset, class UObject* Target);
};


// Class TAGame.ProductStat_EpicSaves_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_EpicSaves_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_EpicSaves_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.TourList_TA
// 0x0040 (0x00B0 - 0x0070)
class UTourList_TA : public UComponent
{
public:
	TArray<class UTourSettings_TA*>                    Tournaments;                                              // 0x0070(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __EventTournamentsChanged__Delegate;                      // 0x0080(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTournamentAdded__Delegate;                         // 0x0098(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0098(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourList_TA");
		return ptr;
	}


	void __TourList_TA__SetTournaments_3F20727143AD22A8ABE825A9AB30310F(class UTourSettings_TA* T);
	void Remove();
	void AddUnique(class UTourSettings_TA* Tournament);
	void SetTournaments(TArray<class UTourSettings_TA*>* NewTournaments);
	void EventTournamentAdded(class UTourSettings_TA* Tournament);
	void EventTournamentsChanged(class UTourList_TA* Publisher);
};


// Class TAGame.__TourStatus_TA__GetStatus_DC2A7DAD48CA47B054C5CDAE547FFD94
// 0x0008 (0x0068 - 0x0060)
class U__TourStatus_TA__GetStatus_DC2A7DAD48CA47B054C5CDAE547FFD94 : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__TourStatus_TA__GetStatus_DC2A7DAD48CA47B054C5CDAE547FFD94.TournamentID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourStatus_TA__GetStatus_DC2A7DAD48CA47B054C5CDAE547FFD94");
		return ptr;
	}


	bool __TourStatus_TA__GetStatus_DC2A7DAD48CA47B054C5CDAE547FFD94(const struct FTourStatus& S);
};


// Class TAGame.RPC_AutoTour_GetSchedule_TA
// 0x0058 (0x0158 - 0x0100)
class URPC_AutoTour_GetSchedule_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	struct FString                                     Region;                                                   // 0x0138(0x0010) (NeedCtorLink)
	TArray<struct FScheduledTournament>                Schedules;                                                // 0x0148(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_AutoTour_GetSchedule_TA");
		return ptr;
	}


	class URPC_AutoTour_GetSchedule_TA* SetRegion(const struct FString& InRegion);
	class URPC_AutoTour_GetSchedule_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.__AutoTour_TA__OnReceivedBracket_71AB199140F66498E6742FA4F9510B46
// 0x0038 (0x0098 - 0x0060)
class U__AutoTour_TA__OnReceivedBracket_71AB199140F66498E6742FA4F9510B46 : public UObject
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__AutoTour_TA__OnReceivedBracket_71AB199140F66498E6742FA4F9510B46");
		return ptr;
	}


	bool ____AutoTour_TA__OnReceivedBracket_71AB199140F66498E6742FA4F9510B46____AutoTour_TA__OnReceivedBracket_86F63B6244428E3FA19948AD2204FCF0_A2844BC44B37BEFB42CEC790F3381489(const struct FTourPlayer& P);
	bool __AutoTour_TA__OnReceivedBracket_86F63B6244428E3FA19948AD2204FCF0(const struct FTourTeam& T);
	bool __AutoTour_TA__OnReceivedBracket_71AB199140F66498E6742FA4F9510B46(const struct FTourPlayer& P);
};


// Class TAGame.TourUtils_TA
// 0x0000 (0x0060 - 0x0060)
class UTourUtils_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourUtils_TA");
		return ptr;
	}


	bool STATIC_IsFirstRound(int MatchID, int NumTeams);
	int STATIC_GetSiblingMatch(int MatchID);
	int STATIC_CalcTeamWins(int TeamID, struct FTourMatch* MatchData, TArray<struct FTourMatchGame>* FilterLocal_04CDBEF34D25908A636553B3404A89A7);
	int STATIC_NextRound(int Round);
	struct FIntPair STATIC_CalcPrevMatchIDs(int Round, int Order);
	struct FIntPair STATIC_MakeIntPair(int A, int B);
	int STATIC_CalcNextMatchID(int Round, int Order);
	int STATIC_CalcNextMatchIDByMatchID(int MatchID);
	bool STATIC_IsRoundOrderValid(int Round, int Order);
	int STATIC_GetBracketMatchCount(int NumTeams);
	int STATIC_GetTotalRoundsForTeams(int NumTeams);
	int STATIC_GetMaxRoundForTeams(int NumTeams);
	int STATIC_GetNumByes(int NumTeams);
	int STATIC_GetTeamCountAtRound(int Round);
	int STATIC_GetMatchCountForRound(int Round);
	int STATIC_Max0(int Value);
	int STATIC_CalcMatchID(int Round, int Order);
	int STATIC_CalcOrder(int MatchID);
	int STATIC_CalcRound(int MatchID);
};


// Class TAGame.__AutoTour_TA__UpdateIneligibleTournament_16125C044491AD59D4D16E8C28FEAF05
// 0x0008 (0x0068 - 0x0060)
class U__AutoTour_TA__UpdateIneligibleTournament_16125C044491AD59D4D16E8C28FEAF05 : public UObject
{
public:
	class UTourSettings_TA*                            LastAutoTournament;                                       // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__AutoTour_TA__UpdateIneligibleTournament_16125C044491AD59D4D16E8C28FEAF05");
		return ptr;
	}


	void __AutoTour_TA__UpdateIneligibleTournament_16125C044491AD59D4D16E8C28FEAF05(const struct FTourBracket& B);
};


// Class TAGame.TournamentCompletedEvent_TA
// 0x0014 (0x0074 - 0x0060)
class UTournamentCompletedEvent_TA : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TournamentCompletedEvent_TA.TourID
	unsigned char                                      UnknownData01[0x8];                                       // 0x0068(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TournamentCompletedEvent_TA.ScheduleID
	unsigned long                                      bEliminatedFirstRound : 1;                                // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TournamentCompletedEvent_TA");
		return ptr;
	}

};


// Class TAGame.PsyNetService_AutoTourFound_TA
// 0x0048 (0x00D8 - 0x0090)
class UPsyNetService_AutoTourFound_TA : public UPsyNetClientService_X
{
public:
	class UTourSettings_TA*                            Tournament;                                               // 0x0090(0x0008)
	struct FTourTeam                                   Team;                                                     // 0x0098(0x0040) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_AutoTourFound_TA");
		return ptr;
	}

};


// Class TAGame.RPC_AutoTour_GetCycleData_TA
// 0x0080 (0x0180 - 0x0100)
class URPC_AutoTour_GetCycleData_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_AutoTour_GetCycleData_TA.CycleID
	unsigned char                                      UnknownData01[0x8];                                       // 0x0140(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_AutoTour_GetCycleData_TA.CycleEndTime
	unsigned char                                      UnknownData02[0x8];                                       // 0x0148(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_AutoTour_GetCycleData_TA.WeekEndTime
	TArray<struct FShopCurrencyInfo>                   WeeklyCurrencies;                                         // 0x0150(0x0010) (Transient, NeedCtorLink)
	TArray<struct FTournamentWeek>                     Weeks;                                                    // 0x0160(0x0010) (Transient, NeedCtorLink)
	TArray<int>                                        MaxTierScores;                                            // 0x0170(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_AutoTour_GetCycleData_TA");
		return ptr;
	}


	class URPC_AutoTour_GetCycleData_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.__TourList_TA__AddUnique_1512F87745DFC216918B358211789150
// 0x0008 (0x0068 - 0x0060)
class U__TourList_TA__AddUnique_1512F87745DFC216918B358211789150 : public UObject
{
public:
	class UTourSettings_TA*                            Tournament;                                               // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourList_TA__AddUnique_1512F87745DFC216918B358211789150");
		return ptr;
	}


	bool __TourList_TA__AddUnique_1512F87745DFC216918B358211789150(class UTourSettings_TA* T);
};


// Class TAGame.EulaConfig_TA
// 0x0004 (0x007C - 0x0078)
class UEulaConfig_TA : public UOnlineConfig_X
{
public:
	unsigned long                                      bRequiresAcceptance : 1;                                  // 0x0078(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EulaConfig_TA");
		return ptr;
	}

};


// Class TAGame.BotDetectionConfig_TA
// 0x0004 (0x007C - 0x0078)
class UBotDetectionConfig_TA : public UOnlineConfig_X
{
public:
	float                                              IdleLeadTime;                                             // 0x0078(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BotDetectionConfig_TA");
		return ptr;
	}

};


// Class TAGame.__ConsecutiveMatchTracker_TA__HandleGameEnded_1C01CC0245C319D378EC0398DA15E7E8
// 0x0008 (0x0068 - 0x0060)
class U__ConsecutiveMatchTracker_TA__HandleGameEnded_1C01CC0245C319D378EC0398DA15E7E8 : public UObject
{
public:
	class AGameEvent_Soccar_TA*                        GameEvent;                                                // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ConsecutiveMatchTracker_TA__HandleGameEnded_1C01CC0245C319D378EC0398DA15E7E8");
		return ptr;
	}


	bool __ConsecutiveMatchTracker_TA__HandleGameEnded_1C01CC0245C319D378EC0398DA15E7E8(const struct FMatchData& Player);
};


// Class TAGame.CrowdSoundSettings_TA
// 0x0200 (0x0260 - 0x0060)
class UCrowdSoundSettings_TA : public UObject
{
public:
	class UDynamicValue_X*                             Tension;                                                  // 0x0060(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValue_X*                             Excitement;                                               // 0x0068(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValue_X*                             Upset;                                                    // 0x0070(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValue_X*                             Anticipation;                                             // 0x0078(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                TensionScorability;                                       // 0x0080(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                TensionOpenGoal;                                          // 0x0088(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                TensionSpeedTowardsGoal;                                  // 0x0090(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                TensionCloseToGoal;                                       // 0x0098(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                TensionDistanceFromGoal;                                  // 0x00A0(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                TensionAerial;                                            // 0x00A8(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             TensionFastBreak;                                         // 0x00B0(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                TensionTimeSinceLastGoal;                                 // 0x00B8(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                TensionScoreSeparation;                                   // 0x00C0(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                TensionTimeNearGoal;                                      // 0x00C8(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                TensionLeadChanges;                                       // 0x00D0(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             TensionGoalScored;                                        // 0x00D8(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             ExcitementGameStart;                                      // 0x00E0(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             ExcitementRoundStart;                                     // 0x00E8(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             ExcitementKickoffTouch;                                   // 0x00F0(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             ExcitementOvertimeStart;                                  // 0x00F8(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                ExcitementScorability;                                    // 0x0100(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             ExcitementFastBreak;                                      // 0x0108(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             ExcitementGoal;                                           // 0x0110(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             ExcitementAerial;                                         // 0x0118(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             ExcitementTenseClear;                                     // 0x0120(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                ExcitementTimeRemaining;                                  // 0x0128(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                ExcitementLeadChanges;                                    // 0x0130(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                ExcitementScoreSeparation;                                // 0x0138(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                ExcitementTimeSinceLastGoal;                              // 0x0140(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                Excitement0Seconds;                                       // 0x0148(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             UpsetAnyDemo;                                             // 0x0150(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             UpsetRelevantDemo;                                        // 0x0158(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             UpsetGoal;                                                // 0x0160(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                AnticipationScorability;                                  // 0x0168(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                Anticipation0Seconds;                                     // 0x0170(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierDuration_X*             AnticipationFastBreak;                                    // 0x0178(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                AnticipationOpenGoal;                                     // 0x0180(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	class UDynamicValueModifierCurve_X*                AnticipationExcitementMultiplier;                         // 0x0188(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FCrowdDefense                               DefenseChantSettings;                                     // 0x0190(0x000C) (Edit)
	float                                              OpenGoalMinDuration;                                      // 0x019C(0x0004) (Edit)
	float                                              OpenGoalMaxDistance;                                      // 0x01A0(0x0004) (Edit)
	float                                              OpenGoalMaxDefense;                                       // 0x01A4(0x0004) (Edit)
	float                                              LongTimeNearGoalDuration;                                 // 0x01A8(0x0004) (Edit)
	float                                              LongTimeNearGoalMaxDistance;                              // 0x01AC(0x0004) (Edit)
	float                                              ShotMaxDistanceToGoal;                                    // 0x01B0(0x0004) (Edit)
	float                                              ShotScorability;                                          // 0x01B4(0x0004) (Edit)
	float                                              ShotSpeedTowardsGoal;                                     // 0x01B8(0x0004) (Edit)
	float                                              SaveScorability;                                          // 0x01BC(0x0004) (Edit)
	float                                              SaveDistanceToGoal;                                       // 0x01C0(0x0004) (Edit)
	float                                              SaveHitMaxTime;                                           // 0x01C4(0x0004) (Edit)
	float                                              SaveShotMaxTime;                                          // 0x01C8(0x0004) (Edit)
	float                                              FastBreakMinDistanceToGoal;                               // 0x01CC(0x0004) (Edit)
	float                                              FastBreakMaxDistanceToGoal;                               // 0x01D0(0x0004) (Edit)
	float                                              FastBreakSpeedTowardsGoal;                                // 0x01D4(0x0004) (Edit)
	float                                              FastBreakDuration;                                        // 0x01D8(0x0004) (Edit)
	float                                              MissedShotMinScorability;                                 // 0x01DC(0x0004) (Edit)
	float                                              MissedShotMinTension;                                     // 0x01E0(0x0004) (Edit)
	float                                              MissedShotMinLastHitTime;                                 // 0x01E4(0x0004) (Edit)
	float                                              RelevantDemoMaxDistanceToBall;                            // 0x01E8(0x0004) (Edit)
	float                                              RelevantDemoMaxBallDistanceToGoal;                        // 0x01EC(0x0004) (Edit)
	float                                              AerialMinValue;                                           // 0x01F0(0x0004) (Edit)
	float                                              AerialMinDuration;                                        // 0x01F4(0x0004) (Edit)
	float                                              AerialMinCarInAirDuration;                                // 0x01F8(0x0004) (Edit)
	float                                              AerialCooldown;                                           // 0x01FC(0x0004) (Edit)
	float                                              LowEnergyMaxExcitement;                                   // 0x0200(0x0004) (Edit)
	float                                              LowEnergyMaxTension;                                      // 0x0204(0x0004) (Edit)
	float                                              ChantLowEnergyDuration;                                   // 0x0208(0x0004) (Edit)
	float                                              ChantLowEnergyRandomDuration;                             // 0x020C(0x0004) (Edit)
	float                                              KickoffTimeRemaining;                                     // 0x0210(0x0004) (Edit)
	int                                                KickoffScoreSeparation;                                   // 0x0214(0x0004) (Edit)
	float                                              TenseNearGoalMinTension;                                  // 0x0218(0x0004) (Edit)
	float                                              TenseNearGoalDuration;                                    // 0x021C(0x0004) (Edit)
	float                                              TenseNearGoalDistance;                                    // 0x0220(0x0004) (Edit)
	float                                              TenseClearDistance;                                       // 0x0224(0x0004) (Edit)
	float                                              PostGameExcitement;                                       // 0x0228(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x022C(0x0004) MISSED OFFSET
	TArray<struct FCrowdValueState>                    ExcitementStates;                                         // 0x0230(0x0010) (Edit, NeedCtorLink)
	TArray<struct FCrowdValueState>                    TensionStates;                                            // 0x0240(0x0010) (Edit, NeedCtorLink)
	TArray<struct FCrowdScoreState>                    ScoreStates;                                              // 0x0250(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CrowdSoundSettings_TA");
		return ptr;
	}

};


// Class TAGame.CrowdActorManager_TA
// 0x0018 (0x0280 - 0x0268)
class ACrowdActorManager_TA : public AActor
{
public:
	TArray<class ACrowdActor_TA*>                      CrowdActors;                                              // 0x0268(0x0010) (Transient, NeedCtorLink)
	class UCrowdSounds_TA*                             Sounds;                                                   // 0x0278(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CrowdActorManager_TA");
		return ptr;
	}


	bool __CrowdActorManager_TA__PlayCrowdSound_EB6B23B440CFC37678D1C3877178AB3A(class ACrowdActor_TA* C);
	bool __CrowdActorManager_TA__StopCrowdSound_39D18D5A428281BB47D99481DCFAF2AC(class ACrowdActor_TA* C);
	void __CrowdActorManager_TA__Destroyed_1D25C2564A6C9BA6CCB2788F4EFD8311(class ACrowdActor_TA* C);
	void Destroyed();
	void StopCrowdExcitementSound(class UAkSoundCue* Sound, class AActor* FromActor);
	void StopCrowdSound(const struct FScriptDelegate& GetSoundDelegate, TArray<class ACrowdActor_TA*>* FilterLocal_76A7A45945FD7F52CD4C6083703934CB);
	void PlayCrowdActorSound(class UAkSoundCue* Sound, class AActor* FromActor);
	void PlayCrowdSound(const struct FScriptDelegate& GetSoundDelegate, TArray<class ACrowdActor_TA*>* FilterLocal_3A86A5DE4D2B35F7659D6C96233C6D37);
	void OverrideCrowdActorSounds(class UCrowdSounds_TA* NewSounds);
	void SetCrowdSounds(class UCrowdSounds_TA* NewSounds);
	void SetCrowdActors(TArray<class ACrowdActor_TA*> Actors);
};


// Class TAGame.ProductStat_BicycleGoals_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_BicycleGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_BicycleGoals_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_Centers_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_Centers_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Centers_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_AerialGoals_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_AerialGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_AerialGoals_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_Assists_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_Assists_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Assists_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_BackwardsGoals_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_BackwardsGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_BackwardsGoals_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_Clears_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_Clears_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Clears_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_Juggles_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_Juggles_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_Juggles_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_LongGoals_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_LongGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_LongGoals_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_ShotsOnGoal_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_ShotsOnGoal_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_ShotsOnGoal_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.ProductStat_TurtleGoals_TA
// 0x0000 (0x00B0 - 0x00B0)
class UProductStat_TurtleGoals_TA : public UProductStat_SoccarEventBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductStat_TurtleGoals_TA");
		return ptr;
	}


	void OnStatEvent(class UStatEvent_TA* StatEvent);
};


// Class TAGame.__GFxData_ContainerDrops_TA__GetMatchingProductSeries_AF3613F54ED6EA63A58EB58CE47A8BB5
// 0x0018 (0x0078 - 0x0060)
class U__GFxData_ContainerDrops_TA__GetMatchingProductSeries_AF3613F54ED6EA63A58EB58CE47A8BB5 : public UObject
{
public:
	int                                                SeriesID;                                                 // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TArray<class UOnlineProduct_TA*>                   SeriesProducts;                                           // 0x0068(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_ContainerDrops_TA__GetMatchingProductSeries_AF3613F54ED6EA63A58EB58CE47A8BB5");
		return ptr;
	}


	bool __GFxData_ContainerDrops_TA__GetMatchingProductSeries_8EEF29CB4A0C9770430C09A00722D376(class UOnlineProduct_TA* Product);
	bool __GFxData_ContainerDrops_TA__GetMatchingProductSeries_159C0E504E5AD7DAAE7A8ABFF00CB506(class UOnlineProduct_TA* P);
	bool __GFxData_ContainerDrops_TA__GetMatchingProductSeries_AF3613F54ED6EA63A58EB58CE47A8BB5(class UOnlineProduct_TA* P);
};


// Class TAGame.__GFxData_ErrorModals_TA__AlertError_681DF8B8425318CFCFF0CF9C59E5D586
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_ErrorModals_TA__AlertError_681DF8B8425318CFCFF0CF9C59E5D586 : public UObject
{
public:
	class UError*                                      Error;                                                    // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_ErrorModals_TA__AlertError_681DF8B8425318CFCFF0CF9C59E5D586");
		return ptr;
	}


	bool __GFxData_ErrorModals_TA__AlertError_681DF8B8425318CFCFF0CF9C59E5D586(const struct FPendingError& PE);
};


// Class TAGame.__GFxData_MultiItemDrops_TA__DropItemGroup_EDCA7F114889FB87C71048AE779E4320
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_MultiItemDrops_TA__DropItemGroup_EDCA7F114889FB87C71048AE779E4320 : public UObject
{
public:
	class UItemDropGroup_TA*                           DropGroup;                                                // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_MultiItemDrops_TA__DropItemGroup_EDCA7F114889FB87C71048AE779E4320");
		return ptr;
	}


	void __GFxData_MultiItemDrops_TA__DropItemGroup_A6F43F524FE86A113E9C2EBE3B0478CB(int OfflineProductID);
	void __GFxData_MultiItemDrops_TA__DropItemGroup_EDCA7F114889FB87C71048AE779E4320(const struct FOnlineProductData& OnlineProduct);
};


// Class TAGame.CompleteTaskDropGroup_TA
// 0x0020 (0x00D0 - 0x00B0)
class UCompleteTaskDropGroup_TA : public UItemDropGroup_TA
{
public:
	class UTexture*                                    Icon;                                                     // 0x00B0(0x0008) (DataBinding)
	struct FString                                     Title;                                                    // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	int                                                Points;                                                   // 0x00C8(0x0004) (DataBinding)
	int                                                Pips;                                                     // 0x00CC(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CompleteTaskDropGroup_TA");
		return ptr;
	}

};


// Class TAGame.ChallengeDropGroup_TA
// 0x000C (0x00DC - 0x00D0)
class UChallengeDropGroup_TA : public UCompleteTaskDropGroup_TA
{
public:
	unsigned long                                      bPremium : 1;                                             // 0x00D0(0x0004) (DataBinding)
	int                                                TotalPips;                                                // 0x00D4(0x0004) (DataBinding)
	int                                                PreviousTotalPips;                                        // 0x00D8(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ChallengeDropGroup_TA");
		return ptr;
	}


	void InitFromChallenge(class UChallenge_TA* Challenge, struct FOnlineReward* Reward);
};


// Class TAGame.__GFxData_MultiItemDrops_TA__IsSlotInGroup_5A99AFD04F6F304302ECE5AB67F75CC6
// 0x0004 (0x0064 - 0x0060)
class U__GFxData_MultiItemDrops_TA__IsSlotInGroup_5A99AFD04F6F304302ECE5AB67F75CC6 : public UObject
{
public:
	int                                                SlotIndex;                                                // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_MultiItemDrops_TA__IsSlotInGroup_5A99AFD04F6F304302ECE5AB67F75CC6");
		return ptr;
	}


	bool __GFxData_MultiItemDrops_TA__IsSlotInGroup_5A99AFD04F6F304302ECE5AB67F75CC6(class UItemDropGroup_TA* Group);
};


// Class TAGame.__GFxData_MultiItemDrops_TA__IsProductInGroup_BBF8CA044BC645FD5F525EB4261DA39E
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_MultiItemDrops_TA__IsProductInGroup_BBF8CA044BC645FD5F525EB4261DA39E : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__GFxData_MultiItemDrops_TA__IsProductInGroup_BBF8CA044BC645FD5F525EB4261DA39E.InstanceID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_MultiItemDrops_TA__IsProductInGroup_BBF8CA044BC645FD5F525EB4261DA39E");
		return ptr;
	}


	bool ____GFxData_MultiItemDrops_TA__IsProductInGroup_BBF8CA044BC645FD5F525EB4261DA39E____GFxData_MultiItemDrops_TA__IsProductInGroup_C739BCE5463FC27C85D6C0A0598A2273_DC0542C745366C7E884F468F4A63A34B(const struct FProductDrop& Product);
	bool __GFxData_MultiItemDrops_TA__IsProductInGroup_C739BCE5463FC27C85D6C0A0598A2273(class UItemDropGroup_TA* Group);
	bool __GFxData_MultiItemDrops_TA__IsProductInGroup_D71B5DAA4CB16DC3922C62A07FD1CD22(const struct FProductDrop& Product);
	bool __GFxData_MultiItemDrops_TA__IsProductInGroup_BBF8CA044BC645FD5F525EB4261DA39E(const struct FProductDrop& Product);
};


// Class TAGame.__GFxData_MultiItemDrops_TA__GetDropsByType_CA777BD0443A141CB579B3BE340626B4
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_MultiItemDrops_TA__GetDropsByType_CA777BD0443A141CB579B3BE340626B4 : public UObject
{
public:
	struct FName                                       DropType;                                                 // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_MultiItemDrops_TA__GetDropsByType_CA777BD0443A141CB579B3BE340626B4");
		return ptr;
	}


	bool __GFxData_MultiItemDrops_TA__GetDropsByType_CA777BD0443A141CB579B3BE340626B4(class UItemDropGroup_TA* Group);
};


// Class TAGame.__GFxData_MultiItemDrops_TA__HandleChallengeRewardCollected_BD0B9E014AC8AE6FDEB67CB15A7822E9
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_MultiItemDrops_TA__HandleChallengeRewardCollected_BD0B9E014AC8AE6FDEB67CB15A7822E9 : public UObject
{
public:
	TArray<struct FCurrency>                           Currency;                                                 // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_MultiItemDrops_TA__HandleChallengeRewardCollected_BD0B9E014AC8AE6FDEB67CB15A7822E9");
		return ptr;
	}


	void __GFxData_MultiItemDrops_TA__HandleChallengeRewardCollected_BD0B9E014AC8AE6FDEB67CB15A7822E9(class UChallengeCurrency_TA* C, struct FCurrency* StructInitializer_8C4DF87844A2A02F69F4BC9C58AC1CCD);
};


// Class TAGame.__GFxData_MultiItemDrops_TA__DropRewardGroup_3B10F28543C660C367A8C49262827FE0
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_MultiItemDrops_TA__DropRewardGroup_3B10F28543C660C367A8C49262827FE0 : public UObject
{
public:
	class UCompleteTaskDropGroup_TA*                   DropGroup;                                                // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_MultiItemDrops_TA__DropRewardGroup_3B10F28543C660C367A8C49262827FE0");
		return ptr;
	}


	void __GFxData_MultiItemDrops_TA__DropRewardGroup_3B10F28543C660C367A8C49262827FE0(const struct FOnlineProductData& P);
};


// Class TAGame.__GFxData_MultiItemDrops_TA__CheckForNewOfflineProducts_6E06EF664078700C31B41F899C00E061
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_MultiItemDrops_TA__CheckForNewOfflineProducts_6E06EF664078700C31B41F899C00E061 : public UObject
{
public:
	class USaveData_TA*                                SaveData;                                                 // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_MultiItemDrops_TA__CheckForNewOfflineProducts_6E06EF664078700C31B41F899C00E061");
		return ptr;
	}


	void __GFxData_MultiItemDrops_TA__CheckForNewOfflineProducts_6E06EF664078700C31B41F899C00E061(int ProductID);
};


// Class TAGame.RewardDropGroup_TA
// 0x0020 (0x00D0 - 0x00B0)
class URewardDropGroup_TA : public UItemDropGroup_TA
{
public:
	TArray<struct FGFxRewardDrop>                      Rewards;                                                  // 0x00B0(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FGFxLevelThreshold>                  Thresholds;                                               // 0x00C0(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RewardDropGroup_TA");
		return ptr;
	}


	struct FGFxLevelThreshold __RewardDropGroup_TA__UpdateLevelThresholds_48F5D3224FD938A6F7069389C7E9E268(int Threshold, struct FGFxLevelThreshold* StructInitializer_7C9A896E4961E0FC226A26A0349210A2);
	void UpdateRewardInfo(struct U_Types_TA_FOnlineXPReward* InRewardDrop);
	void UpdateLevelThresholds(struct U_Types_TA_FOnlineXPReward* InRewardDrop, TArray<struct FGFxLevelThreshold>* MapLocal_354C7DEA462EA8C3BE7F86B48877DE97, TArray<struct FGFxLevelThreshold>* ConcatLocal_03BF2C244046AC7AFFD721BA9786A4C0, TArray<struct FGFxLevelThreshold>* DistinctLocal_793FC7C446A8502B6FF134BE6BF7D871, TArray<struct FGFxLevelThreshold>* SortLocal_703437A84BB8E5DDF9FD8091628AB7A5);
	int SortThresholdsAscending(const struct FGFxLevelThreshold& A, const struct FGFxLevelThreshold& B);
	int GetIndex(struct U_Types_TA_FOnlineXPReward* InRewardDrop, struct FGFxRewardDrop* StructInitializer_40D5314D4F95ABBB647021808B612D5B);
	void AddReward(struct U_Types_TA_FOnlineXPReward* InRewardDrop);
};


// Class TAGame.__GFxData_PartyInvite_TA__InviteToPartySilent_2DAE9D35437A01F45B5E85BDBE78D0B8
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_PartyInvite_TA__InviteToPartySilent_2DAE9D35437A01F45B5E85BDBE78D0B8 : public UObject
{
public:
	class UParties_X*                                  PsyNetInterface;                                          // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_PartyInvite_TA__InviteToPartySilent_2DAE9D35437A01F45B5E85BDBE78D0B8");
		return ptr;
	}


	void __GFxData_PartyInvite_TA__InviteToPartySilent_2DAE9D35437A01F45B5E85BDBE78D0B8(const struct FUniqueNetId& PlayerID);
};


// Class TAGame.PartyInviteNotification_TA
// 0x0048 (0x0150 - 0x0108)
class UPartyInviteNotification_TA : public UNotification_TA
{
public:
	struct FUniqueLobbyId                              LobbyId;                                                  // 0x0108(0x0010)
	struct FUniqueNetId                                PlayerID;                                                 // 0x0118(0x0038) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyInviteNotification_TA");
		return ptr;
	}


	bool ShouldShow();
	struct FUniqueNetId GetSenderID();
	class UPartyInviteNotification_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	class UPartyInviteNotification_TA* SetLobbyID(const struct FUniqueLobbyId& InLobbyId);
};


// Class TAGame.__GFxData_PartyInvite_TA__HandlePlayerInvitePending_238DAC284022F54061EA27AB998D4A19
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_PartyInvite_TA__HandlePlayerInvitePending_238DAC284022F54061EA27AB998D4A19 : public UObject
{
public:
	class UPersona_TA*                                 Persona;                                                  // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_PartyInvite_TA__HandlePlayerInvitePending_238DAC284022F54061EA27AB998D4A19");
		return ptr;
	}


	void __GFxData_PartyInvite_TA__HandlePlayerInvitePending_55A41DBE47DD4E3FBB3B7F82149FB8D7(class UNotification_TA* Notification);
	void __GFxData_PartyInvite_TA__HandlePlayerInvitePending_238DAC284022F54061EA27AB998D4A19(class UNotification_TA* Notification);
};


// Class TAGame.__GFxData_PartyInvite_TA__InviteToPartyInternal_7805710A4398EA7156C213966089FDBC
// 0x0038 (0x0098 - 0x0060)
class U__GFxData_PartyInvite_TA__InviteToPartyInternal_7805710A4398EA7156C213966089FDBC : public UObject
{
public:
	struct FUniqueNetId                                ToPlayer;                                                 // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_PartyInvite_TA__InviteToPartyInternal_7805710A4398EA7156C213966089FDBC");
		return ptr;
	}


	bool __GFxData_PartyInvite_TA__InviteToPartyInternal_7805710A4398EA7156C213966089FDBC(const struct FPartyMember& Member);
};


// Class TAGame.RPC_ProductsTradeIn_TA
// 0x0068 (0x0168 - 0x0100)
class URPC_ProductsTradeIn_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0138(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_ProductsTradeIn_TA.ProductInstances
	TArray<struct FOnlineProductData>                  Drops;                                                    // 0x0148(0x0010) (Transient, NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   Products;                                                 // 0x0158(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsTradeIn_TA");
		return ptr;
	}


	void OnComplete();
	class URPC_ProductsTradeIn_TA* SetProducts();
	class URPC_ProductsTradeIn_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.__GFxData_ProductTradeIn_TA__UpdateTradeInQuantity_3F8240BE4D39F0C94AB45F9F88B6D5CD
// 0x0004 (0x0064 - 0x0060)
class U__GFxData_ProductTradeIn_TA__UpdateTradeInQuantity_3F8240BE4D39F0C94AB45F9F88B6D5CD : public UObject
{
public:
	struct FProductHashID                              HashID;                                                   // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_ProductTradeIn_TA__UpdateTradeInQuantity_3F8240BE4D39F0C94AB45F9F88B6D5CD");
		return ptr;
	}


	bool __GFxData_ProductTradeIn_TA__UpdateTradeInQuantity_6A497F214CBA76239956B58C44BD49DA(const struct UGFxData_ProductTradeIn_TA_FTradeIn& Trade);
	bool __GFxData_ProductTradeIn_TA__UpdateTradeInQuantity_3F8240BE4D39F0C94AB45F9F88B6D5CD(const struct UGFxData_ProductTradeIn_TA_FTradeIn& Trade);
};


// Class TAGame.__GFxData_TradeLobby_TA__GetHashIDFromCurrencyID_FC8241334238CE0CEF3AEEA12E271016
// 0x0004 (0x0064 - 0x0060)
class U__GFxData_TradeLobby_TA__GetHashIDFromCurrencyID_FC8241334238CE0CEF3AEEA12E271016 : public UObject
{
public:
	int                                                CurrencyID;                                               // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_TradeLobby_TA__GetHashIDFromCurrencyID_FC8241334238CE0CEF3AEEA12E271016");
		return ptr;
	}


	bool __GFxData_TradeLobby_TA__GetHashIDFromCurrencyID_FC8241334238CE0CEF3AEEA12E271016(const struct FCurrency& C);
};


// Class TAGame.CurrencyProductSet_TA
// 0x0018 (0x0078 - 0x0060)
class UCurrencyProductSet_TA : public UObject
{
public:
	class UWallet_TA*                                  PlayerWallet;                                             // 0x0060(0x0008) (Transient)
	TArray<struct FCurrencyProduct>                    CurrencyProducts;                                         // 0x0068(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CurrencyProductSet_TA");
		return ptr;
	}


	void __CurrencyProductSet_TA__Init_695E44374A7749CFDF55569DEDE336EF(class UWallet_TA* InWallet);
	bool __CurrencyProductSet_TA__GetCurrenciesWithBalance_1AE6AE524F1B643599FDC490C757F8ED(const struct FCurrency& C);
	struct FCurrency __CurrencyProductSet_TA__GetCurrencies_553A416149DC9AF3FC8793B7C34E0B72(const struct FCurrencyProduct& C, struct FCurrency* StructInitializer_5FCF75F540EC4F7EFFF4B0B49F69FD96);
	int GetCurrencyIndexFromHashID(const struct FProductHashID& CurrencyHashID, struct FCurrency* StructInitializer_5A3950C9452E1C0D4905A787CB194002, struct FCurrencyProduct* StructInitializer_4D1D1DB34102B805D1D288849B493A07);
	void Clear();
	TArray<struct FCurrency> GetCurrencies(TArray<struct FCurrency>* MapLocal_7A284A404E7BB84EA6BC4093A2E42A2B);
	TArray<struct FCurrency> GetCurrenciesWithBalance(TArray<struct FCurrency>* ArrayResultLocal_54FC1FAF4E89FFFEDAB8929A470A5D56, TArray<struct FCurrency>* FilterLocal_86BDEA6041385842B448EFADDCA8597D);
	void SetQuantity(const struct FProductHashID& CurrencyHashID, int Quantity);
	int GetQuantity(const struct FProductHashID& CurrencyHashID);
	void Init(class UObjectProvider* Owner);
};


// Class TAGame.TradeErrors_TA
// 0x0018 (0x0098 - 0x0080)
class UTradeErrors_TA : public UErrorList
{
public:
	class UErrorType*                                  AttemptedCurrencyGifting;                                 // 0x0080(0x0008) (Const)
	class UErrorType*                                  AttemptedCurrencyExchange;                                // 0x0088(0x0008) (Const)
	class UErrorType*                                  UserTradingBanned;                                        // 0x0090(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TradeErrors_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_ProductFilter_TA
// 0x0618 (0x06B0 - 0x0098)
class UGFxData_ProductFilter_TA : public UGFxDataSingleton_X
{
public:
	TArray<class UClass*>                              UIAttributes;                                             // 0x0098(0x0010) (Edit, NeedCtorLink)
	TArray<class UProductSlot_TA*>                     AlwaysIgnoredSlots;                                       // 0x00A8(0x0010) (Edit, NeedCtorLink)
	struct FString                                     Label;                                                    // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FFilterProductSlot>                  Slots;                                                    // 0x00C8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FFilterProductQuality>               Qualities;                                                // 0x00D8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FFilterProductAttribute>             Attributes;                                               // 0x00E8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FFilterProductSeries>                SeriesIDs;                                                // 0x00F8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FFilterProductSorting>               SortingLabels;                                            // 0x0108(0x0010) (NeedCtorLink, DataBinding)
	unsigned long                                      bIgnoreEquipped : 1;                                      // 0x0118(0x0004) (DataBinding)
	unsigned long                                      bTradeInScreenSelected : 1;                               // 0x0118(0x0004) (Transient)
	unsigned long                                      bAllowDefaultProducts : 1;                                // 0x0118(0x0004) (Edit, Config)
	unsigned char                                      UnknownData00[0x4];                                       // 0x011C(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EProductFilterType>>            FilterStack;                                              // 0x0120(0x0010) (Transient, NeedCtorLink)
	struct FProductFilter                              Filters[0x4];                                             // 0x0130(0x0128) (Transient, NeedCtorLink)
	TArray<struct FString>                             ProductQualitiesToIgnore;                                 // 0x05D0(0x0010) (Edit, Config, NeedCtorLink)
	TArray<struct FString>                             ProductSortingToIgnore;                                   // 0x05E0(0x0010) (Edit, Config, NeedCtorLink)
	TArray<struct FString>                             ProductAttributesToIgnore;                                // 0x05F0(0x0010) (Edit, Config, NeedCtorLink)
	struct FString                                     DefaultSorting;                                           // 0x0600(0x0010) (Edit, Config, NeedCtorLink)
	class UGarageArchiveSlot_TA*                       GarageArchiveSlot;                                        // 0x0610(0x0008) (Transient)
	class UMtxConfig_TA*                               MtxConfig;                                                // 0x0618(0x0008) (Edit)
	struct FScriptDelegate                             __EventFilterSelected__Delegate;                          // 0x0620(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0620(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSlotSelectedChanged__Delegate;                     // 0x0638(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0638(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventAttributeSelected__Delegate;                       // 0x0650(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0650(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPostRefreshPreviewQuantity__Delegate;              // 0x0668(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0668(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPreRefreshPreviewQuantity__Delegate;               // 0x0680(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x0680(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventPreFilterProducts__Delegate;                       // 0x0698(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0698(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductFilter_TA");
		return ptr;
	}


	struct FFilterProductSlot __GFxData_ProductFilter_TA__InitProductSlots_1C0B77A14AC203D906969DB67870E3F6(class UProductSlot_TA* Slot, struct FFilterProductSlot* StructInitializer_6203371E434A1CECBBC3509E8A69D3C1);
	class UOnlineProduct_TA* __GFxData_ProductFilter_TA__GetTradableCurrencies_EE929F154046F71C0BB6BE9DC30A48BF(const struct FCurrency& C);
	bool __GFxData_ProductFilter_TA__GetTradableCurrencies_128FCA1049025134EE36C9AB605FEB13(const struct FCurrency& C);
	int __GFxData_ProductFilter_TA__FilterProducts_C403EE824E4FAAF35909FFAD66B94C21(const struct FProfileProduct& P);
	bool __GFxData_ProductFilter_TA__FilterProducts_4D41F4A24ED30E8DE1A2039E5E0201FA(const struct FProfileProduct& PP);
	void __GFxData_ProductFilter_TA__FilterProducts_207CCF714B6A862CE7CF4A9D140DA9D1(const struct FProfileProduct& P);
	bool __GFxData_ProductFilter_TA__FilterProducts_EEFA783D42890F843DA052A28DC77985(const struct FProfileProduct& P);
	int __GFxData_ProductFilter_TA__FilterProducts_2AD5AF6B4EB53139D56C35A46F52C084(const struct FProductHashID& P);
	void __GFxData_ProductFilter_TA__HandleContainersUpdated_2C1BDBD9422B99755A2D27953ACBEDDF(const struct FContainerInfo& Container);
	void RemoveNewProduct(const struct FProductHashID& HashID);
	void PopFilterType(TEnumAsByte<EProductFilterType> Type);
	void PushFilterType(TEnumAsByte<EProductFilterType> Type);
	void ClearFilterType(TEnumAsByte<EProductFilterType> Type);
	void UpdateProductSlotNewItems(TArray<class UProduct_TA*>* FilterLocal_21C8C15144017AB9335C8A960D5980E8);
	void UpdateFromType(TEnumAsByte<EProductFilterType> Type);
	void RefreshPreviewQuantity(TEnumAsByte<EProductFilterType> Type);
	void HandleBatchPreviewQuantity();
	void HandleContainersUpdated(class UGFxData_ContainerDrops_TA* ContainerDrops);
	void ApplyBlueprintFilter(TEnumAsByte<EProductFilterType> FilterType, bool bBlueprintSlotSelected);
	void ApplyCurrencyTradeRestrictionOption(TEnumAsByte<EProductFilterType> Type, struct FProductFilter* OutFilter);
	void ApplyContainerNotificationOption(struct FProductFilter* OutFilter);
	void SetStackProducts(bool bValue, TEnumAsByte<EProductFilterType> FilterType);
	void SetPackID(const struct FProductHashID& PackHashID, TEnumAsByte<EProductFilterType> FilterType);
	TEnumAsByte<EProductFilterSortType> GetSortType(TEnumAsByte<EProductFilterType> FilterType);
	void SetSortType(TEnumAsByte<EProductFilterSortType> SortType, TEnumAsByte<EProductFilterType> FilterType);
	void SetIgnoreEquipped(bool bSelected, TEnumAsByte<EProductFilterType> FilterType);
	void SetSeriesIDSelected(int Row, bool bSelected, TEnumAsByte<EProductFilterType> FilterType);
	void SetProhibitedAttributeTypeSelected(TEnumAsByte<EFilterProductAttribute> Attribute, bool bSelected, TEnumAsByte<EProductFilterType> FilterType);
	void SetExclusiveAttributeTypeSelected(TEnumAsByte<EFilterProductAttribute> Attribute, bool bSelected, TEnumAsByte<EProductFilterType> FilterType);
	struct FName STATIC_FilterProductAttributeToName(TEnumAsByte<EFilterProductAttribute> Attribute);
	void SetAttributeSelected(int Row, bool bSelected, TEnumAsByte<EProductFilterType> FilterType);
	void RemoveProhibitedQuality(TEnumAsByte<EProductQuality> Quality, TEnumAsByte<EProductFilterType> FilterType);
	void AddProhibitedQuality(TEnumAsByte<EProductQuality> Quality, TEnumAsByte<EProductFilterType> FilterType);
	void SetTradeInSelected(bool bSelected);
	void SetQualitySelected(int Row, bool bSelected, TEnumAsByte<EProductFilterType> FilterType);
	void SetSlotSelected(int Row, bool bSelected, TEnumAsByte<EProductFilterType> FilterType);
	void SetLabel(const struct FString& NewLabel, TEnumAsByte<EProductFilterType> FilterType);
	TArray<struct FProductHashID> FilterProducts(TEnumAsByte<EProductFilterType> FilterType, TArray<struct FProductHashID>* MapLocal_F1643424422EAE2A4B24E887B301C7D4, TArray<int>* MapLocal_ADD7C2F04807D3B6497D15A69546C83A, TArray<struct FProfileProduct>* ArrayResultLocal_0C6FD9AA43E11B99BB4D00AB35E4FB0B, TArray<struct FProfileProduct>* FilterLocal_B38835904C2E846A63447FAB8FCE5058, TArray<struct FProfileProduct>* FilterLocal_5B948823459FBF4F958E97A759535D52, TArray<int>* MapLocal_FD15F156410C93ECED33599FC617B2E7, TArray<class UProduct_TA*>* FilterLocal_58689AB54CAAC4656573508BBA7F28F9, TArray<class UOnlineProduct_TA*>* FilterLocal_82B2262C4CB8773ADC8070B69BC60845);
	TArray<class UOnlineProduct_TA*> GetTradableCurrencies(TArray<struct FCurrency>* FilterLocal_E15D7AE24EBB23646C6BA1A321F5C787, TArray<class UOnlineProduct_TA*>* MapLocal_2D115A4646C771C4A9EF869B12003795, TArray<class UOnlineProduct_TA*>* ArrayInitializer_16CE57334C2E00AA45F676AF8EC22A72);
	bool ShouldDisplayOfflineProducts(TEnumAsByte<EProductFilterType> FilterType);
	void UpdateProductAttributes(struct FProductFilter* InFilter, TArray<class UClass*>* ArrayInitializer_BF10E009413A36DFB3BC858B7F50AD1C);
	void UpdateProductQualities(struct FProductFilter* InFilter, TArray<TEnumAsByte<EProductQuality>>* ArrayInitializer_D4AE938543C6BA72C4722D97779AA330);
	void UpdateProductSlots(TEnumAsByte<EProductFilterType> Type, TArray<TEnumAsByte<EProductQuality>>* ArrayInitializer_CBC01C0E435DC7AFD625958DE505F4AF, TArray<class UClass*>* ArrayInitializer_1D1549AE4239A1D37B61F2BF38855E9B, TArray<int>* ArrayInitializer_EFD739B0452F388FFC2CD38F9BC6D907, TArray<int>* ArrayInitializer_E7CFB8FC42361DABB21CA6AA426F6B4D);
	int GetFilterQuantity(struct FProductFilter* InFilter);
	void InitSortTypes();
	void AddUniqueSeriesID(int SeriesID, struct FFilterProductSeries* StructInitializer_1B342B954B426E3689BA75B856B8191C);
	void InitProductSeriesIDs();
	void InitProductAttributes();
	void InitProductQualities();
	void InitProductSlots(TArray<struct FFilterProductSlot>* MapLocal_F7FE262B4F9E35C7A9F892836A9F2FDD);
	void HandleNewProductUnlocked(class USaveData_TA* Data, class UOnlineProduct_TA* OnlineProduct);
	void InitFromProfile(class ULocalPlayer_TA* LocalPlayer);
	void OnShellSet();
	class UProfile_TA* GetProfile();
	void EventPreFilterProducts(TEnumAsByte<EProductFilterType> SelectedFilter);
	void EventPreRefreshPreviewQuantity(TEnumAsByte<EProductFilterType> SelectedFilter);
	void EventPostRefreshPreviewQuantity(TEnumAsByte<EProductFilterType> SelectedFilter);
	void EventAttributeSelected(class UClass* SelectedAttributeClass, TEnumAsByte<EProductFilterType> SelectedFilter);
	void EventSlotSelectedChanged(int SlotIndex, bool bSelected, TEnumAsByte<EProductFilterType> SelectedFilter);
	void EventFilterSelected(TEnumAsByte<EProductFilterType> SelectedFilter);
};


// Class TAGame.LanServerMetaData_TA
// 0x0074 (0x00D4 - 0x0060)
class ULanServerMetaData_TA : public UObject
{
public:
	struct FUniqueNetId                                OwnerId;                                                  // 0x0060(0x0038) (DataBinding)
	struct FString                                     OwnerName;                                                // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ServerName;                                               // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	struct FName                                       ServerMap;                                                // 0x00B8(0x0008) (DataBinding)
	int                                                ServerGameMode;                                           // 0x00C0(0x0004) (DataBinding)
	unsigned long                                      bPassword : 1;                                            // 0x00C4(0x0004) (DataBinding)
	int                                                NumPlayers;                                               // 0x00C8(0x0004) (DataBinding)
	int                                                MaxPlayers;                                               // 0x00CC(0x0004) (DataBinding)
	int                                                BuildID;                                                  // 0x00D0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LanServerMetaData_TA");
		return ptr;
	}

};


// Class TAGame.__MapsConfig_TA__GetMapFrequencyForSet_299EC6F942D4CB62C48A27A96F01B18B
// 0x0008 (0x0068 - 0x0060)
class U__MapsConfig_TA__GetMapFrequencyForSet_299EC6F942D4CB62C48A27A96F01B18B : public UObject
{
public:
	struct FName                                       MapName;                                                  // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__MapsConfig_TA__GetMapFrequencyForSet_299EC6F942D4CB62C48A27A96F01B18B");
		return ptr;
	}


	bool __MapsConfig_TA__GetMapFrequencyForSet_299EC6F942D4CB62C48A27A96F01B18B(const struct FOnlineMapData& M);
};


// Class TAGame.__MapsConfig_TA__GetMapSetByName_CC1E29BF42AFEFDEA93264B881754D42
// 0x0008 (0x0068 - 0x0060)
class U__MapsConfig_TA__GetMapSetByName_CC1E29BF42AFEFDEA93264B881754D42 : public UObject
{
public:
	struct FName                                       SetName;                                                  // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__MapsConfig_TA__GetMapSetByName_CC1E29BF42AFEFDEA93264B881754D42");
		return ptr;
	}


	bool __MapsConfig_TA__GetMapSetByName_CC1E29BF42AFEFDEA93264B881754D42(const struct FOnlineMapSet& S);
};


// Class TAGame.__MatchSeries_TA__GetSeriesWinnerFromData_1C5B90A24414064F0D3F48936839F486
// 0x0004 (0x0064 - 0x0060)
class U__MatchSeries_TA__GetSeriesWinnerFromData_1C5B90A24414064F0D3F48936839F486 : public UObject
{
public:
	int                                                HalfMatchGames;                                           // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__MatchSeries_TA__GetSeriesWinnerFromData_1C5B90A24414064F0D3F48936839F486");
		return ptr;
	}


	bool __MatchSeries_TA__GetSeriesWinnerFromData_1C5B90A24414064F0D3F48936839F486(int GamesWon);
};


// Class TAGame.__MatchType_Public_TA__CanSkipPreMatchLobby_7E27B1154F0CCC8ECF828B92CAAB4F1C
// 0x0004 (0x0064 - 0x0060)
class U__MatchType_Public_TA__CanSkipPreMatchLobby_7E27B1154F0CCC8ECF828B92CAAB4F1C : public UObject
{
public:
	int                                                MaxTeamSize;                                              // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__MatchType_Public_TA__CanSkipPreMatchLobby_7E27B1154F0CCC8ECF828B92CAAB4F1C");
		return ptr;
	}


	bool __MatchType_Public_TA__CanSkipPreMatchLobby_7E27B1154F0CCC8ECF828B92CAAB4F1C(class ATeam_TA* Team);
};


// Class TAGame.IdleFeature_TA
// 0x0008 (0x0068 - 0x0060)
class UIdleFeature_TA : public UObject
{
public:
	float                                              IdleActionTime;                                           // 0x0060(0x0004) (Edit)
	float                                              IdleWarningTime;                                          // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IdleFeature_TA");
		return ptr;
	}

};


// Class TAGame.IdleKickFeature_TA
// 0x0000 (0x0068 - 0x0068)
class UIdleKickFeature_TA : public UIdleFeature_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IdleKickFeature_TA");
		return ptr;
	}

};


// Class TAGame.IdleBanFeature_TA
// 0x0000 (0x0068 - 0x0068)
class UIdleBanFeature_TA : public UIdleFeature_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IdleBanFeature_TA");
		return ptr;
	}

};


// Class TAGame.RPC_MicroTransactions_ClaimEntitlements_TA
// 0x0078 (0x0178 - 0x0100)
class URPC_MicroTransactions_ClaimEntitlements_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	struct FString                                     AuthCode;                                                 // 0x0138(0x0010) (NeedCtorLink)
	TArray<struct FOnlineProductData>                  Products;                                                 // 0x0148(0x0010) (Transient, NeedCtorLink)
	TArray<struct FCurrency>                           Currencies;                                               // 0x0158(0x0010) (Transient, NeedCtorLink)
	TArray<struct FCurrency>                           WalletCurrencies;                                         // 0x0168(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MicroTransactions_ClaimEntitlements_TA");
		return ptr;
	}


	class URPC_MicroTransactions_ClaimEntitlements_TA* SetAuthCode(const struct FString& InAuthCode);
	class URPC_MicroTransactions_ClaimEntitlements_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxData_ProductExpirationNotification_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_ProductExpirationNotification_TA : public UGFxData_Notification_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductExpirationNotification_TA");
		return ptr;
	}

};


// Class TAGame.LoadoutUtils_TA
// 0x0000 (0x0060 - 0x0060)
class ULoadoutUtils_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutUtils_TA");
		return ptr;
	}


	void STATIC_ConformRandomizedLoadoutData(class ULoadout_TA* Loadout);
	void STATIC_FixupDeprecatedTeamPaint(class ULoadout_TA* Loadout);
	void STATIC_ConvertFromOldCustomPaint(class ULoadout_TA* Loadout, class UCarColorSet_TA* OldSet, class UCarColorSet_TA* NewSet);
	void STATIC_ConvertFromOldTeamPaint(class ULoadout_TA* Loadout, class UCarColorSet_TA* OldSet, class UCarColorSet_TA* NewSet);
	void STATIC_ConvertFromOldLoadout(class ULoadout_TA* OldLoadout, class ULoadout_TA* NewLoadout, int TeamIndex);
};


// Class TAGame.__ProfileVersions_TA__CarColors2_45A8C5C943F46EF50167E4A2404D2184
// 0x0010 (0x0070 - 0x0060)
class U__ProfileVersions_TA__CarColors2_45A8C5C943F46EF50167E4A2404D2184 : public UObject
{
public:
	TArray<class ATeam_TA*>                            TeamArchetypes;                                           // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProfileVersions_TA__CarColors2_45A8C5C943F46EF50167E4A2404D2184");
		return ptr;
	}


	void __ProfileVersions_TA__CarColors2_45A8C5C943F46EF50167E4A2404D2184(class ULoadoutSet_TA* Set);
};


// Class TAGame.ServerPerformanceConfig_TA
// 0x0014 (0x008C - 0x0078)
class UServerPerformanceConfig_TA : public UOnlineConfig_X
{
public:
	float                                              InternalLowFPS;                                           // 0x0078(0x0004)
	float                                              InternalLowFPSTimeThreshold;                              // 0x007C(0x0004)
	float                                              PublicBadFPS;                                             // 0x0080(0x0004)
	float                                              PublicMediocreFPS;                                        // 0x0084(0x0004)
	float                                              FpsRollingAverageTime;                                    // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ServerPerformanceConfig_TA");
		return ptr;
	}

};


// Class TAGame.__ShopsManager_TA__Purchase_93A4634E4A8C8522157E3FA53895884C
// 0x0018 (0x0078 - 0x0060)
class U__ShopsManager_TA__Purchase_93A4634E4A8C8522157E3FA53895884C : public UObject
{
public:
	struct FScriptDelegate                             SuccessCallback;                                          // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ShopsManager_TA__Purchase_93A4634E4A8C8522157E3FA53895884C");
		return ptr;
	}


	void __ShopsManager_TA__Purchase_93A4634E4A8C8522157E3FA53895884C(TArray<struct FOnlineProductData> PurchasedProducts, TArray<struct FCurrency> PurchasedCurrencies);
};


// Class TAGame.ShopsService_TA
// 0x0000 (0x0060 - 0x0060)
class UShopsService_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ShopsService_TA");
		return ptr;
	}


	class UAsyncTask* Purchase(const struct FUniqueNetId& PlayerID, int CostID, int ShopID, int DiscountID, int Count, const struct FScriptDelegate& SuccessCallback, const struct FScriptDelegate& FailedCallback);
	class UAsyncTask* GetCrateShop(int CrateID, const struct FScriptDelegate& Callback, const struct FScriptDelegate& FailedCallback);
	class UAsyncTask* GetShopCatalogue(int ShopID, const struct FScriptDelegate& Callback, const struct FScriptDelegate& FailedCallback);
	class UAsyncTask* GetAllShops(const struct FScriptDelegate& Callback, const struct FScriptDelegate& FailedCallback);
};


// Class TAGame.SpawnPointGroup_TA
// 0x0044 (0x00A4 - 0x0060)
class USpawnPointGroup_TA : public UObject
{
public:
	TArray<struct FVector>                             SpawnOffset;                                              // 0x0060(0x0010) (Edit, NeedCtorLink)
	TArray<struct FRotator>                            SpawnFacing;                                              // 0x0070(0x0010) (Edit, NeedCtorLink)
	TArray<class AActor*>                              SpawnPoints;                                              // 0x0080(0x0010) (Transient, NeedCtorLink)
	TArray<class APRI_TA*>                             SpotPRI;                                                  // 0x0090(0x0010) (Transient, NeedCtorLink)
	int                                                MaxSpots;                                                 // 0x00A0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpawnPointGroup_TA");
		return ptr;
	}


	void RemoveFromSpawnPoints(class AController* ForPlayer);
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
	bool IsPointAvailable(int PointIdx);
	int GetPointId(class AActor* Point);
	bool TryAddToGroupAtPoint(class AController* Car, int PointIdx);
	bool TryAddToGroup(class AController* Car);
	void SetupPoints(class AGameEvent_TA* GameEvent, struct FVector* Center, struct FRotator* Orientation);
};


// Class TAGame.__SpecialEventConfig_TA__SyncImageForIndex_D92F1AFA4AC6554B1D7F87A5C94C2BA9
// 0x0004 (0x0064 - 0x0060)
class U__SpecialEventConfig_TA__SyncImageForIndex_D92F1AFA4AC6554B1D7F87A5C94C2BA9 : public UObject
{
public:
	int                                                I;                                                        // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__SpecialEventConfig_TA__SyncImageForIndex_D92F1AFA4AC6554B1D7F87A5C94C2BA9");
		return ptr;
	}


	void __SpecialEventConfig_TA__SyncImageForIndex_D92F1AFA4AC6554B1D7F87A5C94C2BA9(class UTexture2DDynamic* Texture);
};


// Class TAGame.TriggerCondition_TA
// 0x0048 (0x00A8 - 0x0060)
class UTriggerCondition_TA : public UObject
{
public:
	TArray<class UTriggerClump_TA*>                    Clumps;                                                   // 0x0060(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             Callback;                                                 // 0x0070(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0070(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	unsigned long                                      bRepeatable : 1;                                          // 0x0088(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __OnTriggersMet__Delegate;                                // 0x0090(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x008C(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TriggerCondition_TA");
		return ptr;
	}


	bool __TriggerCondition_TA__HasTriggerConditionBeenMet_D2E9CCA84B195647C8146AA1A920817A(class UTriggerClump_TA* G);
	bool __TriggerCondition_TA__HasTriggerConditionBeenMet_14E25D4042D78620DB7716B73842516F(class UStatusTrigger_X* T);
	void DebugPrint();
	bool HasTriggerConditionBeenMet();
	void Register();
	class UTriggerCondition_TA* SetCallback(const struct FScriptDelegate& InCallback);
	class UTriggerCondition_TA* SetRepeatable(bool bIsRepeatable);
	class UTriggerCondition_TA* AddTriggers(TArray<class UStatusTrigger_X*>* InTriggers);
	class UTriggerCondition_TA* AddClump(class UTriggerClump_TA** InClump);
	void OnTriggersMet(class UTriggerCondition_TA* InTriggerCondition);
};


// Class TAGame.__StatusTriggerManager_TA__RemoveTriggers_660928CA4AD0CB82D0D3AB995D99E150
// 0x0008 (0x0068 - 0x0060)
class U__StatusTriggerManager_TA__RemoveTriggers_660928CA4AD0CB82D0D3AB995D99E150 : public UObject
{
public:
	class UTriggerClump_TA*                            Clump;                                                    // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StatusTriggerManager_TA__RemoveTriggers_660928CA4AD0CB82D0D3AB995D99E150");
		return ptr;
	}


	void __StatusTriggerManager_TA__RemoveTriggers_660928CA4AD0CB82D0D3AB995D99E150(class UStatusObserver_X* O);
};


// Class TAGame.__StatusTriggerManager_TA__RegisterTriggers_A7E33F15423DD7C06FBCE5B184F27E9B
// 0x0018 (0x0078 - 0x0060)
class U__StatusTriggerManager_TA__RegisterTriggers_A7E33F15423DD7C06FBCE5B184F27E9B : public UObject
{
public:
	class UTriggerCondition_TA*                        InCondition;                                              // 0x0060(0x0008)
	TArray<class UStatusTrigger_X*>                    InTriggers;                                               // 0x0068(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StatusTriggerManager_TA__RegisterTriggers_A7E33F15423DD7C06FBCE5B184F27E9B");
		return ptr;
	}


	void __StatusTriggerManager_TA__RegisterTriggers_148670D140DC95EDAFBEC681AE00C78A(class UStatusObserver_X* O);
	void __StatusTriggerManager_TA__RegisterTriggers_A7E33F15423DD7C06FBCE5B184F27E9B();
};


// Class TAGame.__StatusTriggerManager_TA__AddTriggerCondition_84CC81BB4A124BB73F74F1A69DD8506B
// 0x0008 (0x0068 - 0x0060)
class U__StatusTriggerManager_TA__AddTriggerCondition_84CC81BB4A124BB73F74F1A69DD8506B : public UObject
{
public:
	class UTriggerCondition_TA*                        InCondition;                                              // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StatusTriggerManager_TA__AddTriggerCondition_84CC81BB4A124BB73F74F1A69DD8506B");
		return ptr;
	}


	void __StatusTriggerManager_TA__AddTriggerCondition_84CC81BB4A124BB73F74F1A69DD8506B(class UTriggerClump_TA* G);
};


// Class TAGame.__StatusTriggerManager_TA__Init_D51501BD4D5DDF76EFE9AE9557F238E5
// 0x0010 (0x0070 - 0x0060)
class U__StatusTriggerManager_TA__Init_D51501BD4D5DDF76EFE9AE9557F238E5 : public UObject
{
public:
	class ULocalPlayer_TA*                             LP;                                                       // 0x0060(0x0008)
	class UTriggerCondition_TA*                        TriggerCondition;                                         // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StatusTriggerManager_TA__Init_D51501BD4D5DDF76EFE9AE9557F238E5");
		return ptr;
	}


	void __StatusTriggerManager_TA__Init_DB6E39F54EC7627D27CD2598710983BB(class UTriggerClump_TA* G);
	void __StatusTriggerManager_TA__Init_D51501BD4D5DDF76EFE9AE9557F238E5(class UStatusObserver_X* O);
};


// Class TAGame.StatusObserver_XPLevel_TA
// 0x0008 (0x0088 - 0x0080)
class UStatusObserver_XPLevel_TA : public UStatusObserver_X
{
public:
	int                                                LastGivenXp;                                              // 0x0080(0x0004)
	int                                                LastGivenLevel;                                           // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatusObserver_XPLevel_TA");
		return ptr;
	}


	void DebugPrint();
	void UpdateLevelTrigger(class UStatusTrigger_PlayerLevel_TA* InTrigger);
	void HandleLevelUpdated(class UClientXPSave_TA* XPSave, int NewLevel, int OldLevel);
	void UpdateXPTrigger(class UStatusTrigger_PlayerXP_TA* InTrigger);
	void HandleTriggerXPUpdate(class UClientXPSave_TA* XPSave, int OldXP);
	void HandleSaveLoaded(class UClientXPSave_TA* InXPSave);
	void Init(class ULocalPlayer_X* LP);
};


// Class TAGame.StatusObserver_MenuStack_TA
// 0x0008 (0x0088 - 0x0080)
class UStatusObserver_MenuStack_TA : public UStatusObserver_X
{
public:
	struct FName                                       LastMenuVisited;                                          // 0x0080(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatusObserver_MenuStack_TA");
		return ptr;
	}


	void DebugPrint();
	void UpdateMenuTrigger(class UStatusTrigger_Menu_TA* InTrigger);
	void HandleMenuChange(const struct FName& PrevMenu, const struct FName& TopMenu);
	void Init(class ULocalPlayer_X* LP);
};


// Class TAGame.StatusObserver_Products_TA
// 0x0050 (0x00D0 - 0x0080)
class UStatusObserver_Products_TA : public UStatusObserver_X
{
public:
	TArray<int>                                        LastEquippedProducts;                                     // 0x0080(0x0010) (NeedCtorLink)
	TArray<int>                                        LastOwnedProducts;                                        // 0x0090(0x0010) (NeedCtorLink)
	int                                                LastTeamIndex;                                            // 0x00A0(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class USaveData_TA*                                SaveData;                                                 // 0x00A8(0x0008)
	class UProductsSave_TA*                            ProductsSave;                                             // 0x00B0(0x0008)
	class UProfileLoadoutSave_TA*                      ProfileLoadoutSave;                                       // 0x00B8(0x0008)
	TArray<int>                                        PendingChangedProductSlots;                               // 0x00C0(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatusObserver_Products_TA");
		return ptr;
	}


	void __StatusObserver_Products_TA__Init_0CE5529D4C44645D877730964647587A(class UPlayerVanitySave_TA* P);
	void __StatusObserver_Products_TA__Init_3964B63D4A804ABA3F9350B9BCEAFD01(class UPlayerVanitySave_TA* P);
	void __StatusObserver_Products_TA__HandleVanitySave_701433014E56F4FFC3214EA492FEA8C2();
	void __StatusObserver_Products_TA__RebuildOwnedProducts_3A0D1BDD4506CED8CE6547861195D62F(int SlotIndex);
	bool __StatusObserver_Products_TA__RebuildOwnedProducts_AC816EC04F70FE03CDB01E91DFB323D5(int Id);
	int __StatusObserver_Products_TA__RebuildOwnedProducts_E0CBAC1C4585FC78438EB49100FDB043(class UOnlineProduct_TA* Op);
	void DebugPrint();
	void UpdateOwnedTrigger(class UStatusTrigger_ProductOwned_TA* InTrigger);
	void HandleProductAdded(class USaveData_TA* InSaveData, int ProductID);
	void HandleProductRemoved(class USaveData_TA* InSaveData, class UOnlineProduct_TA* OnlineProduct);
	void HandleOnlineProductsSynced(class USaveData_TA* InSaveData);
	void RebuildOwnedProducts(TArray<int>* MapLocal_574175F04FF91D803D684384A499E172, TArray<int>* DistinctLocal_A13B0298420F014FABE8D18FCA948FD0, TArray<int>* FilterLocal_D57C549D4EA53E275D7129AD228961A5);
	void HandleProductSave(class UProductsSave_TA* InSaveData);
	void UpdateEquippedTrigger(class UStatusTrigger_ProductEquipped_TA* InTrigger);
	void OnTeamChanged(int InTeamIndex);
	void HandlePreviewTeamChanged(class UProfileLoadoutSave_TA* InLoadoutSave);
	void HandleTeamChanged(class APRI_X* InPRI);
	void HandlePRIReceived(class APRI_X* InPRI);
	void HandleReceivePlayerController(class APlayerController* PlayerRef);
	void HandleProductEquipped(int ProductID);
	void HandleVanitySave(class UPlayerVanitySave_TA* InVanitySave, int SlotIndex);
	void HandleLoadout(class UProfileLoadoutSave_TA* LoadoutSave);
	void UpdateTriggersBySlot(class UClass* InType, int InSlotIndex, TArray<class UStatusTrigger_X*>* FilterLocal_908AA38B4C83614D921602B007523C54);
	void HandleSaveDataLoaded(class USaveData_TA* InSaveData);
	void Init(class ULocalPlayer_X* LP);
};


// Class TAGame.__StayAsPartySystem_TA__FindHumanTeammatesOfID_094AA5C043A7898EF433A8B71B7CF542
// 0x0014 (0x0074 - 0x0060)
class U__StayAsPartySystem_TA__FindHumanTeammatesOfID_094AA5C043A7898EF433A8B71B7CF542 : public UObject
{
public:
	TArray<class APRI_TA*>                             PRIs;                                                     // 0x0060(0x0010) (NeedCtorLink)
	int                                                PlayerIndex;                                              // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StayAsPartySystem_TA__FindHumanTeammatesOfID_094AA5C043A7898EF433A8B71B7CF542");
		return ptr;
	}


	bool __StayAsPartySystem_TA__FindHumanTeammatesOfID_094AA5C043A7898EF433A8B71B7CF542(class APRI_TA* P);
};


// Class TAGame.__StayAsPartySystem_TA__IsOneParty_D4DCB7854AE1CACF0CD0E7A25FB79565
// 0x0010 (0x0070 - 0x0060)
class U__StayAsPartySystem_TA__IsOneParty_D4DCB7854AE1CACF0CD0E7A25FB79565 : public UObject
{
public:
	TArray<class APRI_TA*>                             PRIs;                                                     // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StayAsPartySystem_TA__IsOneParty_D4DCB7854AE1CACF0CD0E7A25FB79565");
		return ptr;
	}


	bool __StayAsPartySystem_TA__IsOneParty_D4DCB7854AE1CACF0CD0E7A25FB79565(class APRI_TA* P);
};


// Class TAGame.PartyLeaderChangedEvent_TA
// 0x0088 (0x00E8 - 0x0060)
class UPartyLeaderChangedEvent_TA : public UObject
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0060(0x0038)
	struct FUniqueNetId                                NewLeaderID;                                              // 0x0098(0x0038)
	TArray<struct FUniqueNetId>                        NewFollowerIds;                                           // 0x00D0(0x0010) (NeedCtorLink)
	class AActor*                                      VoterOwner;                                               // 0x00E0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyLeaderChangedEvent_TA");
		return ptr;
	}

};


// Class TAGame.__StayAsPartySystem_TA__GFxPlayerJoinedParty_8C779B53459096D0ECC644B436777A6E
// 0x0008 (0x0068 - 0x0060)
class U__StayAsPartySystem_TA__GFxPlayerJoinedParty_8C779B53459096D0ECC644B436777A6E : public UObject
{
public:
	class UPartyLeaderChangedEvent_TA*                 LeaderChanged;                                            // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StayAsPartySystem_TA__GFxPlayerJoinedParty_8C779B53459096D0ECC644B436777A6E");
		return ptr;
	}


	bool __StayAsPartySystem_TA__GFxPlayerJoinedParty_8C779B53459096D0ECC644B436777A6E(class APRI_TA* PRI);
};


// Class TAGame.__StayAsPartySystem_TA__GFxLeaderActive_76FF0B2844AB7065B87A8C907FA2B647
// 0x0008 (0x0068 - 0x0060)
class U__StayAsPartySystem_TA__GFxLeaderActive_76FF0B2844AB7065B87A8C907FA2B647 : public UObject
{
public:
	class AStayAsPartyVoter_TA*                        Voter;                                                    // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StayAsPartySystem_TA__GFxLeaderActive_76FF0B2844AB7065B87A8C907FA2B647");
		return ptr;
	}


	bool __StayAsPartySystem_TA__GFxLeaderActive_76FF0B2844AB7065B87A8C907FA2B647(class APRI_TA* PRI);
};


// Class TAGame.GFxStayAsPartyDisplayButton_TA
// 0x0000 (0x0060 - 0x0060)
class UGFxStayAsPartyDisplayButton_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxStayAsPartyDisplayButton_TA");
		return ptr;
	}

};


// Class TAGame.ServerFormPartyEvent_TA
// 0x0008 (0x0068 - 0x0060)
class UServerFormPartyEvent_TA : public UObject
{
public:
	class UMergePartyEvent_TA*                         ConfirmedMerge;                                           // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ServerFormPartyEvent_TA");
		return ptr;
	}

};


// Class TAGame.__StayAsPartySystem_TA__HandleClientConfirmedInvite_B4520A0941DEE9277A3AC9902833A0C0
// 0x0008 (0x0068 - 0x0060)
class U__StayAsPartySystem_TA__HandleClientConfirmedInvite_B4520A0941DEE9277A3AC9902833A0C0 : public UObject
{
public:
	class UMergePartyEvent_TA*                         MergeEvent;                                               // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StayAsPartySystem_TA__HandleClientConfirmedInvite_B4520A0941DEE9277A3AC9902833A0C0");
		return ptr;
	}


	bool __StayAsPartySystem_TA__HandleClientConfirmedInvite_B4520A0941DEE9277A3AC9902833A0C0(class APRI_TA* PRI);
};


// Class TAGame.StayAsPartyVote_TA
// 0x0050 (0x00B0 - 0x0060)
class UStayAsPartyVote_TA : public UObject
{
public:
	TArray<class AStayAsPartyVoter_TA*>                Voters;                                                   // 0x0060(0x0010) (NeedCtorLink)
	TArray<class AStayAsPartyVoter_TA*>                VotedYes;                                                 // 0x0070(0x0010) (NeedCtorLink)
	TArray<class UMergePartyEvent_TA*>                 PendingMerges;                                            // 0x0080(0x0010) (NeedCtorLink)
	TArray<class UMergePartyEvent_TA*>                 MergeRecord;                                              // 0x0090(0x0010) (NeedCtorLink)
	TArray<struct FPartyUpMergeError>                  MergeErrors;                                              // 0x00A0(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StayAsPartyVote_TA");
		return ptr;
	}


	void RemoveVote(class AStayAsPartyVoter_TA* Voter);
	bool HasVoted(struct FUniqueNetId* PlayerID);
	void ComposePartyChangeWithMerges(class UPartyLeaderChangedEvent_TA* PartyEvent);
	void RemovePlayerFromMerges(class AStayAsPartyVoter_TA* RemovedVoter, class UServerMergeErrorEvent_TA** ObjectInitializer_37545DB64B8028BC6A55B3A1EC6D028D, class UServerMergeErrorEvent_TA** ObjectInitializer_7599F168450A9BB42A2A75A57A57FEE5, TArray<struct FUniqueNetId>* ArrayInitializer_A8CF21F2414E5C83F7DDB8BE6CDFF76F, class UServerFormPartyEvent_TA** ObjectInitializer_5C0CD6A445342E345AAF6587A113C1B2);
	void AddPendingMerge(class UMergePartyEvent_TA* MergeEvent);
	bool CanPlayerVote(struct FUniqueNetId* PlayerID);
	class AStayAsPartyVoter_TA* FindVoter(struct FUniqueNetId* PlayerID);
	void AddFollowerToLeader(struct FUniqueNetId* LeaderID, struct FUniqueNetId* FollowerID);
	void RemoveFollower(struct FUniqueNetId* FollowerID);
};


// Class TAGame.__StayAsPartySystem_TA__ProcessVote_3C50A2EC42F22DA7F69D05AEAC90BD2E
// 0x0008 (0x0068 - 0x0060)
class U__StayAsPartySystem_TA__ProcessVote_3C50A2EC42F22DA7F69D05AEAC90BD2E : public UObject
{
public:
	class AStayAsPartyVoter_TA*                        VoterItr;                                                 // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StayAsPartySystem_TA__ProcessVote_3C50A2EC42F22DA7F69D05AEAC90BD2E");
		return ptr;
	}


	bool __StayAsPartySystem_TA__ProcessVote_3C50A2EC42F22DA7F69D05AEAC90BD2E(class UMergePartyEvent_TA* Merge);
};


// Class TAGame.StayAsPartyMetrics_TA
// 0x0000 (0x0080 - 0x0080)
class UStayAsPartyMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StayAsPartyMetrics_TA");
		return ptr;
	}


	void STATIC_PartyMergeResults(TArray<struct FPartyMergeResult>* Results);
	void STATIC_ProcessPartyUpResults(class UStayAsPartyVote_TA* Vote, class UGameEventFinishedState_TA* _, struct FPartyMergeResult* StructInitializer_A45F33A347A7664DE196EB9BC7CFB4AA, struct FPartyMergeResult* StructInitializer_E28E64014E02D28D86FFAEA755FC0DFF);
	void STATIC_ProcessMergeError(class UStayAsPartyVote_TA* Vote, class UErrorType* InErrorType, TArray<struct FUniqueNetId>* Invitees, struct FUniqueNetId* Leader, struct FPartyUpMergeError* StructInitializer_184D8B8E447AB4546DCE8994C7955069);
	void STATIC_OnMergeError(class UStayAsPartyVote_TA* Vote, class UServerMergeErrorEvent_TA* ErrorEvent);
	void STATIC_OnMergeAdded(class UStayAsPartyVote_TA* Vote, class UMergePartyEvent_TA* MergeEvent);
	void STATIC_PartyUpActive(TArray<struct FUniqueNetId>* Players);
	void STATIC_OnPlayerVoted(class AStayAsPartyVoter_TA* Voter, TArray<struct FUniqueNetId>* ArrayInitializer_2C1D8B0A491A66AE1F4006BE173E0CBF);
};


// Class TAGame.__StayAsPartySystem_TA__HandlePartyChanged_00AAFA764002D96AF8E9FF85A4D2B488
// 0x0008 (0x0068 - 0x0060)
class U__StayAsPartySystem_TA__HandlePartyChanged_00AAFA764002D96AF8E9FF85A4D2B488 : public UObject
{
public:
	class UPartyLeaderChangedEvent_TA*                 PartyEvent;                                               // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StayAsPartySystem_TA__HandlePartyChanged_00AAFA764002D96AF8E9FF85A4D2B488");
		return ptr;
	}


	bool __StayAsPartySystem_TA__HandlePartyChanged_00AAFA764002D96AF8E9FF85A4D2B488(class AStayAsPartyVoter_TA* Voter);
};


// Class TAGame.ServerVoteStartedEvent_TA
// 0x0010 (0x0070 - 0x0060)
class UServerVoteStartedEvent_TA : public UObject
{
public:
	TArray<class AStayAsPartyVoter_TA*>                Voters;                                                   // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ServerVoteStartedEvent_TA");
		return ptr;
	}

};


// Class TAGame.__StayAsPartySystem_TA__CreateVoteStartEvent_E395DCAE4602A1D8B3E8F686727878F6
// 0x0010 (0x0070 - 0x0060)
class U__StayAsPartySystem_TA__CreateVoteStartEvent_E395DCAE4602A1D8B3E8F686727878F6 : public UObject
{
public:
	class UServerStartVoteEvent_TA*                    StartEvent;                                               // 0x0060(0x0008)
	class ATeam_TA*                                    Team;                                                     // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StayAsPartySystem_TA__CreateVoteStartEvent_E395DCAE4602A1D8B3E8F686727878F6");
		return ptr;
	}


	void __StayAsPartySystem_TA__CreateVoteStartEvent_E395DCAE4602A1D8B3E8F686727878F6(class APRI_TA* Leader, struct FPartyInfo* StructInitializer_0B4CF5384F5AE2A5EB939C85B0C0C169);
};


// Class TAGame.__TourBracketCache_TA__Request_F8B8A6DB43A05237B5E7998695A8465F
// 0x0008 (0x0068 - 0x0060)
class U__TourBracketCache_TA__Request_F8B8A6DB43A05237B5E7998695A8465F : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__TourBracketCache_TA__Request_F8B8A6DB43A05237B5E7998695A8465F.TournamentID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourBracketCache_TA__Request_F8B8A6DB43A05237B5E7998695A8465F");
		return ptr;
	}


	void __TourBracketCache_TA__Request_F8B8A6DB43A05237B5E7998695A8465F(class UError* E);
};


// Class TAGame.__TourBracketCache_TA__RequestCached_686728174282F47C3C7D4296B3808615
// 0x0020 (0x0080 - 0x0060)
class U__TourBracketCache_TA__RequestCached_686728174282F47C3C7D4296B3808615 : public UObject
{
public:
	int                                                BracketIndex;                                             // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FScriptDelegate                             Callback;                                                 // 0x0068(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0064(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourBracketCache_TA__RequestCached_686728174282F47C3C7D4296B3808615");
		return ptr;
	}


	void __TourBracketCache_TA__RequestCached_686728174282F47C3C7D4296B3808615();
};


// Class TAGame.PartyMessage_TourPreCheckInError_TA
// 0x0010 (0x00A8 - 0x0098)
class UPartyMessage_TourPreCheckInError_TA : public UPartyMessage_X
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.PartyMessage_TourPreCheckInError_TA.TourID
	struct FName                                       ErrorTypeName;                                            // 0x00A0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_TourPreCheckInError_TA");
		return ptr;
	}


	class UPartyMessage_TourPreCheckInError_TA* SetError(class UErrorType* ErrorType);
	class UPartyMessage_TourPreCheckInError_TA* SetTourID();
};


// Class TAGame.PartyMessage_TourPreCheckIn_TA
// 0x0008 (0x00A0 - 0x0098)
class UPartyMessage_TourPreCheckIn_TA : public UPartyMessage_X
{
public:
	class UTourSettings_TA*                            Settings;                                                 // 0x0098(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_TourPreCheckIn_TA");
		return ptr;
	}


	class UPartyMessage_TourPreCheckIn_TA* SetTourSettings(class UTourSettings_TA* InSettings);
};


// Class TAGame.__TourMatchServerBrowser_TA__GetMatchServer_19EFA7A9433D3AE2E06565846993EA1A
// 0x0018 (0x0078 - 0x0060)
class U__TourMatchServerBrowser_TA__GetMatchServer_19EFA7A9433D3AE2E06565846993EA1A : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourMatchServerBrowser_TA__GetMatchServer_19EFA7A9433D3AE2E06565846993EA1A");
		return ptr;
	}


	void __TourMatchServerBrowser_TA__GetMatchServer_19EFA7A9433D3AE2E06565846993EA1A(class URPC_TourGetMatchServer_TA* RPC);
};


// Class TAGame.RPC_TourGetMatchServer_TA
// 0x00C0 (0x01C0 - 0x0100)
class URPC_TourGetMatchServer_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_TourGetMatchServer_TA.TournamentID
	int                                                MatchID;                                                  // 0x0140(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	struct FCheckReservationResponse                   Reservation;                                              // 0x0148(0x0078) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourGetMatchServer_TA");
		return ptr;
	}


	struct FServerReservationData GetReservation();
	class URPC_TourGetMatchServer_TA* SetMatchID(int InMatchID);
	class URPC_TourGetMatchServer_TA* SetTournamentID();
	class URPC_TourGetMatchServer_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.PartyMessage_TourCheckIn_TA
// 0x0068 (0x0100 - 0x0098)
class UPartyMessage_TourCheckIn_TA : public UPartyMessage_X
{
public:
	class UTourSettings_TA*                            TourSettings;                                             // 0x0098(0x0008)
	struct FTourTeam                                   Team;                                                     // 0x00A0(0x0040) (NeedCtorLink)
	struct FTourPrivateCredentials                     Credentials;                                              // 0x00E0(0x0020) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_TourCheckIn_TA");
		return ptr;
	}


	class UPartyMessage_TourCheckIn_TA* SetCredentials(const struct FTourPrivateCredentials& InCredentials);
	class UPartyMessage_TourCheckIn_TA* SetTeam(const struct FTourTeam& InTeam);
	class UPartyMessage_TourCheckIn_TA* SetTourSettings(class UTourSettings_TA* InSettings);
};


// Class TAGame.PartyMessage_TourCheckInError_TA
// 0x0010 (0x00A8 - 0x0098)
class UPartyMessage_TourCheckInError_TA : public UPartyMessage_X
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.PartyMessage_TourCheckInError_TA.TourID
	struct FName                                       ErrorTypeName;                                            // 0x00A0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_TourCheckInError_TA");
		return ptr;
	}


	class UPartyMessage_TourCheckInError_TA* SetError(class UError* Error);
	class UPartyMessage_TourCheckInError_TA* SetTourID();
};


// Class TAGame.TourPartyCheckInTransaction_TA
// 0x0040 (0x00A0 - 0x0060)
class UTourPartyCheckInTransaction_TA : public UObject
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0060(0x0008) (Edit)
	class UOnlineGameParty_X*                          Party;                                                    // 0x0068(0x0008) (Edit)
	class UError*                                      CheckInError;                                             // 0x0070(0x0008)
	class UTourSettings_TA*                            Settings;                                                 // 0x0078(0x0008)
	unsigned long                                      bDisposed : 1;                                            // 0x0080(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	struct FScriptDelegate                             __EventPartyCheckInError__Delegate;                       // 0x0088(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0084(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourPartyCheckInTransaction_TA");
		return ptr;
	}


	void NotifyPartyOfError(class UError* Error);
	void SetError(class UError* Error);
	void HandlePartySizeChanged(class UOnlineGameParty_X* InParty, int NewSize, int OldSize);
	void Dispose();
	void Init(class UTourSettings_TA* InSettings);
	void EventPartyCheckInError(class UTourSettings_TA* TourSettings, class UError* Error);
};


// Class TAGame.__TourPartyCheckIn_TA__HandleLeaderCheckIn_60801FE54266637744E1F597D1D05D20
// 0x0010 (0x0070 - 0x0060)
class U__TourPartyCheckIn_TA__HandleLeaderCheckIn_60801FE54266637744E1F597D1D05D20 : public UObject
{
public:
	class UPartyMessage_TourCheckIn_TA*                Message;                                                  // 0x0060(0x0008)
	class UTourPartyCheckInTransaction_TA*             Transaction;                                              // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourPartyCheckIn_TA__HandleLeaderCheckIn_60801FE54266637744E1F597D1D05D20");
		return ptr;
	}


	void __TourPartyCheckIn_TA__HandleLeaderCheckIn_60801FE54266637744E1F597D1D05D20(class UTourSettings_TA* _);
};


// Class TAGame.PartyMessage_TourLeaveTournament_TA
// 0x0008 (0x00A0 - 0x0098)
class UPartyMessage_TourLeaveTournament_TA : public UPartyMessage_X
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.PartyMessage_TourLeaveTournament_TA.TourID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_TourLeaveTournament_TA");
		return ptr;
	}


	class UPartyMessage_TourLeaveTournament_TA* SetTourID();
};


// Class TAGame.GFxData_TourSubscriptions_TA
// 0x0040 (0x00D8 - 0x0098)
class UGFxData_TourSubscriptions_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0098(0x0008) (Edit)
	class UTourSubscriptions_TA*                       Subscriptions;                                            // 0x00A0(0x0008) (Transient)
	TArray<struct FSubscriptionInfo>                   Created;                                                  // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FSubscriptionInfo>                   AdminOf;                                                  // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FSubscriptionInfo>                   RegisteredTo;                                             // 0x00C8(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourSubscriptions_TA");
		return ptr;
	}


	void __GFxData_TourSubscriptions_TA__Unsubscribe_AC5B67AE4906DBDDECABC2BFC4014DD4(class UError* E);
	struct FSubscriptionInfo __GFxData_TourSubscriptions_TA__HandleCreatedChanged_F3B986FB4C22C2CA87B4A5B2E8AAB553(struct FSubscriptionInfo* StructInitializer_CDA52DF5425630E6ABBC588745B95CCF);
	struct FSubscriptionInfo __GFxData_TourSubscriptions_TA__HandleAdminOfChanged_3F74C1554ED1CDAB6BB85CABEB802EE6(struct FSubscriptionInfo* StructInitializer_D79A63FE4D2580AC79DB1089D500D0A7);
	struct FSubscriptionInfo __GFxData_TourSubscriptions_TA__HandleRegisteredToChanged_F89265E4446D5D8EAC26D7ACD0A73FFA(struct FSubscriptionInfo* StructInitializer_1357F8304365C7F30A4D1E839D8350ED);
	void HandleRegisteredToChanged(TArray<struct FSubscriptionInfo>* MapLocal_5ECA7AED45B60E64BD096AB9C870992B);
	void HandleAdminOfChanged(TArray<struct FSubscriptionInfo>* MapLocal_F876909D4EAAAF3A8875BD99EDEF95DD);
	void HandleCreatedChanged(TArray<struct FSubscriptionInfo>* MapLocal_E2BB10F24834AA5B49262E849B56DFF2);
	void HandleCancelCreated(class URPC_TourCancelCreated_TA* RPC);
	void CancelCreated();
	void Unsubscribe();
	void HandleSubscriptionsSynced(class UTourSubscriptions_TA* InSubscriptions, class UError* Error);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.__TourRegistration_TA__Register_03232837463C775802A73B9006D0D07E
// 0x0018 (0x0078 - 0x0060)
class U__TourRegistration_TA__Register_03232837463C775802A73B9006D0D07E : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourRegistration_TA__Register_03232837463C775802A73B9006D0D07E");
		return ptr;
	}


	void __TourRegistration_TA__Register_03232837463C775802A73B9006D0D07E(class UTourSettings_TA* Tournament);
};


// Class TAGame.__TourSettingsCache_TA__Find_3E228BF24FCD23BC3FF092A8640B9183
// 0x0008 (0x0068 - 0x0060)
class U__TourSettingsCache_TA__Find_3E228BF24FCD23BC3FF092A8640B9183 : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__TourSettingsCache_TA__Find_3E228BF24FCD23BC3FF092A8640B9183.TourID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourSettingsCache_TA__Find_3E228BF24FCD23BC3FF092A8640B9183");
		return ptr;
	}


	bool __TourSettingsCache_TA__Find_3E228BF24FCD23BC3FF092A8640B9183(class UTourSettings_TA* T);
};


// Class TAGame.__TourSubscriptions_TA__GetTournament_C5BD37C84B29061A2E128683561EEACA
// 0x0008 (0x0068 - 0x0060)
class U__TourSubscriptions_TA__GetTournament_C5BD37C84B29061A2E128683561EEACA : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__TourSubscriptions_TA__GetTournament_C5BD37C84B29061A2E128683561EEACA.TourID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourSubscriptions_TA__GetTournament_C5BD37C84B29061A2E128683561EEACA");
		return ptr;
	}


	bool __TourSubscriptions_TA__GetTournament_C5BD37C84B29061A2E128683561EEACA(class UTourSettings_TA* T);
};


// Class TAGame.RPC_TourUnsubscribe_TA
// 0x0050 (0x0150 - 0x0100)
class URPC_TourUnsubscribe_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_TourUnsubscribe_TA.TournamentID
	TArray<struct FUniqueNetId>                        TeamMembers;                                              // 0x0140(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourUnsubscribe_TA");
		return ptr;
	}


	class URPC_TourUnsubscribe_TA* SetTeamMembers(TArray<struct FUniqueNetId> InTeamMembers);
	class URPC_TourUnsubscribe_TA* SetTournamentID();
	class URPC_TourUnsubscribe_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.__TourSubscriptions_TA__Select_B4C85AB44F21C230A68521B31F71F4C5
// 0x0010 (0x0070 - 0x0060)
class U__TourSubscriptions_TA__Select_B4C85AB44F21C230A68521B31F71F4C5 : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.__TourSubscriptions_TA__Select_B4C85AB44F21C230A68521B31F71F4C5.TourIDs

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourSubscriptions_TA__Select_B4C85AB44F21C230A68521B31F71F4C5");
		return ptr;
	}


	bool __TourSubscriptions_TA__Select_B4C85AB44F21C230A68521B31F71F4C5(class UTourSettings_TA* T);
};


// Class TAGame.RPC_TourGetSubscriptions_TA
// 0x00C0 (0x01C0 - 0x0100)
class URPC_TourGetSubscriptions_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	TArray<class UTourSettings_TA*>                    Tournaments;                                              // 0x0138(0x0010) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0148(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_TourGetSubscriptions_TA.CreatorOf
	unsigned char                                      UnknownData01[0x10];                                      // 0x0158(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_TourGetSubscriptions_TA.AdminOf
	unsigned char                                      UnknownData02[0x10];                                      // 0x0168(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_TourGetSubscriptions_TA.Registered
	unsigned char                                      UnknownData03[0x8];                                       // 0x0178(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_TourGetSubscriptions_TA.ActiveTournamentID
	struct FTourTeam                                   ActiveTeam;                                               // 0x0180(0x0040) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourGetSubscriptions_TA");
		return ptr;
	}


	class URPC_TourGetSubscriptions_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxTourList_TA
// 0x0018 (0x0088 - 0x0070)
class UGFxTourList_TA : public UComponent
{
public:
	class UGFxShell_X*                                 Shell;                                                    // 0x0070(0x0008) (Transient)
	class UTourList_TA*                                TourList;                                                 // 0x0078(0x0008) (ExportObject, Transient, Component, EditInline)
	class UClass*                                      GFxDataClass;                                             // 0x0080(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxTourList_TA");
		return ptr;
	}


	void __GFxTourList_TA__HandleTournamentsChanged_235E9CEB464ED28A6091ECB9D143F9DC(class UTourSettings_TA* T);
	void HandleTournamentsChanged(class UTourList_TA* InTourList);
	void Init(class UGFxShell_X* InShell, class UTourList_TA* InTourList, class UClass* InGFxDataClass);
};


// Class TAGame.GFxData_TourSubscription_TA
// 0x000C (0x00A0 - 0x0094)
class UGFxData_TourSubscription_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class UTourSettings_TA*                            TourSettings;                                             // 0x0098(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourSubscription_TA");
		return ptr;
	}


	TArray<int> GetSeriesRoundLengths();
	void SetProxy(class UObject* InProxyObject);
};


// Class TAGame.____ConsecutiveMatchTracker_TA__HandleGameEnded_1C01CC0245C319D378EC0398DA15E7E8____ConsecutiveMatchTracker_TA__HandleGameEnded_1C01CC0245C319D378EC0398DA15E7E8_DA3E8C1047B9C915B6790A9D0A6D279B
// 0x0040 (0x00A0 - 0x0060)
class U____ConsecutiveMatchTracker_TA__HandleGameEnded_1C01CC0245C319D378EC0398DA15E7E8____ConsecutiveMatchTracker_TA__HandleGameEnded_1C01CC0245C319D378EC0398DA15E7E8_DA3E8C1047B9C915B6790A9D0A6D279B : public UObject
{
public:
	struct FMatchData                                  Player;                                                   // 0x0060(0x0040)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.____ConsecutiveMatchTracker_TA__HandleGameEnded_1C01CC0245C319D378EC0398DA15E7E8____ConsecutiveMatchTracker_TA__HandleGameEnded_1C01CC0245C319D378EC0398DA15E7E8_DA3E8C1047B9C915B6790A9D0A6D279B");
		return ptr;
	}


	bool ____ConsecutiveMatchTracker_TA__HandleGameEnded_1C01CC0245C319D378EC0398DA15E7E8____ConsecutiveMatchTracker_TA__HandleGameEnded_1C01CC0245C319D378EC0398DA15E7E8_DA3E8C1047B9C915B6790A9D0A6D279B(class APRI_TA* PRI);
};


// Class TAGame.TriggerClump_TA
// 0x0010 (0x0070 - 0x0060)
class UTriggerClump_TA : public UObject
{
public:
	TArray<class UStatusTrigger_X*>                    Triggers;                                                 // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TriggerClump_TA");
		return ptr;
	}

};


// Class TAGame.ArenaSoundPlayer_TA
// 0x0008 (0x0270 - 0x0268)
class AArenaSoundPlayer_TA : public AActor
{
public:
	class UAkSoundSource*                              SoundSource;                                              // 0x0268(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ArenaSoundPlayer_TA");
		return ptr;
	}


	void PostBeginPlay();
};


// Class TAGame.__BinaryUploader_TA__Upload_9086EC434B856EA4863BF688AE35D5BC
// 0x0008 (0x0068 - 0x0060)
class U__BinaryUploader_TA__Upload_9086EC434B856EA4863BF688AE35D5BC : public UObject
{
public:
	class UWebRequest_X*                               Request;                                                  // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__BinaryUploader_TA__Upload_9086EC434B856EA4863BF688AE35D5BC");
		return ptr;
	}


	void __BinaryUploader_TA__Upload_9086EC434B856EA4863BF688AE35D5BC(const struct FString& K, const struct FString& V);
};


// Class TAGame.GFxData_ChallengeDropGroup_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_ChallengeDropGroup_TA : public UGFxData_ItemDropGroup_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ChallengeDropGroup_TA");
		return ptr;
	}

};


// Class TAGame.PsyNetService_ClubsUpdate_TA
// 0x0008 (0x0098 - 0x0090)
class UPsyNetService_ClubsUpdate_TA : public UPsyNetClientService_X
{
public:
	class UClubDetails_X*                              ClubDetails;                                              // 0x0090(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_ClubsUpdate_TA");
		return ptr;
	}

};


// Class TAGame.PsyNetService_ClubsOwnerChanged_TA
// 0x0000 (0x0090 - 0x0090)
class UPsyNetService_ClubsOwnerChanged_TA : public UPsyNetClientService_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_ClubsOwnerChanged_TA");
		return ptr;
	}

};


// Class TAGame.PsyNetService_ClubsMemberRemoved_TA
// 0x0000 (0x0090 - 0x0090)
class UPsyNetService_ClubsMemberRemoved_TA : public UPsyNetClientService_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_ClubsMemberRemoved_TA");
		return ptr;
	}

};


// Class TAGame.PsyNetService_ClubsMemberAdded_TA
// 0x0000 (0x0090 - 0x0090)
class UPsyNetService_ClubsMemberAdded_TA : public UPsyNetClientService_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_ClubsMemberAdded_TA");
		return ptr;
	}

};


// Class TAGame.PersonaClubData
// 0x0020 (0x0080 - 0x0060)
class UPersonaClubData : public UObject
{
public:
	class UPersona_TA*                                 Persona;                                                  // 0x0060(0x0008)
	struct FString                                     ClubTagWithName;                                          // 0x0068(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.PersonaClubData.ClubID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PersonaClubData");
		return ptr;
	}

};


// Class TAGame.__ClubPersonas_TA__RefreshPersona_A3DEE8834B7ED5A82D55A29F4B2BDFA1
// 0x0018 (0x0078 - 0x0060)
class U__ClubPersonas_TA__RefreshPersona_A3DEE8834B7ED5A82D55A29F4B2BDFA1 : public UObject
{
public:
	class UPersona_TA*                                 Persona;                                                  // 0x0060(0x0008)
	class UPersonaClubData*                            PClub;                                                    // 0x0068(0x0008)
	class UClubDetails_X*                              Club;                                                     // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ClubPersonas_TA__RefreshPersona_A3DEE8834B7ED5A82D55A29F4B2BDFA1");
		return ptr;
	}


	void __ClubPersonas_TA__RefreshPersona_90F3F9734F3AB4B9B91C3E980F2DBADA(const struct FString& O, const struct FString& S);
	bool __ClubPersonas_TA__RefreshPersona_A3DEE8834B7ED5A82D55A29F4B2BDFA1(class UPersonaClubData* P);
};


// Class TAGame.__ClubPersonas_TA__QueueRefresh_7431625946EB0EE3CA0120877FEC9837
// 0x0008 (0x0068 - 0x0060)
class U__ClubPersonas_TA__QueueRefresh_7431625946EB0EE3CA0120877FEC9837 : public UObject
{
public:
	class UPersona_TA*                                 Persona;                                                  // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ClubPersonas_TA__QueueRefresh_7431625946EB0EE3CA0120877FEC9837");
		return ptr;
	}


	void __ClubPersonas_TA__QueueRefresh_7431625946EB0EE3CA0120877FEC9837();
};


// Class TAGame.__CrowdActorManager_TA__PlayCrowdSound_93121EB840F532537221E4BF56125E09
// 0x0018 (0x0078 - 0x0060)
class U__CrowdActorManager_TA__PlayCrowdSound_93121EB840F532537221E4BF56125E09 : public UObject
{
public:
	struct FScriptDelegate                             GetSoundDelegate;                                         // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__CrowdActorManager_TA__PlayCrowdSound_93121EB840F532537221E4BF56125E09");
		return ptr;
	}


	void __CrowdActorManager_TA__PlayCrowdSound_93121EB840F532537221E4BF56125E09(class ACrowdActor_TA* C);
};


// Class TAGame.__CrowdActorManager_TA__StopCrowdSound_E97965644EE499627EE79E8D96E06413
// 0x0018 (0x0078 - 0x0060)
class U__CrowdActorManager_TA__StopCrowdSound_E97965644EE499627EE79E8D96E06413 : public UObject
{
public:
	struct FScriptDelegate                             GetSoundDelegate;                                         // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__CrowdActorManager_TA__StopCrowdSound_E97965644EE499627EE79E8D96E06413");
		return ptr;
	}


	void __CrowdActorManager_TA__StopCrowdSound_E97965644EE499627EE79E8D96E06413(class ACrowdActor_TA* C);
};


// Class TAGame.__CrowdActorManager_TA__OverrideCrowdActorSounds_E3518E14468A511CB5EA7FADAF5DC001
// 0x0008 (0x0068 - 0x0060)
class U__CrowdActorManager_TA__OverrideCrowdActorSounds_E3518E14468A511CB5EA7FADAF5DC001 : public UObject
{
public:
	class UCrowdSounds_TA*                             NewSounds;                                                // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__CrowdActorManager_TA__OverrideCrowdActorSounds_E3518E14468A511CB5EA7FADAF5DC001");
		return ptr;
	}


	void __CrowdActorManager_TA__OverrideCrowdActorSounds_E3518E14468A511CB5EA7FADAF5DC001(class ACrowdActor_TA* C);
};


// Class TAGame.__CurrencyProductSet_TA__GetCurrencyIndexFromHashID_A07A34D44045812AB41A9C9D9E0DC1BC
// 0x0004 (0x0064 - 0x0060)
class U__CurrencyProductSet_TA__GetCurrencyIndexFromHashID_A07A34D44045812AB41A9C9D9E0DC1BC : public UObject
{
public:
	struct FProductHashID                              CurrencyHashID;                                           // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__CurrencyProductSet_TA__GetCurrencyIndexFromHashID_A07A34D44045812AB41A9C9D9E0DC1BC");
		return ptr;
	}


	bool __CurrencyProductSet_TA__GetCurrencyIndexFromHashID_A07A34D44045812AB41A9C9D9E0DC1BC(const struct FCurrency& C);
};


// Class TAGame.__ESportEvents_TA__GetNextEventTime_367B30AC4495D53C8A86899EFCA49B63
// 0x0008 (0x0068 - 0x0060)
class U__ESportEvents_TA__GetNextEventTime_367B30AC4495D53C8A86899EFCA49B63 : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__ESportEvents_TA__GetNextEventTime_367B30AC4495D53C8A86899EFCA49B63.CurrentTime

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ESportEvents_TA__GetNextEventTime_367B30AC4495D53C8A86899EFCA49B63");
		return ptr;
	}


	bool __ESportEvents_TA__GetNextEventTime_367B30AC4495D53C8A86899EFCA49B63();
};


// Class TAGame.__ESportEvents_TA__DownloadEventImage_E6153D3E4522A76EF4381DBA40B45103
// 0x0010 (0x0070 - 0x0060)
class U__ESportEvents_TA__DownloadEventImage_E6153D3E4522A76EF4381DBA40B45103 : public UObject
{
public:
	struct FString                                     URL;                                                      // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ESportEvents_TA__DownloadEventImage_E6153D3E4522A76EF4381DBA40B45103");
		return ptr;
	}


	void __ESportEvents_TA__DownloadEventImage_E6153D3E4522A76EF4381DBA40B45103(class UTexture2DDynamic* Texture);
};


// Class TAGame.SeqEvent_PreviewGoalExplosion_TA
// 0x000C (0x0188 - 0x017C)
class USeqEvent_PreviewGoalExplosion_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	class AFXActor_X*                                  FXInstance;                                               // 0x0180(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_PreviewGoalExplosion_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_FriendRequestNotification_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_FriendRequestNotification_TA : public UGFxData_Notification_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_FriendRequestNotification_TA");
		return ptr;
	}

};


// Class TAGame.PartyMessage_ClubChanged_TA
// 0x0008 (0x00A0 - 0x0098)
class UPartyMessage_ClubChanged_TA : public UPartyMessage_X
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.PartyMessage_ClubChanged_TA.ClubID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PartyMessage_ClubChanged_TA");
		return ptr;
	}


	class UPartyMessage_ClubChanged_TA* SetClubID();
};


// Class TAGame.SaveData_GameEditor_Training_TA
// 0x0058 (0x00F8 - 0x00A0)
class USaveData_GameEditor_Training_TA : public USaveData_GameEditor_TA
{
public:
	struct FString                                     LoadedSaveName;                                           // 0x00A0(0x0010) (Transient, NeedCtorLink)
	class UTrainingEditorData_TA*                      TrainingData;                                             // 0x00B0(0x0008)
	int                                                PlayerTeamNumber;                                         // 0x00B8(0x0004)
	unsigned long                                      bUnowned : 1;                                             // 0x00BC(0x0004)
	int                                                ShotsCompleted;                                           // 0x00C0(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	struct FString                                     FavoritesFolderPath;                                      // 0x00C8(0x0010) (Const, NeedCtorLink)
	struct FString                                     MyTrainingFolderPath;                                     // 0x00D8(0x0010) (Const, NeedCtorLink)
	struct FString                                     DownloadedFolderPath;                                     // 0x00E8(0x0010) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveData_GameEditor_Training_TA");
		return ptr;
	}


	struct FString GetTrainingFullPath(class ULocalPlayer_TA* Player, TEnumAsByte<ETrainingSaveType> InSaveType);
	struct FString GetTrainingPath(TEnumAsByte<ETrainingSaveType> InSaveType);
	struct FString GetTrainingFolder(TEnumAsByte<ETrainingSaveType> InSaveType);
	TEnumAsByte<ETrainingSaveType> STATIC_GetTrainingSaveType(bool bOwned, bool bFavorited);
	struct FString GetFullSavePath(class ULocalPlayer_TA* Player, const struct FString& SaveName);
	struct FString GetFullSaveDirectory(class ULocalPlayer_TA* Player);
	void Init();
};


// Class TAGame.TrainingEditorData_TA
// 0x00D0 (0x0130 - 0x0060)
class UTrainingEditorData_TA : public UObject
{
public:
	struct FGuid                                       TM_Guid;                                                  // 0x0060(0x0010)
	struct FString                                     Code;                                                     // 0x0070(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     TM_Name;                                                  // 0x0080(0x0010) (NeedCtorLink, DataBinding)
	TEnumAsByte<ETrainingType>                         Type;                                                     // 0x0090(0x0001) (DataBinding)
	TEnumAsByte<EDifficulty>                           Difficulty;                                               // 0x0091(0x0001) (DataBinding)
	unsigned char                                      UnknownData00[0x6];                                       // 0x0092(0x0006) MISSED OFFSET
	struct FString                                     CreatorName;                                              // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     Description;                                              // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	TArray<int>                                        Tags;                                                     // 0x00B8(0x0010) (NeedCtorLink)
	struct FName                                       MapName;                                                  // 0x00C8(0x0008) (DataBinding)
	int                                                NumRounds;                                                // 0x00D0(0x0004) (Transient, DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData02[0x8];                                       // 0x00D4(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TrainingEditorData_TA.CreatedAt
	unsigned char                                      UnknownData03[0x8];                                       // 0x00E0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TrainingEditorData_TA.UpdatedAt
	struct FUniqueNetId                                CreatorPlayerID;                                          // 0x00E8(0x0038) (DataBinding)
	TArray<struct FEditorRoundData>                    Rounds;                                                   // 0x0120(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TrainingEditorData_TA");
		return ptr;
	}


	void Init();
};


// Class TAGame.TrainingEditorMetrics_TA
// 0x0000 (0x0080 - 0x0080)
class UTrainingEditorMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TrainingEditorMetrics_TA");
		return ptr;
	}


	void TrainingShotComplete(const struct FGuid& Id, int Index, bool bSuccess, int ShotAttempt);
	void TrainingShotAttempt(const struct FGuid& Id, int Index, int ShotAttempt);
	void TrainingSetComplete(const struct FGuid& Id);
	void TrainingSetExit(const struct FGuid& Id);
	void TrainingSetEnter(const struct FGuid& Id);
	void TrainingSetDelete(const struct FGuid& Id);
	void TrainingSetDownload(const struct FGuid& Id);
	void TrainingEditorExit(const struct FGuid& Id);
	void TrainingEditorEnter(const struct FGuid& Id);
	void TrainingSetSubmitted(const struct FGuid& Id, const struct FString& TrainingType, int Difficulty, int TotalRounds, const struct FString& UserTags);
	void TrainingSetCreate(const struct FGuid& Id, const struct FString& TrainingType, int Difficulty, const struct FString& UserTags);
};


// Class TAGame.__GFxData_ProductFilter_TA__UpdateProductSlotNewItems_BC79A0C147EA791B92A8B7994CBCFD49
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_ProductFilter_TA__UpdateProductSlotNewItems_BC79A0C147EA791B92A8B7994CBCFD49 : public UObject
{
public:
	int                                                SlotIdx;                                                  // 0x0060(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	class ULoadout_TA*                                 Loadout;                                                  // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_ProductFilter_TA__UpdateProductSlotNewItems_BC79A0C147EA791B92A8B7994CBCFD49");
		return ptr;
	}


	bool __GFxData_ProductFilter_TA__UpdateProductSlotNewItems_349C42374973F6F2B52B1A82C7D3B266(class UProduct_TA* Product);
	bool __GFxData_ProductFilter_TA__UpdateProductSlotNewItems_BC79A0C147EA791B92A8B7994CBCFD49(class UProduct_TA* Product);
};


// Class TAGame.__GFxData_ProductFilter_TA__SetProhibitedAttributeTypeSelected_C42CEC4B432F10B743D339A0FCC83460
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_ProductFilter_TA__SetProhibitedAttributeTypeSelected_C42CEC4B432F10B743D339A0FCC83460 : public UObject
{
public:
	struct FName                                       Typename;                                                 // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_ProductFilter_TA__SetProhibitedAttributeTypeSelected_C42CEC4B432F10B743D339A0FCC83460");
		return ptr;
	}


	bool __GFxData_ProductFilter_TA__SetProhibitedAttributeTypeSelected_C42CEC4B432F10B743D339A0FCC83460(class UClass* A);
};


// Class TAGame.__GFxData_ProductFilter_TA__SetExclusiveAttributeTypeSelected_043A354744223E61970EDF8930404CE6
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_ProductFilter_TA__SetExclusiveAttributeTypeSelected_043A354744223E61970EDF8930404CE6 : public UObject
{
public:
	struct FName                                       Typename;                                                 // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_ProductFilter_TA__SetExclusiveAttributeTypeSelected_043A354744223E61970EDF8930404CE6");
		return ptr;
	}


	bool __GFxData_ProductFilter_TA__SetExclusiveAttributeTypeSelected_043A354744223E61970EDF8930404CE6(class UClass* A);
};


// Class TAGame.__GFxData_ProductFilter_TA__FilterProducts_67C6F050413324377C529D9521A42BD2
// 0x0028 (0x0088 - 0x0060)
class U__GFxData_ProductFilter_TA__FilterProducts_67C6F050413324377C529D9521A42BD2 : public UObject
{
public:
	class USaveData_TA*                                SaveData;                                                 // 0x0060(0x0008)
	TArray<int>                                        AllEquippedProducts;                                      // 0x0068(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0078(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.__GFxData_ProductFilter_TA__FilterProducts_67C6F050413324377C529D9521A42BD2.AllEquippedOnlineProducts

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_ProductFilter_TA__FilterProducts_67C6F050413324377C529D9521A42BD2");
		return ptr;
	}


	bool __GFxData_ProductFilter_TA__FilterProducts_D44A409C4587D73035EB309074F16805(class UOnlineProduct_TA* Op);
	bool __GFxData_ProductFilter_TA__FilterProducts_AD8F6F774A782D9728A003B3DD0D2564(class UProduct_TA* P);
	struct FProductHashID __GFxData_ProductFilter_TA__FilterProducts_67C6F050413324377C529D9521A42BD2();
};


// Class TAGame.__GFxData_ProductFilter_TA__InitProductAttributes_8F1C6C2541B868CEAE3C2D8759EDB7A5
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_ProductFilter_TA__InitProductAttributes_8F1C6C2541B868CEAE3C2D8759EDB7A5 : public UObject
{
public:
	TArray<class UClass*>                              ExcludedAttributes;                                       // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_ProductFilter_TA__InitProductAttributes_8F1C6C2541B868CEAE3C2D8759EDB7A5");
		return ptr;
	}


	void __GFxData_ProductFilter_TA__InitProductAttributes_8F1C6C2541B868CEAE3C2D8759EDB7A5(const struct FString& IgnoreAttribute);
};


// Class TAGame.GarageArchiveSlot_TA
// 0x0008 (0x0068 - 0x0060)
class UGarageArchiveSlot_TA : public UObject
{
public:
	class UProductsArchiveSave_TA*                     ArchiveSave;                                              // 0x0060(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GarageArchiveSlot_TA");
		return ptr;
	}


	void __GarageArchiveSlot_TA__Construct_8A1B4CF347A8AE33E8E838A5EF987A20(class UClass* _, TEnumAsByte<EProductFilterType> SelectedFilter);
	void __GarageArchiveSlot_TA__Construct_88B8F3A54AC1A6AECE1B71A35A0245F4(TEnumAsByte<EProductFilterType> SelectedFilter);
	void HandleArchivedProductsChanged();
	void HandleArchiveSaveLoaded(class UProductsArchiveSave_TA* InArchiveSave);
	int GetPreviewQuantity(bool bIgnoreAdditionalFilters, TArray<class UClass*>* ArrayInitializer_4C88F8D74BA9A2A5C462F3A9F8AAFBFB, TArray<TEnumAsByte<EProductQuality>>* ArrayInitializer_0F85320B4CE0F76CDA7974AC39AE8465, TArray<int>* ArrayInitializer_E07038C54199E6771B77B095FA51A528, TArray<int>* ArrayInitializer_00077F50428420E8A7598F8BE2E76475);
	bool HasArchivedProducts();
	bool AttributeSelected();
	bool ViewingArchiveSlot();
	int ArchiveAttributeArrayIndex();
	int ArchiveSlotArrayIndex();
	TEnumAsByte<EArchiveProductFilter> GetArchivedProductFilter(TEnumAsByte<EArchiveProductFilter> DefaultArchiveFilter);
	void UpdateProducts(TEnumAsByte<EProductFilterType> SelectedFilter, TEnumAsByte<EArchiveProductFilter> DefaultArchiveFilter);
	void UpdateSlotVisibility(TEnumAsByte<EProductFilterType> SelectedFilter);
	void UpdatePreviewQuantity(TEnumAsByte<EProductFilterType> SelectedFilter);
	void UpdateAttributeVisibility(bool bArchiveSlotSelected);
	void OnSlotSelectedChanged(int SlotIndex, bool bSelected, TEnumAsByte<EProductFilterType> SelectedFilter);
	void RemoveExclusiveAttribute(TEnumAsByte<EProductFilterType> SelectedFilter);
	void Construct(struct FFilterProductSlot* StructInitializer_892C13EB480D7B14E54B2DA1DC08B94D, struct FFilterProductAttribute* StructInitializer_0F64B13240F7C6BD3E6EC9B20B5B13DD);
};


// Class TAGame.MenuSequence_TA
// 0x0048 (0x00A8 - 0x0060)
class UMenuSequence_TA : public UObject
{
public:
	struct FName                                       CameraState;                                              // 0x0060(0x0008) (Edit)
	unsigned long                                      bRemotePlayersHidden : 1;                                 // 0x0068(0x0004) (Edit)
	unsigned long                                      bLockPreviewActor : 1;                                    // 0x0068(0x0004) (Edit)
	unsigned long                                      bImmediate : 1;                                           // 0x0068(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	class UMenuSequencer_TA*                           MenuSequenceComp;                                         // 0x0070(0x0008) (ExportObject, Component, EditInline)
	struct FScriptDelegate                             __EventEnteredSequence__Delegate;                         // 0x0078(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventLeftSequence__Delegate;                            // 0x0090(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0090(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MenuSequence_TA");
		return ptr;
	}


	class ACamera_MainMenu_TA* GetCamera();
	void SetLockPreviewActor();
	void SetRemotePlayersHidden();
	void SetCameraState();
	void TickSequence(float DeltaTime);
	void LeaveSequence(class UMenuSequence_TA* NextSequence);
	void EnterSequence(class UMenuSequence_TA* PrevSequence);
	void Init(class UMenuSequencer_TA* InComp);
	void EventLeftSequence(class UMenuSequence_TA* InSequence);
	void EventEnteredSequence(class UMenuSequence_TA* InSequence);
};


// Class TAGame.RPC_TourCancelCreated_TA
// 0x0040 (0x0140 - 0x0100)
class URPC_TourCancelCreated_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_TourCancelCreated_TA.TournamentID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourCancelCreated_TA");
		return ptr;
	}


	class URPC_TourCancelCreated_TA* SetTournamentID();
	class URPC_TourCancelCreated_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.MusicTracklist_TA
// 0x0010 (0x0070 - 0x0060)
class UMusicTracklist_TA : public UObject
{
public:
	TArray<class UMusicTrack_TA*>                      Tracks;                                                   // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicTracklist_TA");
		return ptr;
	}


	class UMusicTracklist_TA* AddLastTrackAction(const struct FScriptDelegate& Action);
	class UMusicTracklist_TA* Shuffle();
	int Num();
	void NextTrack();
};


// Class TAGame.__MenuSequencer_TA__GetSequence_AF8D134F481B778695AD27B95B85F001
// 0x0008 (0x0068 - 0x0060)
class U__MenuSequencer_TA__GetSequence_AF8D134F481B778695AD27B95B85F001 : public UObject
{
public:
	struct FName                                       SequenceName;                                             // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__MenuSequencer_TA__GetSequence_AF8D134F481B778695AD27B95B85F001");
		return ptr;
	}


	bool __MenuSequencer_TA__GetSequence_AF8D134F481B778695AD27B95B85F001(class UMenuSequence_TA* S);
};


// Class TAGame.MusicTracklistNull_TA
// 0x0000 (0x0060 - 0x0060)
class UMusicTracklistNull_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MusicTracklistNull_TA");
		return ptr;
	}


	int Num();
	void NextTrack();
};


// Class TAGame.__Mutator_Freeplay_TA__HandleUnlimitedBoostChange_7D77F7BD4970B40A031EA1AF65836E1F
// 0x0008 (0x0068 - 0x0060)
class U__Mutator_Freeplay_TA__HandleUnlimitedBoostChange_7D77F7BD4970B40A031EA1AF65836E1F : public UObject
{
public:
	class UGameplaySettingsSave_TA*                    Settings;                                                 // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__Mutator_Freeplay_TA__HandleUnlimitedBoostChange_7D77F7BD4970B40A031EA1AF65836E1F");
		return ptr;
	}


	void __Mutator_Freeplay_TA__HandleUnlimitedBoostChange_7D77F7BD4970B40A031EA1AF65836E1F(class ACarComponent_Boost_TA* Boost);
};


// Class TAGame.__Mutator_Freeplay_TA__HandleGameplaySettingsSave_792E481B4DA964798ED1C9ABCA0F8135
// 0x0010 (0x0070 - 0x0060)
class U__Mutator_Freeplay_TA__HandleGameplaySettingsSave_792E481B4DA964798ED1C9ABCA0F8135 : public UObject
{
public:
	class ACar_TA*                                     Car;                                                      // 0x0060(0x0008)
	class UGameplaySettingsSave_TA*                    Settings;                                                 // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__Mutator_Freeplay_TA__HandleGameplaySettingsSave_792E481B4DA964798ED1C9ABCA0F8135");
		return ptr;
	}


	void __Mutator_Freeplay_TA__HandleGameplaySettingsSave_792E481B4DA964798ED1C9ABCA0F8135();
};


// Class TAGame.GameEvent_Soccar_SubRules_Items_TA
// 0x0028 (0x0088 - 0x0060)
class UGameEvent_Soccar_SubRules_Items_TA : public UGameEvent_Soccar_SubRules_TA
{
public:
	class UPlayerItemDispenser_TA*                     DispenserArchetype;                                       // 0x0060(0x0008) (Edit)
	float                                              StaggerTime;                                              // 0x0068(0x0004) (Edit)
	float                                              CurrentStaggerByTeam[0x2];                                // 0x006C(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	TArray<class UPlayerItemDispenser_TA*>             ItemDispensers;                                           // 0x0078(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_Soccar_SubRules_Items_TA");
		return ptr;
	}


	void RandomizeDispenserOrder();
	void CheckPlayers();
	void Unapply();
	void UnregisterEvents();
	void OnMatchEnd();
	void HandleGoalScored(class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIdx);
	void HandleCarSpawned(class AGameEvent_TA* GameEvent, class ACar_TA* Car);
	void HandleStartNewRound(class AGameEvent_Soccar_TA* GameEvent);
	void HandleTeamsCreated(class AGameEvent_Team_TA* GameEvent);
	void HandlePRIRemoved(class AGameEvent_TA* GameEvent, class APRI_TA* PRI);
	void HandlePRIAdded(class AGameEvent_TA* GameEvent, class APRI_TA* PRI);
	void OnNewRound();
	void StopUpdating();
	void Init();
};


// Class TAGame.PlayerItemDispenser_TA
// 0x0050 (0x00B0 - 0x0060)
class UPlayerItemDispenser_TA : public UObject
{
public:
	float                                              ItemGiveRate;                                             // 0x0060(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TArray<struct FRandomWeight>                       Items;                                                    // 0x0068(0x0010) (Edit, NeedCtorLink)
	float                                              PickWeightMultiplier;                                     // 0x0078(0x0004) (Edit)
	unsigned long                                      bResetWeightsOnGoal : 1;                                  // 0x007C(0x0004) (Edit)
	unsigned long                                      bResetTimerOnDemolish : 1;                                // 0x007C(0x0004) (Edit)
	unsigned long                                      bUseItemPool : 1;                                         // 0x007C(0x0004) (Edit)
	unsigned long                                      bWaitingForNextRound : 1;                                 // 0x007C(0x0004) (Edit)
	unsigned long                                      bGiveItemOnRoundStart : 1;                                // 0x007C(0x0004) (Edit)
	unsigned long                                      bGiveItemOnFirstBallHit : 1;                              // 0x007C(0x0004) (Edit)
	unsigned long                                      bGiveItemBeforeRoundStart : 1;                            // 0x007C(0x0004) (Edit)
	unsigned long                                      bHideItemIconByDefault : 1;                               // 0x007C(0x0004) (Edit)
	unsigned long                                      bGiven : 1;                                               // 0x007C(0x0004) (Transient)
	float                                              NextItemTime;                                             // 0x0080(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0084(0x0004) MISSED OFFSET
	class APRI_TA*                                     PRI;                                                      // 0x0088(0x0008) (Transient)
	TArray<class ASpecialPickup_TA*>                   ItemPool;                                                 // 0x0090(0x0010) (Transient, NeedCtorLink)
	class ASpecialPickup_TA*                           DemolishedItem;                                           // 0x00A0(0x0008) (Transient)
	class ASpecialPickup_TA*                           LastPickup;                                               // 0x00A8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerItemDispenser_TA");
		return ptr;
	}


	void RefillPool();
	void HandleItemCarDestroyed(class APawn_X* Car);
	void HandleItemCarDemolished(class ACar_TA* Car, const struct FDemolishData& Data);
	void GiveItem(class ASpecialPickup_TA* OverrideItem);
	void OnGoalScored();
	void OnMatchEnd();
	void OnNewRound(float InStaggerTime, float InGameTimeRemaining);
	void Update();
	float GetTotalGameTimePlayed();
	void HandleActiveRoundChanged(class AGameEvent_Soccar_TA* InGameEvent);
	void HandleFirstBallHit(class AGameEvent_Soccar_TA* InGameEvent);
	void Init(class APRI_TA* InPRI, float InStaggerTime);
};


// Class TAGame.__Mutator_Freeplay_TA__MutateObject_58809FC44001EE93562435A9C25639ED
// 0x0008 (0x0068 - 0x0060)
class U__Mutator_Freeplay_TA__MutateObject_58809FC44001EE93562435A9C25639ED : public UObject
{
public:
	class ACar_TA*                                     Car;                                                      // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__Mutator_Freeplay_TA__MutateObject_58809FC44001EE93562435A9C25639ED");
		return ptr;
	}


	void __Mutator_Freeplay_TA__MutateObject_58809FC44001EE93562435A9C25639ED(class UGameplaySettingsSave_TA* Settings);
};


// Class TAGame.TourGameUpdateDispatcher_TA
// 0x00B0 (0x0110 - 0x0060)
class UTourGameUpdateDispatcher_TA : public UObject
{
public:
	class UMatchSeries_TA*                             MatchSeries;                                              // 0x0060(0x0008) (Edit)
	class UOnlineGameReservations_X*                   Reservations;                                             // 0x0068(0x0008) (Edit)
	struct FString                                     MatchGUID;                                                // 0x0070(0x0010) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0080(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TourGameUpdateDispatcher_TA.GameServerID
	unsigned char                                      UnknownData01[0x8];                                       // 0x0088(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.TourGameUpdateDispatcher_TA.TournamentID
	int                                                MatchID;                                                  // 0x0090(0x0004) (Transient)
	int                                                GameNum;                                                  // 0x0094(0x0004) (Transient)
	TArray<int>                                        TeamIDs;                                                  // 0x0098(0x0010) (Transient, NeedCtorLink)
	struct FTourMatchGame                              GameData;                                                 // 0x00A8(0x0014) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	TArray<struct FUniqueNetId>                        ReservedPlayerIDs;                                        // 0x00C0(0x0010) (Transient, NeedCtorLink)
	int                                                SeriesWinningTeamID;                                      // 0x00D0(0x0004) (Transient)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	class UTourGameUpdate_TA*                          GameUpdate;                                               // 0x00D8(0x0008)
	struct FScriptDelegate                             __EventUpdateError__Delegate;                             // 0x00E0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x00E0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __GameData__ChangeNotify;                                 // 0x00F8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x00F8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourGameUpdateDispatcher_TA");
		return ptr;
	}


	void __TourGameUpdateDispatcher_TA__Init_3A13014E4D5CC720E19AFF91384415D4(class ATeam_TA* T);
	struct FUniqueNetId __TourGameUpdateDispatcher_TA__Init_CEDC067D4E6A086E2599679BF1961E73(const struct FTourPlayer& P);
	TArray<struct FTourPlayer> __TourGameUpdateDispatcher_TA__Init_002C606241AE957A61D6A89C8B9DCA25(const struct FTourTeam& T);
	void __TourGameUpdateDispatcher_TA__HandleGameEnded_AF5910684BCDB36CA02D4BBF1F6C6E15(class ATeam_TA* Team);
	void __TourGameUpdateDispatcher_TA__OnUpdated_9E97C5E248747C1E661EB78E3D93E48E();
	struct FUniqueNetId __TourGameUpdateDispatcher_TA__HandleMatchStarted_D584E37340BC85CC7E1D5DA41BE33A78(class AController* P);
	void __TourGameUpdateDispatcher_TA__SendUpdateGameRPC_9D7E0C2446C2C7B8FE5A1383DE5D5AF6(class URPC_X* RPC);
	void __GameData__ChangeNotifyFunc();
	void HandleUpdateGameSuccess(class URPC_TourUpdateGame_TA* RPC);
	void HandleSeriesGameForfeit(class UMatchSeries_TA* InMatchSeries, int WinningTeamIndex, struct FTourMatchGame* StructInitializer_9725E619449E1F934429DCA14393C732);
	void SendUpdateGameRPC(int InGameNum, const struct FTourMatchGame& InGameData, int SeriesWinnerID);
	int GetTeamID(class ATeam_TA* Team);
	void HandleOvertimeUpdated(class AGameEvent_Soccar_TA* GameEvent);
	void HandleTeamScoreUpdated(class ATeam_TA* Team);
	void HandleGameTimeUpdated(class AGameEvent_Soccar_TA* GameEvent);
	void HandleMatchStarted(class AGameEvent_TA* GameEvent, TArray<struct FUniqueNetId>* MapLocal_C93A93CB4B198F8AAFBEB9B9138A0191);
	void OnUpdated();
	void HandleStartNewRound(class AGameEvent_Soccar_TA* GameEvent);
	void HandleGameEnded(class AGameEvent_Soccar_TA* GameEvent);
	void Init(class AGameEvent_Soccar_TA* GameEvent, struct FTourServerSettings* Settings, TArray<struct FTourPlayer>* MapManyLocal_4120922842AE077C60A60CA45FF181DF, TArray<struct FUniqueNetId>* MapLocal_528245424EF71BAE89D071AA2125AC25, TArray<int>* MapLocal_6BB43AFC4FE8EF364B89E68436D27811);
	void EventUpdateError(class UError* Error);
};


// Class TAGame.RPC_TourGetMatchReservations_TA
// 0x00D8 (0x01D8 - 0x0100)
class URPC_TourGetMatchReservations_TA : public URPC_X
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_TourGetMatchReservations_TA.serverId
	struct FTourServerSettings                         Settings;                                                 // 0x0108(0x00D0) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourGetMatchReservations_TA");
		return ptr;
	}


	class URPC_TourGetMatchReservations_TA* SetServerID();
};


// Class TAGame.__OnlineGameTourServer_TA__GetTeamScore_F1AB00D54ED41747587BBEA33A59A1DE
// 0x0004 (0x0064 - 0x0060)
class U__OnlineGameTourServer_TA__GetTeamScore_F1AB00D54ED41747587BBEA33A59A1DE : public UObject
{
public:
	int                                                TeamIndex;                                                // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineGameTourServer_TA__GetTeamScore_F1AB00D54ED41747587BBEA33A59A1DE");
		return ptr;
	}


	bool __OnlineGameTourServer_TA__GetTeamScore_F1AB00D54ED41747587BBEA33A59A1DE(const struct FTourMatchGame& G);
};


// Class TAGame.__OnlineGameTourServer_TA__FilterMapData_DFE0F739406EBB71CF9CD2B02FFD4BFB
// 0x0010 (0x0070 - 0x0060)
class U__OnlineGameTourServer_TA__FilterMapData_DFE0F739406EBB71CF9CD2B02FFD4BFB : public UObject
{
public:
	TArray<struct FName>                               FilterMaps;                                               // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__OnlineGameTourServer_TA__FilterMapData_DFE0F739406EBB71CF9CD2B02FFD4BFB");
		return ptr;
	}


	bool __OnlineGameTourServer_TA__FilterMapData_DFE0F739406EBB71CF9CD2B02FFD4BFB(class UMapData_TA* M);
};


// Class TAGame.GFxData_PartyInviteNotification_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_PartyInviteNotification_TA : public UGFxData_Notification_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PartyInviteNotification_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_MTXGarageReveal_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_MTXGarageReveal_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_MTXGarageReveal_TA");
		return ptr;
	}


	void SetRevealRarity(TEnumAsByte<EProductQuality> InRarity);
};


// Class TAGame.GFxData_RewardDropGroup_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_RewardDropGroup_TA : public UGFxData_ItemDropGroup_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_RewardDropGroup_TA");
		return ptr;
	}

};


// Class TAGame.TraceableSpawnPoint_TA
// 0x0008 (0x0270 - 0x0268)
class ATraceableSpawnPoint_TA : public AActor
{
public:
	class UCylinderComponent*                          CylinderComp;                                             // 0x0268(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TraceableSpawnPoint_TA");
		return ptr;
	}

};


// Class TAGame.StatusTrigger_Menu_TA
// 0x0008 (0x0088 - 0x0080)
class UStatusTrigger_Menu_TA : public UStatusTrigger_X
{
public:
	struct FName                                       ConditionalValue;                                         // 0x0080(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatusTrigger_Menu_TA");
		return ptr;
	}


	void DebugPrint();
	void HandleChange(const struct FName& InValue);
};


// Class TAGame.StatusTrigger_Product_TA
// 0x0008 (0x0088 - 0x0080)
class UStatusTrigger_Product_TA : public UStatusTrigger_X
{
public:
	class UProduct_TA*                                 ConditionalValue;                                         // 0x0080(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatusTrigger_Product_TA");
		return ptr;
	}


	void DebugPrint();
	void HandleChange(int InProductID);
};


// Class TAGame.StatusTrigger_ProductOwned_TA
// 0x0000 (0x0088 - 0x0088)
class UStatusTrigger_ProductOwned_TA : public UStatusTrigger_Product_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatusTrigger_ProductOwned_TA");
		return ptr;
	}

};


// Class TAGame.StatusTrigger_ProductEquipped_TA
// 0x0000 (0x0088 - 0x0088)
class UStatusTrigger_ProductEquipped_TA : public UStatusTrigger_Product_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatusTrigger_ProductEquipped_TA");
		return ptr;
	}

};


// Class TAGame.__StatusObserver_Products_TA__UpdateTriggersBySlot_4D8C7EF84407F94812725C8A5C6C0E9B
// 0x0004 (0x0064 - 0x0060)
class U__StatusObserver_Products_TA__UpdateTriggersBySlot_4D8C7EF84407F94812725C8A5C6C0E9B : public UObject
{
public:
	int                                                InSlotIndex;                                              // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StatusObserver_Products_TA__UpdateTriggersBySlot_4D8C7EF84407F94812725C8A5C6C0E9B");
		return ptr;
	}


	bool __StatusObserver_Products_TA__UpdateTriggersBySlot_4D8C7EF84407F94812725C8A5C6C0E9B(class UStatusTrigger_X* T);
};


// Class TAGame.StatusTrigger_Numerical_TA
// 0x0008 (0x0088 - 0x0080)
class UStatusTrigger_Numerical_TA : public UStatusTrigger_X
{
public:
	TEnumAsByte<ETriggerConditionNumericalType>        TCNType;                                                  // 0x0080(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0081(0x0003) MISSED OFFSET
	int                                                ConditionalValue;                                         // 0x0084(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatusTrigger_Numerical_TA");
		return ptr;
	}


	void DebugPrint();
	void HandleChange(int InValue);
};


// Class TAGame.StatusTrigger_PlayerLevel_TA
// 0x0000 (0x0088 - 0x0088)
class UStatusTrigger_PlayerLevel_TA : public UStatusTrigger_Numerical_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatusTrigger_PlayerLevel_TA");
		return ptr;
	}

};


// Class TAGame.StatusTrigger_PlayerXP_TA
// 0x0000 (0x0088 - 0x0088)
class UStatusTrigger_PlayerXP_TA : public UStatusTrigger_Numerical_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatusTrigger_PlayerXP_TA");
		return ptr;
	}

};


// Class TAGame.ServerMergeErrorEvent_TA
// 0x0058 (0x00B8 - 0x0060)
class UServerMergeErrorEvent_TA : public UObject
{
public:
	class UStayAsPartyVote_TA*                         Vote;                                                     // 0x0060(0x0008)
	TArray<struct FUniqueNetId>                        Invitees;                                                 // 0x0068(0x0010) (NeedCtorLink)
	struct FUniqueNetId                                Leader;                                                   // 0x0078(0x0038)
	class UErrorType*                                  Reason;                                                   // 0x00B0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ServerMergeErrorEvent_TA");
		return ptr;
	}

};


// Class TAGame.__StayAsPartyVote_TA__RemoveFollower_2A29FE134051A125FF1FCE839351E30F
// 0x0038 (0x0098 - 0x0060)
class U__StayAsPartyVote_TA__RemoveFollower_2A29FE134051A125FF1FCE839351E30F : public UObject
{
public:
	struct FUniqueNetId                                FollowerID;                                               // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StayAsPartyVote_TA__RemoveFollower_2A29FE134051A125FF1FCE839351E30F");
		return ptr;
	}


	void __StayAsPartyVote_TA__RemoveFollower_2A29FE134051A125FF1FCE839351E30F(class AStayAsPartyVoter_TA* Voter);
};


// Class TAGame.__StayAsPartyVote_TA__AddFollowerToLeader_F888B3874B3A5FDA393AFE8D3ECBF20F
// 0x0038 (0x0098 - 0x0060)
class U__StayAsPartyVote_TA__AddFollowerToLeader_F888B3874B3A5FDA393AFE8D3ECBF20F : public UObject
{
public:
	struct FUniqueNetId                                LeaderID;                                                 // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__StayAsPartyVote_TA__AddFollowerToLeader_F888B3874B3A5FDA393AFE8D3ECBF20F");
		return ptr;
	}


	bool __StayAsPartyVote_TA__AddFollowerToLeader_F888B3874B3A5FDA393AFE8D3ECBF20F(class AStayAsPartyVoter_TA* Voter);
};


// Class TAGame.__TAsyncResult__PrivilegeCheck_X__Copy_68922D484EE386F23382F6B0FEE54398
// 0x0008 (0x0068 - 0x0060)
class U__TAsyncResult__PrivilegeCheck_X__Copy_68922D484EE386F23382F6B0FEE54398 : public UObject
{
public:
	class UTAsyncResult__PrivilegeCheck_X*             Instance;                                                 // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TAsyncResult__PrivilegeCheck_X__Copy_68922D484EE386F23382F6B0FEE54398");
		return ptr;
	}


	void __TAsyncResult__PrivilegeCheck_X__Copy_68922D484EE386F23382F6B0FEE54398(class UPrivilegeCheck_X* R, class UError* E);
};


// Class TAGame.__TAsyncResult__PrivilegeCheck_X__SetResultWhen_09607741473CD7EA4040BEAF94C35C7C
// 0x0018 (0x0078 - 0x0060)
class U__TAsyncResult__PrivilegeCheck_X__SetResultWhen_09607741473CD7EA4040BEAF94C35C7C : public UObject
{
public:
	struct FScriptDelegate                             GetResultDelegate;                                        // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TAsyncResult__PrivilegeCheck_X__SetResultWhen_09607741473CD7EA4040BEAF94C35C7C");
		return ptr;
	}


	void __TAsyncResult__PrivilegeCheck_X__SetResultWhen_09607741473CD7EA4040BEAF94C35C7C();
};


// Class TAGame.__TAsyncResult__PrivilegeCheck_X__NotifyOnResultComplete_F9D8B38848D80B3C33D1459F72B0862A
// 0x0018 (0x0078 - 0x0060)
class U__TAsyncResult__PrivilegeCheck_X__NotifyOnResultComplete_F9D8B38848D80B3C33D1459F72B0862A : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TAsyncResult__PrivilegeCheck_X__NotifyOnResultComplete_F9D8B38848D80B3C33D1459F72B0862A");
		return ptr;
	}


	void __TAsyncResult__PrivilegeCheck_X__NotifyOnResultComplete_F9D8B38848D80B3C33D1459F72B0862A(class UError* Err);
};


// Class TAGame.__TAsyncResult__PrivilegeCheck_X__NotifyOnResult_8BEA313245A9D37CB6C29DA733A55DE3
// 0x0018 (0x0078 - 0x0060)
class U__TAsyncResult__PrivilegeCheck_X__NotifyOnResult_8BEA313245A9D37CB6C29DA733A55DE3 : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TAsyncResult__PrivilegeCheck_X__NotifyOnResult_8BEA313245A9D37CB6C29DA733A55DE3");
		return ptr;
	}


	void __TAsyncResult__PrivilegeCheck_X__NotifyOnResult_8BEA313245A9D37CB6C29DA733A55DE3();
};


// Class TAGame.__TourUtils_TA__CalcTeamWins_2826A3AC4495B616B55DCE874B5DD1CB
// 0x0004 (0x0064 - 0x0060)
class U__TourUtils_TA__CalcTeamWins_2826A3AC4495B616B55DCE874B5DD1CB : public UObject
{
public:
	int                                                TeamID;                                                   // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourUtils_TA__CalcTeamWins_2826A3AC4495B616B55DCE874B5DD1CB");
		return ptr;
	}


	bool __TourUtils_TA__CalcTeamWins_2826A3AC4495B616B55DCE874B5DD1CB(const struct FTourMatchGame& G);
};


// Class TAGame.__TriggerCondition_TA__AddTriggers_C3692D1A4DED3B576C9251B92A6F8B7E
// 0x0008 (0x0068 - 0x0060)
class U__TriggerCondition_TA__AddTriggers_C3692D1A4DED3B576C9251B92A6F8B7E : public UObject
{
public:
	class UTriggerClump_TA*                            Clump;                                                    // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TriggerCondition_TA__AddTriggers_C3692D1A4DED3B576C9251B92A6F8B7E");
		return ptr;
	}


	void __TriggerCondition_TA__AddTriggers_C3692D1A4DED3B576C9251B92A6F8B7E(class UStatusTrigger_X* T);
};


// Class TAGame.ProductAttribute_Archived_TA
// 0x0000 (0x0080 - 0x0080)
class UProductAttribute_Archived_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_Archived_TA");
		return ptr;
	}

};


// Class TAGame.RPC_BuildBlueprint_TA
// 0x0088 (0x0188 - 0x0100)
class URPC_BuildBlueprint_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_BuildBlueprint_TA.InstanceID
	int                                                ExpectedPrice;                                            // 0x0140(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	struct FOnlineProductData                          ProductData;                                              // 0x0148(0x0030) (Transient, NeedCtorLink)
	TArray<struct FCurrency>                           WalletCurrencies;                                         // 0x0178(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_BuildBlueprint_TA");
		return ptr;
	}

};


// Class TAGame.RPC_RevealBlueprint_TA
// 0x0070 (0x0170 - 0x0100)
class URPC_RevealBlueprint_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_RevealBlueprint_TA.InstanceID
	struct FOnlineProductData                          ProductData;                                              // 0x0140(0x0030) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_RevealBlueprint_TA");
		return ptr;
	}


	class URPC_RevealBlueprint_TA* SetInstanceID();
	class URPC_RevealBlueprint_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.TourGameUpdate_TA
// 0x0020 (0x0080 - 0x0060)
class UTourGameUpdate_TA : public UObject
{
public:
	TArray<struct FUniqueNetId>                        JoinedPlayers;                                            // 0x0060(0x0010) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        IdlePlayers;                                              // 0x0070(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourGameUpdate_TA");
		return ptr;
	}


	void __TourGameUpdate_TA__Construct_AD5CC5884581711289BE04B7F9BE415B(class AGameEvent_TA* GameEvent);
	void __TourGameUpdate_TA__Construct_F973599345EF1632F0DCCFADBF8E1AE8(class AGameEvent_TA* G, class APRI_TA* PRI);
	bool __TourGameUpdate_TA__GetNoShowPlayers_A08A57B5400E7F6AC2A45CB0BA7F3B04(const struct FUniqueNetId& Id);
	struct FUniqueNetId __TourGameUpdate_TA__GetLeavers_90C407B14F21206D3DEA2D93360E05D8(const struct FReservationData& P);
	bool __TourGameUpdate_TA__GetLeavers_C5B3B7BF47F1CC1ACAA9E5836329CB60(const struct FReservationData& P);
	class URPC_X* SendUpdateGameRPC(class UTourGameUpdateDispatcher_TA* Dispatcher, int InGameNum, const struct FTourMatchGame& InGameData, int SeriesWinnerID, class URPC_TourUpdateGame_TA** ObjectInitializer_28F96835495F69218FE379AE0BA2BA55);
	TArray<struct FUniqueNetId> GetLeavers(TArray<struct FReservationData>* FilterLocal_115AE9CD45E6DA2464C1358D04EAE97E, TArray<struct FUniqueNetId>* MapLocal_51CA94BB4895E74A4002819C0AF647B6);
	TArray<struct FUniqueNetId> GetNoShowPlayers(class UTourGameUpdateDispatcher_TA* Dispatcher, TArray<struct FUniqueNetId>* FilterLocal_4A58E2534D4F326FE0C5EEA479E63797);
	void Construct();
};


// Class TAGame.GFxData_ProductAttribute_ContainerKey_TA
// 0x0004 (0x00B4 - 0x00B0)
class UGFxData_ProductAttribute_ContainerKey_TA : public UGFxData_ProductAttribute_TA
{
public:
	unsigned long                                      bMagicKey : 1;                                            // 0x00B0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_ContainerKey_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_Key_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_Container_TA
// 0x0004 (0x00B4 - 0x00B0)
class UGFxData_ProductAttribute_Container_TA : public UGFxData_ProductAttribute_TA
{
public:
	unsigned long                                      bUnlocked : 1;                                            // 0x00B0(0x0004) (DataBinding)
	unsigned long                                      bSkipRoulette : 1;                                        // 0x00B0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Container_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_Container_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_Painted_TA
// 0x002C (0x00DC - 0x00B0)
class UGFxData_ProductAttribute_Painted_TA : public UGFxData_ProductAttribute_TA
{
public:
	struct FColor                                      ProductPaintColor;                                        // 0x00B0(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	struct FString                                     ProductPaintColorName;                                    // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	class UTexture2D*                                  ProductPaintMask;                                         // 0x00C8(0x0008) (DataBinding)
	float                                              ProductPaintDiffHue;                                      // 0x00D0(0x0004) (DataBinding)
	float                                              ProductPaintDiffSaturation;                               // 0x00D4(0x0004) (DataBinding)
	float                                              ProductPaintDiffLightness;                                // 0x00D8(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Painted_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_Painted_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_Level_TA
// 0x0004 (0x00B4 - 0x00B0)
class UGFxData_ProductAttribute_Level_TA : public UGFxData_ProductAttribute_TA
{
public:
	unsigned long                                      bProductUpgradable : 1;                                   // 0x00B0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Level_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_Level_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_Schematic_TA
// 0x0000 (0x00B0 - 0x00B0)
class UGFxData_ProductAttribute_Schematic_TA : public UGFxData_ProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Schematic_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_ProductAttribute_Certified_TA
// 0x0010 (0x00C0 - 0x00B0)
class UGFxData_ProductAttribute_Certified_TA : public UGFxData_ProductAttribute_TA
{
public:
	struct FString                                     CertifiedStatLabel;                                       // 0x00B0(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Certified_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_Certified_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_ProductLink_TA
// 0x0004 (0x00B4 - 0x00B0)
class UGFxData_ProductAttribute_ProductLink_TA : public UGFxData_ProductAttribute_TA
{
public:
	int                                                ProductID;                                                // 0x00B0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_ProductLink_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_ProductLink_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_Expiration_TA
// 0x0008 (0x00B8 - 0x00B0)
class UGFxData_ProductAttribute_Expiration_TA : public UGFxData_ProductAttribute_TA
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_ProductAttribute_Expiration_TA.ExpirationTime

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Expiration_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_Expiration_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_Rental_TA
// 0x0004 (0x00B4 - 0x00B0)
class UGFxData_ProductAttribute_Rental_TA : public UGFxData_ProductAttribute_TA
{
public:
	int                                                RentalLength;                                             // 0x00B0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Rental_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_Rental_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_Indestructible_TA
// 0x0004 (0x00B4 - 0x00B0)
class UGFxData_ProductAttribute_Indestructible_TA : public UGFxData_ProductAttribute_TA
{
public:
	unsigned long                                      bIndestructible : 1;                                      // 0x00B0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Indestructible_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_Indestructible_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_Title_TA
// 0x0008 (0x00B8 - 0x00B0)
class UGFxData_ProductAttribute_Title_TA : public UGFxData_ProductAttribute_TA
{
public:
	struct FName                                       TitleId;                                                  // 0x00B0(0x0008) (Edit, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Title_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_TitleID_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_Tiered_TA
// 0x0004 (0x00B4 - 0x00B0)
class UGFxData_ProductAttribute_Tiered_TA : public UGFxData_ProductAttribute_TA
{
public:
	int                                                ProductTier;                                              // 0x00B0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Tiered_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_Tiered_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_SpecialEdition_TA
// 0x0010 (0x00C0 - 0x00B0)
class UGFxData_ProductAttribute_SpecialEdition_TA : public UGFxData_ProductAttribute_TA
{
public:
	struct FString                                     EditionLabel;                                             // 0x00B0(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_SpecialEdition_TA");
		return ptr;
	}


	void OnReceivedAttribute(class UProductAttribute_SpecialEdition_TA* Attribute);
};


// Class TAGame.GFxData_ProductAttribute_TeamEdition_TA
// 0x0018 (0x00C8 - 0x00B0)
class UGFxData_ProductAttribute_TeamEdition_TA : public UGFxData_ProductAttribute_TA
{
public:
	struct FString                                     TeamName;                                                 // 0x00B0(0x0010) (NeedCtorLink, DataBinding)
	class UTexture*                                    TeamLogo;                                                 // 0x00C0(0x0008) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_TeamEdition_TA");
		return ptr;
	}


	class UProduct_TA* GetRequiredProduct(class UProduct_TA* Product);
	void UpdateAdditionalLoadedData(class UGFxData_Products_TA* GFxData_Products, class ULoadingProduct_TA* ProductData, class UProduct_TA* Product);
};


// Class TAGame.GFxData_ProductAttribute_ShopItem_TA
// 0x0010 (0x00C0 - 0x00B0)
class UGFxData_ProductAttribute_ShopItem_TA : public UGFxData_ProductAttribute_TA
{
public:
	class UTexture*                                    BackgroundImage;                                          // 0x00B0(0x0008) (DataBinding)
	class UTexture*                                    ItemLogo;                                                 // 0x00B8(0x0008) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_ShopItem_TA");
		return ptr;
	}


	void UpdateAdditionalLoadedData(class UGFxData_Products_TA* GFxData_Products, class ULoadingProduct_TA* ProductData, class UProduct_TA* Product);
};


// Class TAGame.GFxData_ProductAttribute_Currency_TA
// 0x0004 (0x00B4 - 0x00B0)
class UGFxData_ProductAttribute_Currency_TA : public UGFxData_ProductAttribute_TA
{
public:
	int                                                CurrencyID;                                               // 0x00B0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductAttribute_Currency_TA");
		return ptr;
	}


	void UpdateAdditionalLoadedData(class UGFxData_Products_TA* GFxProducts, class ULoadingProduct_TA* ProductData, class UProduct_TA* Product);
	void OnReceivedAttribute(class UProductAttribute_Currency_TA* Attribute);
};


// Class TAGame.__TourGameUpdateDispatcher_TA__Init_D4A0FDC84B4C177645053D8F9801A8E4
// 0x00D0 (0x0130 - 0x0060)
class U__TourGameUpdateDispatcher_TA__Init_D4A0FDC84B4C177645053D8F9801A8E4 : public UObject
{
public:
	struct FTourServerSettings                         Settings;                                                 // 0x0060(0x00D0) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourGameUpdateDispatcher_TA__Init_D4A0FDC84B4C177645053D8F9801A8E4");
		return ptr;
	}


	int __TourGameUpdateDispatcher_TA__Init_D4A0FDC84B4C177645053D8F9801A8E4(class ATeam_TA* T);
};


// Class TAGame.RPC_TourUpdateGame_TA
// 0x0080 (0x0180 - 0x0100)
class URPC_TourUpdateGame_TA : public URPC_X
{
public:
	struct FString                                     MatchGUID;                                                // 0x0100(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0110(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_TourUpdateGame_TA.serverId
	unsigned char                                      UnknownData01[0x8];                                       // 0x0118(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_TourUpdateGame_TA.TournamentID
	int                                                MatchID;                                                  // 0x0120(0x0004)
	int                                                Game;                                                     // 0x0124(0x0004)
	struct FTourMatchGame                              GameData;                                                 // 0x0128(0x0014)
	int                                                Winner;                                                   // 0x013C(0x0004)
	TArray<struct FUniqueNetId>                        PlayersNoShow;                                            // 0x0140(0x0010) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        PlayersLeftEarly;                                         // 0x0150(0x0010) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        PlayersIdle;                                              // 0x0160(0x0010) (NeedCtorLink)
	TArray<struct FTeamUpdateInfo>                     Teams;                                                    // 0x0170(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourUpdateGame_TA");
		return ptr;
	}

};


// Class TAGame.__TourGameUpdateDispatcher_TA__HandleUpdateGameSuccess_8850591047DF29F61BEF318739F4298C
// 0x0008 (0x0068 - 0x0060)
class U__TourGameUpdateDispatcher_TA__HandleUpdateGameSuccess_8850591047DF29F61BEF318739F4298C : public UObject
{
public:
	class UOnlineGameTourServer_TA*                    TourServer;                                               // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourGameUpdateDispatcher_TA__HandleUpdateGameSuccess_8850591047DF29F61BEF318739F4298C");
		return ptr;
	}


	void __TourGameUpdateDispatcher_TA__HandleUpdateGameSuccess_8850591047DF29F61BEF318739F4298C(const struct FTeamUpdateInfo& T);
};


// Class TAGame.RPC_FaceItMatchStarted_TA
// 0x0038 (0x0138 - 0x0100)
class URPC_FaceItMatchStarted_TA : public URPC_X
{
public:
	int                                                MatchID;                                                  // 0x0100(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	struct FString                                     MatchGUID;                                                // 0x0108(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0118(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_FaceItMatchStarted_TA.serverId
	int                                                SeriesRoundNumber;                                        // 0x0120(0x0004)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	TArray<struct FUniqueNetId>                        Players;                                                  // 0x0128(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_FaceItMatchStarted_TA");
		return ptr;
	}


	class URPC_FaceItMatchStarted_TA* SetPlayerIDs(TArray<struct FUniqueNetId> Value);
	class URPC_FaceItMatchStarted_TA* SetSeriesRoundNumber(int Value);
	class URPC_FaceItMatchStarted_TA* SetServerID();
	class URPC_FaceItMatchStarted_TA* SetMatchGUID(const struct FString& Value);
	class URPC_FaceItMatchStarted_TA* SetMatchID(int Value);
};


// Class TAGame.OnlineGameDLC_TA
// 0x0020 (0x00D8 - 0x00B8)
class UOnlineGameDLC_TA : public UOnlineGameDLC_X
{
public:
	class URPC_GetDLC_TA*                              LatestDLC;                                                // 0x00B8(0x0008) (Transient)
	struct FScriptDelegate                             __EventUpdated__Delegate;                                 // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameDLC_TA");
		return ptr;
	}


	bool GetDLCIsNew(int I);
	struct FName GetDLCName(int I);
	int GetNumDLC();
	void HandleDLCReceived(class URPC_GetDLC_TA* InDLC);
	void Sync();
	void HandlePsyNetConnection();
	void NotifyWhenReleased(const struct FScriptDelegate& Callback);
	void OnInit();
	void EventUpdated(class UOnlineGameDLC_X* DLC);
};


// Class TAGame.RPC_GetDLC_TA
// 0x0010 (0x0110 - 0x0100)
class URPC_GetDLC_TA : public URPC_X
{
public:
	TArray<struct FDLCInfo>                            DLC;                                                      // 0x0100(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetDLC_TA");
		return ptr;
	}

};


// Class TAGame.RPC_AchievementDataUpload_TA
// 0x0020 (0x0120 - 0x0100)
class URPC_AchievementDataUpload_TA : public URPC_X
{
public:
	TArray<struct FAchievementUpload>                  Achievements;                                             // 0x0100(0x0010) (NeedCtorLink)
	struct FString                                     SettingsArchetype;                                        // 0x0110(0x0010) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_AchievementDataUpload_TA");
		return ptr;
	}


	class URPC_AchievementDataUpload_TA* Upload();
};


// Class TAGame.RPC_UploadIntroCars_TA
// 0x0010 (0x0110 - 0x0100)
class URPC_UploadIntroCars_TA : public URPC_X
{
public:
	TArray<struct FRPCIntroCar>                        LoadoutTemplates;                                         // 0x0100(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_UploadIntroCars_TA");
		return ptr;
	}


	void AddIntroCar(const struct FString& InTemplateName, const struct FString& InTemplateDescription, int InTemplateIndex, TArray<int> InProductsList);
};


// Class TAGame.IntroCarTemplates_TA
// 0x0010 (0x0070 - 0x0060)
class UIntroCarTemplates_TA : public UObject
{
public:
	TArray<struct FEditorIntroCar>                     IntroCars;                                                // 0x0060(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IntroCarTemplates_TA");
		return ptr;
	}

};


// Class TAGame.__GameEventProductAssetCache_TA__HandleCarAssetsLoaded_2F1DB16846DAC7E6EA272EBF3EE8E974
// 0x0008 (0x0068 - 0x0060)
class U__GameEventProductAssetCache_TA__HandleCarAssetsLoaded_2F1DB16846DAC7E6EA272EBF3EE8E974 : public UObject
{
public:
	class UProductLoader_TA*                           Loader;                                                   // 0x0060(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameEventProductAssetCache_TA__HandleCarAssetsLoaded_2F1DB16846DAC7E6EA272EBF3EE8E974");
		return ptr;
	}


	bool __GameEventProductAssetCache_TA__HandleCarAssetsLoaded_2F1DB16846DAC7E6EA272EBF3EE8E974(class UPriAssetCache_TA* C);
};


// Class TAGame.PriAssetCache_TA
// 0x0018 (0x0078 - 0x0060)
class UPriAssetCache_TA : public UObject
{
public:
	class APRI_TA*                                     PRI;                                                      // 0x0060(0x0008)
	TArray<int>                                        Products;                                                 // 0x0068(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PriAssetCache_TA");
		return ptr;
	}

};


// Class TAGame.GameEventProductAssetCache_TA
// 0x001C (0x00C0 - 0x00A4)
class UGameEventProductAssetCache_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class UProductAssetCache_TA*                       AssetCache;                                               // 0x00A8(0x0008) (ExportObject, Component, EditInline)
	TArray<class UPriAssetCache_TA*>                   PriCache;                                                 // 0x00B0(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEventProductAssetCache_TA");
		return ptr;
	}


	int __GameEventProductAssetCache_TA__HandleCarAssetsLoaded_4CAC311B43C5015FCDADD89C854D1248(class UProductAsset_TA* P);
	void __GameEventProductAssetCache_TA__RefreshCache_29CB2D8D40EA00DA866F069EF1E12685(class UPriAssetCache_TA* C);
	void RefreshCache();
	void RefreshCacheDelayed();
	void HandleCarAssetsLoaded(class UProductLoader_TA* Loader, TArray<int>* MapLocal_FED74DBC4D8AB4E3129B31A1E568A128, TArray<int>* UnionLocal_0E2BA9C841F5ABF6CAB08E8834108F63);
	void HandleCarSet(class APRI_TA* PRI);
	void HandlePlayerRemoved(class AGameEvent_TA* G, class APRI_TA* PRI);
	void HandlePlayerAdded(class AGameEvent_TA* G, class APRI_TA* PRI);
	void Detached();
	void Attached();
};


// Class TAGame.__GameEventProductAssetCache_TA__HandlePlayerAdded_8D99F1EB4F6AFE68FECD28A724AD746A
// 0x0008 (0x0068 - 0x0060)
class U__GameEventProductAssetCache_TA__HandlePlayerAdded_8D99F1EB4F6AFE68FECD28A724AD746A : public UObject
{
public:
	class APRI_TA*                                     PRI;                                                      // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameEventProductAssetCache_TA__HandlePlayerAdded_8D99F1EB4F6AFE68FECD28A724AD746A");
		return ptr;
	}


	bool __GameEventProductAssetCache_TA__HandlePlayerAdded_8D99F1EB4F6AFE68FECD28A724AD746A(class UPriAssetCache_TA* C);
};


// Class TAGame.__GameEventProductAssetCache_TA__HandlePlayerRemoved_E7CA87D44C30F6A18BE07CAF2BC601DB
// 0x0008 (0x0068 - 0x0060)
class U__GameEventProductAssetCache_TA__HandlePlayerRemoved_E7CA87D44C30F6A18BE07CAF2BC601DB : public UObject
{
public:
	class APRI_TA*                                     PRI;                                                      // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GameEventProductAssetCache_TA__HandlePlayerRemoved_E7CA87D44C30F6A18BE07CAF2BC601DB");
		return ptr;
	}


	bool __GameEventProductAssetCache_TA__HandlePlayerRemoved_E7CA87D44C30F6A18BE07CAF2BC601DB(class UPriAssetCache_TA* C);
};


// Class TAGame.__GFxData_AutoTour_TourCard_TA__HandleSubscriptionChanged_BD3D8E5443592F06A3D81FA79F15132D
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_AutoTour_TourCard_TA__HandleSubscriptionChanged_BD3D8E5443592F06A3D81FA79F15132D : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__GFxData_AutoTour_TourCard_TA__HandleSubscriptionChanged_BD3D8E5443592F06A3D81FA79F15132D.TournamentID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_AutoTour_TourCard_TA__HandleSubscriptionChanged_BD3D8E5443592F06A3D81FA79F15132D");
		return ptr;
	}


	bool __GFxData_AutoTour_TourCard_TA__HandleSubscriptionChanged_BD3D8E5443592F06A3D81FA79F15132D(class UTourSettings_TA* S);
};


// Class TAGame.GFxData_AutoTour_TourCard_TA
// 0x0050 (0x00E4 - 0x0094)
class UGFxData_AutoTour_TourCard_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class UOnlineGameTournaments_TA*                   OnlineGameTournaments;                                    // 0x0098(0x0008) (Edit)
	TArray<class UTourSettings_TA*>                    Settings;                                                 // 0x00A0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00B0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_AutoTour_TourCard_TA.StartTime
	unsigned char                                      UnknownData02[0x8];                                       // 0x00B8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_AutoTour_TourCard_TA.LastTournamentTime
	struct FString                                     Description;                                              // 0x00C0(0x0010) (NeedCtorLink, DataBinding)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00D0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_AutoTour_TourCard_TA.ScheduleID
	int                                                TeamSize;                                                 // 0x00D8(0x0004) (DataBinding)
	unsigned char                                      GameMode;                                                 // 0x00DC(0x0001) (DataBinding)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00DD(0x0003) MISSED OFFSET
	unsigned long                                      bIsEnabled : 1;                                           // 0x00E0(0x0004) (DataBinding)
	unsigned long                                      bCanCheckIn : 1;                                          // 0x00E0(0x0004) (DataBinding)
	unsigned long                                      bRegistered : 1;                                          // 0x00E0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_AutoTour_TourCard_TA");
		return ptr;
	}


	bool __GFxData_AutoTour_TourCard_TA__Init_08E5FF044EFAD4CC273B02B11F0BA59C(class UTourSettings_TA* S);
	bool __GFxData_AutoTour_TourCard_TA__GetEligibleTourSetting_A6F1D0E44B9A48D4459C22A7F8494E07(class UTourSettings_TA* S);
	bool GetHoldsIneligibleScheduleID();
	class UTourSettings_TA* GetEligibleTourSetting();
	void GetActiveTourID();
	void HandleSubscriptionChanged(class UTourSubscriptions_TA* Subscriptions);
	void OnCheckInClosed();
	void OnCheckInOpen();
	void UpdateCanCheckIn();
	void Init(struct FScheduledTournament* Schedule);
};


// Class TAGame.__GFxData_ChallengeTab_TA__RefreshNotifiesFromChallenges_685CE37042DB73777E6D17BA913A43A9
// 0x0004 (0x0064 - 0x0060)
class U__GFxData_ChallengeTab_TA__RefreshNotifiesFromChallenges_685CE37042DB73777E6D17BA913A43A9 : public UObject
{
public:
	unsigned long                                      bOwnsPremium : 1;                                         // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_ChallengeTab_TA__RefreshNotifiesFromChallenges_685CE37042DB73777E6D17BA913A43A9");
		return ptr;
	}


	bool __GFxData_ChallengeTab_TA__RefreshNotifiesFromChallenges_685CE37042DB73777E6D17BA913A43A9(class UChallenge_TA* C);
};


// Class TAGame.GFxData_ChallengeFolder_TA
// 0x0054 (0x00E8 - 0x0094)
class UGFxData_ChallengeFolder_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	unsigned long                                      bSelected : 1;                                            // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bNotifyNewInfo : 1;                                       // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bRewardsAvailable : 1;                                    // 0x0098(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	TArray<class UGFxData_ChallengeFolder_TA*>         GFxSubFolders;                                            // 0x00A0(0x0010) (NeedCtorLink)
	class UClass*                                      SubFolderClass;                                           // 0x00B0(0x0008)
	struct FScriptDelegate                             __EventSelected__Delegate;                                // 0x00B8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00B8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventRefreshed__Delegate;                               // 0x00D0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x00D0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ChallengeFolder_TA");
		return ptr;
	}


	void __GFxData_ChallengeFolder_TA__RemoveSubFolders_06E19485443288A15783C5A7A0AF1DB5(class UGFxData_ChallengeFolder_TA* Folder);
	void __GFxData_ChallengeFolder_TA__CreateSubFolders_53CE2F4E45AEA52ECC4D70982681C2CE(class UChallengeFolder_TA* Folder);
	void RefreshNotifies();
	class UChallengeFolder_TA* GetFolderProxy();
	void CreateSubFolders();
	void RemoveSubFolders();
	class UGFxData_ChallengeFolder_TA* AddSubFolder(class UClass* FolderClass, class UChallengeFolder_TA* ChallengeFolder);
	void HandleSubFolderRefreshed(class UGFxData_ChallengeFolder_TA* GFxFolder);
	void HandleSubFolderSelected(class UGFxData_ChallengeFolder_TA* GFxFolder);
	void Unselect();
	void Select();
	void SetFolderProxy(class UChallengeFolder_TA* ChallengeFolder);
	void OnRemoved();
	void EventRefreshed(class UGFxData_ChallengeFolder_TA* GFxFolder);
	void EventSelected(class UGFxData_ChallengeFolder_TA* GFxFolder);
};


// Class TAGame.GFxData_ChallengeTab_TA
// 0x000C (0x00F4 - 0x00E8)
class UGFxData_ChallengeTab_TA : public UGFxData_ChallengeFolder_TA
{
public:
	class UChallengeManager_TA*                        ChallengeManager;                                         // 0x00E8(0x0008)
	unsigned long                                      bChallengesCompleted : 1;                                 // 0x00F0(0x0004) (DataBinding)
	unsigned long                                      bHasVisibleChallenges : 1;                                // 0x00F0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ChallengeTab_TA");
		return ptr;
	}


	void __GFxData_ChallengeTab_TA__OnShellSet_F9270E2D417A5F3A23DFF7988A78C5A1(class UChallengeManager_TA* Manager);
	void __GFxData_ChallengeTab_TA__OnShellSet_9D0F3F2B4C3BD374BAA3C2A31D570107(class UChallengeManager_TA* Manager, class UChallenge_TA* Challenge, struct FOnlineReward* Reward);
	void __GFxData_ChallengeTab_TA__OnShellSet_BED9904441BF0271D2EC8FB807C6877C(class UChallengeManager_TA* Manager, class UChallenge_TA* Challenge);
	void __GFxData_ChallengeTab_TA__OnShellSet_B4C9306743BBA05B9EAA939AB9B59F3E(class UChallengeManager_TA* Manager, class UChallenge_TA* Challenge);
	void __GFxData_ChallengeTab_TA__RefreshChallenges_3074D7EC471C30B5C85E6A8195B1B092(class UChallenge_TA* C);
	bool __GFxData_ChallengeTab_TA__RefreshNotifiesFromChallenges_2C99CF1D480D1E95084B42B8B5888EB0(class UChallenge_TA* C);
	bool __GFxData_ChallengeTab_TA__RefreshNotifiesFromChallenges_4F61D0CB4E1AE9D22F2F778D61A3AB76(class UChallenge_TA* C);
	bool __GFxData_ChallengeTab_TA__RefreshNotifiesFromChallenges_34CA1046491C74CE6DD04886970A21AF(class UChallenge_TA* C);
	void RefreshNotifiesFromChallenges(TArray<class UChallenge_TA*> Challenges);
	void RefreshNotifies();
	void RemoveGFxChallengeData();
	void AddGFxChallenge(class UChallenge_TA* Challenge);
	void HandleChallengeAdded(class UChallengeManager_TA* Manager, class UChallenge_TA* Challenge);
	TArray<class UChallenge_TA*> GetChallenges();
	void RefreshChallenges();
	void Select();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.__GFxData_ClubDetails_TA__UpdateClubMembers_FF66631541AA17B67C71179A529E59AD
// 0x0048 (0x00A8 - 0x0060)
class U__GFxData_ClubDetails_TA__UpdateClubMembers_FF66631541AA17B67C71179A529E59AD : public UObject
{
public:
	struct FClubMember                                 Member;                                                   // 0x0060(0x0048) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_ClubDetails_TA__UpdateClubMembers_FF66631541AA17B67C71179A529E59AD");
		return ptr;
	}


	bool __GFxData_ClubDetails_TA__UpdateClubMembers_FF66631541AA17B67C71179A529E59AD(class UGFxData_ClubMember_TA* D);
};


// Class TAGame.GFxData_ClubDetails_TA
// 0x00A4 (0x0138 - 0x0094)
class UGFxData_ClubDetails_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x0094(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_ClubDetails_TA.ClubID
	struct FString                                     ClubName;                                                 // 0x00A0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ClubTag;                                                  // 0x00B0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ClubMotD;                                                 // 0x00C0(0x0010) (NeedCtorLink, DataBinding)
	int                                                PrimaryColorID;                                           // 0x00D0(0x0004) (DataBinding)
	int                                                AccentColorID;                                            // 0x00D4(0x0004) (DataBinding)
	struct FUniqueNetId                                OwnerId;                                                  // 0x00D8(0x0038) (DataBinding)
	unsigned long                                      bVerified : 1;                                            // 0x0110(0x0004) (DataBinding)
	unsigned long                                      bCrossPlatformFiltered : 1;                               // 0x0110(0x0004) (DataBinding)
	unsigned char                                      UnknownData02[0x4];                                       // 0x0114(0x0004) MISSED OFFSET
	class UClubDetails_X*                              ClubDetails;                                              // 0x0118(0x0008) (Transient)
	TArray<class UGFxData_ClubMember_TA*>              ClubMembers;                                              // 0x0120(0x0010) (Transient, NeedCtorLink)
	class UOnlineGameWordFilter_X*                     WordFilter;                                               // 0x0130(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ClubDetails_TA");
		return ptr;
	}


	void __GFxData_ClubDetails_TA__OnShellSet_C513BFF149E2AB8211D4638B8EEF06ED(class UAccountSettingsComponent_TA* AccountSettings);
	bool CanDisplayClubMember(const struct FUniqueNetId& NetId, bool bEnableCrossplay);
	bool IsSamePlatform(const struct FUniqueNetId& Id0, const struct FUniqueNetId& Id1);
	void UpdateClubMembers();
	void HandleSanitizedClubMotD(const struct FString& Original, const struct FString& Sanitized);
	void HandleSanitizedClubTag(const struct FString& Original, const struct FString& Sanitized);
	void HandleSanitizedClubName(const struct FString& Original, const struct FString& Sanitized);
	void Destroyed();
	void SetClubDetails(class UClubDetails_X* InClubDetails);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.__GFxData_Clubs_TA__AcceptClubInvite_104F0A5942F43F2FEF140696CB2668FE
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Clubs_TA__AcceptClubInvite_104F0A5942F43F2FEF140696CB2668FE : public UObject
{
public:
	class UClubInviteNotification_TA*                  Notification;                                             // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Clubs_TA__AcceptClubInvite_104F0A5942F43F2FEF140696CB2668FE");
		return ptr;
	}


	class UAsyncTask* __GFxData_Clubs_TA__AcceptClubInvite_DBA58F5E48D8B472547FF79D9F202F90();
	void __GFxData_Clubs_TA__AcceptClubInvite_104F0A5942F43F2FEF140696CB2668FE(class UGFxClubAction_TA* Action);
};


// Class TAGame.GFxData_Clubs_TA
// 0x00F0 (0x0188 - 0x0098)
class UGFxData_Clubs_TA : public UGFxDataSingleton_X
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0098(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_Clubs_TA.LocalClubID
	unsigned long                                      bClubOwner : 1;                                           // 0x00A0(0x0004) (DataBinding)
	unsigned long                                      bSyncedLocalClub : 1;                                     // 0x00A0(0x0004) (DataBinding)
	unsigned long                                      bHasSyncedClubInvites : 1;                                // 0x00A0(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FString                                     LocalClubSyncError;                                       // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ExecutingClubAction;                                      // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	class UPsyNet_X*                                   PsyNet;                                                   // 0x00C8(0x0008)
	class UOnlineClubProvider_X*                       ClubProvider;                                             // 0x00D0(0x0008)
	class UClubsConfig_TA*                             ClubsConfig;                                              // 0x00D8(0x0008)
	class UOnlineGameParty_X*                          Party;                                                    // 0x00E0(0x0008)
	class UPersonas_TA*                                PersonasData;                                             // 0x00E8(0x0008) (Transient)
	class UOnlineClubManager_X*                        ClubManager;                                              // 0x00F0(0x0008)
	TArray<class UGFxData_ClubDetails_TA*>             AllClubDetails;                                           // 0x00F8(0x0010) (Transient, NeedCtorLink)
	class UGFxClubAction_TA*                           CurrentClubAction;                                        // 0x0108(0x0008) (Transient)
	struct FString                                     TagTooShort;                                              // 0x0110(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     TagTooLong;                                               // 0x0120(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     TagHasInvalidCharacters;                                  // 0x0130(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     NameTooShort;                                             // 0x0140(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     NameTooLong;                                              // 0x0150(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     NameHasInvalidCharacters;                                 // 0x0160(0x0010) (Const, Localized, NeedCtorLink)
	struct FScriptDelegate                             __FlashActionHandler__Delegate;                           // 0x0170(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0170(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Clubs_TA");
		return ptr;
	}


	void __GFxData_Clubs_TA__InviteToClub_55237AF343A5EBA26B06E2853AD16610(class UError* TaskError);
	void __GFxData_Clubs_TA__SetClubInvites_1940691D43DCCDDE4531FA9C23523D5F(class UClubInviteNotification_TA* Notification);
	void __GFxData_Clubs_TA__SetClubInvites_A5800D584E401F6D9AC1A58A946ABD5A(class UClubInviteNotification_TA* Notification);
	void __GFxData_Clubs_TA__RejectAllClubInvites_36A9FE114C6BF1B6BE2B2A8D188EC4FB(class URPC_ClearClubInvites_X* RPC);
	void __GFxData_Clubs_TA__RejectAllClubInvites_F7FDBCF548DDC3C62509BEB6617B372B(class URPC_ClearClubInvites_X* RPC);
	class UAsyncTask* __GFxData_Clubs_TA__LeaveClub_D555AF0A46A5E22AA715479FBFE27B38();
	bool CanDisbandClub();
	void LeaveClub();
	void RemoveClubInvites();
	void HandleRejectedClubInviteComplete(class UGFxClubAction_TA* Action, class UClubInviteNotification_TA* Notification);
	void RejectClubInvite(class UClubInviteNotification_TA* Notification);
	void RejectAllClubInvites();
	void HandleAcceptedClubInviteComplete(class UGFxClubAction_TA* Action, class UClubInviteNotification_TA* Notification);
	void AcceptClubInvite(class UClubInviteNotification_TA* Notification);
	void SetClubInvites(TArray<class UClubInvite_X*> Invites);
	class UGFxData_ClubInvite_TA* GetGFxClubInvite();
	void SyncClubInvites();
	void SetClubOwner(const struct FUniqueNetId& PlayerID);
	void RemoveFromClub(const struct FUniqueNetId& PlayerID);
	void HandleClubInviteFailed(const struct FUniqueNetId& PlayerID, class UError* TaskError);
	void InviteToClub(const struct FUniqueNetId& PlayerID);
	void SetMotD(const struct FString& Text);
	void UpdateClubColors(int PrimaryColorID, int AccentColorID);
	void UpdateClubName(const struct FString& ClubName, const struct FString& ClubTag);
	void ClearLocalClubInvitations(TArray<class UClubInviteNotification_TA*>* OfTypeLocal_FF325DF64C555111A1561CBA50CA0244);
	void HandleCreateClubFinished(class UGFxClubAction_TA* Action);
	void CreateClub(const struct FString& ClubName, const struct FString& ClubTag, int PrimaryColorID, int AccentColorID);
	struct FString GetClubNameError(const struct FString& ClubName);
	struct FString GetClubTagError(const struct FString& Tag);
	struct FString StripInvalidCharacters(const struct FString& Text);
	void OnClubActionComplete(const struct FString& Action, const struct FString& Error);
	void HandleClubActionComplete(class UGFxClubAction_TA* Action);
	class UGFxClubAction_TA* CreateClubAction(const struct FName& ActionName, const struct FScriptDelegate& Callback);
	void OnSyncClubDetails(const struct FString& ErrorMessage);
	void SyncClubDetails();
	void UpdateGFxClubDetails(class UClubDetails_X* ClubDetails);
	void HandleClubChanged(class UOnlineClubCache_X* Cache, class UClubDetails_X* ClubDetails);
	void HandlePlayerSynced(class UOnlineClubProvider_X* Provider, const struct FUniqueNetId& PlayerID);
	void UpdateLocalClub();
	class UOnlineClubManager_X* GetClubManager();
	void HandlePsyNetConnection(class UPsyNetConnection_X* C);
	void HandleClubInvite(class UPsyNetService_ClubsInvite_TA* Update);
	void OnRemoved();
	void OnShellSet();
	void FlashActionHandler(const struct FString& Error);
};


// Class TAGame.ClubInviteNotification_TA
// 0x0060 (0x0168 - 0x0108)
class UClubInviteNotification_TA : public UNotification_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0108(0x0038) (DataBinding)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0140(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.ClubInviteNotification_TA.ClubID
	struct FString                                     ClubName;                                                 // 0x0148(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ClubTag;                                                  // 0x0158(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ClubInviteNotification_TA");
		return ptr;
	}


	bool ShouldShow();
	struct FUniqueNetId GetSenderID();
	class UClubInviteNotification_TA* SetClubDetails(const struct FString& InClubName, const struct FString& InClubTag);
	class UClubInviteNotification_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxClubAction_TA
// 0x0048 (0x00A8 - 0x0060)
class UGFxClubAction_TA : public UObject
{
public:
	class UAsyncTask*                                  Task;                                                     // 0x0060(0x0008)
	struct FString                                     ErrorMessage;                                             // 0x0068(0x0010) (NeedCtorLink)
	struct FScriptDelegate                             __StartTaskDelegate__Delegate;                            // 0x0078(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0078(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventComplete__Delegate;                                // 0x0090(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0090(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxClubAction_TA");
		return ptr;
	}


	void Dispose();
	void OnComplete();
	void HandleTaskComplete(class UError* TaskError);
	class UGFxClubAction_TA* Start(const struct FScriptDelegate& Action);
	class UGFxClubAction_TA* SetError(const struct FString& Message);
	class UGFxClubAction_TA* AssertNotGuest(const struct FUniqueNetId& PlayerID);
	class UGFxClubAction_TA* Assert(bool expr, const struct FString& Message);
	void EventComplete(class UGFxClubAction_TA* Action);
	class UAsyncTask* StartTaskDelegate();
};


// Class TAGame.__GFxData_Clubs_TA__CreateClub_9C78B19C4A7EA9A10A3DDCB6A017B89F
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Clubs_TA__CreateClub_9C78B19C4A7EA9A10A3DDCB6A017B89F : public UObject
{
public:
	class UClubSettings_X*                             Settings;                                                 // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Clubs_TA__CreateClub_9C78B19C4A7EA9A10A3DDCB6A017B89F");
		return ptr;
	}


	class UAsyncTask* __GFxData_Clubs_TA__CreateClub_9C78B19C4A7EA9A10A3DDCB6A017B89F();
};


// Class TAGame.__GFxData_Clubs_TA__InviteToClub_6F51734E4278DDB1730884AE8BEF2BF9
// 0x0038 (0x0098 - 0x0060)
class U__GFxData_Clubs_TA__InviteToClub_6F51734E4278DDB1730884AE8BEF2BF9 : public UObject
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Clubs_TA__InviteToClub_6F51734E4278DDB1730884AE8BEF2BF9");
		return ptr;
	}


	void ____GFxData_Clubs_TA__InviteToClub_6F51734E4278DDB1730884AE8BEF2BF9____GFxData_Clubs_TA__InviteToClub_6F51734E4278DDB1730884AE8BEF2BF9_82B077874066166C499DF4B4B33BA09F(class UError* TaskError);
	class UAsyncTask* __GFxData_Clubs_TA__InviteToClub_6F51734E4278DDB1730884AE8BEF2BF9();
};


// Class TAGame.__GFxData_Clubs_TA__RejectClubInvite_280C83414427C71DC7DC15847D09423F
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Clubs_TA__RejectClubInvite_280C83414427C71DC7DC15847D09423F : public UObject
{
public:
	class UClubInviteNotification_TA*                  Notification;                                             // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Clubs_TA__RejectClubInvite_280C83414427C71DC7DC15847D09423F");
		return ptr;
	}


	class UAsyncTask* __GFxData_Clubs_TA__RejectClubInvite_59A012DF4B87AA88EDC100910BE5275A();
	void __GFxData_Clubs_TA__RejectClubInvite_280C83414427C71DC7DC15847D09423F(class UGFxClubAction_TA* Action);
};


// Class TAGame.__GFxData_Clubs_TA__RemoveFromClub_AF0496C8445A3FD90D45CABD63AD249D
// 0x0038 (0x0098 - 0x0060)
class U__GFxData_Clubs_TA__RemoveFromClub_AF0496C8445A3FD90D45CABD63AD249D : public UObject
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Clubs_TA__RemoveFromClub_AF0496C8445A3FD90D45CABD63AD249D");
		return ptr;
	}


	class UAsyncTask* __GFxData_Clubs_TA__RemoveFromClub_AF0496C8445A3FD90D45CABD63AD249D();
};


// Class TAGame.__GFxData_Clubs_TA__SetClubInvites_D78DB9CF419B7ADAEE8C34897F815691
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Clubs_TA__SetClubInvites_D78DB9CF419B7ADAEE8C34897F815691 : public UObject
{
public:
	class UClubInvite_X*                               ClubInvite;                                               // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Clubs_TA__SetClubInvites_D78DB9CF419B7ADAEE8C34897F815691");
		return ptr;
	}


	bool __GFxData_Clubs_TA__SetClubInvites_D78DB9CF419B7ADAEE8C34897F815691(class UClubInviteNotification_TA* N);
};


// Class TAGame.__GFxData_Clubs_TA__SetClubOwner_0BD9DA0243B734E9C10251A711FA02E5
// 0x0038 (0x0098 - 0x0060)
class U__GFxData_Clubs_TA__SetClubOwner_0BD9DA0243B734E9C10251A711FA02E5 : public UObject
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Clubs_TA__SetClubOwner_0BD9DA0243B734E9C10251A711FA02E5");
		return ptr;
	}


	class UAsyncTask* __GFxData_Clubs_TA__SetClubOwner_0BD9DA0243B734E9C10251A711FA02E5();
};


// Class TAGame.__GFxData_Clubs_TA__SetMotD_AFACE99349542C353580ACB9A7CC349E
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_Clubs_TA__SetMotD_AFACE99349542C353580ACB9A7CC349E : public UObject
{
public:
	struct FString                                     Text;                                                     // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Clubs_TA__SetMotD_AFACE99349542C353580ACB9A7CC349E");
		return ptr;
	}


	class UAsyncTask* __GFxData_Clubs_TA__SetMotD_AFACE99349542C353580ACB9A7CC349E();
};


// Class TAGame.__GFxData_Clubs_TA__SyncClubDetails_F41CC6C549BE908E430104ADDC8B26DE
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Clubs_TA__SyncClubDetails_F41CC6C549BE908E430104ADDC8B26DE : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__GFxData_Clubs_TA__SyncClubDetails_F41CC6C549BE908E430104ADDC8B26DE.ClubID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Clubs_TA__SyncClubDetails_F41CC6C549BE908E430104ADDC8B26DE");
		return ptr;
	}


	void __GFxData_Clubs_TA__SyncClubDetails_F41CC6C549BE908E430104ADDC8B26DE(class UError* Error);
};


// Class TAGame.__GFxData_Clubs_TA__UpdateClubColors_F2134A3041A26FCA5C59FAAA3A96E02C
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Clubs_TA__UpdateClubColors_F2134A3041A26FCA5C59FAAA3A96E02C : public UObject
{
public:
	int                                                PrimaryColor;                                             // 0x0060(0x0004)
	int                                                AccentColor;                                              // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Clubs_TA__UpdateClubColors_F2134A3041A26FCA5C59FAAA3A96E02C");
		return ptr;
	}


	class UAsyncTask* __GFxData_Clubs_TA__UpdateClubColors_F2134A3041A26FCA5C59FAAA3A96E02C();
};


// Class TAGame.__GFxData_Clubs_TA__UpdateClubName_F2CD41D64D77F8186A0FED93A1E86E32
// 0x0020 (0x0080 - 0x0060)
class U__GFxData_Clubs_TA__UpdateClubName_F2CD41D64D77F8186A0FED93A1E86E32 : public UObject
{
public:
	struct FString                                     ClubName;                                                 // 0x0060(0x0010) (NeedCtorLink)
	struct FString                                     ClubTag;                                                  // 0x0070(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Clubs_TA__UpdateClubName_F2CD41D64D77F8186A0FED93A1E86E32");
		return ptr;
	}


	class UAsyncTask* __GFxData_Clubs_TA__UpdateClubName_F2CD41D64D77F8186A0FED93A1E86E32();
};


// Class TAGame.__GFxData_Clubs_TA__UpdateGFxClubDetails_CD46300147F3D92BDCDA358BD3CACE80
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Clubs_TA__UpdateGFxClubDetails_CD46300147F3D92BDCDA358BD3CACE80 : public UObject
{
public:
	class UClubDetails_X*                              ClubDetails;                                              // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Clubs_TA__UpdateGFxClubDetails_CD46300147F3D92BDCDA358BD3CACE80");
		return ptr;
	}


	bool __GFxData_Clubs_TA__UpdateGFxClubDetails_CD46300147F3D92BDCDA358BD3CACE80(class UGFxData_ClubDetails_TA* D);
};


// Class TAGame.__GFxData_FaceIt_TA__HandleError_CA43945447254806E687F5B21A13898F
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_FaceIt_TA__HandleError_CA43945447254806E687F5B21A13898F : public UObject
{
public:
	class UError*                                      InError;                                                  // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_FaceIt_TA__HandleError_CA43945447254806E687F5B21A13898F");
		return ptr;
	}


	void __GFxData_FaceIt_TA__HandleError_CA43945447254806E687F5B21A13898F();
};


// Class TAGame.GFxData_FaceIt_TA
// 0x0030 (0x00C8 - 0x0098)
class UGFxData_FaceIt_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0098(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	class UFaceIt_TA*                                  FaceIt;                                                   // 0x00A0(0x0008) (Edit, Transient)
	class UFaceItConfig_TA*                            Config;                                                   // 0x00A8(0x0008) (Transient)
	class UPsyNet_X*                                   PsyNet;                                                   // 0x00B0(0x0008)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00B8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_FaceIt_TA.LastSpectatorPopupTime
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_FaceIt_TA.SpectatorPopupDelaySeconds

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_FaceIt_TA");
		return ptr;
	}


	void __GFxData_FaceIt_TA__HandlePsyNetLogin_8DFEC916428A5CD488562A97707627DF(class UPsyNetService_FaceItReservationFound_TA* Service);
	struct FString GetPartnerString(int PartnerID);
	void HandleFaceItMatchFound(class UPsyNetService_FaceItSearchStarted_TA* Service);
	void HandleJoiningReservation(class UAsyncTask* Task, struct FFaceItMatchInfo* MatchInfo);
	void HandleAddReservation(const struct FServerReservationData& ReservationData, const struct FFaceItMatchInfo& MatchInfo, bool bSuppressNotification);
	void FindMatchForPlayer();
	void HandlePsyNetLogin();
	void HandleFaceItConfigChange();
	void HandleError(class UError* InError);
	void HandleFaceItRefChange();
	void OnShellSet();
};


// Class TAGame.__GFxData_Friends_TA__CreateFriendInviteNotification_4D32EDE745C34C068B45609A371AE23F
// 0x000C (0x006C - 0x0060)
class U__GFxData_Friends_TA__CreateFriendInviteNotification_4D32EDE745C34C068B45609A371AE23F : public UObject
{
public:
	class UPersona_TA*                                 InPersona;                                                // 0x0060(0x0008)
	unsigned long                                      bSuppressPopup : 1;                                       // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Friends_TA__CreateFriendInviteNotification_4D32EDE745C34C068B45609A371AE23F");
		return ptr;
	}


	void ____GFxData_Friends_TA__CreateFriendInviteNotification_4D32EDE745C34C068B45609A371AE23F____GFxData_Friends_TA__CreateFriendInviteNotification_1E12ADA04F8EE743C04B5CB473286FF7_162EEC144BD709C7BE64978277F28021(class UNotification_TA* Notification);
	void ____GFxData_Friends_TA__CreateFriendInviteNotification_4D32EDE745C34C068B45609A371AE23F____GFxData_Friends_TA__CreateFriendInviteNotification_1E12ADA04F8EE743C04B5CB473286FF7_B5862EB640BBEAC1212BFEB26D1E2C99(class UNotification_TA* Notification);
	void __GFxData_Friends_TA__CreateFriendInviteNotification_1E12ADA04F8EE743C04B5CB473286FF7(class UPersona_TA* P);
	bool __GFxData_Friends_TA__CreateFriendInviteNotification_4D32EDE745C34C068B45609A371AE23F(class UNotification_TA* N);
};


// Class TAGame.GFxData_Friends_TA
// 0x0110 (0x01A8 - 0x0098)
class UGFxData_Friends_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bAllowSamePlatformPsyNetFriends : 1;                      // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bPlatformFriendsDownloadFailed : 1;                       // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bPsyNetFriendsDownloadFailed : 1;                         // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bUsePresenceGroups : 1;                                   // 0x0098(0x0004) (Const, Config)
	unsigned long                                      bCrossplayEnabled : 1;                                    // 0x0098(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	TArray<struct FPersonaDataId>                      Friends;                                                  // 0x00A0(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FPersonaDataId>                      PlatformFriends;                                          // 0x00B0(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FPersonaDataId>                      PsyNetFriends;                                            // 0x00C0(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FPersonaDataId>                      bLocked;                                                  // 0x00D0(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FPersonaDataId>                      Recent;                                                   // 0x00E0(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FPersonaDataId>                      InternalRecent;                                           // 0x00F0(0x0010) (NeedCtorLink)
	TArray<struct FPersonaDataId>                      Pending;                                                  // 0x0100(0x0010) (NeedCtorLink, DataBinding)
	int                                                NumOnlineFriendsPlatform;                                 // 0x0110(0x0004) (DataBinding)
	int                                                NumInGameFriendsPlatform;                                 // 0x0114(0x0004) (DataBinding)
	int                                                NumOnlineFriendsPsyNet;                                   // 0x0118(0x0004) (DataBinding)
	int                                                NumInGameFriendsPsyNet;                                   // 0x011C(0x0004) (DataBinding)
	class UPersonas_TA*                                PersonasData;                                             // 0x0120(0x0008) (Transient)
	class UOnlineGame_X*                               OnlineGame;                                               // 0x0128(0x0008) (Transient)
	class UPersonaSave_TA*                             PersonaSave;                                              // 0x0130(0x0008) (Transient)
	class UAccountSettingsComponent_TA*                AccountSettings;                                          // 0x0138(0x0008) (ExportObject, Transient, Component, EditInline)
	int                                                MaxRecentPlayerCount;                                     // 0x0140(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	TArray<TEnumAsByte<EPresenceGroup>>                DefaultPlatformFriendGroups;                              // 0x0148(0x0010) (Const, Config, NeedCtorLink)
	TArray<TEnumAsByte<EPresenceGroup>>                DefaultPsyNetFriendGroups;                                // 0x0158(0x0010) (Const, Config, NeedCtorLink)
	class UOnlineGameParty_X*                          Party;                                                    // 0x0168(0x0008) (Transient)
	TArray<class UPersona_TA*>                         PartyMemberPersonas;                                      // 0x0170(0x0010) (NeedCtorLink)
	class UGFxData_PersonaGroup_TA*                    PlatformPartyPresenceGroup;                               // 0x0180(0x0008)
	class UGFxData_PersonaGroup_TA*                    PsyNetPartyPresenceGroup;                                 // 0x0188(0x0008)
	struct FScriptDelegate                             __InternalRecent__ChangeNotify;                           // 0x0190(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0190(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Friends_TA");
		return ptr;
	}


	bool __GFxData_Friends_TA__HandlePartiesChanged_138C8C424B18DD67951C21B7CA05C601(class UPersona_TA* PMember);
	bool __GFxData_Friends_TA__HandlePartiesChanged_43901B7544693F5011B82EA24EA15EA9(class UPersona_TA* PMember);
	void __GFxData_Friends_TA__HandlePartiesChanged_2303DBA74F6DA4A9F00D6683D236278E(class UPersona_TA* RMember);
	bool __GFxData_Friends_TA__HandlePartiesChanged_0442F5F34563322571FFF2AF90C69540(class UPersona_TA* Member);
	bool __GFxData_Friends_TA__HandlePartiesChanged_9FA913084157206841EEC8936E00E24E(class UPersona_TA* Member);
	bool __GFxData_Friends_TA__HandlePartiesChanged_69F4D8E74D1E327E1FCC2BAE115A1D31(class UPersona_TA* Member);
	class UPersona_TA* __GFxData_Friends_TA__HandlePartiesChanged_0767E15E4CE125ADF12338B74409EE90(const struct FPartyMember& OtherPMember);
	bool __GFxData_Friends_TA__UpdateRecentPlayerList_D74FB31D4CB5822A65E5A69A5CB31FDF(const struct FPersonaDataId& P);
	void __GFxData_Friends_TA__CheckNotificationLimits_8525551C466709F73A8461ABC5240B17(class UGFxModal_X* Modal);
	void __GFxData_Friends_TA__CheckNotificationLimits_966181594FFCB7A20C3FC681D768EA76(class UGFxModal_X* Modal);
	void __GFxData_Friends_TA__HandleClearAllFriendInvites_8BD24B0846766F5ED8EC68A6B41A4FC4(class UGFxModal_X* Modal);
	void __GFxData_Friends_TA__HandleClearAllFriendInvites_85447F4149BE90C57B75569EBBEC932D(class URPC_ClearFriendInvites_X* RPC);
	void __GFxData_Friends_TA__HandleClearAllFriendInvites_81776CE34D7E357B68E53EBD14B36912(class URPC_ClearFriendInvites_X* RPC);
	void __GFxData_Friends_TA__HandleClearAllClubInvites_8F967A7E45EAB700BFA1CDBFB93E19E3(class UGFxModal_X* Modal);
	struct FUniqueNetId __GFxData_Friends_TA__DownloadRecentPlayerDetails_FE34BD53491DA79C96DEB4A05FF1922A(const struct FPersonaDataId& P);
	struct FPersonaDataId __GFxData_Friends_TA__HandleReceivedRecentPlayerDetails_0B7D055142D42F36FA96D8B45CB143DD(const struct FOnlineFriend& RP, struct FPersonaDataId* StructInitializer_224186D748B0D59FE665A087E34B79B2);
	void __GFxData_Friends_TA__CreateFriendInviteNotification_451DBFA3481974ED18327A92CD3AAE86(class UNotification_TA* Notification);
	void __GFxData_Friends_TA__CreateFriendInviteNotification_38AD125C4E58F2624C0E21A66FBC6C5B(class UNotification_TA* Notification);
	void __GFxData_Friends_TA__DeleteFriendGroup_058D120B44B17243CE2ACD98545D112C(class UPersona_TA* P);
	bool __GFxData_Friends_TA__HandleFriendsListChanged_6189F0194AA1F9D2B1E23DB78120D29F(const struct FPersonaDataId& RecentID);
	bool __GFxData_Friends_TA__HandleFriendsListChanged_1AE1DD014F0696930CD13BB2A1106162(const struct FPersonaDataId& RecentID);
	struct FUniqueNetId __GFxData_Friends_TA__GetSortedInGameFriendSubset_6798118940008E3F90D673A9D7BC4F39(class UPersona_TA* Persona);
	bool __GFxData_Friends_TA__GetSortedInGameFriendSubset_5203BFDA4BA9962C035FDE8B40EBDD71(class UPersona_TA* Persona);
	class UPersona_TA* __GFxData_Friends_TA__GetSortedInGameFriendSubset_2CF03FE04659D6DB29370A8F59CB0AD9(const struct FPersonaDataId& PDID);
	void __InternalRecent__ChangeNotifyFunc();
	void UpdateFriendInfo();
	struct FString GetDisplayName(const struct FUniqueNetId& PlayerID, bool bSingleResult, TEnumAsByte<ENameDisplayRelationshipProxy>* ForcedRelationships);
	struct FString GetPreferredDisplayName(const struct FUniqueNetId& PlayerID, TEnumAsByte<ENameDisplayRelationshipProxy> ForcedRelationships);
	struct FString GetPreferredSingleDisplayName(const struct FUniqueNetId& PlayerID, TEnumAsByte<ENameDisplayRelationshipProxy> ForcedRelationships);
	bool IsComplianceForcedPlatformNameVisible(TEnumAsByte<EOnlinePlatform> OtherPlatform);
	bool IsFriendInParty(const struct FUniqueNetId& UniqueId);
	TArray<struct FUniqueNetId> GetSortedPsyNetFriends(TArray<struct FUniqueNetId>* ArrayInitializer_3A339D2F47BB6A627F1144B4D31C1AFA);
	TArray<struct FUniqueNetId> GetSortedInGameFriendSubset(TArray<struct FPersonaDataId>* FriendArray, TArray<class UPersona_TA*>* MapLocal_067724524E7FC2F8C4AD5697EAD11BCF, TArray<class UPersona_TA*>* FilterLocal_6B10AAC44F71D99BD2FD1B95A5B04798, TArray<struct FUniqueNetId>* MapLocal_855214FB4D4742C92BA7C28E758FA108);
	TArray<struct FUniqueNetId> GetSortedInGamePsyNetFriends(TArray<struct FUniqueNetId>* ArrayInitializer_0CB58F91424CA330D856BB8B630CD169);
	TArray<struct FUniqueNetId> GetSortedInGamePlatformFriends();
	TArray<struct FUniqueNetId> GetSortedPlatformFriends();
	TArray<struct FUniqueNetId> GetSortedOnlineFriends();
	TArray<struct FUniqueNetId> GetSortedFriends();
	void HandleFriendsListChanged(class UOnlinePlayerFriends_X* FriendsRef, class UError* Error, TArray<struct FPersonaDataId>* FilterLocal_5EB5FE00478A6C9C653C61A0E240679A, TArray<struct FPersonaDataId>* FilterLocal_C7E21E1C4D0D01FFD86ABABE68FC176B, TArray<struct FUniqueNetId>* ArrayResultLocal_B8FEA26A4CC0359995E6FDB9F86DA7A4);
	int GenerateGroupId();
	class UGFxData_PersonaGroup_TA* GetGroup(int GroupIdx);
	class UGFxData_PersonaGroup_TA* FindGroup(int GroupDataId);
	void ReportRecentPlayer(unsigned char OffenseReasonID, const struct FUniqueNetId& PlayerID);
	void HandlePsyTagUpdate(struct FOnlineFriend* FriendData);
	void UpdatePersonaData(class UPersona_TA* Persona, const struct FOnlineStatus& StatusData);
	void HandlePsyNetStatusUpdate(const struct FOnlineStatus& StatusData);
	void HandlePlatformStatusUpdate(const struct FOnlineStatus& StatusData);
	void AddFriendNote(const struct FUniqueNetId& PlayerID, const struct FString& msg);
	void RemovePlatformFriendInternal(const struct FUniqueNetId& PlayerID, struct FPersonaDataId* StructInitializer_6173AB234FD128E4FCE7C08F6652C5AF, struct FPersonaDataId* StructInitializer_86AE10CC4F8F67C39DDD1AB98E3F640C);
	void RemovePsyNetFriendInternal(const struct FUniqueNetId& PlayerID, struct FPersonaDataId* StructInitializer_C828BDDC4689919DD03C5CB47F260F58, struct FPersonaDataId* StructInitializer_09FF06964939189C1C587EA40666F4AE);
	void HandleRemoteFriendUnfriended(const struct FUniqueNetId& PlayerID);
	void HandlePsyNetUnfriended(const struct FUniqueNetId& PlayerID);
	void RemovePsyNetFriend(const struct FUniqueNetId& PlayerID);
	void SwapFriendToGroup_Internal(int NewIdx, const struct FUniqueNetId& PlayerID);
	void SwapFriendToGroup_Presence(const struct FUniqueNetId& PlayerID);
	bool IsFriendInGame(const struct FUniqueNetId& PlayerID);
	void SwapFriendToGroup(int NewIdx, const struct FUniqueNetId& PlayerID);
	void UpdateGroupInfo(const struct FUniqueNetId& PlayerID);
	int GetFriendGroupCount(bool bPsyNetGroups);
	int GetPsyNetFriendGroupCount();
	int GetPlatformFriendGroupCount();
	void ChangeGroupName(int GroupIdx, const struct FString& NewName);
	void DeleteFriendGroup(int GroupIdx);
	void CreateNewFriendGroup(const struct FString& GroupName);
	void HandleFriendRequestDeclined(const struct FUniqueNetId& PlayerID, class UError* RequestError, struct FPersonaDataId* StructInitializer_83E1EF5344AEF18611D1D88DD8673D2D);
	void DeclinePsyNetFriendRequest(const struct FUniqueNetId& PlayerID);
	void HandleAcceptPsyNetFriendRequestComplete(const struct FOnlineFriend& FriendData, class UError* RequestError, struct FPersonaDataId* StructInitializer_198463124F652EF9B64B0F88FD08D7B6, struct FPersonaDataId* StructInitializer_417B9DB54E8CA411CD5FA5BA7F21EFDC, struct FPersonaDataId* StructInitializer_B3B0E4FC4A01F4B68CB653A34D12965B, struct FPersonaDataId* StructInitializer_F1C4ACF84A1469FC3EFD94B67BE23A90);
	void AcceptPsyNetFriendRequest(const struct FUniqueNetId& PlayerID);
	void OnReceivedPsyNetFriendRequest(const struct FUniqueNetId& PlayerID);
	void OnReceivedFriendRequest(const struct FUniqueNetId& PlayerID);
	bool HasExistingFriendRequestNotification(class UFriendRequestNotification_TA* Notification, const struct FUniqueNetId& ForPlayerID);
	void CreateFriendInviteNotification(class UPersona_TA* InPersona, bool bSuppressPopup);
	void HandleReceivedPsyNetFriendRequest(const struct FOnlineFriend& InFriend);
	void OnFriendAcceptedInvite(const struct FUniqueNetId& PlayerID);
	void HandleFriendAcceptedPsyNetInvite(const struct FOnlineFriend& InFriend, struct FPersonaDataId* StructInitializer_8308CDD64D14B8CCE07A66A5C1837450, struct FPersonaDataId* StructInitializer_BA5642814500CCF4605D8EADFCA81B6A);
	void OnInviteToPsyNetFriendsSentSuccess(const struct FUniqueNetId& PlayerID);
	void OnInviteToFriendsSentFail(const struct FString& PlayerName, const struct FString& FailReason);
	void HandlePlayerSearchSuccess(const struct FString& SearchString, TArray<struct FOnlineFriend>* FriendsData);
	void InviteToFriendsByName(const struct FString& PlayerName);
	void OnCrossPlatformSupportURLClick(class UGFxModal_X* Modal);
	void HandlePsyNetFriendInviteSentFail(const struct FUniqueNetId& FriendId, class UError* InviteError);
	void HandlePsyNetFriendInviteSentSuccess(const struct FUniqueNetId& FriendId);
	void InviteToPsyNetFriends(const struct FUniqueNetId& PlayerID);
	void HandleUpdatePendingFriendRequests(TArray<struct FOnlineFriend>* Requests);
	void DownloadFriendRequests();
	void HandleBlockedListUpdated(class UOnlinePlayerFriends_X* FriendsObject);
	void HandleBlockedListDownloadComplete(class UError* RequestError);
	void DownloadBlockedList();
	void HandleReceivedRecentPlayerDetails(TArray<struct FOnlineFriend>* RecentPlayers, TArray<struct FPersonaDataId>* MapLocal_65F0B34F4375DA43F3209EAB9FCCD936, TArray<struct FPersonaDataId>* IntersectLocal_A80F974549F63CD5661145AE753EAD72);
	void DownloadRecentPlayerDetails(TArray<struct FUniqueNetId>* MapLocal_D9A38B814ECD145C830C548F4B80F487);
	void InviteToMatch(const struct FUniqueNetId& PlayerID);
	void HandlePlayerUnblocked(const struct FUniqueNetId& PlayerID, class UError* RequestError, struct FPersonaDataId* StructInitializer_A5D030F841279E65DC5E7999059C018B);
	void UnblockPlayer(const struct FUniqueNetId& PlayerID);
	void HandlePlayerBlocked(const struct FUniqueNetId& PlayerID, class UError* RequestError, struct FPersonaDataId* StructInitializer_0B4BE5904540F26F8FC143B4FB26D68D);
	void BlockPlayer(const struct FUniqueNetId& PlayerID, struct FPsyTag* StructInitializer_F57694A1422056EC52F6A7B48D4F4AC4);
	void HandleClearAllClubInvites();
	void HandleClearAllFriendInvites();
	void CheckNotificationLimits();
	void AddBlockedPlayerData(class UPersona_TA* Persona, struct FPersonaDataId* StructInitializer_470BBB234E49456F149CE79E224658CE);
	bool AddPendingPlayerData(class UPersona_TA* Persona, struct FPersonaDataId* StructInitializer_CC5AF061483E68BDF1FDCC9D21423F08);
	void AddRecentPlayerData(class UPersona_TA* Persona);
	void AddFriendData(class UPersona_TA* Persona, struct FPersonaDataId* StructInitializer_246309E748811E19572E25A097B16C9D);
	bool ShouldAddToRecentPlayerList(class UPersona_TA* Persona);
	void UpdateRecentPlayerList(TArray<struct FPersonaDataId>* FilterLocal_C44ADA554308285408195B9AE464DD37);
	void HandlePlayerAddedToMatch(class AGameEvent_TA* GameEvent, class APRI_TA* PRI);
	void HandleGameEventRemoved(class AGameEvent_TA* GameEvent);
	void HandleGameEventAdded(class AGameEvent_TA* GameEvent);
	void HandleCrossPlayChanged();
	void HandleAccountSettingsLoaded(class UAccountSettingsComponent_TA* InAccountSettings);
	void HandlePersonaSaveLoaded(class UPersonaSave_TA* InPersonaSave);
	void HandleProfileSet(class ULocalPlayer_TA* InLocalPlayer);
	void HandlePsyNetLogin(class UPsyNetConnection_X* C);
	void HandlePsyNetFriendsListDownloadCompleted(bool bSuccess);
	void HandlePlatformFriendsListDownloadCompleted(bool bSuccess);
	void InitGroups();
	void SetupPersonaGroup(TEnumAsByte<EPresenceGroup> Group, bool bPsyNet);
	class UPersona_TA* GetAndSetPersona(const struct FOnlineFriend& PersonaData, TEnumAsByte<EPersonaInfoOrigin> Origin);
	class UGFxData_PersonaGroup_TA* CreatePartyPersonaGroup(bool bPsyNetGroup);
	void ValidatePartyPersonaGroup(bool bPsyNet);
	void AddPlatformFriendToPartyGroup(class UPersona_TA* PartyMemberPersona);
	void AddPsyNetFriendToPartyGroup(class UPersona_TA* PartyMemberPersona);
	void HandlePartiesChanged(class UOnlineGameParty_X* PartyObject, TArray<struct FPartyMember>* FilterLocal_A22DD1DA460C5AB54111DBBC77F7664D, TArray<class UPersona_TA*>* MapLocal_A94BD86B44EBE2813254098522275177, TArray<class UPersona_TA*>* FilterLocal_CBDAEC8D46D36400B741F1B4EFBB94F4, TArray<class UPersona_TA*>* FilterLocal_87B47EC744C9AED15EA5BF9B4827EC1A, TArray<class UPersona_TA*>* FilterLocal_24DBFC3648CD4C31A5D3FEBB4B876DB4, TArray<class UPersona_TA*>* DifferenceLocal_65366CD847EFE22C99682E9C44A5466E);
	class UPersona_TA* GetOrCreatePersona(const struct FOnlineFriend& PersonaData, TEnumAsByte<EPersonaInfoOrigin> Origin);
	void OnShellSet();
};


// Class TAGame.__GFxData_Friends_TA__HandlePartiesChanged_CC456B3749B4F342BC632A9EEBF64BED
// 0x0038 (0x0098 - 0x0060)
class U__GFxData_Friends_TA__HandlePartiesChanged_CC456B3749B4F342BC632A9EEBF64BED : public UObject
{
public:
	struct FUniqueNetId                                PrimaryPlayerID;                                          // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Friends_TA__HandlePartiesChanged_CC456B3749B4F342BC632A9EEBF64BED");
		return ptr;
	}


	bool __GFxData_Friends_TA__HandlePartiesChanged_CC456B3749B4F342BC632A9EEBF64BED(const struct FPartyMember& PMember);
};


// Class TAGame.__GFxData_Friends_TA__HandlePsyNetFriendInviteSentFail_6FE5C5F5490C8EE8FDA7ECA6DA0CE7ED
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_Friends_TA__HandlePsyNetFriendInviteSentFail_6FE5C5F5490C8EE8FDA7ECA6DA0CE7ED : public UObject
{
public:
	class UPersona_TA*                                 Persona;                                                  // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Friends_TA__HandlePsyNetFriendInviteSentFail_6FE5C5F5490C8EE8FDA7ECA6DA0CE7ED");
		return ptr;
	}


	void __GFxData_Friends_TA__HandlePsyNetFriendInviteSentFail_6FE5C5F5490C8EE8FDA7ECA6DA0CE7ED(class UGFxModal_X* Arg);
};


// Class TAGame.__GFxData_Friends_TA__InviteToFriendsByName_BB0B3D28474D0C255D17C2991DCAE196
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_Friends_TA__InviteToFriendsByName_BB0B3D28474D0C255D17C2991DCAE196 : public UObject
{
public:
	struct FString                                     PlayerName;                                               // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Friends_TA__InviteToFriendsByName_BB0B3D28474D0C255D17C2991DCAE196");
		return ptr;
	}


	void __GFxData_Friends_TA__InviteToFriendsByName_BB0B3D28474D0C255D17C2991DCAE196(class UError* Err);
};


// Class TAGame.__GFxData_Friends_TA__InviteToPsyNetFriends_A30233474F3CC7CB6394C6A469034F70
// 0x0038 (0x0098 - 0x0060)
class U__GFxData_Friends_TA__InviteToPsyNetFriends_A30233474F3CC7CB6394C6A469034F70 : public UObject
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Friends_TA__InviteToPsyNetFriends_A30233474F3CC7CB6394C6A469034F70");
		return ptr;
	}


	void __GFxData_Friends_TA__InviteToPsyNetFriends_22B7385A4036D5D209C07E8FF18B0F63(class UError* Err);
	void __GFxData_Friends_TA__InviteToPsyNetFriends_A30233474F3CC7CB6394C6A469034F70();
};


// Class TAGame.__GFxData_Friends_TA__IsFriendInParty_27AD92D143DDDB4EA339C58D1D29099E
// 0x0038 (0x0098 - 0x0060)
class U__GFxData_Friends_TA__IsFriendInParty_27AD92D143DDDB4EA339C58D1D29099E : public UObject
{
public:
	struct FUniqueNetId                                UniqueId;                                                 // 0x0060(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Friends_TA__IsFriendInParty_27AD92D143DDDB4EA339C58D1D29099E");
		return ptr;
	}


	bool __GFxData_Friends_TA__IsFriendInParty_27AD92D143DDDB4EA339C58D1D29099E(const struct FPartyMember& PM);
};


// Class TAGame.__GFxData_MTXGarage_TA__HandleUnlockContainersResponse_1FEADD164328AC2A247D928C32E990BF
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_MTXGarage_TA__HandleUnlockContainersResponse_1FEADD164328AC2A247D928C32E990BF : public UObject
{
public:
	class USaveData_TA*                                PCSaveData;                                               // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_MTXGarage_TA__HandleUnlockContainersResponse_1FEADD164328AC2A247D928C32E990BF");
		return ptr;
	}


	void __GFxData_MTXGarage_TA__HandleUnlockContainersResponse_67F5C9FB4BCFB71FE30B718A0CE3694C();
	void __GFxData_MTXGarage_TA__HandleUnlockContainersResponse_1FEADD164328AC2A247D928C32E990BF();
};


// Class TAGame.RPC_MicroTransactions_GetCatalog_TA
// 0x0060 (0x0160 - 0x0100)
class URPC_MicroTransactions_GetCatalog_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	struct FName                                       Category;                                                 // 0x0138(0x0008)
	TArray<struct FMTCatalogInfo>                      MTXProducts;                                              // 0x0140(0x0010) (Transient, NeedCtorLink)
	struct FString                                     Currency;                                                 // 0x0150(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MicroTransactions_GetCatalog_TA");
		return ptr;
	}


	struct FName STATIC_CategoryToName(TEnumAsByte<EMTXCatalogCategory> InCategory);
	class URPC_MicroTransactions_GetCatalog_TA* SetCategory(TEnumAsByte<EMTXCatalogCategory> InCategory);
	class URPC_MicroTransactions_GetCatalog_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_MicroTransactions_StartPurchase_TA
// 0x0058 (0x0158 - 0x0100)
class URPC_MicroTransactions_StartPurchase_TA : public URPC_X
{
public:
	struct FString                                     Language;                                                 // 0x0100(0x0010) (NeedCtorLink)
	struct FUniqueNetId                                PlayerID;                                                 // 0x0110(0x0038)
	TArray<struct FMTCartItem>                         CartItems;                                                // 0x0148(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MicroTransactions_StartPurchase_TA");
		return ptr;
	}


	class URPC_MicroTransactions_StartPurchase_TA* SetLanguage(const struct FString& InLanguage);
	class URPC_MicroTransactions_StartPurchase_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_MicroTransactions_StartPurchase_TA* SetCartItems(TArray<struct FMTCartItem> InCartItems);
};


// Class TAGame.GFxData_MTXGarage_TA
// 0x0098 (0x0130 - 0x0098)
class UGFxData_MTXGarage_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FMTXPurchaseInfo>                    CatalogItems;                                             // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FMTCatalogInfo>                      CatalogProducts;                                          // 0x00A8(0x0010) (Transient, NeedCtorLink)
	TArray<struct FCartInfo>                           CartItems;                                                // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     CartTotal;                                                // 0x00C8(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     Currency;                                                 // 0x00D8(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      TransactionInProgress : 1;                                // 0x00E8(0x0004) (Transient)
	unsigned long                                      bCatalogReady : 1;                                        // 0x00E8(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	class UGFxModal_X*                                 ModalProcessing;                                          // 0x00F0(0x0008) (Transient)
	int                                                BlackMarketSkinProductID;                                 // 0x00F8(0x0004)
	float                                              CatalogExpirationTime;                                    // 0x00FC(0x0004) (Transient)
	float                                              CatalogCacheDuration;                                     // 0x0100(0x0004)
	TEnumAsByte<EMTXCatalogCategory>                   CatalogCategory;                                          // 0x0104(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0105(0x0003) MISSED OFFSET
	float                                              PurchaseTimeoutTime;                                      // 0x0108(0x0004) (Const)
	float                                              GetPriceTimeoutTime;                                      // 0x010C(0x0004) (Const)
	class AGameInfo_GFxMenu_TA*                        Menu;                                                     // 0x0110(0x0008) (Transient)
	class UMtxConfig_TA*                               MtxConfig;                                                // 0x0118(0x0008) (Edit)
	struct FString                                     RegionRestrictedOpenCrate;                                // 0x0120(0x0010) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MTXGarage_TA");
		return ptr;
	}


	struct FProductHashID __GFxData_MTXGarage_TA__GetKeyHashIDs_DA3BF7E349655EC409AC40A3BD3B4A34(class UOnlineProduct_TA* Op);
	bool __GFxData_MTXGarage_TA__GetKeyHashIDs_C01D2A1B4D50DD4848E5648E4F0096FF(class UOnlineProduct_TA* Op);
	struct FProductHashID __GFxData_MTXGarage_TA__GetDecryptorHashIDs_3280774843A1F7FA1884EE861846FED7(class UOnlineProduct_TA* Op);
	bool __GFxData_MTXGarage_TA__GetDecryptorHashIDs_D3A8437C484E6268D7945A9E905F934D(class UOnlineProduct_TA* Op);
	struct FProductHashID __GFxData_MTXGarage_TA__GetTradeHoldSortedKeys_E2336D3E4C2EAEB935B6D5866893BE36(class UOnlineProduct_TA* Op);
	bool __GFxData_MTXGarage_TA__GetTradeHoldSortedKeys_012B4A014ACC24AF095599BFCB51B4D0(class UOnlineProduct_TA* Op);
	bool __GFxData_MTXGarage_TA__AnyKeyRestricted_C8A8B6A348084163B4945B9E56304DD5(class UOnlineProduct_TA* Key);
	void __GFxData_MTXGarage_TA__UnlockContainers_297CC7F4427B16A1AA8857B2CFA8A766(class UOnlineProduct_TA* Op);
	void __GFxData_MTXGarage_TA__UnlockContainers_71F5C59B465E250A34118AA89189BC1F(class UOnlineProduct_TA* Op);
	int __GFxData_MTXGarage_TA__RevealContainerUnlocks_86EA3B9E4B160DFBC6425D90199C7B24(class UOnlineProduct_TA* P);
	struct FProductHashID __GFxData_MTXGarage_TA__RevealContainerUnlocks_02AE2779466BEAF4D08A45996620633D(class UOnlineProduct_TA* P);
	struct FString __GFxData_MTXGarage_TA__HandleGetCatalogResponse_026126684C7EEC6936A4C498B6A65170(const struct FCurrency& C);
	struct FString __GFxData_MTXGarage_TA__HandleGetCatalogResponse_15C109894BA18B2C1E4E74B569AF47C5(const struct FMTProductInfo& P);
	void HandleMTXError(class UError* Error);
	void OnExitDisplay(TArray<int>* ArrayInitializer_D57FFE5740E691DF400D65B7A5549C4C);
	void SetDisplayProduct(const struct FProductHashID& HashID, TArray<int>* ArrayInitializer_E53F26E04EB269F196EC9581CA386172);
	void ProductRevealExit();
	void OnRevealFinished(int SlotIndex);
	void ProductReveal();
	void OnKeyPurchase();
	void HandlePsynetConfirmPurchase(class URPC_MicroTransactions_FinalizePurchase_TA* RPC);
	void OnPlayerConfirmPurchase(bool bAuthorized);
	void HandleStartPurchase(class URPC_MicroTransactions_StartPurchase_TA* RPC);
	void MTXPurchaseEnd();
	void PurchaseTimeout();
	bool IsUserAbleToPurchase();
	void CheckOut();
	void CheckoutCompleteFlashNNX();
	void CheckoutCompleteNNX();
	TArray<struct FMTCartItem> MapCartToCatalog();
	void UpdateCartTotal();
	void AddToCart(int CatalogID, int Count);
	void RemoveFromCart(int CatalogID, int Count);
	void ClearCart();
	void OnGetCatalog(bool bSuccess);
	void HandleGetPriceInfoComplete(const struct FName& ProductName, const struct FString& Price, const struct FString& DiscountPrice, int DiscountPercentage);
	void HandleGetPriceTimeout();
	void UpdatePriceInfo(TArray<struct FMTCatalogInfo> PriceRequests);
	void HandleGetCatalogResponse(class URPC_MicroTransactions_GetCatalog_TA* RPC, TArray<struct FString>* MapLocal_311CC4384C0C4ECFD9E71A9713820BA4, TArray<struct FString>* MapLocal_AC3765434C63AA47780218AB197E7A63);
	void GetCatalogCategory(TEnumAsByte<EMTXCatalogCategory> InCategory);
	void GetCatalog();
	void OnUnlockFailed();
	void OnUnlock(TArray<struct FProductHashID> HashIDs, TArray<int> ProductIDs);
	void RevealContainerUnlocks(bool bMultiCrateUnlock, TArray<struct FOnlineProductData>* Drops, TArray<struct FProductHashID>* ArrayInitializer_F15DE7734CE783FD0DDE74BAD1458F47, TArray<int>* ArrayInitializer_B338E5844C1BD80F437DE9AE85A3A680, TArray<struct FProductHashID>* ArrayInitializer_44E4861F425265912DEEDBBB8E18215E, TArray<int>* ArrayInitializer_67DB268C4DD1A5DCCFF67793F40C7759, TArray<struct FProductHashID>* MapLocal_15B287C449D751CD162EF5A0C5BA1F74, TArray<int>* MapLocal_795490EB42693AD0739ADBA559502CFC);
	void HandleUnlockContainersResponse(class URPC_MicroTransactions_UnlockContainer_TA* RPC);
	void UnlockContainerFailed();
	void UnlockContainers(const struct FProductHashID& ContainerHashID, TArray<struct FProductHashID> KeyHashIDs);
	bool AnyKeyRestricted(TArray<class UOnlineProduct_TA*>* KeyProducts);
	TArray<struct FProductHashID> GetTradeHoldSortedKeys(bool bIsAscending, TArray<class UOnlineProduct_TA*>* FilterLocal_CA40BE604A0279367350A1BF31F3B40C, TArray<struct FProductHashID>* MapLocal_5759E46F411CFEBE11C595968C8CC519);
	TArray<struct FProductHashID> GetDecryptorHashIDs(TArray<class UOnlineProduct_TA*>* FilterLocal_146B3A8046C98880F85C1083D7CD891C, TArray<struct FProductHashID>* MapLocal_8936482C443A23F9B1B7D0A1ED950D4D);
	TArray<struct FProductHashID> GetKeyHashIDs(TArray<class UOnlineProduct_TA*>* FilterLocal_07D58A534F25611F4648448112856FB1, TArray<struct FProductHashID>* MapLocal_182052144E6ED80F2F7E9DBEA4ECC20B);
	void OnKeyListUpdated();
	bool CanStartTransaction();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.__GFxData_MTXGarage_TA__RevealContainerUnlocks_954C80FF4BA4D9F27641F1955F951A24
// 0x0020 (0x0080 - 0x0060)
class U__GFxData_MTXGarage_TA__RevealContainerUnlocks_954C80FF4BA4D9F27641F1955F951A24 : public UObject
{
public:
	TArray<class UOnlineProduct_TA*>                   OnlineProducts;                                           // 0x0060(0x0010) (NeedCtorLink)
	class UProductsSave_TA*                            ProductsSave;                                             // 0x0070(0x0008)
	class USaveData_TA*                                PCSaveData;                                               // 0x0078(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_MTXGarage_TA__RevealContainerUnlocks_954C80FF4BA4D9F27641F1955F951A24");
		return ptr;
	}


	void __GFxData_MTXGarage_TA__RevealContainerUnlocks_E59E073048CA05E6B7918FB03116305E(class UOnlineProduct_TA* Op);
	void __GFxData_MTXGarage_TA__RevealContainerUnlocks_954C80FF4BA4D9F27641F1955F951A24(const struct FOnlineProductData& D);
};


// Class TAGame.__GFxData_MultiItemDrops_TA__HandleAchievementRewardsReceived_7E37EA51450E7947AF3A5B856B42C5E1
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_MultiItemDrops_TA__HandleAchievementRewardsReceived_7E37EA51450E7947AF3A5B856B42C5E1 : public UObject
{
public:
	TArray<struct FCurrency>                           Currency;                                                 // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_MultiItemDrops_TA__HandleAchievementRewardsReceived_7E37EA51450E7947AF3A5B856B42C5E1");
		return ptr;
	}

};


// Class TAGame.__GFxData_Mutators_TA__InitMutatorCustomGameSettings_89790BDE434F8F74B77E6084D378F2DD
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_Mutators_TA__InitMutatorCustomGameSettings_89790BDE434F8F74B77E6084D378F2DD : public UObject
{
public:
	TArray<struct FName>                               DisabledCategories;                                       // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Mutators_TA__InitMutatorCustomGameSettings_89790BDE434F8F74B77E6084D378F2DD");
		return ptr;
	}


	bool __GFxData_Mutators_TA__InitMutatorCustomGameSettings_89790BDE434F8F74B77E6084D378F2DD(class UGameSettingCategory_X* GSC);
};


// Class TAGame.GFxData_Mutators_TA
// 0x0078 (0x0110 - 0x0098)
class UGFxData_Mutators_TA : public UGFxDataSingleton_X
{
public:
	struct FName                                       SelectedMapName;                                          // 0x0098(0x0008) (Edit, DataBinding)
	int                                                SelectedGameMode;                                         // 0x00A0(0x0004) (Edit, DataBinding)
	int                                                SelectedBotDifficulty;                                    // 0x00A4(0x0004) (Edit, DataBinding)
	TArray<struct FGameModeData>                       GameModes;                                                // 0x00A8(0x0010) (Edit, NeedCtorLink, DataBinding)
	TArray<struct FCustomGameSetting>                  CustomGameSettings;                                       // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	TArray<class UGameSettingCategory_X*>              GameSettingCategories;                                    // 0x00C8(0x0010) (Transient, NeedCtorLink)
	int                                                PresetCategoryIndex;                                      // 0x00D8(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	TArray<struct FModeMapPair>                        ModeMaps;                                                 // 0x00E0(0x0010) (Transient, NeedCtorLink)
	TEnumAsByte<ECustomMatchSettingsType>              SettingsType;                                             // 0x00F0(0x0001) (Transient)
	unsigned char                                      UnknownData01[0x7];                                       // 0x00F1(0x0007) MISSED OFFSET
	class UProfile_TA*                                 Profile;                                                  // 0x00F8(0x0008) (Transient)
	class UGameMode_TA*                                GameModeObj;                                              // 0x0100(0x0008) (Transient)
	class UGameTags_TA*                                GameTags;                                                 // 0x0108(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Mutators_TA");
		return ptr;
	}


	void SetCustomGameSetting(int MutatorCategoryIndex, int MutatorSettingIndex);
	bool ResetInvalidSettings(int MutatorCategoryIndex);
	bool IsValidSetting(int MutatorCategoryIndex, int MutatorSettingIndex, bool bCoerceMap);
	struct FString GetCustomGameSettingDescription(int MutatorCategoryIndex, int MutatorSettingIndex);
	void ForceClearAllTags();
	void SetSelectedBotDifficulty(int BotDifficulty);
	struct FString GetGameTagValueFromIndex(const struct FString& GameTagCategory, int Index);
	int GetGameTagIndex(const struct FString& GameTagCategory, const struct FString& Value);
	void SetSelectedGameMode(int GameMode);
	void SetSelectedMapName(const struct FName& MapName);
	void InitMutatorCustomGameSettings(TArray<class UGameSettingCategory_X*>* FilterLocal_B3F845B14650D92AFC844EBA9661AF45);
	void InitCustomGameSettings();
	void RefreshCustomGameSettings(int MutatorCategoryIndex, int MutatorSettingIndex);
	void OnUpdatedSettings();
	void PopulateGameModes();
	void SetCustomMatchSettings(struct U_Types_X_FCustomMatchSettings* InSettings);
	struct U_Types_X_FCustomMatchSettings GetCustomMatchSettings();
	void SetGameTag(const struct FString& Key, const struct FString& Value);
	struct FString GetGameTag(const struct FString& Key);
	void InitMutatorsFromTournament();
	void InitMutators(TEnumAsByte<ECustomMatchSettingsType> InSettingsType);
	void OnShellSet();
	class UOnlineGame_TA* GetOnlineGame();
};


// Class TAGame.GFxData_NotificationManager_TA
// 0x0030 (0x00C8 - 0x0098)
class UGFxData_NotificationManager_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFXNotificationInfo>                Notifications;                                            // 0x0098(0x0010) (Edit, NeedCtorLink, DataBinding)
	unsigned long                                      bShowInGameNotifications : 1;                             // 0x00A8(0x0004) (Edit, DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	class UNotificationSave_TA*                        NotificationSave;                                         // 0x00B0(0x0008) (Transient)
	TArray<class UNotification_TA*>                    PendingNotifications;                                     // 0x00B8(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_NotificationManager_TA");
		return ptr;
	}


	void __GFxData_NotificationManager_TA__RefreshNotifications_3B9D033A483A4274CB9F8CBEFDA12FB3(class UNotification_TA* Notification);
	void DismissNotification(int NotificationID);
	void RejectNotification(int NotificationID);
	void AcceptNotification(int NotificationID);
	int GetNotificationRowIndex(int NotificationID);
	int GetNotificationInfoIndex(int NotificationID);
	void OnRemoved();
	void DestroyGFxNotifications();
	class UNotificationManager_TA* GetNotificationManager();
	void HandleNotificationRemoved(class UNotificationManager_TA* NotificationManager, class UNotification_TA* Notification, TArray<struct FGFXNotificationInfo>* FilterLocal_1DBCC011447F8521E5648B89D4733266, TArray<class UNotification_TA*>* FilterLocal_052A9CFF460FB55819F3CF8E0A60D14C);
	void ProcessPendingNotifications(struct FGFXNotificationInfo* StructInitializer_E056DF8C4514B47A86236BB76A44A331);
	void HandleNotificationAdded(class UNotificationManager_TA* NotificationManager, class UNotification_TA* Notification);
	void RefreshNotifications();
	void HandleNotificationSaveUpdated();
	void HandleNotificationSaveAdded(class UNotificationSave_TA* InNotificationSave);
	void HandleAccountSettingsAdded(class UAccountSettingsComponent_TA* AccountSettings);
	void OnShellSet();
};


// Class TAGame.__GFxData_NotificationManager_TA__HandleNotificationRemoved_B2710A104D2CFC797E9D2782C29670C8
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_NotificationManager_TA__HandleNotificationRemoved_B2710A104D2CFC797E9D2782C29670C8 : public UObject
{
public:
	class UNotification_TA*                            Notification;                                             // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_NotificationManager_TA__HandleNotificationRemoved_B2710A104D2CFC797E9D2782C29670C8");
		return ptr;
	}


	bool __GFxData_NotificationManager_TA__HandleNotificationRemoved_BAF4AD3648ED72F1FC6DE386360A2529(class UNotification_TA* N);
	bool __GFxData_NotificationManager_TA__HandleNotificationRemoved_B2710A104D2CFC797E9D2782C29670C8(const struct FGFXNotificationInfo& N);
};


// Class TAGame.__GFxData_PlayerAvatarBorderPreview_TA__CreatePlayerAvatarBorderPreview_2B93A2A941AF692A830B66A7C579DB63
// 0x0014 (0x0074 - 0x0060)
class U__GFxData_PlayerAvatarBorderPreview_TA__CreatePlayerAvatarBorderPreview_2B93A2A941AF692A830B66A7C579DB63 : public UObject
{
public:
	class UPlayerAvatarBorder_TA*                      AvatarBorderPreview;                                      // 0x0060(0x0008) (ExportObject, Component, EditInline)
	class UOnlineProduct_TA*                           OnlineProduct;                                            // 0x0068(0x0008)
	int                                                InColorID;                                                // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_PlayerAvatarBorderPreview_TA__CreatePlayerAvatarBorderPreview_2B93A2A941AF692A830B66A7C579DB63");
		return ptr;
	}


	void __GFxData_PlayerAvatarBorderPreview_TA__CreatePlayerAvatarBorderPreview_2B93A2A941AF692A830B66A7C579DB63(const struct FUniqueNetId& P, TEnumAsByte<EVanityType> V);
};


// Class TAGame.GFxData_PlayerAvatarBorderPreview_TA
// 0x0010 (0x00A8 - 0x0098)
class UGFxData_PlayerAvatarBorderPreview_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxPlayerAvatarBorderRef>           AvatarBorderPreviews;                                     // 0x0098(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PlayerAvatarBorderPreview_TA");
		return ptr;
	}


	int GetBorderIndexByHashID(const struct FProductHashID& HashID);
	int GetPlayerAvatarBorder(const struct FUniqueNetId& PlayerID);
	void DestroyPlayerAvatarBorderPreview(const struct FProductHashID& HashID);
	void CreatePlayerAvatarBorderPreview(const struct FProductHashID& HashID, int InColorID, struct FUniqueNetId* StructInitializer_F69137CB4ACCD68C67D763B67D58FCEB, struct FGFxPlayerAvatarBorderRef* StructInitializer_1F72E1264A6F8BDA5120479F322929BA);
};


// Class TAGame.__GFxData_PlayerBanners_TA__CreatePlayerBanner_15410C9B4188145B2AE4D1AD49993B1D
// 0x0024 (0x0084 - 0x0060)
class U__GFxData_PlayerBanners_TA__CreatePlayerBanner_15410C9B4188145B2AE4D1AD49993B1D : public UObject
{
public:
	class UPlayerBanner_TA*                            Banner;                                                   // 0x0060(0x0008) (ExportObject, Component, EditInline)
	struct FProductHashSource                          ProductSource;                                            // 0x0068(0x0018)
	int                                                InColorID;                                                // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_PlayerBanners_TA__CreatePlayerBanner_15410C9B4188145B2AE4D1AD49993B1D");
		return ptr;
	}


	void __GFxData_PlayerBanners_TA__CreatePlayerBanner_15410C9B4188145B2AE4D1AD49993B1D(const struct FUniqueNetId& P, TEnumAsByte<EVanityType> V);
};


// Class TAGame.GFxData_PlayerBanners_TA
// 0x0018 (0x00B0 - 0x0098)
class UGFxData_PlayerBanners_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxPlayerBannerRef>                 Banners;                                                  // 0x0098(0x0010) (NeedCtorLink)
	class UPlayerBanner_TA*                            LastPreviewBanner;                                        // 0x00A8(0x0008) (ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PlayerBanners_TA");
		return ptr;
	}


	int GetBannerIndexByHashID(const struct FProductHashID& HashID);
	int GetPlayerBanner(const struct FUniqueNetId& PlayerID);
	void DestroyPendingAndActivePlayerBannerPreviews();
	void DestroyPlayerBannerPreview(struct FUniqueNetId* StructInitializer_D6AFAD32462C98C32868FDAD75F1BD5E);
	void DestroyPlayerBanner(const struct FProductHashID& HashID);
	void DestroyBannerByNetID(const struct FUniqueNetId& PlayerID);
	void CreatePlayerBannerPreview(const struct FProductHashID& HashID, int InColorID, struct FUniqueNetId* StructInitializer_5EACA358494220574810DAAB0666B43C);
	void OnBannerPreviewLoaded();
	class UProfile_TA* GetProfile();
	void HandleBannerPreviewLoaded(class UPlayerBanner_TA* Banner, class UOnlineProduct_TA* OnlineProduct, int InColorID, const struct FUniqueNetId& PlayerID, const struct FProductHashID& HashID, struct FGFxPlayerBannerRef* StructInitializer_24A2524B4BCAEC710A3AC7914D0CD642);
	int CreatePlayerBanner(const struct FProductHashID& HashID, int InColorID, struct FGFxPlayerBannerRef* StructInitializer_744C3A7C497D9BB667E0ADAF50DEBC00);
};


// Class TAGame.__GFxData_PlayerBanners_TA__CreatePlayerBannerPreview_CFC816F846E175247F279E8D7BBAE617
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_PlayerBanners_TA__CreatePlayerBannerPreview_CFC816F846E175247F279E8D7BBAE617 : public UObject
{
public:
	class UOnlineProduct_TA*                           OnlineProduct;                                            // 0x0060(0x0008)
	int                                                InColorID;                                                // 0x0068(0x0004)
	struct FProductHashID                              HashID;                                                   // 0x006C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_PlayerBanners_TA__CreatePlayerBannerPreview_CFC816F846E175247F279E8D7BBAE617");
		return ptr;
	}


	void __GFxData_PlayerBanners_TA__CreatePlayerBannerPreview_CFC816F846E175247F279E8D7BBAE617(const struct FUniqueNetId& PlayerID, TEnumAsByte<EVanityType> V);
};


// Class TAGame.__GFxData_ReplayManager_TA__DownloadReplay_A4D678864454B203625D20AA6834EC25
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_ReplayManager_TA__DownloadReplay_A4D678864454B203625D20AA6834EC25 : public UObject
{
public:
	class UWebRequest_X*                               Request;                                                  // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_ReplayManager_TA__DownloadReplay_A4D678864454B203625D20AA6834EC25");
		return ptr;
	}

};


// Class TAGame.__GFxData_ShopCatalogue_TA__GetOnlineProductsByCostID_3BAFC3DE4389ABA6EA3F44BE5EE089A9
// 0x0004 (0x0064 - 0x0060)
class U__GFxData_ShopCatalogue_TA__GetOnlineProductsByCostID_3BAFC3DE4389ABA6EA3F44BE5EE089A9 : public UObject
{
public:
	int                                                CostID;                                                   // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_ShopCatalogue_TA__GetOnlineProductsByCostID_3BAFC3DE4389ABA6EA3F44BE5EE089A9");
		return ptr;
	}


	bool __GFxData_ShopCatalogue_TA__GetOnlineProductsByCostID_3BAFC3DE4389ABA6EA3F44BE5EE089A9(const struct FShopItem& I);
};


// Class TAGame.GFxData_ShopCatalogue_TA
// 0x00AC (0x0140 - 0x0094)
class UGFxData_ShopCatalogue_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class UShopsManager_TA*                            ShopManager;                                              // 0x0098(0x0008) (Edit)
	int                                                ShopID;                                                   // 0x00A0(0x0004) (Transient, DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FString                                     ShopName;                                                 // 0x00A8(0x0010) (Transient, NeedCtorLink, DataBinding)
	TEnumAsByte<EShopType>                             Type;                                                     // 0x00B8(0x0001) (Transient, DataBinding)
	unsigned char                                      UnknownData02[0x7];                                       // 0x00B9(0x0007) MISSED OFFSET
	unsigned char                                      UnknownData03[0x8];                                       // 0x00B9(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_ShopCatalogue_TA.StartDate
	unsigned char                                      UnknownData04[0x8];                                       // 0x00C8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_ShopCatalogue_TA.EndDate
	unsigned long                                      bLoaded : 1;                                              // 0x00D0(0x0004) (Transient, DataBinding)
	unsigned long                                      bFailedToLoad : 1;                                        // 0x00D0(0x0004) (Transient, DataBinding)
	unsigned long                                      bShopItemExpired : 1;                                     // 0x00D0(0x0004) (Transient, DataBinding)
	unsigned long                                      bAutoReload : 1;                                          // 0x00D0(0x0004) (Transient, DataBinding)
	unsigned char                                      UnknownData05[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	TArray<struct FShopItem>                           CachedItems;                                              // 0x00D8(0x0010) (Transient, NeedCtorLink)
	float                                              CacheDuration;                                            // 0x00E8(0x0004) (Config)
	float                                              LastCacheTime;                                            // 0x00EC(0x0004) (Transient)
	class UAsyncTask*                                  ShopTask;                                                 // 0x00F0(0x0008) (Transient)
	class UOnlineProductStoreSet_TA*                   CatalogueSet;                                             // 0x00F8(0x0008) (ExportObject, Transient, Component, EditInline)
	class UShopItemExpirationHelper_TA*                ExpirationHelper;                                         // 0x0100(0x0008) (Transient)
	class UShopAutoLoadHelper_TA*                      AutoLoadHelper;                                           // 0x0108(0x0008) (Transient)
	struct FScriptDelegate                             __bLoaded__ChangeNotify;                                  // 0x0110(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x0110(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __bAutoReload__ChangeNotify;                              // 0x0128(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x0128(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ShopCatalogue_TA");
		return ptr;
	}


	void __GFxData_ShopCatalogue_TA__OnShellSet_9C38CB33437BF7D9E547D8804A872377(class UShopItemExpirationHelper_TA* _);
	struct FProductHashID __GFxData_ShopCatalogue_TA__GetOnlineProductsByCostID_49612D02409B6A1754FF2693239409A8(const struct FShopDeliverable& D);
	void __bAutoReload__ChangeNotifyFunc();
	void __bLoaded__ChangeNotifyFunc();
	void DebugSetCatalogueItems(TArray<struct FShopItem> InItems);
	void DebugOverride(int Index, int ProductID, int PaintID, int CertifiedId, int SpecialEditionID, int Cost);
	void OnCatalogueLoaded();
	void HandleShopItemExpired();
	void HandleCatalogueLoadFailed(class UError* Error);
	void ShopItemTextureLoaded(int ShopItemID, class UTexture* LoadedTexture);
	void SyncItemImages(class UWebImageCache_X* WebImageCache, int I);
	void HandleCatalogueLoaded(TArray<struct FShopItem> InItems);
	void SetCatalogueItems(TArray<struct FShopItem> InItems);
	TArray<class UOnlineProduct_TA*> GetOnlineProductsByCostID(int CostID, TArray<struct FProductHashID>* MapLocal_6630854A481C5FC491DF069BCEF74745, TArray<class UOnlineProduct_TA*>* MapManyLocal_E55491A74D26CD6C947837B2D1BC5426);
	void LoadCatalogueInternal(bool bForce);
	void SetAutoLoadCatalogue(bool bInAutoReload);
	TArray<struct FShopItem> GetShopItems();
	void ForceLoadCatalogue();
	void LoadCatalogue();
	void Init(const struct FShopData& InData);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.__GFxData_ShopCatalogue_TA__SyncItemImages_FDBF2C934899E92DB544C5B490583819
// 0x0004 (0x0064 - 0x0060)
class U__GFxData_ShopCatalogue_TA__SyncItemImages_FDBF2C934899E92DB544C5B490583819 : public UObject
{
public:
	int                                                ShopItemID;                                               // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_ShopCatalogue_TA__SyncItemImages_FDBF2C934899E92DB544C5B490583819");
		return ptr;
	}


	void __GFxData_ShopCatalogue_TA__SyncItemImages_FDBF2C934899E92DB544C5B490583819(class UTexture2DDynamic* Texture);
};


// Class TAGame.__GFxData_Shops_TA__GetCrateShop_84ECDBB048D16D101211D4A3A0411C32
// 0x0004 (0x0064 - 0x0060)
class U__GFxData_Shops_TA__GetCrateShop_84ECDBB048D16D101211D4A3A0411C32 : public UObject
{
public:
	int                                                CrateID;                                                  // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Shops_TA__GetCrateShop_84ECDBB048D16D101211D4A3A0411C32");
		return ptr;
	}


	void __GFxData_Shops_TA__GetCrateShop_84ECDBB048D16D101211D4A3A0411C32(TArray<struct FShopItem> Items, int ShopID);
};


// Class TAGame.GFxData_Shops_TA
// 0x0058 (0x00F0 - 0x0098)
class UGFxData_Shops_TA : public UGFxDataSingleton_X
{
public:
	class UShopsManager_TA*                            ShopManager;                                              // 0x0098(0x0008) (Edit)
	class UShopsConfig_TA*                             Config;                                                   // 0x00A0(0x0008) (Transient)
	TArray<class UGFxData_ShopCatalogue_TA*>           Shops;                                                    // 0x00A8(0x0010) (Transient, NeedCtorLink)
	int                                                DebugShopID;                                              // 0x00B8(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	class UOnlineProductStoreSet_TA*                   CrateShopSet;                                             // 0x00C0(0x0008) (ExportObject, Transient, Component, EditInline)
	float                                              CacheDuration;                                            // 0x00C8(0x0004) (Config)
	float                                              LastCacheTime;                                            // 0x00CC(0x0004) (Transient)
	class UAsyncTask*                                  ShopTask;                                                 // 0x00D0(0x0008) (Transient)
	struct FScriptDelegate                             __EventReceivedShops__Delegate;                           // 0x00D8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00D8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Shops_TA");
		return ptr;
	}


	void __GFxData_Shops_TA__OnCheckForPurchaseWarning_1A29EB124F8D6684E65021B8F07B084E(class UGFxModal_X* _);
	void __GFxData_Shops_TA__OnCheckForPurchaseWarning_34B9D6FF475E1DE8FBB46D9E1581DE6D(class UGFxModal_X* _);
	void __GFxData_Shops_TA__OnCheckForPurchaseWarning_3D494DA445DB08F79024DAB5031BA453(class UGFxModal_X* _);
	bool __GFxData_Shops_TA__OnCheckForPurchaseWarning_10D31A0A4CAB3411D5A8A29E66D28912(class UOnlineProduct_TA* P);
	class UShopMetrics_TA* GetShopMetrics();
	void STATIC_CreateTemporaryOnlineProducts(class UOnlineProductStoreSet_TA* ProductSet, TArray<struct FShopItem>* Items);
	void OnGetCrateShopFailed();
	void HandleGetCrateShopFailed(class UError* Error);
	void OnReceivedCrateShop(int CrateID, TArray<struct FShopItem> CrateItems, int ShopID);
	void GetCrateShop(int CrateID);
	void OnPurchaseFail();
	void HandlePurchaseFail(class UError* Error);
	void OnPurchaseSuccess();
	void HandlePurchaseSuccess(TArray<struct FOnlineProductData> PurchasedProducts, TArray<struct FCurrency> PurchasedCurrencies);
	void OnPurchase(int CostID, int ShopID, int InDiscountID, int Count);
	void OnCheckForPurchaseWarningSuccess();
	bool OnCheckForPurchaseWarning(int CostID, int ShopID, int InDiscountID, int Count);
	void CheckForPurchaseWarning(int CostID, int ShopID, int InDiscountID, int Count);
	bool CheckPlayerMeetsProductRequirements(class UOnlineProduct_TA* OnlineProduct, TArray<class UOnlineProduct_TA*>* DeliverableOnlineProducts, struct FString* ErrorString);
	void HandleShopItemTextureLoaded(int ShopID, int ShopItemIndex, class UTexture* LoadedTexture);
	void Purchase(int CostID, int ShopID, int InDiscountID, int Count);
	void PreviewShopItem(int ShopItemID);
	void ExitShopPage();
	int GetShopCatalogueIndex(int InShopID);
	void OnEnterShopMenu(int BrowseSourceID);
	bool CheckShopExists(int InShopID);
	void OnGetAllShopsFailed();
	void OnGetAllShopsSuccess();
	void HandleGetAllShopsFailed(class UError* Error);
	void HandleGetAllShops(TArray<struct FShopData> InShops);
	void GetAllShopsInternal(bool bForce);
	void GetAllShopsForced();
	void RefreshAllShops();
	void HandleEventConfigChanged();
	void OnRemoved();
	void OnShellSet();
	void EventReceivedShops(class UGFxData_Shops_TA* GFxShops);
};


// Class TAGame.__GFxData_Shops_TA__HandleGetAllShops_BF8DF24C4DE6E078DC572ABF6B5146D2
// 0x0040 (0x00A0 - 0x0060)
class U__GFxData_Shops_TA__HandleGetAllShops_BF8DF24C4DE6E078DC572ABF6B5146D2 : public UObject
{
public:
	struct FShopData                                   Data;                                                     // 0x0060(0x0040) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Shops_TA__HandleGetAllShops_BF8DF24C4DE6E078DC572ABF6B5146D2");
		return ptr;
	}


	bool __GFxData_Shops_TA__HandleGetAllShops_BF8DF24C4DE6E078DC572ABF6B5146D2(class UGFxData_ShopCatalogue_TA* S);
};


// Class TAGame.__GFxData_Shops_TA__OnCheckForPurchaseWarning_992D792B497047A393CBBABEE6481BB7
// 0x0004 (0x0064 - 0x0060)
class U__GFxData_Shops_TA__OnCheckForPurchaseWarning_992D792B497047A393CBBABEE6481BB7 : public UObject
{
public:
	int                                                ShopID;                                                   // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Shops_TA__OnCheckForPurchaseWarning_992D792B497047A393CBBABEE6481BB7");
		return ptr;
	}


	bool __GFxData_Shops_TA__OnCheckForPurchaseWarning_992D792B497047A393CBBABEE6481BB7(class UGFxData_ShopCatalogue_TA* S);
};


// Class TAGame.__GFxData_SpecialEvents_TA__HandlePurchaseRewardFromStoreSuccess_A6E388664C804E6354AC7BB24BA95B67
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_SpecialEvents_TA__HandlePurchaseRewardFromStoreSuccess_A6E388664C804E6354AC7BB24BA95B67 : public UObject
{
public:
	class URPC_PurchaseSpecialEventReward_TA*          RPC;                                                      // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_SpecialEvents_TA__HandlePurchaseRewardFromStoreSuccess_A6E388664C804E6354AC7BB24BA95B67");
		return ptr;
	}


	void __GFxData_SpecialEvents_TA__HandlePurchaseRewardFromStoreSuccess_A6E388664C804E6354AC7BB24BA95B67(class UGFxData_SpecialEventStore_TA* S);
};


// Class TAGame.RPC_SpecialEventBase_TA
// 0x0000 (0x0100 - 0x0100)
class URPC_SpecialEventBase_TA : public URPC_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_SpecialEventBase_TA");
		return ptr;
	}

};


// Class TAGame.RPC_GetSpecialEventCurrencyRewards_TA
// 0x0058 (0x0158 - 0x0100)
class URPC_GetSpecialEventCurrencyRewards_TA : public URPC_SpecialEventBase_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	TArray<int>                                        EventIDs;                                                 // 0x0138(0x0010) (NeedCtorLink)
	TArray<struct FSpecialEventStore>                  EventStores;                                              // 0x0148(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetSpecialEventCurrencyRewards_TA");
		return ptr;
	}


	class URPC_GetSpecialEventCurrencyRewards_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_GetSpecialEventCurrencyRewards_TA* SetEventIDs(TArray<int> InEventIDs);
};


// Class TAGame.GFxData_SpecialEventStore_TA
// 0x0024 (0x00B8 - 0x0094)
class UGFxData_SpecialEventStore_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	int                                                EventID;                                                  // 0x0098(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	TArray<struct FGFxSpecialEventReward>              Rewards;                                                  // 0x00A0(0x0010) (Transient, NeedCtorLink)
	class UOnlineProductStoreSet_TA*                   SpecialEventsSet;                                         // 0x00B0(0x0008) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_SpecialEventStore_TA");
		return ptr;
	}


	void HandlePurchasedRewards(class URPC_PurchaseSpecialEventReward_TA* RPC);
	TArray<struct FGFxSpecialEventReward> GetRewards();
	struct FProductHashID GetRewardHashID(struct FSpecialEventReward* InReward, struct FProductHashID* StructInitializer_C6202E1D4937FD229531CD9250819647);
	struct FGFxSpecialEventReward CreateEventReward(const struct FSpecialEventReward& InReward);
	void Init(const struct FSpecialEventStore& StoreData, TArray<struct FGFxSpecialEventReward>* MapLocal_5FB5F6694246E2D40FF9BC852F401C5F);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.RPC_PurchaseSpecialEventReward_TA
// 0x0090 (0x0190 - 0x0100)
class URPC_PurchaseSpecialEventReward_TA : public URPC_SpecialEventBase_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	int                                                StoreProductID;                                           // 0x0138(0x0004)
	struct FRocketPassInfo                             RocketPassInfo;                                           // 0x013C(0x0014)
	TArray<struct FOnlineProductData>                  ProductData;                                              // 0x0150(0x0010) (NeedCtorLink)
	TArray<struct U_Types_TA_FOnlineXPReward>          RewardDrops;                                              // 0x0160(0x0010) (NeedCtorLink)
	TArray<struct FCurrency>                           CurrencyData;                                             // 0x0170(0x0010) (NeedCtorLink)
	TArray<struct FCurrency>                           WalletCurrencies;                                         // 0x0180(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_PurchaseSpecialEventReward_TA");
		return ptr;
	}


	class URPC_PurchaseSpecialEventReward_TA* SetStoreProductID(int InProductID);
	class URPC_PurchaseSpecialEventReward_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxData_SpecialEvents_TA
// 0x0034 (0x00CC - 0x0098)
class UGFxData_SpecialEvents_TA : public UGFxDataSingleton_X
{
public:
	class USpecialEventConfig_TA*                      EventData;                                                // 0x0098(0x0008) (Transient)
	TEnumAsByte<ESpecialEventState>                    EventState;                                               // 0x00A0(0x0001) (DataBinding)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	int                                                Currency;                                                 // 0x00A4(0x0004) (DataBinding)
	int                                                SecondsRemaining;                                         // 0x00A8(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	TArray<class UGFxData_SpecialEventStore_TA*>       EventStores;                                              // 0x00B0(0x0010) (Transient, NeedCtorLink)
	class UWallet_TA*                                  Wallet;                                                   // 0x00C0(0x0008) (Transient)
	unsigned long                                      bSpecialEventButtonVisible : 1;                           // 0x00C8(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_SpecialEvents_TA");
		return ptr;
	}


	void __GFxData_SpecialEvents_TA__OnShellSet_1FC5814C49D98B23483C79B2EE229517(class UPsyNetConnection_X* _);
	void __GFxData_SpecialEvents_TA__OnShellSet_A94A96324C7FE643F88CC0B3DA56D3D8(class UWallet_TA* InWallet);
	void __GFxData_SpecialEvents_TA__OnShellSet_732F3122470EF1B450F305B870124883(class UWallet_TA* W, int Id);
	void __GFxData_SpecialEvents_TA__GetStoreRewards_D079AFC74DE025FAAD45F591D15FF2C7(class URPC_GetSpecialEventCurrencyRewards_TA* RPC);
	int __GFxData_SpecialEvents_TA__GetStoreRewards_1BE339FC419BABCB3544538D065A5E31(const struct FSpecialEventStoreConfigs& S);
	void __GFxData_SpecialEvents_TA__PurchaseRewardFromStore_EE55E5664854B29616466CA1D065FD3D(class URPC_PurchaseSpecialEventReward_TA* RPC);
	int GetCost(int StoreProductID);
	void OnPurchaseSuccess();
	void HandlePurchaseRewardFromStoreSuccess(class URPC_PurchaseSpecialEventReward_TA* RPC);
	void OnPurchaseFail();
	void HandlePurchaseFail(class URPC_X* RPC);
	void PurchaseRewardFromStore(int StoreProductID);
	int GetStoreIndex(int InEventID);
	void OnStoreRewardsReceived();
	void SetStoreRewards(TArray<struct FSpecialEventStore>* InStores);
	void GetStoreRewards(TArray<int>* MapLocal_8F959A904FACC0833C6050AE78432AC2);
	void GetCurrency();
	void UpdateSpecialEventButtonVisibility();
	void UpdateEventStatus();
	void HandleEventConfigChanged(class USpecialEventConfig_TA* InEventData);
	void OnShellSet();
};


// Class TAGame.__GFxData_SpecialEvents_TA__PurchaseRewardFromStore_F00AE96641179263B9B4B58566BFC3A2
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_SpecialEvents_TA__PurchaseRewardFromStore_F00AE96641179263B9B4B58566BFC3A2 : public UObject
{
public:
	class USaveData_TA*                                SaveData;                                                 // 0x0060(0x0008)
	class UWallet_TA*                                  WalletReference;                                          // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_SpecialEvents_TA__PurchaseRewardFromStore_F00AE96641179263B9B4B58566BFC3A2");
		return ptr;
	}


	void __GFxData_SpecialEvents_TA__PurchaseRewardFromStore_80A190934A28D441E2F59298E083C2D5(class URPC_PurchaseSpecialEventReward_TA* RPC);
	void __GFxData_SpecialEvents_TA__PurchaseRewardFromStore_68759B2D48C68D039670CBA787385F70(class URPC_PurchaseSpecialEventReward_TA* RPC);
	void __GFxData_SpecialEvents_TA__PurchaseRewardFromStore_F00AE96641179263B9B4B58566BFC3A2(class URPC_PurchaseSpecialEventReward_TA* RPC);
};


// Class TAGame.__GFxData_TourBracket_TA__InitTeams_65F933FC42752E20F70C95886CCC100D
// 0x0040 (0x00A0 - 0x0060)
class U__GFxData_TourBracket_TA__InitTeams_65F933FC42752E20F70C95886CCC100D : public UObject
{
public:
	struct FTourTeam                                   Team;                                                     // 0x0060(0x0040) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_TourBracket_TA__InitTeams_65F933FC42752E20F70C95886CCC100D");
		return ptr;
	}


	bool __GFxData_TourBracket_TA__InitTeams_65F933FC42752E20F70C95886CCC100D(class UGFxData_TourBracketTeam_TA* T);
};


// Class TAGame.GFxData_TourBracketTeam_TA
// 0x0024 (0x00B8 - 0x0094)
class UGFxData_TourBracketTeam_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	int                                                TeamID;                                                   // 0x0098(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	struct FString                                     TeamName;                                                 // 0x00A0(0x0010) (NeedCtorLink, DataBinding)
	int                                                TeamColorID;                                              // 0x00B0(0x0004) (DataBinding)
	int                                                CustomColorID;                                            // 0x00B4(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourBracketTeam_TA");
		return ptr;
	}


	void __GFxData_TourBracketTeam_TA__SetTeam_5D2F60F1493F407C2741E1AA54EF0CE7(const struct FString& Original, const struct FString& Sanitized);
	void SetTeam(struct FTourTeam* Team);
};


// Class TAGame.GFxData_TourBracket_TA
// 0x0020 (0x00B8 - 0x0098)
class UGFxData_TourBracket_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0098(0x0008) (Edit)
	int                                                PlayerTeamID;                                             // 0x00A0(0x0004) (DataBinding)
	int                                                TotalRounds;                                              // 0x00A4(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_TourBracket_TA.Id
	class UTourBracketSync_TA*                         BracketSync;                                              // 0x00B0(0x0008) (Edit, ExportObject, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourBracket_TA");
		return ptr;
	}


	void __GFxData_TourBracket_TA__Show_25CEB6BD400784D35228A5935CA036E2(class UError* Error);
	bool __GFxData_TourBracket_TA__SetBracket_6A3EF9A2475DD730F04095ACC83615D5(const struct FTourTeam& Team);
	void InitMatches(TArray<struct FTourMatch>* Matches);
	void InitTeams(TArray<struct FTourTeam>* Teams);
	void SetBracket(struct FTourBracket* Bracket);
	void OnBracketRetrieved();
	void UpdateBracket();
	void hide();
	void HandleShowBracketComplete(struct FTourBracket* Bracket);
	void Show();
	void OnRemoved();
};


// Class TAGame.__GFxData_TourCheckIn_TA__HandleCheckInError_3AEA4E83452859B8A75EFCB87CF97AD4
// 0x0008 (0x0068 - 0x0060)
class U__GFxData_TourCheckIn_TA__HandleCheckInError_3AEA4E83452859B8A75EFCB87CF97AD4 : public UObject
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.__GFxData_TourCheckIn_TA__HandleCheckInError_3AEA4E83452859B8A75EFCB87CF97AD4.TournamentID

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_TourCheckIn_TA__HandleCheckInError_3AEA4E83452859B8A75EFCB87CF97AD4");
		return ptr;
	}


	void __GFxData_TourCheckIn_TA__HandleCheckInError_45D83E25439B4FF2992ABFA3A5F863AE(class UGFxModal_X* _);
	void __GFxData_TourCheckIn_TA__HandleCheckInError_3AEA4E83452859B8A75EFCB87CF97AD4(class UGFxModal_X* _);
};


// Class TAGame.GFxData_TourCheckIn_TA
// 0x0060 (0x00F8 - 0x0098)
class UGFxData_TourCheckIn_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0098(0x0008) (Edit)
	struct FString                                     TeamName;                                                 // 0x00A0(0x0010) (NeedCtorLink, DataBinding)
	struct FCustomMatchTeamSettings                    TeamSettings;                                             // 0x00B0(0x0020) (Transient, NeedCtorLink)
	class UTournamentSettingsSave_TA*                  SaveData;                                                 // 0x00D0(0x0008) (Transient)
	struct FString                                     CrossPlatformNotEnabled;                                  // 0x00D8(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     EnableAndJoin;                                            // 0x00E8(0x0010) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourCheckIn_TA");
		return ptr;
	}


	void __GFxData_TourCheckIn_TA__Register_907B948040DD32AD154AD3817AB2E700(class UError* E);
	void SetCustomColorID(int ColorID);
	void SetTeamColorID(int ColorID);
	void SetTeamName(const struct FString& InTeamName);
	void OnCheckInComplete();
	void HandleEnableCrossPlatformAndJoin();
	void HandleCheckInError(class UError* InError, bool bPromptUnsubscribe);
	void PerformCheckIn(class UTourSettings_TA* Settings, bool bSubscribedOnCheckIn);
	void HandleRegisterSuccess(class UTourSettings_TA* Settings, const struct FTourPrivateCredentials& Credentials);
	void HandleEnterCredentials(const struct FString& Password, bool bCanceled);
	void Register(class UTourSettings_TA* Settings, const struct FTourPrivateCredentials& Credentials);
	void CheckIn();
	bool AlertOnCheckInError();
	void HandleSaveDataLoaded(class UTournamentSettingsSave_TA* Save);
	void OnShellSet();
};


// Class TAGame.__GFxData_TourCheckIn_TA__PerformCheckIn_1593BB9C4CCC8291023154BC416749BA
// 0x000C (0x006C - 0x0060)
class U__GFxData_TourCheckIn_TA__PerformCheckIn_1593BB9C4CCC8291023154BC416749BA : public UObject
{
public:
	class UTourSettings_TA*                            Settings;                                                 // 0x0060(0x0008)
	unsigned long                                      bSubscribedOnCheckIn : 1;                                 // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_TourCheckIn_TA__PerformCheckIn_1593BB9C4CCC8291023154BC416749BA");
		return ptr;
	}


	void __GFxData_TourCheckIn_TA__PerformCheckIn_1593BB9C4CCC8291023154BC416749BA(class UError* E);
};


// Class TAGame.__GFxData_TourCheckIn_TA__Register_04831FE2404215231EF740830415EAD8
// 0x0028 (0x0088 - 0x0060)
class U__GFxData_TourCheckIn_TA__Register_04831FE2404215231EF740830415EAD8 : public UObject
{
public:
	class UTourSettings_TA*                            Settings;                                                 // 0x0060(0x0008)
	struct FTourPrivateCredentials                     Credentials;                                              // 0x0068(0x0020) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_TourCheckIn_TA__Register_04831FE2404215231EF740830415EAD8");
		return ptr;
	}


	void __GFxData_TourCheckIn_TA__Register_8076886845E7715983833FBFCDEA9301(class UTourSettings_TA* T);
	void __GFxData_TourCheckIn_TA__Register_04831FE2404215231EF740830415EAD8(const struct FString& P, bool C);
};


// Class TAGame.__GFxData_TourCreate_TA__CreateTournament_F469780E47F3C347B2FE59BEA3152497
// 0x0038 (0x0098 - 0x0060)
class U__GFxData_TourCreate_TA__CreateTournament_F469780E47F3C347B2FE59BEA3152497 : public UObject
{
public:
	struct FTourCreateSettings                         FinalTourSettings;                                        // 0x0060(0x0038) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_TourCreate_TA__CreateTournament_F469780E47F3C347B2FE59BEA3152497");
		return ptr;
	}


	void __GFxData_TourCreate_TA__CreateTournament_F469780E47F3C347B2FE59BEA3152497(class UTourSettings_TA* T);
};


// Class TAGame.GFxData_MapSelection_TA
// 0x0040 (0x00D8 - 0x0098)
class UGFxData_MapSelection_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxMapSelectionData>                Selections;                                               // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	struct FScriptDelegate                             __EventMapListChange__Delegate;                           // 0x00A8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00A8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventSelectionChange__Delegate;                         // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MapSelection_TA");
		return ptr;
	}


	struct FGFxMapSelectionData __GFxData_MapSelection_TA__HandleMapListChanged_27CCCFA74F8DA20377FA768D0FD92E81(const struct FGFxMapData& M, struct FGFxMapSelectionData* StructInitializer_17DA52394F7E78769EA2C695E5D3C67A);
	struct FName __GFxData_MapSelection_TA__GetDisabledMaps_1F4361574A4930412B24A68600E4155A(const struct FGFxMapSelectionData& MapItem);
	bool __GFxData_MapSelection_TA__GetDisabledMaps_527F6FC34D1B82F9E017B3A54929C3B2(const struct FGFxMapSelectionData& MapItem);
	void SetSelected(int Row, bool bSelected);
	void SetDisabledMaps(TArray<struct FName>* MapNames);
	TArray<struct FName> GetDisabledMaps(TArray<struct FGFxMapSelectionData>* FilterLocal_9E8806C94E9D4BDA383774BC1C839CA8, TArray<struct FName>* MapLocal_38ECD4FE4AE079382E2B17BEF0C52CD0);
	void HandleMapListChanged(class UGFxData_Map_TA* GFxMaps, TArray<struct FGFxMapSelectionData>* MapLocal_A1346E984A9EB2C2A2D8FEA1C41C8AFB);
	void OnShellSet();
	void EventSelectionChange(class UGFxData_MapSelection_TA* GFxMapSelection, const struct FName& MapName, bool bSelected);
	void EventMapListChange(class UGFxData_MapSelection_TA* GFxMapSelection);
};


// Class TAGame.GFxData_TourCreate_TA
// 0x009E (0x0238 - 0x019A)
class UGFxData_TourCreate_TA : public UGFxData_PrivateMatch_TA
{
public:
	unsigned char                                      UnknownData00[0x6];                                       // 0x019A(0x0006) MISSED OFFSET
	struct FString                                     PrivateNoPassword;                                        // 0x01A0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     StartTimeTooSoon;                                         // 0x01B0(0x0010) (Const, Localized, NeedCtorLink)
	int                                                MaxBracketSize;                                           // 0x01C0(0x0004) (Edit, DataBinding)
	int                                                RankMin;                                                  // 0x01C4(0x0004) (Edit, DataBinding)
	int                                                RankMax;                                                  // 0x01C8(0x0004) (Edit, DataBinding)
	int                                                SeriesLength;                                             // 0x01CC(0x0004) (Edit, DataBinding)
	int                                                FinalSeriesLength;                                        // 0x01D0(0x0004) (Edit, DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	TArray<struct FGFxTournamentReward>                Rewards;                                                  // 0x01D8(0x0010) (Edit, NeedCtorLink, DataBinding)
	TEnumAsByte<ETourSeedType>                         SeedingType;                                              // 0x01E8(0x0001) (Edit, DataBinding)
	TEnumAsByte<EMatchTieBreaker>                      TieBreaker;                                               // 0x01E9(0x0001) (Edit, DataBinding)
	unsigned char                                      UnknownData02[0x6];                                       // 0x01EA(0x0006) MISSED OFFSET
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x01F0(0x0008) (Edit)
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x01F8(0x0008) (Edit)
	class UTourConfig_TA*                              Config;                                                   // 0x0200(0x0008) (Edit)
	class UTourSettings_TA*                            Settings;                                                 // 0x0208(0x0008) (Transient)
	class UTournamentSettingsSave_TA*                  TournamentSave;                                           // 0x0210(0x0008) (Transient)
	class UMapSet_TA*                                  DefaultMapSet;                                            // 0x0218(0x0008)
	struct FScriptDelegate                             __EventTournamentCreated__Delegate;                       // 0x0220(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0220(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourCreate_TA");
		return ptr;
	}


	struct FName __GFxData_TourCreate_TA__GetDefaultDisabledMaps_0FA74D814575269902526B857F92D9B2(const struct FGFxMapSelectionData& M);
	struct FName __GFxData_TourCreate_TA__GetDefaultDisabledMaps_627720DA4EC39B06297DCDBCAFDCC56D(class UMapData_TA* M);
	struct FString GetOnlineStatusError();
	void HandleMapSelectionChange(class UGFxData_MapSelection_TA* GFxMapSelection, const struct FName& MapName, bool bSelected);
	void HandleMapListChange(class UGFxData_MapSelection_TA* GFxMapSelection);
	void HandlePlatformSelectionChange(class UGFxData_TourPlatforms_TA* GFxPlatforms, TArray<TEnumAsByte<EOnlinePlatform>> NewPlatforms, TArray<struct FString>* MapLocal_CDF3DC204B6FD1AC2E6EE9AB24F8F0EE);
	void STATIC_GFxRewardsToTourRewards(TArray<struct FGFxTournamentReward>* GFxRewards, TArray<struct FTourReward>* TourRewards);
	void RemoveReward(int Placement);
	void AddReward(int Placement);
	void SetTieBreaker(TEnumAsByte<EMatchTieBreaker> InTieBreaker);
	void SetSeedingType(TEnumAsByte<ETourSeedType> InSeedingType);
	void SetFinalSeriesLength(int InFinalSeriesLength);
	void SetSeriesLength(int InSeriesLength);
	void SetRankMax(int InRankMax);
	void SetRankMin(int InRankMin);
	void SetMaxBracketSize(int InMaxBracketSize);
	void SetStartDateTime(const struct FDateTimeStruct& DateTime);
	void HandleError(class UError* Error);
	void OnCreateComplete();
	void HandleCreateTournament(class UTourSettings_TA* Tournament, const struct FTourPrivateCredentials& Credentials);
	void CreateTournament(struct FTourPrivateCredentials* StructInitializer_C083ABEF480B48190A2D05A1235F06B2);
	void Update(TArray<TEnumAsByte<EOnlinePlatform>>* MapLocal_352857804B8D653A6E12A4A74FA37BD4);
	TArray<struct FName> GetDefaultDisabledMaps(TArray<struct FName>* MapLocal_FF34FD3F4FCF5BA677BB32A05323B49F, TArray<struct FName>* MapLocal_8466C08F4BC2BF9DBDE206A7B13150EC, TArray<struct FName>* FilterLocal_CC49E8134E9E31CB0EFF0CBD24DED1FC);
	class UTourSettings_TA* CreateDefaultSettings();
	void OnProfileSet();
	void OnShellSet();
	void EventTournamentCreated(class UGFxData_TourCreate_TA* GFxTourCreate, class UTourSettings_TA* NewTournament);
};


// Class TAGame.__GFxData_TourCreate_TA__GetDefaultDisabledMaps_95A54B4D44FB278058845EB480483E61
// 0x0010 (0x0070 - 0x0060)
class U__GFxData_TourCreate_TA__GetDefaultDisabledMaps_95A54B4D44FB278058845EB480483E61 : public UObject
{
public:
	TArray<struct FName>                               DefaultMapNames;                                          // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_TourCreate_TA__GetDefaultDisabledMaps_95A54B4D44FB278058845EB480483E61");
		return ptr;
	}


	bool __GFxData_TourCreate_TA__GetDefaultDisabledMaps_95A54B4D44FB278058845EB480483E61(const struct FName& MapName);
};


// Class TAGame.__GFxData_TourEvent_TA__HandleBracketRetrieved_148C6AE24705D22991F4FABC06F9231E
// 0x0004 (0x0064 - 0x0060)
class U__GFxData_TourEvent_TA__HandleBracketRetrieved_148C6AE24705D22991F4FABC06F9231E : public UObject
{
public:
	int                                                OpponentTeamId;                                           // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_TourEvent_TA__HandleBracketRetrieved_148C6AE24705D22991F4FABC06F9231E");
		return ptr;
	}


	bool __GFxData_TourEvent_TA__HandleBracketRetrieved_148C6AE24705D22991F4FABC06F9231E(const struct FTourTeam& T);
};


// Class TAGame.GFxData_TourEvent_TA
// 0x006C (0x0104 - 0x0098)
class UGFxData_TourEvent_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0098(0x0008) (Edit)
	class UOnlineGameTourMatchmaking_TA*               TourMatchmaking;                                          // 0x00A0(0x0008) (Edit)
	struct FString                                     Title;                                                    // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_TourEvent_TA.Id
	int                                                SecondsRemaining;                                         // 0x00C0(0x0004) (DataBinding)
	TEnumAsByte<ETourEventStatus>                      Status;                                                   // 0x00C4(0x0001) (DataBinding)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00C5(0x0003) MISSED OFFSET
	int                                                LocalTeamID;                                              // 0x00C8(0x0004) (DataBinding)
	int                                                Round;                                                    // 0x00CC(0x0004) (DataBinding)
	int                                                TotalRounds;                                              // 0x00D0(0x0004) (DataBinding)
	int                                                DependentMatchID;                                         // 0x00D4(0x0004) (DataBinding)
	struct FString                                     NextOpponent;                                             // 0x00D8(0x0010) (NeedCtorLink, DataBinding)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00E8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_TourEvent_TA.EndGameWarningEpochTime
	unsigned char                                      UnknownData03[0x8];                                       // 0x00F0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_TourEvent_TA.EndGameEpochTime
	class UTourSettings_TA*                            ActiveTournament;                                         // 0x00F8(0x0008) (Transient)
	int                                                MatchID;                                                  // 0x0100(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourEvent_TA");
		return ptr;
	}


	void __GFxData_TourEvent_TA__OnShellSet_D2D22C8944BE0135BFD0E092A9CC0714(class UTourCheckInWindowWatcher_TA* W, class UTourSettings_TA* T);
	void __GFxData_TourEvent_TA__OnShellSet_BAE2098B4A783DABACB1BF9CAD721CBD(class UTourList_TA* _);
	void __GFxData_TourEvent_TA__OnShellSet_D25915A14F1346E41DBFFB8F2DCB9755(class UTourSubscriptions_TA* S);
	bool __GFxData_TourEvent_TA__GetNextStartingTournament_20772E8F4D1BC533BF0F76ABF2FC32A4(class UTourSettings_TA* T);
	int __GFxData_TourEvent_TA__GetNextStartingTournament_8D2B67764721F391A10289BAFC2AC594(class UTourSettings_TA* L, class UTourSettings_TA* R);
	class UTourSettings_TA* GetNextStartingTournament(TArray<class UTourSettings_TA*>* ArrayResultLocal_9CD754B84C9E21790760A985417925D4, TArray<class UTourSettings_TA*>* SortLocal_38BF9AED4D839D33516D6F8A00C6AF9D);
	void ReadyForNextMatch();
	void ConditionalStepRound();
	void Deactivate();
	void HandleGameDataSelected(int PlaylistId, int MutatorIndex);
	void HandleGRISpawned(class AGRI_X* GRI);
	void HandleDependentMatchUpdated(class UTourEventMatch_TA* TourEventMatch, struct FTourMatch* Match);
	void HandleBracketRetrieved(struct FTourBracket* Bracket);
	void HandleNextMatchReady(class UTourEventMatch_TA* TourEventMatch, struct FTourMatch* InMatch);
	void HandleStartTimeElapsed(class UTourEvent_TA* InTourEvent);
	void HandleTourDeactivated(class UTourEvent_TA* TourEvent);
	void HandleTourActivated(class UOnlineGameTournaments_TA* InTournaments, class UTourEvent_TA* TourEvent);
	TEnumAsByte<ETourEventStatus> DetermineStatus();
	void QueueUpdate();
	void Update();
	void Clear();
	void OnShellSet();
};


// Class TAGame.__GFxData_TourSearch_TA__FindPrivate_2A4AEC8E46DCDCFBDFDA9F9E71DCA918
// 0x0020 (0x0080 - 0x0060)
class U__GFxData_TourSearch_TA__FindPrivate_2A4AEC8E46DCDCFBDFDA9F9E71DCA918 : public UObject
{
public:
	struct FTourPrivateCredentials                     Credentials;                                              // 0x0060(0x0020) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_TourSearch_TA__FindPrivate_2A4AEC8E46DCDCFBDFDA9F9E71DCA918");
		return ptr;
	}


	void __GFxData_TourSearch_TA__FindPrivate_2A4AEC8E46DCDCFBDFDA9F9E71DCA918(class URPC_TourFindPrivate_TA* RPC);
};


// Class TAGame.GFxData_TourSearch_TA
// 0x0070 (0x0108 - 0x0098)
class UGFxData_TourSearch_TA : public UGFxDataSingleton_X
{
public:
	class UTourConfig_TA*                              Config;                                                   // 0x0098(0x0008)
	struct FString                                     Text;                                                     // 0x00A0(0x0010) (Edit, NeedCtorLink, DataBinding)
	int                                                RankMin;                                                  // 0x00B0(0x0004) (Edit, DataBinding)
	int                                                RankMax;                                                  // 0x00B4(0x0004) (Edit, DataBinding)
	int                                                GameMode;                                                 // 0x00B8(0x0004) (Edit, DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00BC(0x0004) MISSED OFFSET
	TArray<struct FGFxRegion>                          Regions;                                                  // 0x00C0(0x0010) (Edit, NeedCtorLink, DataBinding)
	int                                                TeamSize;                                                 // 0x00D0(0x0004) (Edit, DataBinding)
	int                                                BracketSize;                                              // 0x00D4(0x0004) (Edit, DataBinding)
	unsigned long                                      bShowIneligibleRank : 1;                                  // 0x00D8(0x0004) (Edit, DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	class UGFxTourList_TA*                             GFxTourList;                                              // 0x00E0(0x0008) (Edit, ExportObject, Component, EditInline)
	class UTourList_TA*                                TourList;                                                 // 0x00E8(0x0008) (Edit, ExportObject, Component, EditInline)
	class UProfile_TA*                                 Profile;                                                  // 0x00F0(0x0008) (Transient)
	class UAsyncTask*                                  SearchTask;                                               // 0x00F8(0x0008) (Transient)
	class UTournamentSettingsSave_TA*                  TournamentSave;                                           // 0x0100(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourSearch_TA");
		return ptr;
	}


	void __GFxData_TourSearch_TA__OnShellSet_8A58BABE471B4D0374C968A4179015B9(class UGFxData_Regions_TA* R);
	void __GFxData_TourSearch_TA__Search_E3ED3EB448F96EA7AEA8208BA591D1E6(class URPC_TourGetPublic_TA* RPC);
	int __GFxData_TourSearch_TA__HandleSearchResults_ED8ECB4C45293FAC731320B187B395A2(class UTourSettings_TA* L, class UTourSettings_TA* R);
	void ResetSearch(TArray<class UTourSettings_TA*>* ArrayInitializer_97BD8E0D45F34F5D069C8C84331F44C0);
	void HandlePrivateSearchResults(class UTourSettings_TA* Tournament, const struct FTourPrivateCredentials& Credentials);
	void FindPrivate(const struct FString& Title, const struct FString& Password);
	void SetShowIneligibleRank(bool bValue);
	void SetBracketSize(int InBracketSize);
	void SetTeamSize(int InTeamSize);
	void SetRankMax(int InRankMax);
	void SetRankMin(int InRankMin);
	void SetGameMode(int InGameMode);
	void SetText(const struct FString& InText);
	void SetRegionSelection(int Row, bool bSelected);
	void OnSearchComplete();
	void HandleSearchResults(TArray<class UTourSettings_TA*>* Results, TArray<class UTourSettings_TA*>* SortLocal_7054B46443A4332C411C9EBAD0A20CDC);
	void HandleError(class UError* Error);
	void Search();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.RPC_TourFindPrivate_TA
// 0x0060 (0x0160 - 0x0100)
class URPC_TourFindPrivate_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	struct FTourPrivateCredentials                     Credentials;                                              // 0x0138(0x0020) (NeedCtorLink)
	class UTourSettings_TA*                            Tournament;                                               // 0x0158(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourFindPrivate_TA");
		return ptr;
	}


	class URPC_TourFindPrivate_TA* SetCredentials(struct FTourPrivateCredentials* InCredentials);
	class URPC_TourFindPrivate_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.__GFxData_Wallet_TA__GetCurrencyRow_E499377649099D9B35F8F08BEE9B9474
// 0x0004 (0x0064 - 0x0060)
class U__GFxData_Wallet_TA__GetCurrencyRow_E499377649099D9B35F8F08BEE9B9474 : public UObject
{
public:
	int                                                InCurrencyID;                                             // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__GFxData_Wallet_TA__GetCurrencyRow_E499377649099D9B35F8F08BEE9B9474");
		return ptr;
	}


	bool __GFxData_Wallet_TA__GetCurrencyRow_E499377649099D9B35F8F08BEE9B9474(class UGFxData_WalletCurrency_TA* C);
};


// Class TAGame.GFxData_WalletCurrency_TA
// 0x0034 (0x00C8 - 0x0094)
class UGFxData_WalletCurrency_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	int                                                CurrencyID;                                               // 0x0098(0x0004) (Edit, DataBinding)
	TEnumAsByte<ECurrency>                             Type;                                                     // 0x009C(0x0001) (Edit, DataBinding)
	unsigned char                                      UnknownData01[0x3];                                       // 0x009D(0x0003) MISSED OFFSET
	class UTexture*                                    SmallImage;                                               // 0x00A0(0x0008) (Edit, DataBinding)
	class UTexture*                                    LargeImage;                                               // 0x00A8(0x0008) (Edit, DataBinding)
	int                                                Amount;                                                   // 0x00B0(0x0004) (Edit, DataBinding)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	struct FString                                     LocalizedName;                                            // 0x00B8(0x0010) (Edit, NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_WalletCurrency_TA");
		return ptr;
	}


	void Update(const struct FCurrency& InCurrency);
	void Init(const struct FCurrency& InCurrency);
};


// Class TAGame.GFxData_Wallet_TA
// 0x0018 (0x00B0 - 0x0098)
class UGFxData_Wallet_TA : public UGFxDataSingleton_X
{
public:
	class UWallet_TA*                                  Wallet;                                                   // 0x0098(0x0008) (Edit)
	TArray<class UGFxData_WalletCurrency_TA*>          Currencies;                                               // 0x00A0(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Wallet_TA");
		return ptr;
	}


	void __GFxData_Wallet_TA__HandleWalletUpdated_003F812D4184823DBFF67A86F75FC8DB(const struct FCurrency& C);
	int GetCurrencyIndex(int InCurrencyID);
	void OnWalletUpdated();
	class UGFxData_WalletCurrency_TA* GetCurrencyRow(int InCurrencyID);
	void GetWallet();
	void HandleWalletCurrencyDataUpdated(class UWallet_TA* InWallet, int InCurrencyID);
	void HandleWalletCurrencyUpdated(class UWallet_TA* InWallet, int InCurrencyID);
	void HandleWalletUpdated(class UWallet_TA* InWallet);
	void CreateCurrency(const struct FCurrency& InCurrency);
	void OnWalletSet(class UWallet_TA* InWallet);
	void OnShellSet();
};


// Class TAGame.__LoadoutCollection_TA__FindPair_0B629D604F18FB7FBD965F8ED7D335BE
// 0x0010 (0x0070 - 0x0060)
class U__LoadoutCollection_TA__FindPair_0B629D604F18FB7FBD965F8ED7D335BE : public UObject
{
public:
	struct FString                                     PairName;                                                 // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__LoadoutCollection_TA__FindPair_0B629D604F18FB7FBD965F8ED7D335BE");
		return ptr;
	}


	bool __LoadoutCollection_TA__FindPair_0B629D604F18FB7FBD965F8ED7D335BE(class ULoadoutPair_TA* ComPair);
};


// Class TAGame.LoadoutPair_TA
// 0x0020 (0x0080 - 0x0060)
class ULoadoutPair_TA : public UObject
{
public:
	struct FString                                     PairName;                                                 // 0x0060(0x0010) (NeedCtorLink)
	TArray<class ULoadoutTeam_TA*>                     Loadouts;                                                 // 0x0070(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutPair_TA");
		return ptr;
	}


	class ULoadoutPair_TA* STATIC_CreatePair(const struct FString& InPairName, TArray<class ULoadoutTeam_TA*>* ArrayInitializer_3E2B9AE94FE59630F0C1C8B6E51CF27E);
};


// Class TAGame.LoadoutCollection_TA
// 0x0010 (0x0070 - 0x0060)
class ULoadoutCollection_TA : public UObject
{
public:
	TArray<class ULoadoutPair_TA*>                     Pairs;                                                    // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutCollection_TA");
		return ptr;
	}


	class ULoadoutPair_TA* FindPair(const struct FString& PairName);
	void AddPair(class ULoadoutPair_TA* Pair);
};


// Class TAGame.__LoadoutConverter_TA__SetsToCollection_44E72C1A432CDCD38FA97DBCDC56A798
// 0x0008 (0x0068 - 0x0060)
class U__LoadoutConverter_TA__SetsToCollection_44E72C1A432CDCD38FA97DBCDC56A798 : public UObject
{
public:
	class ULoadoutCollection_TA*                       Collection;                                               // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__LoadoutConverter_TA__SetsToCollection_44E72C1A432CDCD38FA97DBCDC56A798");
		return ptr;
	}


	void __LoadoutConverter_TA__SetsToCollection_44E72C1A432CDCD38FA97DBCDC56A798(class ULoadoutSet_TA* Set);
};


// Class TAGame.LoadoutConverter_TA
// 0x0000 (0x0060 - 0x0060)
class ULoadoutConverter_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutConverter_TA");
		return ptr;
	}


	class ULoadoutSave_TA* STATIC_SetsToSave(class ULoadoutSet_TA* Equipped, TArray<class ULoadoutSet_TA*>* LoadoutSets);
	class ULoadoutEquipper_TA* STATIC_EquippedToEquipper(class ULoadoutSet_TA* Equipped, class ULoadoutCollection_TA* Collection);
	class ULoadoutCollection_TA* STATIC_SetsToCollection(TArray<class ULoadoutSet_TA*>* LoadoutSets);
	class ULoadoutPair_TA* STATIC_SetToPair(class ULoadoutSet_TA* Set);
	class ULoadoutTeam_TA* STATIC_Loadout1ToTeam(class ULoadout_TA** Loadout);
	struct FLoadoutTeam STATIC_LoadoutDataToTeam(const struct U_Types_TA_FLoadoutData& Loadout);
	struct FLoadoutTeamColor STATIC_PaintToColor(struct FLoadoutTeamPaint* Paint, struct FLoadoutTeamColor* StructInitializer_4EDB997C44D3765A06E2FEADCBD11079);
};


// Class TAGame.__Mutator_Robin_TA__Construct_E447B92F4446436FEF844FA53E255513
// 0x0008 (0x0068 - 0x0060)
class U__Mutator_Robin_TA__Construct_E447B92F4446436FEF844FA53E255513 : public UObject
{
public:
	class ACarComponent_TA*                            Override;                                                 // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__Mutator_Robin_TA__Construct_E447B92F4446436FEF844FA53E255513");
		return ptr;
	}


	bool __Mutator_Robin_TA__Construct_E447B92F4446436FEF844FA53E255513(class ACarComponent_TA* Original);
};


// Class TAGame.Mutator_Robin_TA
// 0x0028 (0x0088 - 0x0060)
class UMutator_Robin_TA : public UObject
{
public:
	struct FStickyForceData                            StickyForce;                                              // 0x0060(0x0008) (Edit)
	struct FAutoFlipData                               AutoFlip;                                                 // 0x0068(0x0008) (Edit)
	class UVehicleSim_TA*                              VehicleSim;                                               // 0x0070(0x0008) (Edit, ExportObject, Component, EditInline)
	TArray<class ACarComponent_TA*>                    OverrideCarComponents;                                    // 0x0078(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Robin_TA");
		return ptr;
	}


	void Construct();
};


// Class TAGame.ProductOverride_ParticleSystemColorParameter_TA
// 0x0018 (0x0078 - 0x0060)
class UProductOverride_ParticleSystemColorParameter_TA : public UProductOverride_TA
{
public:
	TArray<struct FPaintColorParameterOverride>        ParameterOverrides;                                       // 0x0060(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bUseParentEmissiveMultiplier : 1;                         // 0x0070(0x0004) (Edit)
	float                                              PaintEmissiveMultiplier;                                  // 0x0074(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_ParticleSystemColorParameter_TA");
		return ptr;
	}


	struct FLinearColor GetPaintToApply(class UProductAttribute_PaintSettings_TA* PaintSetting, struct FPaintColorParameterOverride* CurPaintParam);
	class UProductAttribute_PaintSettings_TA* GetPaintSettings();
	void ApplyToObject(class UObject* Target);
};


// Class TAGame.__ProductOverride_ParticleSystemColorParameter_TA__ApplyToObject_BA0C060848E8CC8F4448959C0B1F71CA
// 0x0018 (0x0078 - 0x0060)
class U__ProductOverride_ParticleSystemColorParameter_TA__ApplyToObject_BA0C060848E8CC8F4448959C0B1F71CA : public UObject
{
public:
	TScriptInterface<class UISetParameter>             ParamTarget;                                              // 0x0060(0x0010)
	class UProductAttribute_PaintSettings_TA*          PaintSetting;                                             // 0x0070(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ProductOverride_ParticleSystemColorParameter_TA__ApplyToObject_BA0C060848E8CC8F4448959C0B1F71CA");
		return ptr;
	}


	void __ProductOverride_ParticleSystemColorParameter_TA__ApplyToObject_BA0C060848E8CC8F4448959C0B1F71CA(const struct FPaintColorParameterOverride& O);
};


// Class TAGame.ShopAdsConfig_TA
// 0x0010 (0x0088 - 0x0078)
class UShopAdsConfig_TA : public UOnlineConfig_X
{
public:
	TArray<struct FShopAdData>                         Ads;                                                      // 0x0078(0x0010) (Edit, NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ShopAdsConfig_TA");
		return ptr;
	}


	void HandleImageLoaded(const struct FString& URL, class UTexture2DDynamic* Texture);
	void Apply();
};


// Class TAGame.__ShopAdsConfig_TA__Apply_7CB722574B13F6F9366E8EB7EDB8F677
// 0x0068 (0x00C8 - 0x0060)
class U__ShopAdsConfig_TA__Apply_7CB722574B13F6F9366E8EB7EDB8F677 : public UObject
{
public:
	struct FShopAdData                                 Data;                                                     // 0x0060(0x0068) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ShopAdsConfig_TA__Apply_7CB722574B13F6F9366E8EB7EDB8F677");
		return ptr;
	}


	void __ShopAdsConfig_TA__Apply_B797C290400E3700FE0BB3863E4362BD(class UTexture2DDynamic* Texture);
	void __ShopAdsConfig_TA__Apply_1ED8608F413882C5D498E69C764FBEE7(class UTexture2DDynamic* Texture);
	void __ShopAdsConfig_TA__Apply_7CB722574B13F6F9366E8EB7EDB8F677(class UTexture2DDynamic* Texture);
};


// Class TAGame.__ShopsService_Local_TA__GetAllShops_47229276488C20BFC240E7A78DC9BD2A
// 0x0028 (0x0088 - 0x0060)
class U__ShopsService_Local_TA__GetAllShops_47229276488C20BFC240E7A78DC9BD2A : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	TArray<struct FShopData>                           Shops;                                                    // 0x0078(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ShopsService_Local_TA__GetAllShops_47229276488C20BFC240E7A78DC9BD2A");
		return ptr;
	}


	void __ShopsService_Local_TA__GetAllShops_47229276488C20BFC240E7A78DC9BD2A();
};


// Class TAGame.ShopsService_Local_TA
// 0x0004 (0x0064 - 0x0060)
class UShopsService_Local_TA : public UShopsService_TA
{
public:
	float                                              ServiceDelay;                                             // 0x0060(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ShopsService_Local_TA");
		return ptr;
	}


	class UAsyncTask* QueueTask(class UError* Error);
	class UAsyncTask* Purchase(const struct FUniqueNetId& PlayerID, int CostID, int ShopID, int DiscountID, int Count, const struct FScriptDelegate& SuccessCallback, const struct FScriptDelegate& FailedCallback);
	class UAsyncTask* GetCrateShop(int CrateID, const struct FScriptDelegate& Callback, const struct FScriptDelegate& FailedCallback, TArray<struct FShopCost>* ArrayInitializer_7DC4FAC344E39703C5DBA6BEDF872757, struct FShopCost* StructInitializer_68A7FFF14E00C10122AC31A1408FC230, TArray<struct FShopPrice>* ArrayInitializer_CBB40F104A09DB90C168928C6771F193, struct FShopPrice* StructInitializer_D9B1B8674AB0788420DE5DA3D6E42C46);
	class UAsyncTask* GetShopCatalogue(int ShopID, const struct FScriptDelegate& Callback, const struct FScriptDelegate& FailedCallback, TArray<struct FShopCost>* ArrayInitializer_6CAF8F024E8279F43504689A6468C27B, struct FShopCost* StructInitializer_B2EF8BEB41BAE688DBD05DB0F55F7285, TArray<struct FShopPrice>* ArrayInitializer_802AA295424384B393250596E54FCE1E, struct FShopPrice* StructInitializer_F598A3C84D9B07065A43AC858A073681, struct FShopDiscount* StructInitializer_9B3CDEA04D9CC81AFE64E1BD9BBD8A0F, TArray<struct FShopPrice>* ArrayInitializer_40432D7E4392A4A6B4EE4CA45F99326E, struct FShopPrice* StructInitializer_467360AF46C28E238760A6B2A52B89FB, TArray<struct FString>* ArrayInitializer_021E97214BEEE2C958AA8F91098C17D9, TArray<struct FString>* ArrayInitializer_7CFED0DC4153A403EC7413AED15A595C);
	class UAsyncTask* GetAllShops(const struct FScriptDelegate& Callback, const struct FScriptDelegate& FailedCallback);
};


// Class TAGame.__ShopsService_Local_TA__GetCrateShop_15E8836348E0A9809ED67599A4A0816D
// 0x0028 (0x0088 - 0x0060)
class U__ShopsService_Local_TA__GetCrateShop_15E8836348E0A9809ED67599A4A0816D : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	TArray<struct FShopItem>                           Items;                                                    // 0x0078(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ShopsService_Local_TA__GetCrateShop_15E8836348E0A9809ED67599A4A0816D");
		return ptr;
	}


	void __ShopsService_Local_TA__GetCrateShop_15E8836348E0A9809ED67599A4A0816D();
};


// Class TAGame.__ShopsService_Local_TA__GetShopCatalogue_7B81889C4BBA2094BA7573806681B7C2
// 0x0028 (0x0088 - 0x0060)
class U__ShopsService_Local_TA__GetShopCatalogue_7B81889C4BBA2094BA7573806681B7C2 : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	TArray<struct FShopItem>                           Items;                                                    // 0x0078(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ShopsService_Local_TA__GetShopCatalogue_7B81889C4BBA2094BA7573806681B7C2");
		return ptr;
	}


	void __ShopsService_Local_TA__GetShopCatalogue_7B81889C4BBA2094BA7573806681B7C2();
};


// Class TAGame.__ShopsService_Local_TA__Purchase_B334C9914A37A348AB457A9DA705B7A8
// 0x0018 (0x0078 - 0x0060)
class U__ShopsService_Local_TA__Purchase_B334C9914A37A348AB457A9DA705B7A8 : public UObject
{
public:
	struct FScriptDelegate                             SuccessCallback;                                          // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ShopsService_Local_TA__Purchase_B334C9914A37A348AB457A9DA705B7A8");
		return ptr;
	}


	void __ShopsService_Local_TA__Purchase_B334C9914A37A348AB457A9DA705B7A8(TArray<struct FOnlineProductData>* ArrayInitializer_AB4ECF80489161ED0628C5B883A20150, TArray<struct FCurrency>* ArrayInitializer_A29C90404CA5FF9CCFEDEBA3EDD56BA9);
};


// Class TAGame.__ShopsService_Local_TA__QueueTask_35099090422C0EC89B8BA8A3BECB9A85
// 0x0010 (0x0070 - 0x0060)
class U__ShopsService_Local_TA__QueueTask_35099090422C0EC89B8BA8A3BECB9A85 : public UObject
{
public:
	class UAsyncTask*                                  Task;                                                     // 0x0060(0x0008)
	class UError*                                      Error;                                                    // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ShopsService_Local_TA__QueueTask_35099090422C0EC89B8BA8A3BECB9A85");
		return ptr;
	}


	void __ShopsService_Local_TA__QueueTask_35099090422C0EC89B8BA8A3BECB9A85();
};


// Class TAGame.__ShopsService_PsyNet_TA__GetAllShops_BAFDE41D4A44A8830BC298A1EF0424D2
// 0x0030 (0x0090 - 0x0060)
class U__ShopsService_PsyNet_TA__GetAllShops_BAFDE41D4A44A8830BC298A1EF0424D2 : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             FailedCallback;                                           // 0x0078(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ShopsService_PsyNet_TA__GetAllShops_BAFDE41D4A44A8830BC298A1EF0424D2");
		return ptr;
	}


	void __ShopsService_PsyNet_TA__GetAllShops_AC8E3D964281987C7559848986B9A4FA(class URPC_X* RPC);
	void __ShopsService_PsyNet_TA__GetAllShops_BAFDE41D4A44A8830BC298A1EF0424D2(class URPC_GetAllShops_TA* RPC);
};


// Class TAGame.RPC_GetAllShops_TA
// 0x0010 (0x0110 - 0x0100)
class URPC_GetAllShops_TA : public URPC_X
{
public:
	TArray<struct FShopData>                           Shops;                                                    // 0x0100(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetAllShops_TA");
		return ptr;
	}

};


// Class TAGame.ShopsService_PsyNet_TA
// 0x0000 (0x0060 - 0x0060)
class UShopsService_PsyNet_TA : public UShopsService_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ShopsService_PsyNet_TA");
		return ptr;
	}


	class UAsyncTask* Purchase(const struct FUniqueNetId& PlayerID, int CostID, int ShopID, int DiscountID, int Count, const struct FScriptDelegate& SuccessCallback, const struct FScriptDelegate& FailedCallback);
	class UAsyncTask* GetCrateShop(int CrateID, const struct FScriptDelegate& Callback, const struct FScriptDelegate& FailedCallback);
	class UAsyncTask* GetShopCatalogue(int ShopID, const struct FScriptDelegate& Callback, const struct FScriptDelegate& FailedCallback);
	class UAsyncTask* GetAllShops(const struct FScriptDelegate& Callback, const struct FScriptDelegate& FailedCallback);
};


// Class TAGame.__ShopsService_PsyNet_TA__GetCrateShop_155EC1024BE181EE03D9E28F9B7E103C
// 0x0030 (0x0090 - 0x0060)
class U__ShopsService_PsyNet_TA__GetCrateShop_155EC1024BE181EE03D9E28F9B7E103C : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             FailedCallback;                                           // 0x0078(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ShopsService_PsyNet_TA__GetCrateShop_155EC1024BE181EE03D9E28F9B7E103C");
		return ptr;
	}


	void __ShopsService_PsyNet_TA__GetCrateShop_4D214EB84DB3CF7AFC74D3A729735AA4(class URPC_X* RPC);
	void __ShopsService_PsyNet_TA__GetCrateShop_155EC1024BE181EE03D9E28F9B7E103C(class URPC_GetCrateShop_TA* RPC);
};


// Class TAGame.RPC_GetCrateShop_TA
// 0x001C (0x011C - 0x0100)
class URPC_GetCrateShop_TA : public URPC_X
{
public:
	int                                                CrateID;                                                  // 0x0100(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	TArray<struct FShopItem>                           ShopItems;                                                // 0x0108(0x0010) (Transient, NeedCtorLink)
	int                                                ShopID;                                                   // 0x0118(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetCrateShop_TA");
		return ptr;
	}


	class URPC_GetCrateShop_TA* SetShopID(int InCrateID);
};


// Class TAGame.__ShopsService_PsyNet_TA__GetShopCatalogue_1BB8B70148B0417F6CFD05B5EF256D5E
// 0x0030 (0x0090 - 0x0060)
class U__ShopsService_PsyNet_TA__GetShopCatalogue_1BB8B70148B0417F6CFD05B5EF256D5E : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             FailedCallback;                                           // 0x0078(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ShopsService_PsyNet_TA__GetShopCatalogue_1BB8B70148B0417F6CFD05B5EF256D5E");
		return ptr;
	}


	void __ShopsService_PsyNet_TA__GetShopCatalogue_1F7DC7AA4686DBD89E220DAFE242A6B3(class URPC_X* RPC);
	void __ShopsService_PsyNet_TA__GetShopCatalogue_1BB8B70148B0417F6CFD05B5EF256D5E(class URPC_GetShopCatalogue_TA* RPC);
};


// Class TAGame.RPC_GetShopCatalogue_TA
// 0x0018 (0x0118 - 0x0100)
class URPC_GetShopCatalogue_TA : public URPC_X
{
public:
	int                                                ShopID;                                                   // 0x0100(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	TArray<struct FShopItem>                           ShopItems;                                                // 0x0108(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetShopCatalogue_TA");
		return ptr;
	}


	class URPC_GetShopCatalogue_TA* SetShopID(int InShopID);
};


// Class TAGame.__ShopsService_PsyNet_TA__Purchase_971E880E4BD2255DA97F9AA96EE7614A
// 0x0030 (0x0090 - 0x0060)
class U__ShopsService_PsyNet_TA__Purchase_971E880E4BD2255DA97F9AA96EE7614A : public UObject
{
public:
	struct FScriptDelegate                             SuccessCallback;                                          // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             FailedCallback;                                           // 0x0078(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0078(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__ShopsService_PsyNet_TA__Purchase_971E880E4BD2255DA97F9AA96EE7614A");
		return ptr;
	}


	void __ShopsService_PsyNet_TA__Purchase_6EAE9F7E4F24077D17BB9C836F9090E1(class URPC_X* RPC);
	void __ShopsService_PsyNet_TA__Purchase_971E880E4BD2255DA97F9AA96EE7614A(class URPC_PurchaseItemFromShop_TA* RPC);
};


// Class TAGame.RPC_PurchaseItemFromShop_TA
// 0x0070 (0x0170 - 0x0100)
class URPC_PurchaseItemFromShop_TA : public URPC_X
{
public:
	int                                                ShopItemCostID;                                           // 0x0100(0x0004)
	int                                                ShopID;                                                   // 0x0104(0x0004)
	int                                                ShopDiscountID;                                           // 0x0108(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	struct FUniqueNetId                                PlayerID;                                                 // 0x0110(0x0038)
	int                                                Count;                                                    // 0x0148(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x014C(0x0004) MISSED OFFSET
	TArray<struct FOnlineProductData>                  ProductData;                                              // 0x0150(0x0010) (Transient, NeedCtorLink)
	TArray<struct FCurrency>                           CurrencyData;                                             // 0x0160(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_PurchaseItemFromShop_TA");
		return ptr;
	}


	class URPC_PurchaseItemFromShop_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_PurchaseItemFromShop_TA* SetCount(int InCount);
	class URPC_PurchaseItemFromShop_TA* SetShopID(int InShopID);
	class URPC_PurchaseItemFromShop_TA* SetCostID(int InCostID, int InDiscountID);
};


// Class TAGame.__TourBracketSimulator_TA__RoundStep_CA6D18A24CC5FC6BAE6F1DA2DE9B26A6
// 0x0004 (0x0064 - 0x0060)
class U__TourBracketSimulator_TA__RoundStep_CA6D18A24CC5FC6BAE6F1DA2DE9B26A6 : public UObject
{
public:
	int                                                BracketRound;                                             // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourBracketSimulator_TA__RoundStep_CA6D18A24CC5FC6BAE6F1DA2DE9B26A6");
		return ptr;
	}


	bool __TourBracketSimulator_TA__RoundStep_CA6D18A24CC5FC6BAE6F1DA2DE9B26A6(const struct FTourMatch& M);
};


// Class TAGame.TourBracketSimulator_TA
// 0x0000 (0x0060 - 0x0060)
class UTourBracketSimulator_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourBracketSimulator_TA");
		return ptr;
	}


	int STATIC___TourBracketSimulator_TA__GetEarliestUnifinishedRound_82D2734647134944ABA340A04BE8E82E(const struct FTourMatch& M);
	bool STATIC___TourBracketSimulator_TA__GetEarliestUnifinishedRound_AB74B4A344E96EF4057DA988FDC087AC(const struct FTourMatch& M);
	int STATIC___TourBracketSimulator_TA__RoundStep_08F609C04080A33166A977AEA0BF4498(const struct FTourMatch& M);
	void STATIC_GameSet(int MatchID, int GameIndex, int Team0Score, int Team1Score, int GameTimeSeconds, bool bOverTime, int WinningTeamIdx, struct FTourBracket* Bracket);
	void STATIC_GameStep(int MatchID, int GameIndex, int WinningTeamIdx, struct FTourBracket* Bracket);
	void STATIC_AdvanceWinner(int FromMatchID, int WinningTeamIdx, struct FTourBracket* Bracket);
	int STATIC_PickWinner(int Team0Chance, int Team1Chance);
	void STATIC_InternalStepMatchGames(int MatchID, int Team0Games, int Team1Games, struct FTourBracket* Bracket);
	void STATIC_MatchStep(int MatchID, int Team0Games, int Team1Games, struct FTourBracket* Bracket);
	void STATIC_GetRandScore(int MaxScore, int* Score0, int* Score1);
	void STATIC_RoundStep(int SeriesLength, struct FTourBracket* Bracket, TArray<struct FTourMatch>* FilterLocal_322CD9754401EA5A0DE4FE8BA940E6B5, TArray<int>* MapLocal_F00636DD419E32D9D5CD4F96FBC2DD9B);
	int STATIC_GetEarliestUnifinishedRound(TArray<struct FTourMatch>* Matches, TArray<struct FTourMatch>* FilterLocal_04EDB01B4DDC593258F8BC84C2FD1575, TArray<int>* MapLocal_99388A2D4CDDC69B158C888AE30D895C, int* ReduceLocal_2216CE494331107EA2CF75801B6D1F6E);
	int STATIC_MaxWorkaround(int A, int B);
};


// Class TAGame.__TourService_PsyNet_TA__CheckIn_C1FE85C745762F85C5A926B444E3A0F1
// 0x0048 (0x00A8 - 0x0060)
class U__TourService_PsyNet_TA__CheckIn_C1FE85C745762F85C5A926B444E3A0F1 : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FCustomMatchTeamSettings                    Settings;                                                 // 0x0078(0x0020) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        Team;                                                     // 0x0098(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourService_PsyNet_TA__CheckIn_C1FE85C745762F85C5A926B444E3A0F1");
		return ptr;
	}


	void __TourService_PsyNet_TA__CheckIn_C1FE85C745762F85C5A926B444E3A0F1(class URPC_TourCheckIn_TA* RPC);
};


// Class TAGame.RPC_TourCheckIn_TA
// 0x0074 (0x0174 - 0x0100)
class URPC_TourCheckIn_TA : public URPC_X
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_TourCheckIn_TA.TournamentID
	struct FUniqueNetId                                PlayerID;                                                 // 0x0108(0x0038)
	struct FCustomMatchTeamSettings                    Settings;                                                 // 0x0140(0x0020) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        TeamMembers;                                              // 0x0160(0x0010) (NeedCtorLink)
	int                                                TeamID;                                                   // 0x0170(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourCheckIn_TA");
		return ptr;
	}


	class URPC_TourCheckIn_TA* SetTeamID(int InTeamID);
	class URPC_TourCheckIn_TA* SetTeamMembers(TArray<struct FUniqueNetId> InTeamMembers);
	class URPC_TourCheckIn_TA* SetTeamSettings(struct FCustomMatchTeamSettings* InSettings);
	class URPC_TourCheckIn_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_TourCheckIn_TA* SetTournamentID();
};


// Class TAGame.TourService_PsyNet_TA
// 0x0000 (0x00F0 - 0x00F0)
class UTourService_PsyNet_TA : public UTourService_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourService_PsyNet_TA");
		return ptr;
	}


	struct FTourPlayer __TourService_PsyNet_TA__BuildTeam_76389F134F230713DC80C6BD5F462AC8(const struct FUniqueNetId& Id, struct FTourPlayer* StructInitializer_A3BF619E456652BD950AE28239D7FF2B);
	class UAsyncTask* StartMatchmaking(const struct FUniqueNetId& PlayerID, const struct FScriptDelegate& Callback);
	class UAsyncTask* GetMatch(const struct FUniqueNetId& PlayerID, const struct FScriptDelegate& Callback);
	class UAsyncTask* GetBracket(const struct FUniqueNetId& PlayerID, const struct FScriptDelegate& Callback);
	struct FTourTeam BuildTeam(int TeamID, const struct FCustomMatchTeamSettings& Settings, TArray<struct FUniqueNetId> Players, TArray<struct FTourPlayer>* MapLocal_BA9FC6AE49BEA0948CAA6DB8EF140769);
	class UAsyncTask* CheckIn(const struct FUniqueNetId& PlayerID, const struct FCustomMatchTeamSettings& Settings, TArray<struct FUniqueNetId> Team, int TeamID, const struct FScriptDelegate& Callback);
	class UAsyncTask* RegisterTournament(const struct FUniqueNetId& PlayerID, const struct FTourPrivateCredentials& Credentials, const struct FScriptDelegate& Callback);
	class UAsyncTask* CreateTournament(const struct FUniqueNetId& PlayerID, const struct FTourCreateSettings& Settings, const struct FScriptDelegate& Callback);
};


// Class TAGame.__TourService_PsyNet_TA__CreateTournament_2D8EE47C4A7AE30C3C61EAAC654BEED9
// 0x0018 (0x0078 - 0x0060)
class U__TourService_PsyNet_TA__CreateTournament_2D8EE47C4A7AE30C3C61EAAC654BEED9 : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourService_PsyNet_TA__CreateTournament_2D8EE47C4A7AE30C3C61EAAC654BEED9");
		return ptr;
	}


	void __TourService_PsyNet_TA__CreateTournament_2D8EE47C4A7AE30C3C61EAAC654BEED9(class URPC_TourCreate_TA* RPC);
};


// Class TAGame.RPC_TourCreate_TA
// 0x0078 (0x0178 - 0x0100)
class URPC_TourCreate_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	struct FTourCreateSettings                         Settings;                                                 // 0x0138(0x0038) (NeedCtorLink)
	class UTourSettings_TA*                            Tournament;                                               // 0x0170(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourCreate_TA");
		return ptr;
	}


	class URPC_TourCreate_TA* SetSettings(struct FTourCreateSettings* InSettings);
	class URPC_TourCreate_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.__TourService_PsyNet_TA__GetBracket_1F70CE46420A65EE9236A58620B31001
// 0x0018 (0x0078 - 0x0060)
class U__TourService_PsyNet_TA__GetBracket_1F70CE46420A65EE9236A58620B31001 : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourService_PsyNet_TA__GetBracket_1F70CE46420A65EE9236A58620B31001");
		return ptr;
	}


	void __TourService_PsyNet_TA__GetBracket_1F70CE46420A65EE9236A58620B31001(class URPC_TourGetBracket_TA* RPC);
};


// Class TAGame.RPC_TourGetBracket_TA
// 0x0068 (0x0168 - 0x0100)
class URPC_TourGetBracket_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_TourGetBracket_TA.TournamentID
	struct FTourBracket                                Bracket;                                                  // 0x0140(0x0028) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourGetBracket_TA");
		return ptr;
	}


	class URPC_TourGetBracket_TA* SetTournamentID();
	class URPC_TourGetBracket_TA* SetPlayerID(struct FUniqueNetId* InPlayerId);
};


// Class TAGame.__TourService_PsyNet_TA__GetMatch_5BA7AE514F4AA39287192CB8F2242B6D
// 0x0018 (0x0078 - 0x0060)
class U__TourService_PsyNet_TA__GetMatch_5BA7AE514F4AA39287192CB8F2242B6D : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourService_PsyNet_TA__GetMatch_5BA7AE514F4AA39287192CB8F2242B6D");
		return ptr;
	}


	void __TourService_PsyNet_TA__GetMatch_5BA7AE514F4AA39287192CB8F2242B6D(class URPC_TourGetMatch_TA* RPC);
};


// Class TAGame.RPC_TourGetMatch_TA
// 0x0060 (0x0160 - 0x0100)
class URPC_TourGetMatch_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_TourGetMatch_TA.TournamentID
	struct FTourMatch                                  Match;                                                    // 0x0140(0x0020) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourGetMatch_TA");
		return ptr;
	}


	class URPC_TourGetMatch_TA* SetTournamentID();
	class URPC_TourGetMatch_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.__TourService_PsyNet_TA__RegisterTournament_EABB08384508370D746ABBA4984B04DC
// 0x0018 (0x0078 - 0x0060)
class U__TourService_PsyNet_TA__RegisterTournament_EABB08384508370D746ABBA4984B04DC : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourService_PsyNet_TA__RegisterTournament_EABB08384508370D746ABBA4984B04DC");
		return ptr;
	}


	void __TourService_PsyNet_TA__RegisterTournament_EABB08384508370D746ABBA4984B04DC(class URPC_TourRegister_TA* RPC);
};


// Class TAGame.RPC_TourRegister_TA
// 0x0068 (0x0168 - 0x0100)
class URPC_TourRegister_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_TourRegister_TA.TournamentID
	struct FTourPrivateCredentials                     Credentials;                                              // 0x0140(0x0020) (NeedCtorLink)
	class UTourSettings_TA*                            Tournament;                                               // 0x0160(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourRegister_TA");
		return ptr;
	}


	class URPC_TourRegister_TA* SetCredentials(struct FTourPrivateCredentials* InCredentials);
	class URPC_TourRegister_TA* SetTournamentID();
	class URPC_TourRegister_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.__TourService_PsyNet_TA__StartMatchmaking_3D173AAA4716228A22658ABD6D4A742A
// 0x0018 (0x0078 - 0x0060)
class U__TourService_PsyNet_TA__StartMatchmaking_3D173AAA4716228A22658ABD6D4A742A : public UObject
{
public:
	struct FScriptDelegate                             Callback;                                                 // 0x0060(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0060(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.__TourService_PsyNet_TA__StartMatchmaking_3D173AAA4716228A22658ABD6D4A742A");
		return ptr;
	}


	void __TourService_PsyNet_TA__StartMatchmaking_3D173AAA4716228A22658ABD6D4A742A(class URPC_X* RPC);
};


// Class TAGame._UserBugReportTypes_TA
// 0x0000 (0x0060 - 0x0060)
class U_UserBugReportTypes_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame._UserBugReportTypes_TA");
		return ptr;
	}

};


// Class TAGame.Achievement_TA
// 0x0008 (0x0068 - 0x0060)
class UAchievement_TA : public UObject
{
public:
	TEnumAsByte<EAchievementType>                      Type;                                                     // 0x0060(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0061(0x0003) MISSED OFFSET
	int                                                LocalID;                                                  // 0x0064(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Achievement_TA");
		return ptr;
	}


	bool STATIC_ShouldRegister();
};


// Class TAGame.Achievement_AG_FarFarAway_TA
// 0x0000 (0x0068 - 0x0068)
class UAchievement_AG_FarFarAway_TA : public UAchievement_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Achievement_AG_FarFarAway_TA");
		return ptr;
	}


	bool STATIC_UpdateDistanceDriven(class UAchievementManager_TA* Manager, class UUpdateDistanceDrivenTimer_TA* Timer);
	void STATIC_Update_FarFarAway(class UUpdateDistanceDrivenTimer_TA* Timer, class UAchievementManager_TA* Manager, class UAchievementSave_TA* SaveData);
	void STATIC_HandleCarRemoved(class UAchievementManager_TA* Manager, class ACar_TA* Car);
	void STATIC_HandleCarAdded(class UAchievementManager_TA* Manager, class ACar_TA* Car, class UAchievementSave_TA* SaveData, struct FTimerOptions* StructInitializer_4FA8ED4C49FEE107861E6FA1A708B5C8);
	void STATIC_CheckUnlock(class UUpdateDistanceDrivenTimer_TA* Timer, class UAchievementManager_TA* Manager, class UAchievement_AG_FarFarAway_TA* Achievement);
	bool STATIC_IsAchieved(class UAchievementManager_TA* Manager);
	bool STATIC_ShouldRegister();
};


// Class TAGame.UpdateDistanceDrivenTimer_TA
// 0x0004 (0x0064 - 0x0060)
class UUpdateDistanceDrivenTimer_TA : public UObject
{
public:
	int                                                KMDriven;                                                 // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.UpdateDistanceDrivenTimer_TA");
		return ptr;
	}

};


// Class TAGame.AchievementSystem_TA
// 0x0000 (0x0060 - 0x0060)
class UAchievementSystem_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AchievementSystem_TA");
		return ptr;
	}


	void STATIC_CheckWonMatch(class UMatchWinner_TA* Winner, class UAchievementManager_TA* Manager, class APlayerReplicationInfo* PRI);
	void STATIC_UpdateStat(class UAchievementManager_TA* Manager, const struct FName& StatName, int Count);
	void STATIC_UpdateProgress(class UAchievementManager_TA* Manager, class UAchievement_TA* Achievement);
	void STATIC_UnlockAchievement(class UAchievementManager_TA* Manager, class UAchievement_TA* Achievement);
	bool STATIC_ConditionalUnlock(class UAchievementManager_TA* Manager, class UAchievement_TA* Achievement, bool bAchieved);
	void STATIC_InitManager(class UAchievementClassCollection_TA* Collection, class UAchievementManager_TA* Manager);
	void STATIC_InitSystem(class UEngine* Engine);
};


// Class TAGame.Achievement_AG_Stocked_TA
// 0x0000 (0x0068 - 0x0068)
class UAchievement_AG_Stocked_TA : public UAchievement_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Achievement_AG_Stocked_TA");
		return ptr;
	}


	void STATIC_CheckUnlock(class UAchievementManager_TA* Manager, class UAchievement_AG_Stocked_TA* Achievement, class URandomItemsDroppedEvent_TA* DropEvent);
	int STATIC_RequiredDrops();
	bool STATIC_IsAchieved(class UAchievementManager_TA* Manager);
};


// Class TAGame.Achievement_AG_SuperVictorious_TA
// 0x0000 (0x0068 - 0x0068)
class UAchievement_AG_SuperVictorious_TA : public UAchievement_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Achievement_AG_SuperVictorious_TA");
		return ptr;
	}


	void STATIC_CheckUnlock(class UAchievementManager_TA* Manager, class UAchievement_AG_SuperVictorious_TA* Achievement, class UAchievementsGameEventWon_TA* Event);
	bool STATIC_IsAchieved(class UAchievementManager_TA* Manager);
};


// Class TAGame.AchievementsGameEventWon_TA
// 0x0000 (0x0060 - 0x0060)
class UAchievementsGameEventWon_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AchievementsGameEventWon_TA");
		return ptr;
	}

};


// Class TAGame.Achievement_AG_TheStreak_TA
// 0x0000 (0x0068 - 0x0068)
class UAchievement_AG_TheStreak_TA : public UAchievement_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Achievement_AG_TheStreak_TA");
		return ptr;
	}


	void STATIC_GameLost(class UAchievementManager_TA* Manager, class UAchievement_AG_TheStreak_TA* Achievement, class UAchievementsGameEventLost_TA* Event);
	void STATIC_GameWon(class UAchievementManager_TA* Manager, class UAchievement_AG_TheStreak_TA* Achievement, class UAchievementsGameEventWon_TA* Event);
	bool STATIC_IsAchieved(class UAchievementManager_TA* Manager);
};


// Class TAGame.AchievementsGameEventLost_TA
// 0x0000 (0x0060 - 0x0060)
class UAchievementsGameEventLost_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AchievementsGameEventLost_TA");
		return ptr;
	}

};


// Class TAGame.Achievement_AG_Virtuoso_TA
// 0x0000 (0x0068 - 0x0068)
class UAchievement_AG_Virtuoso_TA : public UAchievement_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Achievement_AG_Virtuoso_TA");
		return ptr;
	}


	void STATIC_CheckUnlock(class UAchievementManager_TA* Manager, class UAchievement_AG_Virtuoso_TA* Achievement, class UAchievementUnlockedEvent_TA* UnlockEvent);
	bool STATIC_IsAchieved(class UAchievementManager_TA* Manager);
	bool STATIC_ShouldRegister();
};


// Class TAGame.Achievement_AG_Winner_TA
// 0x0000 (0x0068 - 0x0068)
class UAchievement_AG_Winner_TA : public UAchievement_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Achievement_AG_Winner_TA");
		return ptr;
	}


	void STATIC_CheckUnlock(class UAchievementManager_TA* Manager, class UAchievement_AG_Winner_TA* Achievement, class UAchievementsGameEventWon_TA* Event);
	bool STATIC_IsAchieved(class UAchievementManager_TA* Manager);
};


// Class TAGame.AchievementClassCollection_TA
// 0x0010 (0x0070 - 0x0060)
class UAchievementClassCollection_TA : public UObject
{
public:
	TArray<class UClass*>                              Classes;                                                  // 0x0060(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AchievementClassCollection_TA");
		return ptr;
	}

};


// Class TAGame.ActiveGameState_TA
// 0x0000 (0x0060 - 0x0060)
class UActiveGameState_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ActiveGameState_TA");
		return ptr;
	}

};


// Class TAGame.AIController_Breakout_TA
// 0x0010 (0x07B8 - 0x07A8)
class AAIController_Breakout_TA : public AAIController_Soccar_TA
{
public:
	struct FVector                                     ClosestEnemyGoalLocation;                                 // 0x07A8(0x000C)
	int                                                DefaultSoccarSize;                                        // 0x07B4(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AIController_Breakout_TA");
		return ptr;
	}


	void GetGoalProxy(class UBTProxyType* Type, const struct FAICachedGoalInfo& GoalInfo, struct FAIProxyData* OutData);
	void GetBallProxy(struct FAIProxyData* OutData);
	void Init(class AGameEvent_TA* InGameEvent);
};


// Class TAGame.AimControl_TA
// 0x0274 (0x02D4 - 0x0060)
class UAimControl_TA : public UObject
{
public:
	int                                                LevelCap;                                                 // 0x0060(0x0004)
	struct FAimAssistSettings                          GroundBoost;                                              // 0x0064(0x0034)
	struct FAimAssistSettings                          BoostSteer;                                               // 0x0098(0x0034)
	struct FAimAssistSettings                          Throttle;                                                 // 0x00CC(0x0034)
	struct FAimAssistSettings                          Steer;                                                    // 0x0100(0x0034)
	struct FAimAssistSettings                          Jump;                                                     // 0x0134(0x0034)
	struct FAimAssistSettings                          Dodge;                                                    // 0x0168(0x0034)
	struct FAimAssistSettings                          AirTilt;                                                  // 0x019C(0x0034)
	struct FAimAssistSettings                          Handbrake;                                                // 0x01D0(0x0034)
	struct FAimAssistSettings                          Aerial;                                                   // 0x0204(0x0034)
	struct FAimAssistSettings                          AerialJump;                                               // 0x0238(0x0034)
	struct FAimAssistSettings                          AerialBoost;                                              // 0x026C(0x0034)
	struct FAimAssistSettings                          FlipOver;                                                 // 0x02A0(0x0034)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AimControl_TA");
		return ptr;
	}

};


// Class TAGame.AnimNotify_PlayAKSound_TA
// 0x000C (0x0074 - 0x0068)
class UAnimNotify_PlayAKSound_TA : public UAnimNotify_Scripted
{
public:
	class UAkSoundCue*                                 SFX_SoundCue;                                             // 0x0068(0x0008) (Edit)
	unsigned long                                      bPlayInReverse : 1;                                       // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AnimNotify_PlayAKSound_TA");
		return ptr;
	}


	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class TAGame.AnimNotify_TriggerTurntableEvent_TA
// 0x000C (0x0074 - 0x0068)
class UAnimNotify_TriggerTurntableEvent_TA : public UAnimNotify_Scripted
{
public:
	struct FName                                       TurntableEventName;                                       // 0x0068(0x0008) (Edit)
	unsigned long                                      bPlayInReverse : 1;                                       // 0x0070(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AnimNotify_TriggerTurntableEvent_TA");
		return ptr;
	}


	void Notify(class AActor* Owner, class UAnimNodeSequence* AnimSeqInstigator);
};


// Class TAGame.ApplyVelocityHitHandler_TA
// 0x000C (0x015C - 0x0150)
class UApplyVelocityHitHandler_TA : public UExplosionHitHandler_TA
{
public:
	struct FVector                                     VelocityToApply;                                          // 0x0150(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ApplyVelocityHitHandler_TA");
		return ptr;
	}


	void ApplyImpulse(class ACar_TA* CarHit, const struct FVector& HitLocation, float DamageScale, struct FContactInformation* ContactInfo);
};


// Class TAGame.AutoTourConfig_TA
// 0x000C (0x0084 - 0x0078)
class UAutoTourConfig_TA : public UOnlineConfig_X
{
public:
	int                                                MaxTournamentsPerWeek;                                    // 0x0078(0x0004)
	int                                                TourResultsTimeoutSeconds;                                // 0x007C(0x0004)
	int                                                CurrencyID;                                               // 0x0080(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AutoTourConfig_TA");
		return ptr;
	}

};


// Class TAGame.BlueprintErrors_TA
// 0x0010 (0x0090 - 0x0080)
class UBlueprintErrors_TA : public UErrorList
{
public:
	class UErrorType*                                  BlueprintNotEnoughCurrency;                               // 0x0080(0x0008) (Const)
	class UErrorType*                                  BlueprintPriceMismatch;                                   // 0x0088(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BlueprintErrors_TA");
		return ptr;
	}

};


// Class TAGame.BreakoutFloor_TA
// 0x0000 (0x0288 - 0x0288)
class ABreakoutFloor_TA : public AStaticMeshActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BreakoutFloor_TA");
		return ptr;
	}

};


// Class TAGame.BTC_GameInfoType
// 0x001C (0x00A8 - 0x008C)
class UBTC_GameInfoType : public UBTCondition
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	TArray<class UClass*>                              ValidGameInfoClasses;                                     // 0x0090(0x0010) (Edit, NeedCtorLink)
	class AGameInfo_TA*                                CurrentGameInfo;                                          // 0x00A0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_GameInfoType");
		return ptr;
	}


	bool GetResult();
	void OnInit();
};


// Class TAGame.Camera_Edit_TA
// 0x0010 (0x07B0 - 0x07A0)
class ACamera_Edit_TA : public ACamera_TA
{
public:
	struct FName                                       CameraMode;                                               // 0x07A0(0x0008)
	class UCameraState_Edit_TA*                        CurrentCameraState;                                       // 0x07A8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Camera_Edit_TA");
		return ptr;
	}


	void UpdateCameraState();
	void UpdateCamera(float DeltaTime);
	void InstanceCameraStates();
};


// Class TAGame.CameraState_Edit_TA
// 0x0004 (0x009C - 0x0098)
class UCameraState_Edit_TA : public UCameraState_TA
{
public:
	unsigned long                                      bLocalMovement : 1;                                       // 0x0098(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Edit_TA");
		return ptr;
	}


	void UpdateFlyPOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
	class UCameraState_X* GetProxyCameraState();
	bool AllowSwivel();
};


// Class TAGame.Camera_GameEditor_TA
// 0x0010 (0x07B0 - 0x07A0)
class ACamera_GameEditor_TA : public ACamera_TA
{
public:
	struct FName                                       CameraMode;                                               // 0x07A0(0x0008)
	class UCameraState_GameEditor_TA*                  CurrentCameraState;                                       // 0x07A8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Camera_GameEditor_TA");
		return ptr;
	}


	void UpdateCameraState();
	void UpdateCamera(float DeltaTime);
	void InstanceCameraStates();
};


// Class TAGame.CameraState_GameEditor_TA
// 0x0000 (0x0098 - 0x0098)
class UCameraState_GameEditor_TA : public UCameraState_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_GameEditor_TA");
		return ptr;
	}


	void UpdateFlyPOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
	class UCameraState_X* GetProxyCameraState();
	bool AllowSwivel();
};


// Class TAGame.CameraState_BallCamInverted_TA
// 0x0018 (0x0258 - 0x0240)
class UCameraState_BallCamInverted_TA : public UCameraState_BallCam_TA
{
public:
	struct FViewTargetTransitionParams                 StartBlendParams;                                         // 0x0240(0x0010)
	unsigned long                                      bAllowBlendTimeOverride : 1;                              // 0x0250(0x0004) (Transient)
	float                                              DelayFromSpawn;                                           // 0x0254(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_BallCamInverted_TA");
		return ptr;
	}


	void UpdateFocusWorldOffset(float DeltaTime);
	struct FViewTargetTransitionParams GetStartBlendParams(class UCameraState_X* PreviousState);
	void OverrideBlendParams(struct FViewTargetTransitionParams* Params);
	void UpdateValidPOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	bool ShouldExecute();
	void EndCameraState();
	void BeginCameraState();
};


// Class TAGame.CameraState_CarInverted_TA
// 0x0018 (0x01D8 - 0x01C0)
class UCameraState_CarInverted_TA : public UCameraState_Car_TA
{
public:
	struct FViewTargetTransitionParams                 StartBlendParams;                                         // 0x01C0(0x0010)
	unsigned long                                      bAllowBlendTimeOverride : 1;                              // 0x01D0(0x0004) (Transient)
	float                                              DelayFromSpawn;                                           // 0x01D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_CarInverted_TA");
		return ptr;
	}


	void UpdateGroundPOV(float DeltaTime, struct FCameraOrientation* OutPOV, struct FRotator* OutRotatorNoBlend);
	void UpdateFocusWorldOffset(float DeltaTime);
	void UpdateViewOffset();
	struct FViewTargetTransitionParams GetStartBlendParams(class UCameraState_X* PreviousState);
	void OverrideBlendParams(struct FViewTargetTransitionParams* Params);
	bool ShouldExecute();
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
};


// Class TAGame.CameraState_BasketballLiveReplay_TA
// 0x0004 (0x0130 - 0x012C)
class UCameraState_BasketballLiveReplay_TA : public UCameraState_LiveReplay_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x012C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_BasketballLiveReplay_TA");
		return ptr;
	}


	struct FVector GetCameraBaseLocation(const struct FVector& CameraFocus);
};


// Class TAGame.CameraState_BreakoutLiveReplay_TA
// 0x0008 (0x0134 - 0x012C)
class UCameraState_BreakoutLiveReplay_TA : public UCameraState_LiveReplay_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
	float                                              GoalVerticalOffset;                                       // 0x0130(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_BreakoutLiveReplay_TA");
		return ptr;
	}


	struct FVector GetCameraBaseLocation(const struct FVector& CameraFocus);
};


// Class TAGame.CameraState_CameraTrack_TA
// 0x0034 (0x00F8 - 0x00C4)
class UCameraState_CameraTrack_TA : public UCameraState_Replay_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	class UReplay_TA*                                  Replay;                                                   // 0x00C8(0x0008)
	TEnumAsByte<ECameraTrackFlyType>                   FlyType;                                                  // 0x00D0(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	unsigned long                                      bFlying : 1;                                              // 0x00D4(0x0004)
	float                                              LastReplayTime;                                           // 0x00D8(0x0004)
	struct FRotator                                    AccumulatedLook;                                          // 0x00DC(0x000C)
	struct FVector                                     AccumulatedMove;                                          // 0x00E8(0x000C)
	float                                              LastFOV;                                                  // 0x00F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_CameraTrack_TA");
		return ptr;
	}


	void SetFlying(bool bFly);
	bool AllowFlyingWhenPaused();
	bool AllowFlyingWhenMoving();
	bool AllowFlying();
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
};


// Class TAGame.CameraState_Countdown_TA
// 0x0038 (0x01C8 - 0x0190)
class UCameraState_Countdown_TA : public UCameraState_DirectorProxy_TA
{
public:
	int                                                MaxCarsShown;                                             // 0x0190(0x0004) (Edit)
	float                                              TimePerCar;                                               // 0x0194(0x0004) (Edit)
	unsigned long                                      bSwitchTeamsEveryCar : 1;                                 // 0x0198(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x019C(0x0004) MISSED OFFSET
	TArray<class ACar_TA*>                             ShownCars;                                                // 0x01A0(0x0010) (Transient, NeedCtorLink)
	class ACar_TA*                                     CurrentCar;                                               // 0x01B0(0x0008) (Transient)
	class ACar_TA*                                     NextCar;                                                  // 0x01B8(0x0008) (Transient)
	int                                                LastTeam;                                                 // 0x01C0(0x0004) (Transient)
	float                                              LastChangeCarTime;                                        // 0x01C4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Countdown_TA");
		return ptr;
	}


	bool __CameraState_Countdown_TA__FindNextCar_A413E67D4A8196799EF2D49AE1D329E0(const struct FCarData& D);
	bool __CameraState_Countdown_TA__FindNextCar_278940274E01B932C8B991A3FF4E0208(class ACar_TA* C);
	void UpdateTextureStreaming();
	void UpdateNextCar();
	class ACar_TA* FindNextCar(TArray<struct FCarData>* FilterLocal_20E5EFD04072DFC8D6326DA1E4856462);
	bool ShouldKeepExecuting();
	bool ShouldExecute();
	void EndCameraState();
	void BeginCameraState();
};


// Class TAGame.CameraState_CustomFocus_TA
// 0x0020 (0x01E0 - 0x01C0)
class UCameraState_CustomFocus_TA : public UCameraState_Car_TA
{
public:
	float                                              RotationRate;                                             // 0x01C0(0x0004) (Edit)
	float                                              PitchScale;                                               // 0x01C4(0x0004) (Edit)
	float                                              PitchFocusZFactor;                                        // 0x01C8(0x0004) (Edit)
	float                                              PitchExtentMin;                                           // 0x01CC(0x0004) (Edit)
	float                                              PitchExtentMax;                                           // 0x01D0(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01D4(0x0004) MISSED OFFSET
	class ACustomFocusTarget_TA*                       FocusTarget;                                              // 0x01D8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_CustomFocus_TA");
		return ptr;
	}


	void UpdateFocus(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateFocusWorldOffset(float DeltaTime);
	void UpdateAirAndGroundCamera(float DeltaTime, struct FCameraOrientation* OutPOV, struct FRotator* OutRotatorNoBlend);
	void UpdateRotationModifiers(float DeltaTime, struct FCameraOrientation* OutPOV);
	bool ShouldExecute();
	void Init(class ACamera_X* InCam);
};


// Class TAGame.CustomFocusTarget_TA
// 0x0000 (0x0268 - 0x0268)
class ACustomFocusTarget_TA : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CustomFocusTarget_TA");
		return ptr;
	}


	struct FVector GetFocusLocation(class ACar_TA* ForCar);
};


// Class TAGame.CameraState_DirectorBallCam_TA
// 0x001C (0x025C - 0x0240)
class UCameraState_DirectorBallCam_TA : public UCameraState_BallCam_TA
{
public:
	struct FProfileCameraSettings                      ForcedCameraSettings;                                     // 0x0240(0x001C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_DirectorBallCam_TA");
		return ptr;
	}


	struct FProfileCameraSettings GetProfileCameraSettings();
};


// Class TAGame.CameraState_DirectorCountdownRotate_TA
// 0x0020 (0x01E8 - 0x01C8)
class UCameraState_DirectorCountdownRotate_TA : public UCameraState_Countdown_TA
{
public:
	float                                              FOV;                                                      // 0x01C8(0x0004) (Edit)
	float                                              Distance;                                                 // 0x01CC(0x0004) (Edit)
	struct FRotator                                    InitialRotation;                                          // 0x01D0(0x000C) (Edit)
	struct FRotator                                    RotationSpeed;                                            // 0x01DC(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_DirectorCountdownRotate_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
};


// Class TAGame.CameraState_DirectorCountdownTailPass_TA
// 0x0020 (0x01E8 - 0x01C8)
class UCameraState_DirectorCountdownTailPass_TA : public UCameraState_Countdown_TA
{
public:
	float                                              DistanceFromCar;                                          // 0x01C8(0x0004) (Edit)
	struct FRotator                                    InitialRotation;                                          // 0x01CC(0x000C) (Edit)
	struct FRotator                                    RotationSpeed;                                            // 0x01D8(0x000C) (Edit)
	float                                              FOV;                                                      // 0x01E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_DirectorCountdownTailPass_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
};


// Class TAGame.CameraState_DirectorGoalScorer_TA
// 0x0010 (0x01A0 - 0x0190)
class UCameraState_DirectorGoalScorer_TA : public UCameraState_DirectorProxy_TA
{
public:
	float                                              Distance;                                                 // 0x0190(0x0004) (Edit)
	float                                              FOV;                                                      // 0x0194(0x0004) (Edit)
	class ACar_TA*                                     FocusCar;                                                 // 0x0198(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_DirectorGoalScorer_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	bool ShouldKeepExecuting();
	bool ShouldExecute();
	void HandlePlayerScored(class AGameEvent_Soccar_TA* InGameEvent, class APRI_TA* Scorer);
	void EndCameraState();
	void BeginCameraState();
	void ShutDown();
	void Init(class ACamera_X* InCamera);
};


// Class TAGame.CameraState_DirectorKickoff_TA
// 0x0024 (0x01B4 - 0x0190)
class UCameraState_DirectorKickoff_TA : public UCameraState_DirectorProxy_TA
{
public:
	float                                              Distance;                                                 // 0x0190(0x0004) (Edit)
	struct FRotator                                    RotationOffset;                                           // 0x0194(0x000C) (Edit)
	float                                              FOV;                                                      // 0x01A0(0x0004) (Edit)
	struct FViewTargetTransitionParams                 BlendToParams;                                            // 0x01A4(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_DirectorKickoff_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	struct FViewTargetTransitionParams GetEndBlendParams(class UCameraState_X* NewState);
	bool ShouldKeepExecuting();
};


// Class TAGame.CameraState_DirectorMoving_TA
// 0x0064 (0x01F4 - 0x0190)
class UCameraState_DirectorMoving_TA : public UCameraState_DirectorProxy_TA
{
public:
	struct FVector                                     StartOffset;                                              // 0x0190(0x000C) (Edit)
	struct FVector                                     EndOffset;                                                // 0x019C(0x000C) (Edit)
	struct FRotator                                    StartRotation;                                            // 0x01A8(0x000C) (Edit)
	struct FRotator                                    EndRotation;                                              // 0x01B4(0x000C) (Edit)
	struct FViewTargetTransitionParams                 PanBlend;                                                 // 0x01C0(0x0010) (Edit)
	float                                              StartFOV;                                                 // 0x01D0(0x0004) (Edit)
	float                                              EndFOV;                                                   // 0x01D4(0x0004) (Edit)
	TEnumAsByte<ECameraLoopType>                       LoopType;                                                 // 0x01D8(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x01D9(0x0003) MISSED OFFSET
	struct FVector                                     CachedStart;                                              // 0x01DC(0x000C) (Transient)
	struct FVector                                     CachedEnd;                                                // 0x01E8(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_DirectorMoving_TA");
		return ptr;
	}


	float GetRawPercent(float inTime);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void Init(class ACamera_X* InCamera);
};


// Class TAGame.CameraState_IntroMenu_TA
// 0x004C (0x00D8 - 0x008C)
class UCameraState_IntroMenu_TA : public UCameraState_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	float                                              FOV;                                                      // 0x0090(0x0004)
	struct FVector                                     Offset;                                                   // 0x0094(0x000C)
	float                                              BlendRate;                                                // 0x00A0(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	class ASkeletalMeshActorMAT_IntroCar_TA*           Focus;                                                    // 0x00A8(0x0008) (Transient)
	TArray<class ASkeletalMeshActorMAT_IntroCar_TA*>   FocusActors;                                              // 0x00B0(0x0010) (Transient, NeedCtorLink)
	struct FScriptDelegate                             __EventFocusChanged__Delegate;                            // 0x00C0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x00C0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_IntroMenu_TA");
		return ptr;
	}


	int FocusActorSort(class ASkeletalMeshActorMAT_IntroCar_TA* A, class ASkeletalMeshActorMAT_IntroCar_TA* B);
	class ASkeletalMeshActorMAT_IntroCar_TA* GetInitialCarFocus();
	void SetupFocusActors();
	void SetFocus(class ASkeletalMeshActorMAT_IntroCar_TA* NewFocus);
	void ShiftFocus(int Direction);
	void ShiftLeftFocus();
	void ShiftRightFocus();
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
	void EventFocusChanged(class UCameraState_IntroMenu_TA* CameraState);
};


// Class TAGame.SkeletalMeshActorMAT_IntroCar_TA
// 0x0018 (0x03E0 - 0x03C8)
class ASkeletalMeshActorMAT_IntroCar_TA : public ASkeletalMeshActorMAT_Products_TA
{
public:
	int                                                ViewIndex;                                                // 0x03C8(0x0004) (Edit)
	struct FRotator                                    AngleOffset;                                              // 0x03CC(0x000C) (Edit)
	class UIntroCarTemplates_TA*                       IntroCarsTemplates;                                       // 0x03D8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkeletalMeshActorMAT_IntroCar_TA");
		return ptr;
	}


	bool __SkeletalMeshActorMAT_IntroCar_TA__PostBeginPlay_BF97A8FA4696F2588B4C73B5CD12732D(const struct FEditorIntroCar& IntroCar);
	void PostBeginPlay();
};


// Class TAGame.CameraState_MenuCamActor_TA
// 0x000C (0x0218 - 0x020C)
class UCameraState_MenuCamActor_TA : public UCameraState_CamActor_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x020C(0x0004) MISSED OFFSET
	struct FName                                       CameraTag;                                                // 0x0210(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_MenuCamActor_TA");
		return ptr;
	}


	bool ShouldExecute();
	void Init(class ACamera_X* InCamera);
};


// Class TAGame.CameraState_PodiumSpotlight_TA
// 0x003C (0x00C8 - 0x008C)
class UCameraState_PodiumSpotlight_TA : public UCameraState_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	float                                              ArcT;                                                     // 0x0090(0x0004)
	float                                              CameraDistance;                                           // 0x0094(0x0004)
	float                                              CameraOffsetYaw;                                          // 0x0098(0x0004)
	float                                              CameraOffsetPitch;                                        // 0x009C(0x0004)
	float                                              XOffsetDistanceStart;                                     // 0x00A0(0x0004)
	float                                              XOffsetDistanceEnd;                                       // 0x00A4(0x0004)
	float                                              XOffsetDollySpeed;                                        // 0x00A8(0x0004)
	float                                              DefaultFOV;                                               // 0x00AC(0x0004)
	float                                              FadeInDuration;                                           // 0x00B0(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00B4(0x0004) MISSED OFFSET
	TArray<struct FCachedPodiumCar>                    Cars;                                                     // 0x00B8(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_PodiumSpotlight_TA");
		return ptr;
	}


	void UpdateCarLocations(class AGameEvent_TA* GameEvent);
	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void BeginCameraState();
	bool ShouldExecute();
};


// Class TAGame.CameraState_PrePodiumSpotlight_TA
// 0x0014 (0x00A0 - 0x008C)
class UCameraState_PrePodiumSpotlight_TA : public UCameraState_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET
	float                                              ElapsedTime;                                              // 0x0090(0x0004)
	unsigned long                                      bFadeOut : 1;                                             // 0x0094(0x0004)
	float                                              FadeOutDelay;                                             // 0x0098(0x0004)
	float                                              FadeOutDuration;                                          // 0x009C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_PrePodiumSpotlight_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	bool ShouldExecute();
};


// Class TAGame.CameraState_StadiumSide_TA
// 0x0138 (0x02C8 - 0x0190)
class UCameraState_StadiumSide_TA : public UCameraState_DirectorProxy_TA
{
public:
	struct FVector                                     TrackOffset;                                              // 0x0190(0x000C) (Edit)
	struct FVector                                     TrackSize;                                                // 0x019C(0x000C) (Edit)
	struct FInterpCurveFloat                           TrackProximityOffsetSide;                                 // 0x01A8(0x0018) (Edit, NeedCtorLink)
	float                                              TrackProximityOffsetLerp;                                 // 0x01C0(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x01C4(0x0004) MISSED OFFSET
	struct FInterpCurveFloat                           FocusLerp;                                                // 0x01C8(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           TrackLerpSide;                                            // 0x01E0(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           TrackLerpForward;                                         // 0x01F8(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           CarDistWeight;                                            // 0x0210(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           GoalDistWeight;                                           // 0x0228(0x0018) (Edit, NeedCtorLink)
	float                                              BallPredictionTime;                                       // 0x0240(0x0004) (Edit)
	float                                              MinFOV;                                                   // 0x0244(0x0004) (Edit)
	float                                              MaxFOV;                                                   // 0x0248(0x0004) (Edit)
	float                                              SmoothFOVLerp;                                            // 0x024C(0x0004) (Edit)
	struct FVector                                     TrackCenter;                                              // 0x0250(0x000C) (Transient)
	struct FVector                                     TrackRight;                                               // 0x025C(0x000C) (Transient)
	struct FVector                                     TrackForward;                                             // 0x0268(0x000C) (Transient)
	struct FVector                                     TrackStart;                                               // 0x0274(0x000C) (Transient)
	struct FVector                                     TrackEnd;                                                 // 0x0280(0x000C) (Transient)
	struct FVector                                     FieldStart;                                               // 0x028C(0x000C) (Transient)
	struct FVector                                     FieldEnd;                                                 // 0x0298(0x000C) (Transient)
	struct FVector                                     SmoothedFocus;                                            // 0x02A4(0x000C) (Transient)
	struct FVector                                     SmoothedFieldPct;                                         // 0x02B0(0x000C) (Transient)
	float                                              SmoothedFOV;                                              // 0x02BC(0x0004) (Transient)
	float                                              SmoothedProximityOffsetSide;                              // 0x02C0(0x0004) (Transient)
	unsigned long                                      bCut : 1;                                                 // 0x02C4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_StadiumSide_TA");
		return ptr;
	}


	void UpdatePOV(float DeltaTime, struct FCameraOrientation* OutPOV);
	void InitFieldTrackValues();
	void BeginCameraState();
	void Init(class ACamera_X* InCamera);
};


// Class TAGame.CameraState_Track_TA
// 0x0000 (0x01C0 - 0x01C0)
class UCameraState_Track_TA : public UCameraState_Car_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraState_Track_TA");
		return ptr;
	}


	bool ShouldExecute();
	void UpdateRotationModifiers(float DeltaTime, struct FCameraOrientation* OutPOV);
	void UpdateGroundPOV(float DeltaTime, struct FCameraOrientation* OutPOV, struct FRotator* OutRotatorNoBlend);
};


// Class TAGame.CameraStateSelector_Priority_TA
// 0x0014 (0x009C - 0x0088)
class UCameraStateSelector_Priority_TA : public UCameraStateSelector_TA
{
public:
	TArray<struct FStateParams>                        PriorityStates;                                           // 0x0088(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bSelectFirst : 1;                                         // 0x0098(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraStateSelector_Priority_TA");
		return ptr;
	}


	class UCameraState_X* SelectState(class UCameraState_X* InCurrentState);
	void SetActive();
	void Init(class ACamera_X* InCamera);
};


// Class TAGame.CameraStateSelector_Sequence_TA
// 0x0008 (0x0090 - 0x0088)
class UCameraStateSelector_Sequence_TA : public UCameraStateSelector_TA
{
public:
	unsigned long                                      bResetIndexOnActive : 1;                                  // 0x0088(0x0004) (Edit)
	int                                                StateIdx;                                                 // 0x008C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraStateSelector_Sequence_TA");
		return ptr;
	}


	int GetNextStateIndex();
	class UCameraState_X* SelectState(class UCameraState_X* InCurrentState);
	void SetActive();
};


// Class TAGame.CameraStateSelector_RandomSequence_TA
// 0x0004 (0x0094 - 0x0090)
class UCameraStateSelector_RandomSequence_TA : public UCameraStateSelector_Sequence_TA
{
public:
	unsigned long                                      bReshuffleOnActive : 1;                                   // 0x0090(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CameraStateSelector_RandomSequence_TA");
		return ptr;
	}


	void Reshuffle();
	void SetActive();
	void Init(class ACamera_X* InCamera);
};


// Class TAGame.Car_Freeplay_TA
// 0x0010 (0x0AE0 - 0x0AD0)
class ACar_Freeplay_TA : public ACar_TA
{
public:
	TArray<struct FLinearColor>                        CarColors;                                                // 0x0AD0(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Car_Freeplay_TA");
		return ptr;
	}


	void STATIC_SetCarColor(class UCarMeshComponentBase_TA* InMesh, bool bSetTeamColor, bool bSetCustomColor);
	void HandleAllAssetsLoaded(class UProductLoader_TA* Loader);
	int GetLoadoutTeamIndex();
	bool HasTeam();
	void InitFX();
};


// Class TAGame.CarJointSpinner_TA
// 0x0038 (0x00DC - 0x00A4)
class UCarJointSpinner_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	struct FName                                       ControlName;                                              // 0x00A8(0x0008) (Edit)
	float                                              IdleSpeed;                                                // 0x00B0(0x0004) (Edit)
	float                                              DrivingSpeed;                                             // 0x00B4(0x0004) (Edit)
	float                                              BoostSpeed;                                               // 0x00B8(0x0004) (Edit)
	struct FVector                                     RotationAxis;                                             // 0x00BC(0x000C) (Edit)
	class ACar_TA*                                     Car;                                                      // 0x00C8(0x0008) (Transient)
	class USkelControlSingleBone*                      Control;                                                  // 0x00D0(0x0008) (Transient)
	float                                              Speed;                                                    // 0x00D8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarJointSpinner_TA");
		return ptr;
	}


	void Tick(float DeltaTime);
	void Attached();
};


// Class TAGame.CheatStayAsParty_TA
// 0x0000 (0x0060 - 0x0060)
class UCheatStayAsParty_TA : public UCheatObject_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CheatStayAsParty_TA");
		return ptr;
	}


	void PartyUpInjectVote();
	void PartyUpVote();
	void PartyUpDumpActive();
};


// Class TAGame.GFxData_ClubInviteNotification_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_ClubInviteNotification_TA : public UGFxData_Notification_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ClubInviteNotification_TA");
		return ptr;
	}

};


// Class TAGame.ClubsConfig_TA
// 0x0010 (0x0088 - 0x0078)
class UClubsConfig_TA : public UOnlineConfig_X
{
public:
	int                                                TagLengthMin;                                             // 0x0078(0x0004) (DataBinding)
	int                                                TagLengthMax;                                             // 0x007C(0x0004) (DataBinding)
	int                                                NameLengthMin;                                            // 0x0080(0x0004) (DataBinding)
	int                                                NameLengthMax;                                            // 0x0084(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ClubsConfig_TA");
		return ptr;
	}

};


// Class TAGame.CollisionTestTrack_TA
// 0x0008 (0x0270 - 0x0268)
class ACollisionTestTrack_TA : public AActor
{
public:
	class UCollisionTestComponent_TA*                  CollisionTestComponent;                                   // 0x0268(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CollisionTestTrack_TA");
		return ptr;
	}

};


// Class TAGame.DemoExplosionHandler_TA
// 0x0008 (0x0158 - 0x0150)
class UDemoExplosionHandler_TA : public UExplosionHitHandler_TA
{
public:
	class AFXActor_X*                                  DemoFXToApply;                                            // 0x0150(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DemoExplosionHandler_TA");
		return ptr;
	}


	void ApplyImpulse(class ACar_TA* CarHit, const struct FVector& HitLocation, float DamageScale, struct FContactInformation* ContactInfo);
};


// Class TAGame.EndRoundComponent_TrainingEditor_TA
// 0x0000 (0x00B0 - 0x00B0)
class UEndRoundComponent_TrainingEditor_TA : public UEndRoundComponent_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EndRoundComponent_TrainingEditor_TA");
		return ptr;
	}


	void HandleBallHitGroundTimeout();
	void HandleBallHitGround(class ABall_TA* Ball, const struct FVector& HitLoc, const struct FVector& HitNorm);
};


// Class TAGame.EventsPageConfig_TA
// 0x0060 (0x00D8 - 0x0078)
class UEventsPageConfig_TA : public UOnlineConfig_X
{
public:
	unsigned long                                      bEnabled : 1;                                             // 0x0078(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	struct FString                                     URL;                                                      // 0x0080(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     ButtonTextureURL_Default;                                 // 0x0090(0x0010) (NeedCtorLink)
	struct FString                                     ButtonTextureURL_Hover;                                   // 0x00A0(0x0010) (NeedCtorLink)
	struct FString                                     ButtonTextureURL_Click;                                   // 0x00B0(0x0010) (NeedCtorLink)
	class UTexture*                                    ButtonTexture_Default;                                    // 0x00C0(0x0008) (DataBinding)
	class UTexture*                                    ButtonTexture_Hover;                                      // 0x00C8(0x0008) (DataBinding)
	class UTexture*                                    ButtonTexture_Click;                                      // 0x00D0(0x0008) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EventsPageConfig_TA");
		return ptr;
	}


	void __EventsPageConfig_TA__SyncTextures_5FBA5B384E23F9620A1BF0919A75AA17(class UTexture2DDynamic* Texture);
	void __EventsPageConfig_TA__SyncTextures_C9F8E06D463EC0790703618CB21D768B(class UTexture2DDynamic* Texture);
	void __EventsPageConfig_TA__SyncTextures_5502EFC74DF3AD7E626E4CAF98FCDEE2(class UTexture2DDynamic* Texture);
	void SyncTextures();
};


// Class TAGame.FXActor_TrainingEditor_TA
// 0x0038 (0x0360 - 0x0328)
class AFXActor_TrainingEditor_TA : public AFXActor_X
{
public:
	float                                              AdjustSpeedStateRemoveDelay;                              // 0x0328(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x032C(0x0004) MISSED OFFSET
	class UAkSoundCue*                                 AkBallSpeedDirectionChange;                               // 0x0330(0x0008) (Edit)
	class UFXActorEvent_X*                             SimulatingBallState;                                      // 0x0338(0x0008)
	class UFXActorEvent_X*                             AdjustingSpeedState;                                      // 0x0340(0x0008)
	class UFXActorEvent_X*                             PlaytestingState;                                         // 0x0348(0x0008)
	class AGameEvent_TrainingEditor_TA*                GameEvent;                                                // 0x0350(0x0008) (Transient)
	float                                              PrevLaunchSpeed;                                          // 0x0358(0x0004) (Transient)
	float                                              PrevLaunchSpeedSign;                                      // 0x035C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_TrainingEditor_TA");
		return ptr;
	}


	void AdjustSpeedStateEnd();
	void HandleLaunchVelocityChange(class ABall_GameEditor_TA* InBall);
	void HandleBallReset(class ABall_GameEditor_TA* InBall);
	void HandleBallFire(class ABall_GameEditor_TA* InBall);
	void HandlePlaytestStarted(class AGameEvent_TrainingEditor_TA* InGameEvent);
	void HandleGameStateChange(class AGameEvent_TA* InGameEvent);
	void HandleBallRemoved(class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* Ball);
	void HandleBallAdded(class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* Ball);
	void PostBeginPlay();
};


// Class TAGame.FXTrait_PreviewParticle_TA
// 0x0010 (0x0070 - 0x0060)
class UFXTrait_PreviewParticle_TA : public UFXAttachmentTraitBase_X
{
public:
	class UParticleSystem*                             ParticlePreview;                                          // 0x0060(0x0008) (Edit)
	class UParticleSystem*                             OldParticle;                                              // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXTrait_PreviewParticle_TA");
		return ptr;
	}


	void DisablePreview(class AFXActor_X* _, class UFXActorEvent_X* __);
	void EnablePreview(class AFXActor_X* _, class UFXActorEvent_X* __);
	void Init();
};


// Class TAGame.GameEvent_GodBall_TA
// 0x0030 (0x0C58 - 0x0C28)
class AGameEvent_GodBall_TA : public AGameEvent_Soccar_TA
{
public:
	int                                                LastScoredTeamIndex;                                      // 0x0C28(0x0004)
	struct FVector                                     GoalBallSpawnOffset;                                      // 0x0C2C(0x000C) (Const)
	struct FVector                                     GoalPlayerSpawnOffset;                                    // 0x0C38(0x000C) (Const)
	struct FVector                                     BallKickOffDirection;                                     // 0x0C44(0x000C) (Const)
	float                                              BallKickOffScale;                                         // 0x0C50(0x0004) (Const)
	float                                              SpawnRadiusCheck;                                         // 0x0C54(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameEvent_GodBall_TA");
		return ptr;
	}


	bool __GameEvent_GodBall_TA__GetBallSpawnGoal_4CE8197346FDB680EE20C393F0A41B9D(class UGoal_TA* Goal);
	class UGoal_TA* GetBallSpawnGoal();
	bool CarFitsAtLocation(const struct FVector& DesiredLocation);
	bool GetSpawnOrientation(class AController* ForPlayer, struct FVector* out_Location, struct FRotator* out_Rotation);
	bool GetBallSpawnOrientation(struct FVector* out_Location, struct FRotator* out_Rotation);
	void HandleGoalScored(class AGameEvent_Soccar_TA* GameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIdx);
	void Construct();
};


// Class TAGame.GameInfo_CollisionTest_TA
// 0x002C (0x0504 - 0x04D8)
class AGameInfo_CollisionTest_TA : public AGameInfoBase_TA
{
public:
	TArray<class UCollisionTestComponent_TA*>          TestComponents;                                           // 0x04D8(0x0010) (ExportObject, Transient, Component, NeedCtorLink, EditInline)
	class UCollisionTestComponent_TA*                  CurrentTest;                                              // 0x04E8(0x0008) (ExportObject, Transient, Component, EditInline)
	int                                                CurrentIndex;                                             // 0x04F0(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x04F4(0x0004) MISSED OFFSET
	class AActor*                                      CurrentActor;                                             // 0x04F8(0x0008) (Transient)
	unsigned long                                      bRepeat : 1;                                              // 0x0500(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_CollisionTest_TA");
		return ptr;
	}


	class AActor* SpawnActor(class UCollisionTestComponent_TA* Test, float Alpha);
	class AActor* SpawnActorFromTest(class UCollisionTestComponent_TA* Test);
	void SkipTest();
	void Repeat(int Index);
	void SkipTo(int Index);
	void Skip(int Steps);
	void FireNext();
	void StartNextTest();
	void FindTestActors();
	void SetStadiumColors();
	void GenericPlayerInitialization(class AController* C);
	class APlayerController* SpawnPlayerController(const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	void InitGame(const struct FString& Options, struct FString* ErrorMessage);
};


// Class TAGame.GameInfo_Track_TA
// 0x0008 (0x0508 - 0x0500)
class AGameInfo_Track_TA : public AGameInfo_TA
{
public:
	class AGameEvent_TA*                               GameEventArchetype;                                       // 0x0500(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Track_TA");
		return ptr;
	}


	void RestartGameEvent();
	void KickAllPlayers(const struct FString& Reason);
	void HandleMainEventDestroyed(class AGameEvent_TA* GameEvent);
	void RestartLevel();
	void RestartPlayer(class AController* aPlayer);
	bool PlayerCanRestart(class APlayerController* aPlayer);
	void PostLogin(class APlayerController* NewPlayer);
	void PostBeginPlay();
};


// Class TAGame.GFxData_AuthenticatedName_TA
// 0x0010 (0x00A8 - 0x0098)
class UGFxData_AuthenticatedName_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     PlayerName;                                               // 0x0098(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_AuthenticatedName_TA");
		return ptr;
	}


	void LoginSuccess();
	void LoginFailed();
	void HandleLoginChanged(class UOnlinePlayerAuthentication_X* Auth);
	void Login();
	void NameRequestFailed(const struct FString& Error);
	void NameRequestSuccess();
	void HandleAuthenticatedNameAvailableComplete(class URPC_AuthenticatedNameAvailable_TA* RPC);
	void IsPlayerNameAvailable();
	void SetPlayerName(const struct FString& NewName);
};


// Class TAGame.RPC_AuthenticatedNameAvailable_TA
// 0x0020 (0x0120 - 0x0100)
class URPC_AuthenticatedNameAvailable_TA : public URPC_X
{
public:
	struct FString                                     Platform;                                                 // 0x0100(0x0010) (NeedCtorLink)
	struct FString                                     PlayerName;                                               // 0x0110(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_AuthenticatedNameAvailable_TA");
		return ptr;
	}


	class URPC_AuthenticatedNameAvailable_TA* SetRequestedName(const struct FString& RequestName);
	class URPC_AuthenticatedNameAvailable_TA* SetPlatform(const struct FString& InPlatform);
};


// Class TAGame.GFxData_AutoTour_CompletedResults_TA
// 0x00AC (0x0140 - 0x0094)
class UGFxData_AutoTour_CompletedResults_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	class UPsyNet_X*                                   PsyNet;                                                   // 0x0098(0x0008)
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x00A0(0x0008) (Edit)
	class UAutoTourConfig_TA*                          Config;                                                   // 0x00A8(0x0008)
	class UAutoTour_TA*                                AutoTour;                                                 // 0x00B0(0x0008)
	unsigned char                                      UnknownData01[0x8];                                       // 0x00B8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_AutoTour_CompletedResults_TA.CycleID
	int                                                WeekIndex;                                                // 0x00C0(0x0004) (Transient)
	unsigned long                                      bEliminatedFirstRound : 1;                                // 0x00C4(0x0004) (Transient)
	unsigned long                                      bWeeksResultsChanged : 1;                                 // 0x00C4(0x0004) (DataBinding)
	unsigned long                                      bReceivedResults : 1;                                     // 0x00C4(0x0004) (DataBinding)
	unsigned long                                      bFailedToRetrieveResults : 1;                             // 0x00C4(0x0004) (DataBinding)
	struct FTournamentResult                           NewTournamentResult;                                      // 0x00C8(0x000C) (Transient)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	TArray<struct FTournamentResult>                   OldWeeklyResults;                                         // 0x00D8(0x0010) (Transient, NeedCtorLink)
	TArray<struct FTournamentResult>                   NewWeeklyResults;                                         // 0x00E8(0x0010) (Transient, NeedCtorLink)
	TArray<struct FShopCurrencyInfo>                   CurrencyRewards;                                          // 0x00F8(0x0010) (Transient, NeedCtorLink)
	TArray<struct FShopCurrencyInfo>                   OldWeeklyCurrencies;                                      // 0x0108(0x0010) (Transient, NeedCtorLink)
	TArray<struct FShopCurrencyInfo>                   WeeklyCurrencies;                                         // 0x0118(0x0010) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData03[0x8];                                       // 0x0128(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_AutoTour_CompletedResults_TA.TournamentID
	unsigned char                                      UnknownData04[0x8];                                       // 0x0130(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_AutoTour_CompletedResults_TA.ScheduleID
	unsigned char                                      UnknownData05[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_AutoTour_CompletedResults_TA.RejoinTournamentTime

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_AutoTour_CompletedResults_TA");
		return ptr;
	}


	void __GFxData_AutoTour_CompletedResults_TA__Init_D8BDDB7B42566FF1908C23803768DCCA(class URPC_AutoTour_GetCompletedResult_TA* RPC);
	void __GFxData_AutoTour_CompletedResults_TA__Init_20A975BE4BAC8615A3EF6D85F3792E7F(class UPsyNetService_AutoTourCompletedResultReceived_TA* Service);
	void __GFxData_AutoTour_CompletedResults_TA__HandleFailedToRetrieveResults_CFBC0E854E16A1A23ECA1AAB456F6B86(class URPC_X* _);
	void __GFxData_AutoTour_CompletedResults_TA__HandleFailedToRetrieveResults_754901C546A43146BA852D96B5C3E85F(class URPC_AutoTour_GetCompletedResult_TA* RPC);
	bool __GFxData_AutoTour_CompletedResults_TA__HasEligibleRejoinTournament_AFCAD54946A5766203BB8B8BAF6DE63C(class UGFxData_AutoTour_TourCard_TA* T);
	bool HasEligibleRejoinTournament();
	TArray<struct FShopCurrencyInfo> GetWeeklyCurrencies();
	TArray<struct FShopCurrencyInfo> GetOldWeeklyCurrencies();
	TArray<struct FShopCurrencyInfo> GetCurrencyRewards();
	TArray<struct FTournamentResult> GetNewResults();
	TArray<struct FTournamentResult> GetOldResults();
	struct FTournamentResult GetNewTournamentResult();
	int SortResults(const struct FTournamentResult& A, const struct FTournamentResult& B);
	bool UpdateTournamentResults(const struct FTournamentResult& Result, TArray<struct FTournamentResult>* InOldWeeklyResults);
	void SetEndOfTournamentData(const struct FTournamentEndData& Data);
	void OnFailedToRetrieveResults();
	void HandleFailedToRetrieveResults(class URPC_AutoTour_GetCompletedResult_TA** ObjectInitializer_7565FBCB443EBEE2F5408E9EEF22DEC3);
	void Init(class UTournamentCompletedEvent_TA* InTournamentCompletedEvent, class URPC_AutoTour_GetCompletedResult_TA** ObjectInitializer_CF17DFEF47BBE925668497AC3EEB643D);
};


// Class TAGame.RPC_AutoTour_GetCompletedResult_TA
// 0x0098 (0x0198 - 0x0100)
class URPC_AutoTour_GetCompletedResult_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_AutoTour_GetCompletedResult_TA.TournamentID
	struct FTournamentEndData                          EndOfTournamentData;                                      // 0x0140(0x0058) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_AutoTour_GetCompletedResult_TA");
		return ptr;
	}

};


// Class TAGame.PsyNetService_AutoTourCompletedResultReceived_TA
// 0x0058 (0x00E8 - 0x0090)
class UPsyNetService_AutoTourCompletedResultReceived_TA : public UPsyNetClientService_X
{
public:
	struct FTournamentEndData                          EndOfTournamentData;                                      // 0x0090(0x0058) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_AutoTourCompletedResultReceived_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_AutoTour_TA
// 0x0058 (0x00F0 - 0x0098)
class UGFxData_AutoTour_TA : public UGFxDataSingleton_X
{
public:
	class UAutoTourConfig_TA*                          Config;                                                   // 0x0098(0x0008)
	int                                                NumWeeksInCycle;                                          // 0x00A0(0x0004) (DataBinding)
	int                                                CycleScore;                                               // 0x00A4(0x0004) (DataBinding)
	int                                                CurrencyID;                                               // 0x00A8(0x0004) (DataBinding)
	unsigned long                                      bDisplayCompletedTourResults : 1;                         // 0x00AC(0x0004) (DataBinding)
	TArray<class UGFxData_AutoTour_TourCard_TA*>       TourCards;                                                // 0x00B0(0x0010) (Transient, NeedCtorLink)
	TArray<class UGFxData_AutoTour_Week_TA*>           Weeks;                                                    // 0x00C0(0x0010) (Transient, NeedCtorLink)
	class UGFxData_AutoTour_CompletedResults_TA*       EndOfTournamentResults;                                   // 0x00D0(0x0008) (Transient)
	class UPsyNet_X*                                   PsyNet;                                                   // 0x00D8(0x0008)
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x00E0(0x0008) (Edit)
	class UAutoTour_TA*                                AutoTour;                                                 // 0x00E8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_AutoTour_TA");
		return ptr;
	}


	void __GFxData_AutoTour_TA__HandleAutoTourNotFound_8851C1484A8AD31CEB7B5B820037296B();
	void EndCompletedTourResultScreen();
	void STATIC_HandleTournamentCompleted(class UAutoTour_TA* AutoTourGroup, class UGFxData_AutoTour_TA* GFxAutoTour, class UTournamentCompletedEvent_TA* InTourCompletedEvent);
	TArray<int> GetMaxTierScores();
	void HandleCycleUpdated();
	void HandleSchedulesUpdated();
	void HandleAutoTourNotFound(class UPsyNetService_AutoTourNotFound_TA* Service);
	void HandleConfigChanged();
	void hide();
	void Show();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_AutoTour_Week_TA
// 0x001C (0x00B0 - 0x0094)
class UGFxData_AutoTour_Week_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	int                                                Score;                                                    // 0x0098(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	TArray<struct FTournamentResult>                   Results;                                                  // 0x00A0(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_AutoTour_Week_TA");
		return ptr;
	}


	int __GFxData_AutoTour_Week_TA__Init_881F00034AFDCB75096B37AAA168A64D(int Sum, const struct FTournamentResult& Result);
	TArray<struct FTournamentResult> GetResults();
	void Init(TArray<struct FTournamentResult>* InResults, int* ReduceLocal_12092B804E3505E9B257F5AF9C8126E4);
};


// Class TAGame.PsyNetService_AutoTourNotFound_TA
// 0x0000 (0x0090 - 0x0090)
class UPsyNetService_AutoTourNotFound_TA : public UPsyNetClientService_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_AutoTourNotFound_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_CarColors_TA
// 0x0060 (0x00F8 - 0x0098)
class UGFxData_CarColors_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxTeamColor>                       Custom;                                                   // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FGFxTeamColor>                       Team0;                                                    // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FGFxTeamColor>                       Team1;                                                    // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FGFxTeamColor>                       Clubs;                                                    // 0x00C8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FGFxTeamColor>                       PlayerBanners;                                            // 0x00D8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FGFxTeamColor>                       PlayerVanity;                                             // 0x00E8(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_CarColors_TA");
		return ptr;
	}


	void Init();
	void OnShellSet();
};


// Class TAGame.GFxData_ChallengeObject_TA
// 0x0004 (0x0098 - 0x0094)
class UGFxData_ChallengeObject_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ChallengeObject_TA");
		return ptr;
	}


	void OnRemoved();
	void HandleChallengeObjectRemoved(class UListenObject_TA* Challenge);
	void SetChallengeProxy(class UListenObject_TA* Challenge);
};


// Class TAGame.GFxData_Challenge_TA
// 0x0008 (0x00A0 - 0x0098)
class UGFxData_Challenge_TA : public UGFxData_ChallengeObject_TA
{
public:
	class UGFxModal_X*                                 ModalProcessing;                                          // 0x0098(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Challenge_TA");
		return ptr;
	}


	void __GFxData_Challenge_TA__SetChallengeProxy_1729381F4BE9D2464220A9914761450A(class UChallengeRequirement_TA* R);
	void __GFxData_Challenge_TA__SetChallengeProxy_2F2660F5470870798B00278D2D4A41EC(class UChallengeCurrency_TA* C);
	bool IsAvailable();
	void TimeElapsed();
	void HandleRewardCollected(class UChallengeManager_TA* Manager, class UChallenge_TA* Challenge, struct FOnlineReward* Reward);
	void HandleRewardsRequestComplete(class URPC_Challenge_RequestReward_TA* RPC);
	void CollectRewards();
	void ClearNewInfoIcon();
	void CloseProcessingModal();
	void OnRemoved();
	void SetChallengeProxy(class UListenObject_TA* Challenge);
};


// Class TAGame.GFxData_ChallengeRequirement_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_ChallengeRequirement_TA : public UGFxData_ChallengeObject_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ChallengeRequirement_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_ChallengeCurrency_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_ChallengeCurrency_TA : public UGFxData_ChallengeObject_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ChallengeCurrency_TA");
		return ptr;
	}

};


// Class TAGame.RPC_Challenge_RequestReward_TA
// 0x003C (0x013C - 0x0100)
class URPC_Challenge_RequestReward_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	int                                                Id;                                                       // 0x0138(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_Challenge_RequestReward_TA");
		return ptr;
	}


	class URPC_Challenge_RequestReward_TA* SetChallengeID(int ChallengeID);
	class URPC_Challenge_RequestReward_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxData_ChallengeReward_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_ChallengeReward_TA : public UGFxData_ChallengeObject_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ChallengeReward_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_ChallengeManager_TA
// 0x0018 (0x00B0 - 0x0098)
class UGFxData_ChallengeManager_TA : public UGFxDataSingleton_X
{
public:
	class UChallengeManager_TA*                        ChallengeManager;                                         // 0x0098(0x0008)
	TArray<class UGFxData_ChallengePage_TA*>           GFxChallengePages;                                        // 0x00A0(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ChallengeManager_TA");
		return ptr;
	}


	bool IsRewardAvailable(int ChallengeID);
	bool TriggerCompletedChallengeNotification(int ChallengeID);
	void HandlePageSelected(class UGFxData_ChallengeFolder_TA* GFxFolder);
	void RemovePages();
	void CreatePages();
	void HandleChallengesSynced(class UChallengeDefaultManager_TA* ChallengeDefaultManager);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_ChallengePage_TA
// 0x0000 (0x00E8 - 0x00E8)
class UGFxData_ChallengePage_TA : public UGFxData_ChallengeFolder_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ChallengePage_TA");
		return ptr;
	}


	void __GFxData_ChallengePage_TA__CreateSubFolders_316B8F1B4E9D6E01D081F58BE382D707(class UGFxData_ChallengeFolder_TA* F);
	bool __GFxData_ChallengePage_TA__RefreshNotifies_DAEC7B9143F332E5683880B00810A3F1(class UGFxData_ChallengeFolder_TA* P);
	bool __GFxData_ChallengePage_TA__RefreshNotifies_3CC1D8D444D2DFF049899A9FED4E45B9(class UGFxData_ChallengeFolder_TA* P);
	void __GFxData_ChallengePage_TA__HandleChallengeSaveLoaded_D8EF29BF4B3FFB54B0A3FB809D5154FD(class UChallengeSave_TA* Save);
	bool NewGroupAvaliable();
	void HandleChallengeSaveLoaded(class UChallengeSave_TA* ChallengeSave);
	void RefreshNotifies();
	void CreateSubFolders();
	void Select();
	void OnShellSet();
};


// Class TAGame.GFxData_ChinaPaymentBrowser_TA
// 0x0010 (0x00A8 - 0x0098)
class UGFxData_ChinaPaymentBrowser_TA : public UGFxDataSingleton_X
{
public:
	class UUIConfig_TA*                                UIConfig;                                                 // 0x0098(0x0008) (Edit)
	class UUrlConfig_X*                                UrlConfig;                                                // 0x00A0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ChinaPaymentBrowser_TA");
		return ptr;
	}


	void CloseHardCurrencyBrowser();
	void OpenHardCurrencyBrowser(int BrowserWidth, int BrowserHeight);
	void OnShellSet();
};


// Class TAGame.GFxData_ClientPerformanceStats_TA
// 0x0004 (0x009C - 0x0098)
class UGFxData_ClientPerformanceStats_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bIsGameRecordingEnabled : 1;                              // 0x0098(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ClientPerformanceStats_TA");
		return ptr;
	}


	void OnShellSet();
};


// Class TAGame.PsyNetService_ClubsInvite_TA
// 0x0000 (0x0090 - 0x0090)
class UPsyNetService_ClubsInvite_TA : public UPsyNetClientService_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_ClubsInvite_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_ClubServerBrowser_TA
// 0x001C (0x00B4 - 0x0098)
class UGFxData_ClubServerBrowser_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineClubServerList_X*                     ServerList;                                               // 0x0098(0x0008)
	TArray<struct FGFxClubServer>                      Servers;                                                  // 0x00A0(0x0010) (NeedCtorLink, DataBinding)
	unsigned long                                      bRefreshing : 1;                                          // 0x00B0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ClubServerBrowser_TA");
		return ptr;
	}


	void JoinServer(int RowNumber);
	void OnRefreshed(const struct FString& Error);
	struct FGFxClubServer CreateGFxClubServer(class UClubServerResult_X* Server, struct FGFxClubServer* StructInitializer_46E97D2D40B69681B6A65A8578972588);
	void UpdateGFxServers(class UError* Error, TArray<struct FGFxClubServer>* MapLocal_160C865345AF6CC77D6BB492C1D93661);
	void Refresh();
};


// Class TAGame.GFxData_ConnectionStats_TA
// 0x0008 (0x00A0 - 0x0098)
class UGFxData_ConnectionStats_TA : public UGFxDataSingleton_X
{
public:
	class UConnectionQualityConfig_TA*                 ConnectionQualityConfig;                                  // 0x0098(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ConnectionStats_TA");
		return ptr;
	}


	void AcceptedHelpModal(class UGFxModal_X* Modal);
	void CheckConnectionQualityHelp();
	void HandleTrackerAttached(class APlayerController_TA* PC, class UClientConnectionTracker_TA* Tracker);
	void HandleControllerReceived(class UPlayer* InPlayer);
	void HandleGRISpawned(class AGRI_X* GRI);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_CustomTeams_TA
// 0x0060 (0x00F8 - 0x0098)
class UGFxData_CustomTeams_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxCustomTeamSettings>              Settings;                                                 // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	TEnumAsByte<ECustomMatchSettingsType>              SettingsType;                                             // 0x00A8(0x0001) (DataBinding)
	unsigned char                                      UnknownData00[0x7];                                       // 0x00A9(0x0007) MISSED OFFSET
	TArray<struct FGFxTeamColor>                       TeamColors;                                               // 0x00B0(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FGFxTeamColor>                       CustomColors;                                             // 0x00C0(0x0010) (NeedCtorLink, DataBinding)
	class ULocalPlayer_TA*                             TAPlayer;                                                 // 0x00D0(0x0008) (Transient)
	int                                                PreviewTeam;                                              // 0x00D8(0x0004) (Transient)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00DC(0x0004) MISSED OFFSET
	class UCarPreviewSet_TA*                           PreviewSet;                                               // 0x00E0(0x0008) (Transient)
	struct FClubColorSet                               PreviewColors[0x2];                                       // 0x00E8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_CustomTeams_TA");
		return ptr;
	}


	bool InMainMenu();
	void UpdateCarColors(class ACarPreviewActor_TA* PreviewActor, bool bClubColors);
	void HandleSetProfile(class ACarPreviewActor_TA* Car);
	void RestoreStadiumColors();
	void InitStadiumColors();
	void ResetPreviewColors();
	void SetCustomColorID(int Team, int ColorID);
	void PreviewCustomColorID(int Team, int ColorID);
	void SetTeamColorID(int Team, int ColorID);
	void PreviewTeamColorID(int Team, int ColorID);
	void ClearTeamName(int Team);
	void SetTeamName(int Team, const struct FString& TeamName);
	void SetSettingsType(TEnumAsByte<ECustomMatchSettingsType> Type);
	void SaveColors(int Team);
	void InitPreviewColors();
	void InitColorTables();
	struct FGFxCustomTeamSettings CreateTeamSettings(int TeamIdx);
	void InitTeamSettings();
	void OnShellSet();
};


// Class TAGame.GFxData_ESportEvents_TA
// 0x0008 (0x00A0 - 0x0098)
class UGFxData_ESportEvents_TA : public UGFxDataSingleton_X
{
public:
	class UESportEvents_TA*                            ESportEvents;                                             // 0x0098(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ESportEvents_TA");
		return ptr;
	}


	void DownloadImage(const struct FString& URL);
	void OnShellSet();
};


// Class TAGame.GFxData_EventsPageBrowser_TA
// 0x0018 (0x00B0 - 0x0098)
class UGFxData_EventsPageBrowser_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bShowButton : 1;                                          // 0x0098(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	class UUIConfig_TA*                                UIConfig;                                                 // 0x00A0(0x0008) (Edit)
	class UEventsPageConfig_TA*                        EventsConfig;                                             // 0x00A8(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_EventsPageBrowser_TA");
		return ptr;
	}


	void Close();
	void Open(int BrowserWidth, int BrowserHeight);
	void HandleEventsConfigChanged();
};


// Class TAGame.PsyNetService_FaceItReservationFound_TA
// 0x00A8 (0x0138 - 0x0090)
class UPsyNetService_FaceItReservationFound_TA : public UPsyNetClientService_X
{
public:
	struct FServerReservationData                      ReservationData;                                          // 0x0090(0x0070) (NeedCtorLink)
	struct FFaceItMatchInfo                            MatchInfo;                                                // 0x0100(0x0038) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_FaceItReservationFound_TA");
		return ptr;
	}

};


// Class TAGame.PsyNetService_FaceItSearchStarted_TA
// 0x0004 (0x0094 - 0x0090)
class UPsyNetService_FaceItSearchStarted_TA : public UPsyNetClientService_X
{
public:
	int                                                PartnerID;                                                // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PsyNetService_FaceItSearchStarted_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_PersonaGroup_TA
// 0x001C (0x00B0 - 0x0094)
class UGFxData_PersonaGroup_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	struct FString                                     GroupTitle;                                               // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	int                                                GroupId;                                                  // 0x00A8(0x0004) (DataBinding)
	unsigned long                                      bPsyNetGroup : 1;                                         // 0x00AC(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PersonaGroup_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_LanBrowser_TA
// 0x0010 (0x00A8 - 0x0098)
class UGFxData_LanBrowser_TA : public UGFxDataSingleton_X
{
public:
	class ULanBrowser_X*                               LanBrowser;                                               // 0x0098(0x0008)
	class UAsyncTask*                                  GetServerListTask;                                        // 0x00A0(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_LanBrowser_TA");
		return ptr;
	}


	void __GFxData_LanBrowser_TA__Refresh_8E85D0BE4405ABC3880D86991D4637CE(class UError* _);
	void __GFxData_LanBrowser_TA__Refresh_C8804291434EB5C29BEA0A9F314F7F01(class UError* Error);
	void CreateServerGFxData(class ULanServerRecord_X* Server);
	void OnRefreshed();
	void OnRefreshError();
	void HandleServers(TArray<class ULanServerRecord_X*> Records);
	void Refresh();
};


// Class TAGame.GFxData_LanServer_TA
// 0x0084 (0x0118 - 0x0094)
class UGFxData_LanServer_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	struct FString                                     SanitizedOwnerName;                                       // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	class UTexture*                                    OwnerAvatar;                                              // 0x00A8(0x0008) (DataBinding)
	struct FString                                     OwnerPlatform;                                            // 0x00B0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     LocalizedMapName;                                         // 0x00C0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     SanitizedServerName;                                      // 0x00D0(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     serverId;                                                 // 0x00E0(0x0010) (NeedCtorLink)
	int                                                ServerBuildID;                                            // 0x00F0(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00F4(0x0004) MISSED OFFSET
	class UOnlineGame_X*                               OnlineGame;                                               // 0x00F8(0x0008)
	class UOnlineSubsystem*                            OnlineSubsystem;                                          // 0x0100(0x0008)
	class UOnlineGameWordFilter_X*                     WorldFilter;                                              // 0x0108(0x0008)
	class ULanBrowser_X*                               LanBrowser;                                               // 0x0110(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_LanServer_TA");
		return ptr;
	}


	void Connect(const struct FString& Password);
	struct FString GetJoinOptions(const struct FString& Password);
	void HandleGetAvatar(const struct FUniqueNetId& InPlayerId, class UTexture* InAvatar, const struct FString& OnlinePlayerName);
	void LoadAvatar(const struct FUniqueNetId& PlayerID, TArray<struct FUniqueNetId>* ArrayInitializer_99C924404BE7A60B7EF5899EF2889521);
	void HandleServerNameSanitized(const struct FString& Original, const struct FString& Sanitized);
	void SanitizeServerName(const struct FString& InServerName);
	void HandlePlayerNameSanitized(const struct FString& Original, const struct FString& Sanitized);
	void SanitizeOwnerName(const struct FUniqueNetId& InPlayerId, const struct FString& InPlayerName);
	struct FString GetLocalizedMapName(const struct FName& MapID);
	void SetData(class ULanServerRecord_X* Server);
};


// Class TAGame.GFxData_LanMatch_TA
// 0x0025 (0x00BD - 0x0098)
class UGFxData_LanMatch_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     ServerName;                                               // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	struct FString                                     Password;                                                 // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	int                                                SelectedMaxPlayerCount;                                   // 0x00B8(0x0004) (DataBinding)
	TEnumAsByte<ECustomMatchSettingsType>              SettingsType;                                             // 0x00BC(0x0001) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_LanMatch_TA");
		return ptr;
	}


	void CreateMatch();
	void UpdateCustomMatchSettings();
	void SetPassword(const struct FString& InPassword);
	void SetServerName(const struct FString& InServerName);
	void SetSelectedMaxPlayerCount(int MaxPlayerCount);
	class UProfile_TA* GetProfile();
	void SetCustomMatchSettings(struct U_Types_X_FCustomMatchSettings* InSettings);
	struct U_Types_X_FCustomMatchSettings GetCustomMatchSettings();
	void OnShellSet();
	class UOnlineGame_TA* GetOnlineGame();
};


// Class TAGame.GFxData_LoadoutSets_TA
// 0x00C8 (0x0160 - 0x0098)
class UGFxData_LoadoutSets_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxLoadoutSet>                      LoadoutSets;                                              // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	class UProfile_TA*                                 Profile;                                                  // 0x00A8(0x0008) (Transient)
	struct U_Types_TA_FLoadoutData                     RandomLoadouts[0x2];                                      // 0x00B0(0x0040) (Transient, NeedCtorLink)
	class UProductLoader_TA*                           RandomLoadoutLoader;                                      // 0x0130(0x0008) (Edit, ExportObject, Component, EditInline)
	class UProductLoader_TA*                           PreviousLoadoutSetLoader;                                 // 0x0138(0x0008) (Edit, ExportObject, Component, EditInline)
	class UProductLoader_TA*                           NextLoadoutSetLoader;                                     // 0x0140(0x0008) (Edit, ExportObject, Component, EditInline)
	class ULoadoutSequencer_TA*                        LoadoutSequencer;                                         // 0x0148(0x0008) (Transient)
	int                                                PreviousBodyProductID;                                    // 0x0150(0x0004) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0154(0x0004) MISSED OFFSET
	class UProfileLoadoutSave_TA*                      LoadoutSave;                                              // 0x0158(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_LoadoutSets_TA");
		return ptr;
	}


	class ACarPreviewActor_TA* GetCarPreview();
	void FinishRandomization();
	void UpdatePreviewLoadout();
	int GetPreviewTeam();
	void SetPreviewTeam(int Team);
	void SetEditingLoadoutSet(int Index);
	void HandleLoadoutSequenceComplete(class ULoadoutSequencer_TA* Sequencer);
	void RandomizePreset(int Index);
	void SetupNextRandomLoadoutSlot(int SlotIndex, struct U_Types_TA_FLoadoutData* Loadouts);
	void SetupNextRandomLoadout(struct U_Types_TA_FLoadoutData* Loadouts, struct U_Types_TA_FLoadoutData* StructInitializer_370F7EE1421BA85C47DA5099522BB4ED);
	bool HasPresetNamed(const struct FString& NewName);
	void RenamePreset(int Index, const struct FString& NewName);
	void DeletePreset(int Index);
	void CreatePreset();
	bool CanCreatePreset();
	void EquipPreset(int Index);
	void HandleEquippedLoadoutSetsChanged(class ULoadout_TA* InLoadout);
	void ClearLoaderCache(class UProductLoader_TA* Loader);
	void HandleLoadoutLoaded(class UProductLoader_TA* Loader);
	void PreloadLoadout(const struct U_Types_TA_FLoadoutData& Loadout, class UProductLoader_TA* Loader);
	void PreloadNextPrevLoadoutSets(int Index);
	void InitLoadoutSets();
	void OnEventProductArchived(const struct FProductHashID& HashID);
	void HandleArchiveSaveLoaded(class UProductsArchiveSave_TA* InArchiveSave);
	void HandleLoadoutSaveLoaded(class UProfileLoadoutSave_TA* InLoadoutSave);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.LoadoutSequencer_TA
// 0x00B8 (0x0118 - 0x0060)
class ULoadoutSequencer_TA : public UObject
{
public:
	TArray<struct FSequenceData>                       SlotSequence;                                             // 0x0060(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bDebug : 1;                                               // 0x0070(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0074(0x0004) MISSED OFFSET
	class ACarPreviewActor_TA*                         PreviewActor;                                             // 0x0078(0x0008)
	struct U_Types_TA_FLoadoutData                     FinalLoadout;                                             // 0x0080(0x0040) (NeedCtorLink)
	struct U_Types_TA_FLoadoutData                     CurrentLoadout;                                           // 0x00C0(0x0040) (NeedCtorLink)
	struct FScriptDelegate                             __EventSequenceComplete__Delegate;                        // 0x0100(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0100(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutSequencer_TA");
		return ptr;
	}


	void Finish();
	class AActor* GetTimerObject();
	void QueueNextSlot(float Delay);
	void EquipNextSlot();
	void OnSequenceComplete();
	void HandleProductLoaded(const struct FAssetLoadResult& Result);
	void QueueSlot(class UProductSlot_TA* Slot, float AnimDelay);
	void Start(class ACarPreviewActor_TA* InPreviewActor, const struct FScriptDelegate& Callback, struct U_Types_TA_FLoadoutData* InLoadout);
	void SequencerLog(const struct FString& LogStr);
	void EventSequenceComplete(class ULoadoutSequencer_TA* Sequencer);
};


// Class TAGame.GFxData_MapPrefs_TA
// 0x0058 (0x00F0 - 0x0098)
class UGFxData_MapPrefs_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxPlaylistType>                    PlaylistTypes;                                            // 0x0098(0x0010) (Edit, NeedCtorLink, DataBinding)
	TArray<struct FGFxMapType>                         MapTypes;                                                 // 0x00A8(0x0010) (Edit, NeedCtorLink, DataBinding)
	TArray<struct FGFxMapPlaylist>                     Playlists;                                                // 0x00B8(0x0010) (Edit, NeedCtorLink, DataBinding)
	TArray<struct FGFxMapPreference>                   Maps;                                                     // 0x00C8(0x0010) (Edit, NeedCtorLink, DataBinding)
	class UMapPrefsConfig_X*                           MapPrefsConfig;                                           // 0x00D8(0x0008) (Edit)
	class UMapPrefsSave_TA*                            MapPrefsSave;                                             // 0x00E0(0x0008) (Transient)
	class UMapsConfig_TA*                              MapsConfig;                                               // 0x00E8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MapPrefs_TA");
		return ptr;
	}


	void __GFxData_MapPrefs_TA__OnShellSet_339A87AB4B0DA5E9BF05ECAB86A75CA9(class UMapPrefsSave_TA* Save);
	class UProfile_TA* GetProfile();
	TArray<class UMapData_TA*> STATIC_FilterAndSortMaps(TArray<class UMapData_TA*> UnsortedMaps);
	void SavePrefs(const struct FPlaylistMapPrefs& Prefs);
	void SetMapPreference(const struct FName& PlaylistId, const struct FName& MapID, TEnumAsByte<EMapPrefType> Preference);
	void SetPlaylistOverrideGlobal(const struct FName& PlaylistId, bool bOverride);
	struct FName GetMapType(class UMapData_TA* Map);
	void AddPlaylistMapPrefs(const struct FName& PlaylistId, TArray<class UMapData_TA*> PlaylistMaps);
	void AddPlaylistData(const struct FName& PlaylistId, const struct FName& PlaylistTypeID, const struct FString& PlaylistLabel, TArray<class UMapData_TA*> PlaylistMaps);
	TArray<class UMapData_TA*> GetGlobalMaps();
	struct FString GetGlobalLabel();
	void InitMapPrefs();
	void HandleMapsConfigChange();
	void InitMapTypes();
	void InitPlaylistTypes();
	void OnShellSet();
};


// Class TAGame.GFxData_MatchAdmin_TA
// 0x0010 (0x00A8 - 0x0098)
class UGFxData_MatchAdmin_TA : public UGFxDataSingleton_X
{
public:
	unsigned long                                      bMatchAdmin : 1;                                          // 0x0098(0x0004) (Transient, DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	class APRI_TA*                                     PlayerPRI;                                                // 0x00A0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MatchAdmin_TA");
		return ptr;
	}


	void SetPaused(bool bNewPause);
	void SetScoreAndTime(int NewScoreTeam0, int NewScoreTeam1, int SecondsRemaining, bool bOverTime, bool bRestartRound);
	void HandleMatchAdmin(class APRI_TA* PRI);
	void HandlePRIReceived(class APlayerController_X* PC_X);
	class APlayerController_TA* GetPlayerController();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_MicroEvent_TA
// 0x000C (0x00A4 - 0x0098)
class UGFxData_MicroEvent_TA : public UGFxDataSingleton_X
{
public:
	class UMicroEventConfig_TA*                        MicroEvent;                                               // 0x0098(0x0008)
	unsigned long                                      bIsActive : 1;                                            // 0x00A0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_MicroEvent_TA");
		return ptr;
	}


	void UpdateActiveStatus();
	void HandleConfigChanged();
};


// Class TAGame.SeqEvent_MTXGarageBlueprintPreview_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_MTXGarageBlueprintPreview_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_MTXGarageBlueprintPreview_TA");
		return ptr;
	}


	void SetRevealRarity(TEnumAsByte<EProductQuality> InRarity);
};


// Class TAGame.RPC_MicroTransactions_FinalizePurchase_TA
// 0x0078 (0x0178 - 0x0100)
class URPC_MicroTransactions_FinalizePurchase_TA : public URPC_X
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0100(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_MicroTransactions_FinalizePurchase_TA.OrderId
	unsigned long                                      Authorized : 1;                                           // 0x0108(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	struct FUniqueNetId                                PlayerID;                                                 // 0x0110(0x0038)
	TArray<struct FOnlineProductData>                  Products;                                                 // 0x0148(0x0010) (Transient, NeedCtorLink)
	TArray<struct FCurrency>                           Currencies;                                               // 0x0158(0x0010) (Transient, NeedCtorLink)
	TArray<struct FCurrency>                           WalletCurrencies;                                         // 0x0168(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MicroTransactions_FinalizePurchase_TA");
		return ptr;
	}


	class URPC_MicroTransactions_FinalizePurchase_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_MicroTransactions_FinalizePurchase_TA* SetAuthorized(bool bAuthorized);
	class URPC_MicroTransactions_FinalizePurchase_TA* SetOrderID();
};


// Class TAGame.RPC_MicroTransactions_UnlockContainer_TA
// 0x0068 (0x0168 - 0x0100)
class URPC_MicroTransactions_UnlockContainer_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x10];                                      // 0x0138(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_MicroTransactions_UnlockContainer_TA.InstanceIDs
	unsigned char                                      UnknownData01[0x10];                                      // 0x0148(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_MicroTransactions_UnlockContainer_TA.KeyInstanceIDs
	TArray<struct FOnlineProductData>                  Drops;                                                    // 0x0158(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_MicroTransactions_UnlockContainer_TA");
		return ptr;
	}


	class URPC_MicroTransactions_UnlockContainer_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_MicroTransactions_UnlockContainer_TA* SetKeyIDs();
	class URPC_MicroTransactions_UnlockContainer_TA* SetContainerIDs();
};


// Class TAGame.GFxData_Notification_AchievementProgress_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_Notification_AchievementProgress_TA : public UGFxData_Notification_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Notification_AchievementProgress_TA");
		return ptr;
	}

};


// Class TAGame.Notification_AchievementProgress_TA
// 0x0018 (0x0120 - 0x0108)
class UNotification_AchievementProgress_TA : public UNotification_TA
{
public:
	int                                                Id;                                                       // 0x0108(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x010C(0x0004) MISSED OFFSET
	class UTexture*                                    Icon;                                                     // 0x0110(0x0008) (DataBinding)
	float                                              Progress;                                                 // 0x0118(0x0004) (DataBinding)
	float                                              MaxProgress;                                              // 0x011C(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Notification_AchievementProgress_TA");
		return ptr;
	}


	class UNotification_TA* SetTitle(const struct FString& InTitle);
	class UNotification_AchievementProgress_TA* SetMaxProgress(float InMaxProgress);
	class UNotification_AchievementProgress_TA* SetProgress(float InProgress);
	class UNotification_AchievementProgress_TA* SetIcon(class UTexture* InIcon);
	class UNotification_AchievementProgress_TA* SetID(int InID);
};


// Class TAGame.GFxData_Notification_AchievementUnlocked_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_Notification_AchievementUnlocked_TA : public UGFxData_Notification_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Notification_AchievementUnlocked_TA");
		return ptr;
	}

};


// Class TAGame.Notification_AchievementUnlocked_TA
// 0x0010 (0x0118 - 0x0108)
class UNotification_AchievementUnlocked_TA : public UNotification_TA
{
public:
	int                                                Id;                                                       // 0x0108(0x0004) (DataBinding)
	int                                                Points;                                                   // 0x010C(0x0004) (DataBinding)
	class UTexture*                                    Icon;                                                     // 0x0110(0x0008) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Notification_AchievementUnlocked_TA");
		return ptr;
	}


	class UNotification_TA* SetTitle(const struct FString& InTitle);
	class UNotification_AchievementUnlocked_TA* SetIcon(class UTexture* InIcon);
	class UNotification_AchievementUnlocked_TA* SetPoints(int InPoints);
	class UNotification_AchievementUnlocked_TA* SetID(int InID);
};


// Class TAGame.GFxData_PlatformAuth_TA
// 0x0020 (0x00B8 - 0x0098)
class UGFxData_PlatformAuth_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     SuccessTitle;                                             // 0x0098(0x0010) (Edit, Const, Localized, NeedCtorLink)
	struct FString                                     SuccessBody;                                              // 0x00A8(0x0010) (Edit, Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PlatformAuth_TA");
		return ptr;
	}


	void AlertSuccess();
	void HandleAuthSuccess(const struct FString& AuthToken);
	void RequestAccountAuthorization();
};


// Class TAGame.RPC_PlatformAuth_TA
// 0x0010 (0x0110 - 0x0100)
class URPC_PlatformAuth_TA : public URPC_X
{
public:
	struct FString                                     NintendoAccountID;                                        // 0x0100(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_PlatformAuth_TA");
		return ptr;
	}


	class UErrorType* OverrideErrorType(class UErrorType* ErrorType);
	class URPC_PlatformAuth_TA* SetAuthToken(const struct FString& Token);
};


// Class TAGame.PlayerReportConfig_TA
// 0x0010 (0x0088 - 0x0078)
class UPlayerReportConfig_TA : public UOnlineConfig_X
{
public:
	TArray<struct FPlayerReportReason>                 Reasons;                                                  // 0x0078(0x0010) (Edit, NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerReportConfig_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_PlayerTitles_TA
// 0x0028 (0x00C0 - 0x0098)
class UGFxData_PlayerTitles_TA : public UGFxDataSingleton_X
{
public:
	int                                                SelectedTitle;                                            // 0x0098(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	TArray<struct FPlayerTitleData>                    PlayerTitles;                                             // 0x00A0(0x0010) (NeedCtorLink, DataBinding)
	class UProfileLoadoutSave_TA*                      LoadoutSave;                                              // 0x00B0(0x0008) (Transient)
	class UPlayerTitleConfig_X*                        TitleConfig;                                              // 0x00B8(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PlayerTitles_TA");
		return ptr;
	}


	void __GFxData_PlayerTitles_TA__HandleSaveDataLoaded_7DBD2B03446112FFF806748DC5358B15(class USaveData_TA* SaveData);
	void __GFxData_PlayerTitles_TA__HandleLoadoutSaveLoaded_F3F310F54145D45596291FB36DDC0169();
	bool __GFxData_PlayerTitles_TA__GetOnlinePlayerTitles_AA12EE5D44EEBCD429DEA08EB8786B9A(const struct FPlayerTitleData& Title);
	bool __GFxData_PlayerTitles_TA__GetOnlinePlayerTitles_2654E1324EC703FFF43551990F7F718B(const struct FName& Title);
	struct FName __GFxData_PlayerTitles_TA__GetOnlinePlayerTitles_2D73CBEE4F26D874EEB1D1B6A98150BA(class UOnlineProduct_TA* Product);
	int SortTitles(const struct FPlayerTitleData& A, const struct FPlayerTitleData& B);
	TArray<struct FPlayerTitleData> GetOnlinePlayerTitles(TArray<class UOnlineProduct_TA*>* ArrayResultLocal_1473047749F53D4839354E84249DF8C7, TArray<struct FName>* MapLocal_03AA5684451013416E6AEC8E730002CD, TArray<struct FName>* FilterLocal_121042D54F10D3A96F227F848B2D4B2C, TArray<struct FPlayerTitleData>* MapLocal_34FFC3D7448FB2A1A054CDB2F39D4ACA, TArray<struct FPlayerTitleData>* FilterLocal_83CD829940739D1F745EC79BDE8FB36E, TArray<struct FPlayerTitleData>* DistinctLocal_35745C2D4B59F6E0AD99B58F689F70B7, TArray<struct FPlayerTitleData>* SortLocal_1B13607849C0BAA6EC1159B4DEA1E743);
	TArray<struct FPlayerTitleData> GetPlayerTitles();
	struct FPlayerTitleData GetTitleData(const struct FName& TitleId);
	void SetPlayerTitle(const struct FName& Title);
	void UpdateSelectedTitle(const struct FName& Title);
	void UpdatePlayerTitles();
	void HandleNewOnlineProduct(class USaveData_TA* SaveData, class UOnlineProduct_TA* OnlineProduct);
	void HandleLoadoutSaveLoaded(class UProfileLoadoutSave_TA* InSave);
	void HandleProfileSet(class ULocalPlayer_TA* P);
	void HandleSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* InSaveData, class UError* Error);
	void OnShellSet();
};


// Class TAGame.GFxData_ProductLevelUpgrade_TA
// 0x0028 (0x00C0 - 0x0098)
class UGFxData_ProductLevelUpgrade_TA : public UGFxDataSingleton_X
{
public:
	int                                                ProductLevel;                                             // 0x0098(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x009C(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_ProductLevelUpgrade_TA.ProductInstanceID
	TArray<struct FProductLevelData>                   Levels;                                                   // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	class UGFxModal_X*                                 ModalProcessing;                                          // 0x00B8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductLevelUpgrade_TA");
		return ptr;
	}


	class UProfile_TA* GetProfile();
	void OnProductUpgradeFailed();
	void OnProductUpgradeComplete();
	void HandleLevelUpgradeComplete(class URPC_ProductUpgradeLevel_TA* RPC);
	void UpgradeToLevel(int DesiredLevel);
	void InitProductData(const struct FProductHashID& HashID);
};


// Class TAGame.RPC_ProductUpgradeLevel_TA
// 0x0068 (0x0168 - 0x0100)
class URPC_ProductUpgradeLevel_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_ProductUpgradeLevel_TA.InstanceID
	int                                                DesiredLevel;                                             // 0x0140(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	TArray<struct FOnlineProductData>                  ReceivedProducts;                                         // 0x0148(0x0010) (Transient, NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   Products;                                                 // 0x0158(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductUpgradeLevel_TA");
		return ptr;
	}


	void OnComplete();
	class URPC_ProductUpgradeLevel_TA* SetDesiredLevel(int Level);
	class URPC_ProductUpgradeLevel_TA* SetInstanceID();
	class URPC_ProductUpgradeLevel_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxData_ProductSlotUnlocks_TA
// 0x0010 (0x00A8 - 0x0098)
class UGFxData_ProductSlotUnlocks_TA : public UGFxDataSingleton_X
{
public:
	int                                                MatchesPlayed;                                            // 0x0098(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x009C(0x0004) MISSED OFFSET
	class USaveData_TA*                                SaveData;                                                 // 0x00A0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductSlotUnlocks_TA");
		return ptr;
	}


	int GetMatchesRequiredToUnlock(int SlotIndex);
	void HandleProductsOfflineSaveLoaded(class UProductsOfflineSave_TA* ProductsOfflineSave);
	void HandleSaveDataLoaded(class USaveGameManager_TA* Manager, class USaveData_TA* MySaveData, class UError* Error);
	void OnShellSet();
};


// Class TAGame.GFxData_PsyTag_TA
// 0x0058 (0x00F0 - 0x0098)
class UGFxData_PsyTag_TA : public UGFxDataSingleton_X
{
public:
	struct FString                                     PsyTagName;                                               // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	int                                                PsyTagCode;                                               // 0x00A8(0x0004) (DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00AC(0x0004) MISSED OFFSET
	class URPC_SearchPsyTag_X*                         SearchRPC;                                                // 0x00B0(0x0008)
	unsigned long                                      bSearching : 1;                                           // 0x00B8(0x0004) (DataBinding)
	unsigned long                                      bShowPsyTags : 1;                                         // 0x00B8(0x0004) (DataBinding)
	int                                                SearchPage;                                               // 0x00BC(0x0004) (DataBinding)
	struct FString                                     SearchName;                                               // 0x00C0(0x0010) (NeedCtorLink, DataBinding)
	int                                                SearchCode;                                               // 0x00D0(0x0004) (DataBinding)
	unsigned char                                      UnknownData01[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	class UOnlinePlayerAuthentication_X*               PlayerAuth;                                               // 0x00D8(0x0008)
	TArray<struct FGFxPsyTagSearchResult>              SearchResults;                                            // 0x00E0(0x0010) (NeedCtorLink, DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PsyTag_TA");
		return ptr;
	}


	void __GFxData_PsyTag_TA__SendSearchRPC_8672C7B342877BF084C853A065ADB823(class URPC_X* _);
	struct FGFxPsyTagSearchResult __GFxData_PsyTag_TA__HandleSearchComplete_D8682BEF4DAA794447D1A5A6135A5370(class UPsyTagSearchResult_X* Player, struct FGFxPsyTagSearchResult* StructInitializer_228F49D544F56C19853DD68CB710D110);
	void OnSearchComplete(const struct FString& Error);
	void CreatePsyTagPersona(class UPsyTagSearchResult_X* Result);
	void HandleSearchComplete(TArray<struct FGFxPsyTagSearchResult>* MapLocal_3C99251B428A44CAC7F8389BD82D84AD);
	void SendSearchRPC();
	void SearchNextPage();
	void Search(const struct FString& TagName, int TagCode);
	void OnTagClaimComplete(const struct FString& Error);
	void SetPsyTag(const struct FPsyTag& PsyTag);
	void HandlePsyTagClaimComplete(class UPsyTagCheckResult_X* CheckResult, class UError* TaskError);
	void ClaimTag(const struct FString& TagName);
	void HandleGameplaySettings(class UGameplaySettingsSave_TA* Save);
	void HandleLoginChanged(class UOnlinePlayerAuthentication_X* Auth);
	void OnShellSet();
};


// Class TAGame.GFxData_QuickChatBindings_TA
// 0x0048 (0x00E0 - 0x0098)
class UGFxData_QuickChatBindings_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FLocalizedQuickChat>                 AllQuickChats;                                            // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FLocalizedQuickChatBinding>          Bindings;                                                 // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FName>                               QuickChats;                                               // 0x00B8(0x0010) (Edit, NeedCtorLink)
	TArray<struct FName>                               PostGameQuickChats;                                       // 0x00C8(0x0010) (Edit, NeedCtorLink)
	class UProfileQuickChatSave_TA*                    QuickChatSave;                                            // 0x00D8(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_QuickChatBindings_TA");
		return ptr;
	}


	int SortQuickChat(const struct FName& Value1, const struct FName& Value2);
	void GenerateBindings();
	void OnBindingsReset();
	void ResetBindings();
	void ChangeBinding(int Index, const struct FName& Message);
	void HandleSaveLoaded(class UProfileQuickChatSave_TA* InSave);
	void OnShellSet();
};


// Class TAGame.GFxData_RedeemCodes_TA
// 0x0028 (0x00C0 - 0x0098)
class UGFxData_RedeemCodes_TA : public UGFxDataSingleton_X
{
public:
	class UAsyncTask*                                  RedeemTask;                                               // 0x0098(0x0008) (Transient)
	struct FString                                     RedeemingTitleString;                                     // 0x00A0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     RedeemingBodyString;                                      // 0x00B0(0x0010) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_RedeemCodes_TA");
		return ptr;
	}


	void __GFxData_RedeemCodes_TA__Redeem_70A004AF4BF005FC36637BBB41056A0D(class UError* _);
	void __GFxData_RedeemCodes_TA__Redeem_7AA161F54051A4FA16BAAB88AE1C11B5(class URPC_RedeemCode_TA* RPC);
	void __GFxData_RedeemCodes_TA__Redeem_76403B6A45199A225243ACAD55749924(class URPC_RedeemCode_TA* RPC);
	void Redeem(const struct FString& InCode);
};


// Class TAGame.RPC_RedeemCode_TA
// 0x0058 (0x0158 - 0x0100)
class URPC_RedeemCode_TA : public URPC_X
{
public:
	struct FString                                     Code;                                                     // 0x0100(0x0010) (NeedCtorLink)
	struct FUniqueNetId                                PlayerID;                                                 // 0x0110(0x0038)
	TArray<struct FOnlineProductData>                  Drops;                                                    // 0x0148(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_RedeemCode_TA");
		return ptr;
	}


	class UErrorType* OverrideErrorType(class UErrorType* ErrorType);
	class URPC_RedeemCode_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_RedeemCode_TA* SetCode(const struct FString& InCode);
};


// Class TAGame.GFxData_RewardDrop_TA
// 0x0008 (0x00A0 - 0x0098)
class UGFxData_RewardDrop_TA : public UGFxDataSingleton_X
{
public:
	class UObjectProvider*                             RewardDrops;                                              // 0x0098(0x0008) (ExportObject, Transient, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_RewardDrop_TA");
		return ptr;
	}


	void __GFxData_RewardDrop_TA__OnShellSet_0BBDD4C04E5150B3B285A38DAC625088(class UObject* _);
	void OnAllDropsHandled();
	void OnReceivedDrop();
	void ClearDrops();
	void GetNextDrop();
	bool HasDrops();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_RewardDrop_XP_TA
// 0x0004 (0x00A4 - 0x00A0)
class UGFxData_RewardDrop_XP_TA : public UGFxData_RewardDrop_TA
{
public:
	unsigned long                                      bCanDropOnlineRewards : 1;                                // 0x00A0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_RewardDrop_XP_TA");
		return ptr;
	}


	void __GFxData_RewardDrop_XP_TA__OnShellSet_84C75DE94EC91A754D6BD58BC81904E9(class AGameEvent_Soccar_TA* SoccarGame);
	void __GFxData_RewardDrop_XP_TA__OnShellSet_43B5E66B4578ABE6CE89B890717B1799();
	void SetTotalGainedRTPC(float Value);
	void SetBarPercentageRTPC(float Value);
	void OnShellSet();
};


// Class TAGame.GFxData_RewardDrops_TA
// 0x00A4 (0x013C - 0x0098)
class UGFxData_RewardDrops_TA : public UGFxDataSingleton_X
{
public:
	struct FName                                       RewardName;                                               // 0x0098(0x0008) (DataBinding)
	int                                                Total;                                                    // 0x00A0(0x0004) (DataBinding)
	int                                                Base;                                                     // 0x00A4(0x0004) (DataBinding)
	int                                                BaseLevel;                                                // 0x00A8(0x0004) (DataBinding)
	int                                                Level;                                                    // 0x00AC(0x0004) (DataBinding)
	TArray<struct FGFxLevelThreshold>                  LevelThresholds;                                          // 0x00B0(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FOnlineXPModifier>                   Modifiers;                                                // 0x00C0(0x0010) (NeedCtorLink, DataBinding)
	class UObjectProvider*                             RewardDrops;                                              // 0x00D0(0x0008) (ExportObject, Transient, Component, EditInline)
	TArray<struct FName>                               PremiumModifierNames;                                     // 0x00D8(0x0010) (Edit, NeedCtorLink)
	TArray<struct FName>                               PenaltyModifierNames;                                     // 0x00E8(0x0010) (Edit, NeedCtorLink)
	struct FName                                       WeeklyCapReached;                                         // 0x00F8(0x0008) (Const)
	struct FName                                       WeeklyWinsCapReached;                                     // 0x0100(0x0008) (Const)
	struct FString                                     RewardModifiers_SectionName;                              // 0x0108(0x0010) (Const, NeedCtorLink)
	struct FString                                     RewardModifiers_PackageName;                              // 0x0118(0x0010) (Const, NeedCtorLink)
	struct FName                                       WeeklyCap;                                                // 0x0128(0x0008) (Const)
	struct FName                                       RestXP;                                                   // 0x0130(0x0008) (Const)
	unsigned long                                      bCanDropOnlineRewards : 1;                                // 0x0138(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_RewardDrops_TA");
		return ptr;
	}


	void __GFxData_RewardDrops_TA__OnShellSet_71264B1D4980850B596A468E9B4A10B6(class AGameEvent_Soccar_TA* SoccarGame);
	void __GFxData_RewardDrops_TA__OnShellSet_030EE789437C5B135979D68E258DDC6B();
	void __GFxData_RewardDrops_TA__OnShellSet_785BA41F49D1D500E37019B331F79CEF(class UObject* _);
	int GetTotalRewardPips();
	bool ShouldShowRewards();
	void SetBarPercentageRTPC(float Value);
	void SetTotalGainedRTPC(float Value);
	void OnAllRewardsHandled();
	void SetAllRewardsHandled();
	void GetNextReward();
	void OnReceivedReward();
	bool HasRewards();
	struct FString LocalizeModifier(const struct FOnlineXPModifier& Modifier);
	void UpdatePIPReward(class URewardDrop_PIP_TA* PIP);
	void UpdateXPReward(class URewardDrop_XP_TA* XP);
	void UpdateRewardData();
	void OnRewardAddedToQueue();
	void OnShellSet();
};


// Class TAGame.GFxData_RocketPass_TA
// 0x00A0 (0x0138 - 0x0098)
class UGFxData_RocketPass_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FRocketPassProduct>                  FreeRewards;                                              // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FRocketPassProduct>                  PremiumRewards;                                           // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FRocketPassProduct>                  PrestigeRewards;                                          // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FRocketPassXPReward>                 PremiumXPRewards;                                         // 0x00C8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FRocketPassCurrencyReward>           PremiumCurrencyRewards;                                   // 0x00D8(0x0010) (NeedCtorLink, DataBinding)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00E8(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_RocketPass_TA.StartTime
	unsigned char                                      UnknownData01[0x8];                                       // 0x00F0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.GFxData_RocketPass_TA.EndTime
	class UOnlineProductStoreSet_TA*                   RocketPassSet;                                            // 0x00F8(0x0008) (ExportObject, Transient, Component, EditInline)
	class UAsyncTask*                                  PendingMasterTask;                                        // 0x0100(0x0008) (Transient)
	struct FString                                     RegionRestrictedPurchaseTiers;                            // 0x0108(0x0010) (Const, Localized, NeedCtorLink)
	struct FName                                       MainMenuName;                                             // 0x0118(0x0008) (Const)
	struct FName                                       RocketPassMenuName;                                       // 0x0120(0x0008) (Const)
	class URocketPass_TA*                              RocketPass;                                               // 0x0128(0x0008) (Edit, Transient)
	class URocketPassConfig_TA*                        RocketPassConfig;                                         // 0x0130(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_RocketPass_TA");
		return ptr;
	}


	void __GFxData_RocketPass_TA__HandleRocketPassChange_2520ED694B0996E7FF31B49FF01EC7DA();
	void __GFxData_RocketPass_TA__HandleRocketPassChange_A984DB1048FBA426B356A486C2860610();
	void __GFxData_RocketPass_TA__HandleRocketPassChange_AFD83D214E48DA568DB63C9C31BFF6EF();
	void __GFxData_RocketPass_TA__CanOpenMenu_BAC280D247517583D753DB98D5261A99();
	void HandleError(class UError* InError);
	void OnCanOpenMenu();
	bool CanOpenMenu();
	void RequestPrestigeRewards();
	void UpdateRewards(TArray<struct FRocketPassRewardData>* RewardData, TArray<struct FRocketPassProduct>* OutProducts, TArray<struct FRocketPassXPReward>* OutXPRewards, TArray<struct FRocketPassCurrencyReward>* OutCurrencyRewards, struct FOnlineProductData* StructInitializer_D1EEE73E4DE27DCD7665989AFF933F58, struct FRocketPassCurrencyReward* StructInitializer_A74ACDF949B59307EB38D4AC5B734826);
	void PurchaseTiers(int PurchasableID);
	void PurchasePremium(int PurchasableID);
	void HandleRocketPassConfigChange();
	void HandleRocketPassInfoChanged(class URocketPass_TA* InRocketPass);
	void HandleTopMenuChanged(const struct FName& PrevMenu, const struct FName& NewMenu);
	void HandleRocketPassChange(class URocketPass_TA* InRocketPass);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_SchematicTradeIn_TA
// 0x0030 (0x00C8 - 0x0098)
class UGFxData_SchematicTradeIn_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FSchematicResourceData>              Schematics;                                               // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	class UGFxModal_X*                                 ModalProcessing;                                          // 0x00A8(0x0008) (Transient)
	struct FString                                     InvalidProductString;                                     // 0x00B0(0x0010) (Const, Localized, NeedCtorLink)
	int                                                MinResources;                                             // 0x00C0(0x0004)
	int                                                MaxResources;                                             // 0x00C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_SchematicTradeIn_TA");
		return ptr;
	}


	class UProfile_TA* GetProfile();
	int GetRemainingResources();
	bool IsProcessingTrade();
	void OnSchematicTradeInFailed();
	void OnSchematicTradeInComplete();
	void HandleTradeInComplete(class URPC_SchematicsTradeIn_TA* RPC);
	void SetSchematicResource(int Amount);
	void IncrementSchematicResource(int Amount);
	void RemoveSchematic();
	bool AddSchematic();
	void TradeIn();
};


// Class TAGame.RPC_SchematicsTradeIn_TA
// 0x0090 (0x0190 - 0x0100)
class URPC_SchematicsTradeIn_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_SchematicsTradeIn_TA.CrateID
	TArray<struct FSchematicResourceData>              Schematics;                                               // 0x0140(0x0010) (NeedCtorLink)
	TArray<struct FOnlineProductData>                  Drops;                                                    // 0x0150(0x0010) (Transient, NeedCtorLink)
	TArray<struct FOnlineProductData>                  CrateDrops;                                               // 0x0160(0x0010) (Transient, NeedCtorLink)
	unsigned char                                      UnknownData01[0x10];                                      // 0x0170(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.RPC_SchematicsTradeIn_TA.ConsumedInstanceIDs
	TArray<class UOnlineProduct_TA*>                   Products;                                                 // 0x0180(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_SchematicsTradeIn_TA");
		return ptr;
	}


	void OnComplete();
	class URPC_SchematicsTradeIn_TA* SetSchematics(TArray<struct FSchematicResourceData>* InSchematics);
	class URPC_SchematicsTradeIn_TA* SetCrateID();
	class URPC_SchematicsTradeIn_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxData_ShopAds_TA
// 0x0008 (0x00A0 - 0x0098)
class UGFxData_ShopAds_TA : public UGFxDataSingleton_X
{
public:
	class UShopAdsConfig_TA*                           Config;                                                   // 0x0098(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ShopAds_TA");
		return ptr;
	}


	void HandleConfigChanged();
};


// Class TAGame.ShopItemExpirationHelper_TA
// 0x0028 (0x0088 - 0x0060)
class UShopItemExpirationHelper_TA : public UObject
{
public:
	unsigned char                                      UnknownData00[0x10];                                      // 0x0060(0x0010) UNKNOWN PROPERTY: ArrayProperty TAGame.ShopItemExpirationHelper_TA.ShopItemExpirations
	struct FScriptDelegate                             __EventShopItemExpired__Delegate;                         // 0x0070(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0070(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ShopItemExpirationHelper_TA");
		return ptr;
	}


	void __ShopItemExpirationHelper_TA__UpdateExpirations_04D9D12246E294572A4298B39DC52C5B(const struct FShopItem& Item);
	bool __ShopItemExpirationHelper_TA__UpdateExpirations_D7A308644EE10F320AFE878466A1BC09(const struct FShopItem& Item);
	void HandleItemExpired();
	void UpdateExpirationTimer();
	void UpdateExpirations(TArray<struct FShopItem>* ShopItems, TArray<struct FShopItem>* FilterLocal_BACE8FAD44789FF174414CA0C54DD691);
	void ClearShopItems();
	void SetShopItems(TArray<struct FShopItem> ShopItems);
	void EventShopItemExpired(class UShopItemExpirationHelper_TA* ShopExpirationHelper);
};


// Class TAGame.ShopAutoLoadHelper_TA
// 0x0048 (0x00A8 - 0x0060)
class UShopAutoLoadHelper_TA : public UObject
{
public:
	int                                                SyncRequestRange;                                         // 0x0060(0x0004) (Config)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	class URetryDelayer_X*                             AutoLoadDelayer;                                          // 0x0068(0x0008) (ExportObject, Component, EditInline)
	class UAsyncTask*                                  AutoLoadAsyncTask;                                        // 0x0070(0x0008) (Transient)
	TArray<struct FShopItem>                           AutoLoadedItems;                                          // 0x0078(0x0010) (Transient, NeedCtorLink)
	class UShopItemExpirationHelper_TA*                AutoLoadExpirationHelper;                                 // 0x0088(0x0008)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0090(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.ShopAutoLoadHelper_TA.MinEndDateOffset
	unsigned char                                      UnknownData02[0x8];                                       // 0x0098(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.ShopAutoLoadHelper_TA.MaxEndDateOffset
	unsigned char                                      UnknownData03[0x8];                                       // 0x00A0(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.ShopAutoLoadHelper_TA.RandomEndDateOffset

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ShopAutoLoadHelper_TA");
		return ptr;
	}


	void __ShopAutoLoadHelper_TA__Construct_2E755DBD43B06CB6B251B8B10D189B48(class UShopItemExpirationHelper_TA* _);
	void __ShopAutoLoadHelper_TA__Construct_054709A44C41DBC970A547A52D855670(class UShopItemExpirationHelper_TA* _);
	void __ShopAutoLoadHelper_TA__CheckAutoLoadSucceeded_B317104945A168C68BAA15B2E7F1CECC(class UError* _);
	bool STATIC___ShopAutoLoadHelper_TA__HasExpiredItems_2833A1684858B2CAC765BA95814DD236(const struct FShopItem& Item);
	bool STATIC___ShopAutoLoadHelper_TA__HasExpiredItems_2049B30E45792E2BA6941B8059466EEA(const struct FShopItem& Item);
	void OnLoadedChanged();
	void OnAutoReloadChanged();
	void RefreshAutoLoadedItems();
	bool LoadInProgress();
	bool STATIC_HasExpiredItems(TArray<struct FShopItem>* InItems, TArray<struct FShopItem>* FilterLocal_5C75EDA74530576A4405E997594EF7C4);
	TArray<struct FShopItem> STATIC_ApplyEndDateOffset(TArray<struct FShopItem>* InItems);
	void HandleShopItemExpired();
	void HandleAutoLoadAbandoned();
	void HandleAutoLoadFailed(class UError* Error);
	void CheckAutoLoadSucceeded(TArray<struct FShopItem> InAutoLoadedItems);
	void AutoLoadCatalogue();
	TArray<struct FShopItem> GetShopItems();
	void Construct(TArray<float>* ArrayInitializer_058CBD9E4F4CED296D209B86F058C5FA);
};


// Class TAGame.ShopMetrics_TA
// 0x0014 (0x0094 - 0x0080)
class UShopMetrics_TA : public UMetricsGroup_X
{
public:
	TArray<struct FShopTabData>                        CurrentShopTabMetrics;                                    // 0x0080(0x0010) (NeedCtorLink)
	int                                                CurrentBrowseSourceID;                                    // 0x0090(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ShopMetrics_TA");
		return ptr;
	}


	void ShopSessionEnded(int BrowseSourceID, TArray<struct FShopTabData> ShopTabMetrics);
	void PreviewedShopItem(int ShopItemID, struct FShopItemData* StructInitializer_224F4C224B5A0525C8E0D1982BC25A22);
	void ShopIDChanged(int FromShopID, int NewShopID, struct FShopTabData* StructInitializer_CFD4B64041109F5216FA97831385E831);
};


// Class TAGame.ShopsConfig_TA
// 0x0004 (0x007C - 0x0078)
class UShopsConfig_TA : public UOnlineConfig_X
{
public:
	int                                                DebugShopID;                                              // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ShopsConfig_TA");
		return ptr;
	}

};


// Class TAGame.TourBracketSync_TA
// 0x0058 (0x00B8 - 0x0060)
class UTourBracketSync_TA : public UObject
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0060(0x0008) (Edit)
	float                                              PollIntervalSeconds;                                      // 0x0068(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	struct FUniqueNetId                                PlayerID;                                                 // 0x0070(0x0038) (Transient)
	class UTourSettings_TA*                            Settings;                                                 // 0x00A8(0x0008) (Transient)
	class UAsyncTask*                                  GetBracketTask;                                           // 0x00B0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourBracketSync_TA");
		return ptr;
	}


	void __TourBracketSync_TA__SendRequest_00E0FF7E4A38350D0FF93CB7A876B601(class UError* _);
	void SendRequest();
	void Deactivate();
	void Start(const struct FUniqueNetId& InPlayerId, class UTourSettings_TA* InSettings);
};


// Class TAGame.GFxData_TourBracketMatch_TA
// 0x0034 (0x00C8 - 0x0094)
class UGFxData_TourBracketMatch_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	int                                                MatchID;                                                  // 0x0098(0x0004) (DataBinding)
	int                                                Round;                                                    // 0x009C(0x0004) (DataBinding)
	int                                                Order;                                                    // 0x00A0(0x0004) (DataBinding)
	int                                                NextMatch;                                                // 0x00A4(0x0004) (DataBinding)
	int                                                PrevMatchA;                                               // 0x00A8(0x0004) (DataBinding)
	int                                                PrevMatchB;                                               // 0x00AC(0x0004) (DataBinding)
	int                                                TeamA;                                                    // 0x00B0(0x0004) (DataBinding)
	int                                                TeamB;                                                    // 0x00B4(0x0004) (DataBinding)
	int                                                TeamAWins;                                                // 0x00B8(0x0004) (DataBinding)
	int                                                TeamBWins;                                                // 0x00BC(0x0004) (DataBinding)
	int                                                WinnerTeam;                                               // 0x00C0(0x0004) (DataBinding)
	unsigned long                                      bInProgress : 1;                                          // 0x00C4(0x0004) (DataBinding)
	unsigned long                                      bCanSpectate : 1;                                         // 0x00C4(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourBracketMatch_TA");
		return ptr;
	}


	void CreateGames(TArray<struct FTourMatchGame>* Games);
	void SetMatch(struct FTourMatch* MatchData);
};


// Class TAGame.GFxData_TourBracketGame_TA
// 0x0020 (0x00B4 - 0x0094)
class UGFxData_TourBracketGame_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	int                                                MatchID;                                                  // 0x0098(0x0004) (DataBinding)
	int                                                GameNum;                                                  // 0x009C(0x0004) (DataBinding)
	int                                                TeamScore0;                                               // 0x00A0(0x0004) (DataBinding)
	int                                                TeamScore1;                                               // 0x00A4(0x0004) (DataBinding)
	int                                                GameTimeSeconds;                                          // 0x00A8(0x0004) (DataBinding)
	unsigned long                                      bOverTime : 1;                                            // 0x00AC(0x0004) (DataBinding)
	int                                                WinnerTeam;                                               // 0x00B0(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourBracketGame_TA");
		return ptr;
	}


	void SetGame(int InMatchID, int InGameNum, struct FTourMatchGame* MatchGame);
};


// Class TAGame.GFxData_TourCheckInError_TA
// 0x0008 (0x00A0 - 0x0098)
class UGFxData_TourCheckInError_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0098(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourCheckInError_TA");
		return ptr;
	}


	void EndUpdate();
	void BeginUpdate();
};


// Class TAGame.GFxData_TourConfig_TA
// 0x0008 (0x00A0 - 0x0098)
class UGFxData_TourConfig_TA : public UGFxDataSingleton_X
{
public:
	class UTourConfig_TA*                              Config;                                                   // 0x0098(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourConfig_TA");
		return ptr;
	}


	void HandleConfigChange();
};


// Class TAGame.GFxData_TourPlatforms_TA
// 0x0030 (0x00C8 - 0x0098)
class UGFxData_TourPlatforms_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FGFxTourPlatformGroup>               Groups;                                                   // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	class UOnlineSubsystem*                            OnlineSub;                                                // 0x00A8(0x0008) (Edit)
	struct FScriptDelegate                             __EventSelectionChange__Delegate;                         // 0x00B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x00B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourPlatforms_TA");
		return ptr;
	}


	bool __GFxData_TourPlatforms_TA__InitPlatformGroups_17C722794110088305F9D89DCEE16B30(const struct FCrossplayGroup& G);
	bool __GFxData_TourPlatforms_TA__CreateGFxGroup_3B15A67B4FFFC4DD7DE67DAA22C35035(TEnumAsByte<EOnlinePlatform> P);
	bool __GFxData_TourPlatforms_TA__GetSelectedPlatforms_A6CD2D2F439E3B0DD1D05FBA1E2D4719(const struct FGFxTourPlatformGroup& P);
	void SetSelected(int Row, bool bSelected);
	void SelectRow(int Row);
	int FindPlatformIndex(TArray<TEnumAsByte<EOnlinePlatform>>* InPlatforms);
	bool STATIC_CompareOnlinePlatforms(TArray<TEnumAsByte<EOnlinePlatform>> Right, TArray<TEnumAsByte<EOnlinePlatform>>* Left);
	struct FString BuildPlatformLabel(TArray<TEnumAsByte<EOnlinePlatform>> Group, TArray<struct FString>* MapLocal_3351248842F662956E6F859FDC6FC57B);
	TArray<TEnumAsByte<EOnlinePlatform>> GetSelectedPlatforms();
	void SetSelectedPlatforms(TArray<TEnumAsByte<EOnlinePlatform>>* SelectedPlatforms);
	struct FGFxTourPlatformGroup CreateGFxGroup(const struct FCrossplayGroup& CrossplayGroup, TArray<TEnumAsByte<EOnlinePlatform>>* FilterLocal_465233BC4071293DB8076988B970C28B);
	void InitPlatformGroups(class UCrossplayConfig_X* CrossplayConfig, TArray<struct FCrossplayGroup>* FilterLocal_677D091A45D594EACBE77D8CB36D7B9E, struct FGFxTourPlatformGroup* StructInitializer_C67C2E9949798F9CF095EFAA8BF30C8B, TArray<struct FGFxTourPlatformGroup>* MapLocal_BB2FE8B340FDA5439EA32BA9DE7740DF, struct FGFxTourPlatformGroup* StructInitializer_DFA659984F6E93289D0FC088B650F5F1, TArray<TEnumAsByte<EOnlinePlatform>>* ArrayInitializer_4717452943C56B127E72F0ADD53C21AB);
	void OnShellSet();
	void EventSelectionChange(class UGFxData_TourPlatforms_TA* GFxPlatforms, TArray<TEnumAsByte<EOnlinePlatform>> NewPlatforms);
};


// Class TAGame.GFxData_TourDetails_TA
// 0x0054 (0x00EC - 0x0098)
class UGFxData_TourDetails_TA : public UGFxDataSingleton_X
{
public:
	class UTourSettings_TA*                            Settings;                                                 // 0x0098(0x0008) (Transient)
	class UOnlineProductStoreSet_TA*                   OnlineProductSet;                                         // 0x00A0(0x0008) (ExportObject, Transient, Component, EditInline)
	class UTourDetailsSync_TA*                         DetailsSync;                                              // 0x00A8(0x0008)
	class UTourSettings_TA*                            TourSettings;                                             // 0x00B0(0x0008)
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x00B8(0x0008) (Edit)
	TArray<struct FGFxTournamentReward>                Rewards;                                                  // 0x00C0(0x0010) (Edit, NeedCtorLink, DataBinding)
	class UTexture*                                    CreatorAvatar;                                            // 0x00D0(0x0008) (DataBinding)
	struct FString                                     CreatorPlatform;                                          // 0x00D8(0x0010) (NeedCtorLink, DataBinding)
	unsigned long                                      bRegistered : 1;                                          // 0x00E8(0x0004) (DataBinding)
	unsigned long                                      bAdmin : 1;                                               // 0x00E8(0x0004) (DataBinding)
	unsigned long                                      bCanCheckIn : 1;                                          // 0x00E8(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourDetails_TA");
		return ptr;
	}


	void __GFxData_TourDetails_TA__LogTournamentNotFound_60797A7E47EDF24D279CDB9D9FBF4D53(class UTourSettings_TA* T);
	void __GFxData_TourDetails_TA__Update_B90187C14E96D25C9E91A59C71AF9733(const struct FUniqueNetId& InPlayerId, class UTexture* InAvatar, const struct FString& OnlinePlayerName);
	TArray<int> GetSeriesRoundLengths();
	void HandleSubscriptionChanged(class UTourSubscriptions_TA* Subscriptions);
	void UpdateCheckInWindow();
	void HandleTourAdded(class UTourSettings_TA* NewSettings);
	void HandleCheckInWindowChange(class UTourCheckInWindowWatcher_TA* Watcher, class UTourSettings_TA* InSettings);
	void HandleRewardsComplete(TArray<struct FTourReward> InRewards);
	void HandleError(class UError* Error);
	void MenuClosed();
	void Update(TArray<struct FUniqueNetId>* ArrayInitializer_A0D688724E43691DEDA73C8EB0B58B98, TArray<TEnumAsByte<EOnlinePlatform>>* MapLocal_5157F3DA4F178AC2D80009B7C0AB82CA);
	void LogTournamentNotFound();
	void SetProxy(class UObject* InProxyObject);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.TourDetailsSync_TA
// 0x0058 (0x00B8 - 0x0060)
class UTourDetailsSync_TA : public UObject
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0060(0x0008) (Edit)
	float                                              PollIntervalSeconds;                                      // 0x0068(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x006C(0x0004) MISSED OFFSET
	struct FUniqueNetId                                PlayerID;                                                 // 0x0070(0x0038) (Transient)
	class UTourSettings_TA*                            Settings;                                                 // 0x00A8(0x0008) (Transient)
	class UAsyncTask*                                  GetBracketTask;                                           // 0x00B0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourDetailsSync_TA");
		return ptr;
	}


	void __TourDetailsSync_TA__SendRequest_024D798B48C43CDF61C310B66FAD9F60(class UError* _);
	bool __TourDetailsSync_TA__UpdateTeamsRegistered_F3693F05435F0874521DF68B6367CFAD(const struct FTourTeam& T);
	void UpdateTeamsRegistered(struct FTourBracket* Bracket);
	void HandleGetBracket(struct FTourBracket* Bracket);
	void SendRequest();
	void Deactivate();
	void Start(const struct FUniqueNetId& InPlayerId, class UTourSettings_TA* InSettings);
};


// Class TAGame.GFxData_TourRegistration_TA
// 0x0008 (0x00A0 - 0x0098)
class UGFxData_TourRegistration_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0098(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourRegistration_TA");
		return ptr;
	}


	void __GFxData_TourRegistration_TA__Register_E5EDC11E4F127C6FBDDD6F8856AB3168(class UTourSettings_TA* T);
	void OnRegistrationComplete();
	void HandleError(class UError* Error);
	void Register();
};


// Class TAGame.RPC_TourGetPublic_TA
// 0x00B8 (0x01B8 - 0x0100)
class URPC_TourGetPublic_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	struct FTourSearchSettings                         Search;                                                   // 0x0138(0x0060) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        TeamMembers;                                              // 0x0198(0x0010) (NeedCtorLink)
	TArray<class UTourSettings_TA*>                    Tournaments;                                              // 0x01A8(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourGetPublic_TA");
		return ptr;
	}


	class URPC_TourGetPublic_TA* SetTeamMembers(TArray<struct FUniqueNetId> InTeamMembers);
	class URPC_TourGetPublic_TA* SetSettings(struct FTourSearchSettings* InSettings);
	class URPC_TourGetPublic_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.GFxData_TourSearchResult_TA
// 0x0000 (0x00A0 - 0x00A0)
class UGFxData_TourSearchResult_TA : public UGFxData_TourSubscription_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourSearchResult_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_TourSpectate_TA
// 0x0040 (0x00D8 - 0x0098)
class UGFxData_TourSpectate_TA : public UGFxDataSingleton_X
{
public:
	class UOnlineGameTournaments_TA*                   Tournaments;                                              // 0x0098(0x0008) (Edit)
	struct FString                                     MatchNotAvailable;                                        // 0x00A0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     SearchingTitle;                                           // 0x00B0(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     SearchingBody;                                            // 0x00C0(0x0010) (Const, Localized, NeedCtorLink)
	class UAsyncTask*                                  ActiveTask;                                               // 0x00D0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourSpectate_TA");
		return ptr;
	}


	void HandleJoinGameComplete(bool bSuccess, const struct FString& FailReason);
	void __GFxData_TourSpectate_TA__HandleGetMatchServer_E4911E91450B2FBE78E4678CF6136DC6();
	class UOnlineGameJoinGame_X* GetJoinGame();
	void HandleSearchError(const struct FString& msg);
	void HandleGetMatchServer(const struct FServerReservationData& Reservation);
	void HandleError(class UError* Error);
	void StartJoin(int MatchID);
};


// Class TAGame.GFxData_TourStatus_TA
// 0x0008 (0x00A0 - 0x0098)
class UGFxData_TourStatus_TA : public UGFxDataSingleton_X
{
public:
	class UTourStatus_TA*                              Status;                                                   // 0x0098(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TourStatus_TA");
		return ptr;
	}


	void OnShellSet();
};


// Class TAGame.GFxData_TrainingMode_TA
// 0x017C (0x0210 - 0x0094)
class UGFxData_TrainingMode_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET
	TEnumAsByte<EBasicLoadResult>                      Status;                                                   // 0x0098(0x0001) (Transient, DataBinding)
	unsigned char                                      UnknownData01[0x7];                                       // 0x0099(0x0007) MISSED OFFSET
	struct FString                                     SanitizedTrainingModeName;                                // 0x00A0(0x0010) (Transient, NeedCtorLink, DataBinding)
	struct FString                                     SanitizedCreatorName;                                     // 0x00B0(0x0010) (Transient, NeedCtorLink, DataBinding)
	struct FString                                     Tags;                                                     // 0x00C0(0x0010) (Transient, NeedCtorLink, DataBinding)
	unsigned long                                      bOwned : 1;                                               // 0x00D0(0x0004) (Transient, DataBinding)
	unsigned long                                      bFavorited : 1;                                           // 0x00D0(0x0004) (Transient, DataBinding)
	unsigned long                                      bOutOfDate : 1;                                           // 0x00D0(0x0004) (Transient, DataBinding)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00D4(0x0004) MISSED OFFSET
	struct FString                                     PublishedTime;                                            // 0x00D8(0x0010) (Transient, NeedCtorLink, DataBinding)
	struct FString                                     UpdatedAtTime;                                            // 0x00E8(0x0010) (Transient, NeedCtorLink, DataBinding)
	int                                                ShotsCompleted;                                           // 0x00F8(0x0004) (Transient, DataBinding)
	unsigned char                                      UnknownData03[0x4];                                       // 0x00FC(0x0004) MISSED OFFSET
	struct FString                                     CreatorPlatform;                                          // 0x0100(0x0010) (Transient, NeedCtorLink, DataBinding)
	class UTexture*                                    CreatorAvatar;                                            // 0x0110(0x0008) (Transient, DataBinding)
	struct FString                                     SaveDataFilename;                                         // 0x0118(0x0010) (Transient, NeedCtorLink)
	struct FString                                     SavingFilename;                                           // 0x0128(0x0010) (Transient, NeedCtorLink)
	struct FString                                     AutoplayName;                                             // 0x0138(0x0010) (Transient, NeedCtorLink)
	class USaveData_GameEditor_Training_TA*            SaveData;                                                 // 0x0148(0x0008) (Transient)
	struct FString                                     OpenTrainingMapBaseCmd;                                   // 0x0150(0x0010) (Const, NeedCtorLink)
	struct FString                                     OutOfDateMessage;                                         // 0x0160(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     DownloadingTrainingModeTitleMessage;                      // 0x0170(0x0010) (Const, Localized, NeedCtorLink)
	struct FString                                     DownloadingTrainingModeBodyMessage;                       // 0x0180(0x0010) (Const, Localized, NeedCtorLink)
	class UGFxModal_X*                                 ModalProcessing;                                          // 0x0190(0x0008) (Transient)
	struct FScriptDelegate                             __EventTrainingModeDownloadPlay__Delegate;                // 0x0198(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData04[0x8];                                       // 0x0198(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTrainingModeFavorited__Delegate;                   // 0x01B0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData05[0x8];                                       // 0x01B0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTrainingModeLoaded__Delegate;                      // 0x01C8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData06[0x8];                                       // 0x01C8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTrainingModeSaved__Delegate;                       // 0x01E0(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData07[0x8];                                       // 0x01E0(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventTrainingModeWordFilterError__Delegate;             // 0x01F8(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData08[0x8];                                       // 0x01F8(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TrainingMode_TA");
		return ptr;
	}


	void __GFxData_TrainingMode_TA__HandleSaveError_0C7799B745C465BBF40FBEB1E750F003(class UGFxModal_X* _);
	void UpdateOutOfDate();
	void HandleUnpublish(class URPC_TrainingEditor_DeleteTrainingData_TA* RPC);
	void OnDelete(TEnumAsByte<ETrainingSaveType> CurrentTab);
	void ForceDelete(const struct FString& FilePath);
	void HandleDispose();
	void AddToFavorites();
	void LoadFile(const struct FString& Filename, const struct FName& inMapName, bool bInPlaytest);
	void Play(const struct FName& inMapName, bool bInPlaytest);
	void HandleDownloadAndPlayResults(class URPC_TrainingEditor_GetTrainingData_TA* RPC);
	void HandleDownload(class URPC_TrainingEditor_GetTrainingData_TA* RPC);
	void HandleUpdateTrainingData(class URPC_TrainingEditor_UpdateTrainingData_TA* RPC);
	void HandleAddTrainingData(class URPC_TrainingEditor_AddTrainingData_TA* RPC);
	void HandleSubmit(class UPrivilegeCheck_X* PrivilegeCheck);
	void Submit();
	void HandleCreatorNameSanitized(const struct FString& DesiredName, const struct FString& SanitizedName);
	void HandleTrainingModeNameSanitized(const struct FString& DesiredName, const struct FString& SanitizedName);
	void RefreshFromSaveData();
	void OnDataLoaded(const struct FLoadObjectResult& Result);
	void HandleSanitizeError(const struct FString& OriginalPhrase, class UError* Error);
	void SetTrainingModeFromSave(const struct FString& Filename);
	void HandleGetAvatar(const struct FUniqueNetId& InPlayerId, class UTexture* InAvatar, const struct FString& OnlinePlayerName);
	void SetTrainingMode(class UTrainingEditorData_TA* InTrainingData, TArray<struct FUniqueNetId>* ArrayInitializer_403C27DB4EB63992DDB8C890197A936B);
	void UpdateUITimes();
	void SetTrainingModeFromRPC(class UTrainingEditorData_TA* ResultData);
	void HandleAutoplay(const struct FSaveObjectResult& Result);
	void HandleSaveResult(const struct FSaveObjectResult& Result);
	void OnRetrySaveSaveData(class UGFxModal_X* Modal);
	void HandleSaveError(const struct FSaveObjectResult& Result);
	void SaveTrainingMode(const struct FString& Filename, class UTrainingEditorData_TA* NewTrainingData, bool bInOwned, bool bAutoPlay);
	void DisplayError(class UError* Error);
	class UTrainingEditorMetrics_TA* GetTrainingMetrics();
	void OnShellSet();
	void EventTrainingModeWordFilterError(class UGFxData_TrainingMode_TA* OutTrainingMode, class UError* Error);
	void EventTrainingModeSaved(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bSuccess);
	void EventTrainingModeLoaded(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bSuccess);
	void EventTrainingModeFavorited(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bAdded);
	void EventTrainingModeDownloadPlay(class UGFxData_TrainingMode_TA* OutTrainingMode, const struct FString& Code, const struct FString& Filename);
};


// Class TAGame.RPC_TrainingEditor_DeleteTrainingData_TA
// 0x0010 (0x0110 - 0x0100)
class URPC_TrainingEditor_DeleteTrainingData_TA : public URPC_X
{
public:
	struct FString                                     Code;                                                     // 0x0100(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_DeleteTrainingData_TA");
		return ptr;
	}


	class URPC_TrainingEditor_DeleteTrainingData_TA* SetTrainingModeCode(const struct FString& InCode);
};


// Class TAGame.RPC_TrainingEditor_GetTrainingData_TA
// 0x0018 (0x0118 - 0x0100)
class URPC_TrainingEditor_GetTrainingData_TA : public URPC_X
{
public:
	struct FString                                     Code;                                                     // 0x0100(0x0010) (NeedCtorLink)
	class UTrainingEditorData_TA*                      TrainingData;                                             // 0x0110(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_GetTrainingData_TA");
		return ptr;
	}


	class URPC_TrainingEditor_GetTrainingData_TA* SetTrainingModeID(const struct FString& InTrainingModeCode);
};


// Class TAGame.GFxData_TrainingModeConstants_TA
// 0x0038 (0x00D0 - 0x0098)
class UGFxData_TrainingModeConstants_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FTrainingModeDifficulty>             Difficulties;                                             // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FTrainingModeType>                   Types;                                                    // 0x00A8(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FTrainingModeTag>                    Tags;                                                     // 0x00B8(0x0010) (NeedCtorLink, DataBinding)
	struct FName                                       DefaultMap;                                               // 0x00C8(0x0008) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TrainingModeConstants_TA");
		return ptr;
	}


	struct FName STATIC_GetValidatedMap(const struct FName& MapName);
	void InitTags();
	void OnShellSet();
};


// Class TAGame.RPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA
// 0x0020 (0x0120 - 0x0100)
class URPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA : public URPC_X
{
public:
	TArray<struct FString>                             Codes;                                                    // 0x0100(0x0010) (NeedCtorLink)
	TArray<struct FCodeTimePair>                       TrainingData;                                             // 0x0110(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA");
		return ptr;
	}


	class URPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA* SetCodes(TArray<struct FString>* InCodes);
};


// Class TAGame.GFxData_TrainingModeBrowser_TA
// 0x00C8 (0x0160 - 0x0098)
class UGFxData_TrainingModeBrowser_TA : public UGFxDataSingleton_X
{
public:
	struct FSearchCacheData                            CachedOnlineSearchResults[0x2];                           // 0x0098(0x0018) (NeedCtorLink)
	class URPC_X*                                      PendingRPC;                                               // 0x00C8(0x0008) (Transient)
	float                                              CachedSearchDuration;                                     // 0x00D0(0x0004) (Const)
	float                                              CachedFavoriteTimeoutTime;                                // 0x00D4(0x0004) (Transient)
	TArray<struct FFavoritedFileMetaData>              FavoritedFilesMetaData;                                   // 0x00D8(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bFavoritesLoaded : 1;                                     // 0x00E8(0x0004) (Transient)
	unsigned long                                      bErrorModalOpen : 1;                                      // 0x00E8(0x0004) (Transient)
	float                                              CachedFavoriteDuration;                                   // 0x00EC(0x0004) (Const)
	TArray<struct FCachedDownloadedFile>               CachedDownloadedFiles;                                    // 0x00F0(0x0010) (Transient, NeedCtorLink)
	TArray<struct FString>                             LoadingFiles;                                             // 0x0100(0x0010) (Transient, NeedCtorLink)
	struct FString                                     DownloadedFilename;                                       // 0x0110(0x0010) (Const, NeedCtorLink)
	int                                                MaxCachedDownloadedFiles;                                 // 0x0120(0x0004) (Const)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0124(0x0004) MISSED OFFSET
	class USaveData_GameEditor_Training_TA*            TrainingSaveData;                                         // 0x0128(0x0008) (Transient)
	struct FScriptDelegate                             __EventFavoritesLoaded__Delegate;                         // 0x0130(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0130(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             __EventAllTrainingFilesLoaded__Delegate;                  // 0x0148(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0148(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TrainingModeBrowser_TA");
		return ptr;
	}


	class UGFxData_TrainingMode_TA* DebugGetTrainingModeByIdx(int Index);
	class UGFxData_TrainingMode_TA* DebugGetTrainingModeByName(const struct FString& TM_Name);
	struct FString GetDownloadedFilename();
	void DeleteTrainingMode(int InRowIndex, TEnumAsByte<ETrainingSaveType> CurrentTab);
	void DeleteTrainingModeData(class UGFxData_TrainingMode_TA* TrainingMode, TEnumAsByte<ETrainingSaveType> CurrentTab);
	void OnTrainingModesReady();
	void SetTrainingFiles(TArray<struct FString> Files, bool bLoadingFavorites);
	void HandleHeaders(TArray<struct FString> Files, TEnumAsByte<EBasicLoadResult> Result);
	void HandleFavoritesLoaded(class UGFxData_TrainingModeBrowser_TA* B);
	void GetLocalTrainingFiles(bool bLoadingFavorites);
	void HandleTrainingModeDownloadPlay(class UGFxData_TrainingMode_TA* OutTrainingMode, const struct FString& InCode, const struct FString& Filename);
	void HandleTrainingModeFavorited(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bAdded, struct FFavoritedFileMetaData* StructInitializer_4D9C04E94A07B99C49961C9846843655);
	int GetFavoriteIndex(const struct FString& Id);
	bool IsFavorited(const struct FString& InGuid);
	void HandleBrowseResults(class URPC_TrainingEditor_BrowseTrainingData_TA* RPC);
	void HandleSearchByCode(class URPC_TrainingEditor_GetTrainingData_TA* RPC);
	void OnSearchCodeResults(bool bSuccess);
	void HandleOnlineHeaders(TArray<struct FString> LocalFiles, TEnumAsByte<EBasicLoadResult> Result, bool bFeaturedOnly);
	void HandleLoadFeaturedHeaders(TArray<struct FString> LocalFiles, TEnumAsByte<EBasicLoadResult> Result);
	void HandleLoadAllPublicHeaders(TArray<struct FString> LocalFiles, TEnumAsByte<EBasicLoadResult> Result);
	bool LoadIfFavorited(class UGFxData_TrainingMode_TA* GFxTrainingData, const struct FGuid& InGuid);
	void RepopulateFromCache(bool bFeaturedOnly);
	void GetSearchResults(const struct FString& Code, bool bForceRefresh, bool bFeaturedOnly);
	class APlayerControllerBase_TA* GetPlayerController();
	void HandleAllFavoritesLoaded(class UGFxData_TrainingModeBrowser_TA* TrainingModeBrowser);
	void ResetTrainingList();
	void HandleDownloadResults(class URPC_TrainingEditor_GetTrainingData_TA* RPC);
	void HandleListPlayerTrainingData(class URPC_TrainingEditor_ListPlayerTrainingData_TA* RPC);
	void SyncTrainingModes();
	void HandleListPlayerTrainingDataTimestamp(class URPC_TrainingEditor_ListPlayerTrainingDataTimestamp_TA* RPC);
	void EvaluateUpdateAtTimes();
	void SetFavoriteUpdatedAtTime(const struct FString& InCode);
	void SyncFavoritedModes(struct FFavoritedFileMetaData* StructInitializer_6B3EB07D4BD02D1B661532AEAEA6C370);
	void HandleTrainingModeWordFilterError(class UGFxData_TrainingMode_TA* OutTrainingMode, class UError* Error);
	void HandleLocalTrainingModeLoaded(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bSuccess);
	void HandleTrainingModeLoaded(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bSuccess);
	void HandleDownloadedTrainingModeSaved(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bSuccess);
	void HandleLocalTrainingModeSaved(class UGFxData_TrainingMode_TA* OutTrainingMode, bool bSuccess);
	void CreateNew(const struct FString& NewName, TEnumAsByte<ETrainingType> NewType, TEnumAsByte<EDifficulty> NewDifficulty, const struct FName& MapName, TArray<int> Tags);
	void HandleErrorClosed(class UGFxModal_X* Modal);
	void DisplayError(class UError* Error);
	class UTrainingEditorMetrics_TA* GetTrainingMetrics();
	void NotifyWhenFavoritesLoaded(const struct FScriptDelegate& Callback);
	void HandleFavorites(TArray<struct FString> Files, TEnumAsByte<EBasicLoadResult> Result, struct FFavoritedFileMetaData* StructInitializer_BFA0A0134B25C0BA86AA1AA15A081942);
	void HandlePsyNetLogin(class UOnlinePlayer_X* OnlinePlayer);
	void OnShellSet();
	void EventAllTrainingFilesLoaded(class UGFxData_TrainingModeBrowser_TA* Browser);
	void EventFavoritesLoaded(class UGFxData_TrainingModeBrowser_TA* Browser);
};


// Class TAGame.RPC_TrainingEditor_UpdateTrainingData_TA
// 0x0008 (0x0108 - 0x0100)
class URPC_TrainingEditor_UpdateTrainingData_TA : public URPC_X
{
public:
	class UTrainingEditorData_TA*                      TrainingData;                                             // 0x0100(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_UpdateTrainingData_TA");
		return ptr;
	}


	class URPC_TrainingEditor_UpdateTrainingData_TA* SetTrainingData(class UTrainingEditorData_TA** InTrainingData);
};


// Class TAGame.RPC_TrainingEditor_AddTrainingData_TA
// 0x0018 (0x0118 - 0x0100)
class URPC_TrainingEditor_AddTrainingData_TA : public URPC_X
{
public:
	class UTrainingEditorData_TA*                      TrainingData;                                             // 0x0100(0x0008)
	struct FString                                     Code;                                                     // 0x0108(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_AddTrainingData_TA");
		return ptr;
	}


	class URPC_TrainingEditor_AddTrainingData_TA* SetTrainingData(class UTrainingEditorData_TA** InTrainingData);
};


// Class TAGame.RPC_TrainingEditor_BrowseTrainingData_TA
// 0x0018 (0x0118 - 0x0100)
class URPC_TrainingEditor_BrowseTrainingData_TA : public URPC_X
{
public:
	unsigned long                                      bFeaturedOnly : 1;                                        // 0x0100(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	TArray<class UTrainingEditorData_TA*>              TrainingData;                                             // 0x0108(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_BrowseTrainingData_TA");
		return ptr;
	}


	class URPC_TrainingEditor_BrowseTrainingData_TA* SetFeaturedOnly(bool bInFeaturedOnly);
};


// Class TAGame.RPC_TrainingEditor_ListPlayerTrainingData_TA
// 0x0010 (0x0110 - 0x0100)
class URPC_TrainingEditor_ListPlayerTrainingData_TA : public URPC_X
{
public:
	TArray<struct FString>                             Codes;                                                    // 0x0100(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TrainingEditor_ListPlayerTrainingData_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_TrainingModeEditor_TA
// 0x0060 (0x00F8 - 0x0098)
class UGFxData_TrainingModeEditor_TA : public UGFxDataSingleton_X
{
public:
	class AGameEvent_TrainingEditor_TA*                MyGameEvent;                                              // 0x0098(0x0008) (Transient)
	struct FString                                     SanitizedTrainingModeName;                                // 0x00A0(0x0010) (Transient, NeedCtorLink, DataBinding)
	TArray<struct FEditorRoundData>                    RoundData;                                                // 0x00B0(0x0010) (Transient, NeedCtorLink, DataBinding)
	int                                                CurrentRound;                                             // 0x00C0(0x0004) (Transient, DataBinding)
	unsigned char                                      UnknownData00[0x4];                                       // 0x00C4(0x0004) MISSED OFFSET
	TArray<struct FTrainingModeTag>                    Tags;                                                     // 0x00C8(0x0010) (Transient, NeedCtorLink, DataBinding)
	TEnumAsByte<EEditingType>                          Editing;                                                  // 0x00D8(0x0001) (Transient, DataBinding)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00D9(0x0003) MISSED OFFSET
	float                                              BallStartSpeed;                                           // 0x00DC(0x0004) (Transient, DataBinding)
	float                                              BallScreenPosX;                                           // 0x00E0(0x0004) (Transient, DataBinding)
	float                                              BallScreenPosY;                                           // 0x00E4(0x0004) (Transient, DataBinding)
	unsigned long                                      bOwned : 1;                                               // 0x00E8(0x0004) (Transient, DataBinding)
	unsigned long                                      bNoEditor : 1;                                            // 0x00E8(0x0004) (Transient, DataBinding)
	unsigned long                                      bUnsavedChanges : 1;                                      // 0x00E8(0x0004) (Transient, DataBinding)
	unsigned char                                      UnknownData02[0x4];                                       // 0x00EC(0x0004) MISSED OFFSET
	class UGFxModal_X*                                 ModalProcessing;                                          // 0x00F0(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_TrainingModeEditor_TA");
		return ptr;
	}


	void Save();
	void HandleSaveResult(bool bSuccess);
	void HandleUnsavedChanges(bool bInUnsavedChanges);
	void DuplicateRound(int Index);
	void ReorderRound(int FromIndex, int ToIndex);
	void StopEditingRound();
	void EditCurrentRound();
	void RestartSequence();
	void TestSequence();
	void TestCurrentRound();
	void CreateRound();
	void HandleRoundTimeChanged(class AGameEvent_TrainingEditor_TA* InGameEvent);
	void HandleRoundChanged(class AGameEvent_TrainingEditor_TA* InGameEvent);
	void SetGameEvent(class AGameEvent_TrainingEditor_TA* InGameEvent);
	void HandleNameSanitized(const struct FString& DesiredName, const struct FString& SanitizedName);
	void UpdateTrainingData();
	void SetRoundTimeLimit(int Time);
	void DeleteRound(int RoundToDelete);
	void SetActiveRound(int NewRound);
	void SetMetaData(const struct FString& NewName, TEnumAsByte<ETrainingType> NewType, TEnumAsByte<EDifficulty> NewDifficulty, TArray<int> NewTags);
	void HandlePRIReceived(class APlayerController_X* PC_X);
	class APlayerController_TA* GetPlayerController();
	void OnShellSet();
};


// Class TAGame.GFxData_UIConfig_TA
// 0x0008 (0x00A0 - 0x0098)
class UGFxData_UIConfig_TA : public UGFxDataSingleton_X
{
public:
	int                                                MaxCurrencyTradeAmount;                                   // 0x0098(0x0004) (DataBinding)
	unsigned long                                      bAprilFoolsRankedIcons : 1;                               // 0x009C(0x0004) (DataBinding)
	unsigned long                                      bAprilFoolsPlaylistImages : 1;                            // 0x009C(0x0004) (DataBinding)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_UIConfig_TA");
		return ptr;
	}


	void EndAprilFools();
	void StartAprilFools();
	void HandleAprilConfigRemoved(class UAprilConfig_X* Config);
	void HandleAprilConfig(class UAprilConfig_X* Config);
	void HandleMtxConfig(class UMtxConfig_TA* Config);
	void HandleUIConfig(class UUIConfig_TA* Config);
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_Workshop_TA
// 0x0030 (0x00C8 - 0x0098)
class UGFxData_Workshop_TA : public UGFxDataSingleton_X
{
public:
	TArray<struct FDownloadedWorkshopData>             Items;                                                    // 0x0098(0x0010) (NeedCtorLink, DataBinding)
	TArray<struct FUniqueNetId>                        RetrievedNetIds;                                          // 0x00A8(0x0010) (NeedCtorLink)
	struct FString                                     ItemRemoved;                                              // 0x00B8(0x0010) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Workshop_TA");
		return ptr;
	}


	struct FUniqueNetId __GFxData_Workshop_TA__HandleWorkshopData_35CD268C47E7559DA7FADD97C8BA1E2B(const struct FDownloadedWorkshopData& Item);
	void OnAvatarPersonaHandler(const struct FUniqueNetId& PlayerNetId, class UTexture* Avatar, const struct FString& OnlinePlayerName);
	void OnEventImageDownloaded(const struct FOnlineImageDownload& Image);
	void HandleWorkshopData(bool bSuccess, TArray<struct FDownloadedWorkshopData>* WorkshopItems, TArray<struct FString>* ArrayInitializer_3705DB5D4F2328734C4D12B0739F8153, TArray<struct FUniqueNetId>* MapLocal_E42FE27E4DCD62B40E13328428FC4177);
	void LoadWorkshopMap(struct FString* FullPath);
	void LoadAllWorkshopMapData();
};


// Class TAGame.GFxData_WorldSelection_TA
// 0x0008 (0x00A0 - 0x0098)
class UGFxData_WorldSelection_TA : public UGFxDataSingleton_X
{
public:
	class APlayerControllerBase_TA*                    Player;                                                   // 0x0098(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_WorldSelection_TA");
		return ptr;
	}


	void SetSelectionUpdate(bool bUpdate);
	void SetWorldSelection(bool bTurnOn);
	void OnShellSet();
};


// Class TAGame.GFxHUD_GameEditor_TA
// 0x0010 (0x0518 - 0x0508)
class AGFxHUD_GameEditor_TA : public AGFxHUD_TA
{
public:
	class UGFxData_TrainingModeEditor_TA*              EditorData;                                               // 0x0508(0x0008) (Transient)
	class AGameEvent_TrainingEditor_TA*                TrainingGameEvent;                                        // 0x0510(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxHUD_GameEditor_TA");
		return ptr;
	}


	void UpdateCarData();
	void SetGameEvent(class AGameEvent_TA* InGameEvent);
	void InitGFx();
};


// Class TAGame.Goal_Hoops_TA
// 0x0024 (0x01CC - 0x01A8)
class UGoal_Hoops_TA : public UGoal_TA
{
public:
	class AActor*                                      Backboard;                                                // 0x01A8(0x0008) (Edit)
	float                                              Radius;                                                   // 0x01B0(0x0004) (Edit)
	struct FVector                                     BackboardLocation;                                        // 0x01B4(0x000C)
	struct FVector                                     BackboardDirection;                                       // 0x01C0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Goal_Hoops_TA");
		return ptr;
	}


	void Init();
};


// Class TAGame.HauntedBallTrapTrigger_TA
// 0x0068 (0x02D8 - 0x0270)
class AHauntedBallTrapTrigger_TA : public ADynamicMeshActor_TA
{
public:
	class ALensFlareSource*                            LensFlare;                                                // 0x0270(0x0008) (Edit)
	int                                                TeamIndex;                                                // 0x0278(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x027C(0x0004) MISSED OFFSET
	class AGoalVolume_TA*                              GoalVolume;                                               // 0x0280(0x0008) (Edit)
	float                                              TrapResetTime;                                            // 0x0288(0x0004) (Edit)
	float                                              MinLensFlareColorValue;                                   // 0x028C(0x0004) (Edit)
	struct FName                                       MICParamName;                                             // 0x0290(0x0008) (Edit)
	class UMaterialInstanceConstant*                   MIC_TrapVolumeMat;                                        // 0x0298(0x0008) (Transient)
	class UMaterialInstanceConstant*                   MIC_TrapOutlineMat;                                       // 0x02A0(0x0008) (Transient)
	unsigned long                                      bIsActive : 1;                                            // 0x02A8(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x02AC(0x0004) MISSED OFFSET
	class ABall_Haunted_TA*                            HauntedBall;                                              // 0x02B0(0x0008)
	class AGameEvent_Soccar_TA*                        SoccarEvent;                                              // 0x02B8(0x0008)
	class UParticleSystemComponent*                    BeamPSC;                                                  // 0x02C0(0x0008) (ExportObject, Transient, Component, EditInline)
	class UParticleSystem*                             BeamPSArchetype;                                          // 0x02C8(0x0008) (Edit)
	struct FName                                       BeamPSParam;                                              // 0x02D0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.HauntedBallTrapTrigger_TA");
		return ptr;
	}


	void SetTimeInGoalValues(float Value, struct FLinearColor* StructInitializer_CAE69BA0495CD62F8EAE828DBD681FA1);
	void ResetTrap();
	void SetTrapVisuals(bool bInIsActive);
	void SetTrapActivity(bool bInIsActive);
	bool GetIsTrapActive();
	void HandleIsTrappedChanged(class ABall_Haunted_TA* Ball, bool bInIsTrapped, class UGoal_TA* Goal);
	void HandleLastTeamTouchChanged(class ABall_Haunted_TA* Ball, unsigned char InLastTeamTouch);
	void HandleDeactivatedGoalIndexChanged();
	void HandleBallAdded(class AGameEvent_Soccar_TA* GameEvent, class ABall_Haunted_TA* Ball);
	void HandleGameEventRemoved(class AGameEvent_TA* GameEvent);
	void HandleGameEventAdded(class AGameEvent_Soccar_TA* GameEvent);
	void Tick(float DeltaTime);
	void Destroyed();
	void PostBeginPlay();
};


// Class TAGame.HUDActor_TA
// 0x0020 (0x0288 - 0x0268)
class AHUDActor_TA : public AActor
{
public:
	class AHUD*                                        HUD;                                                      // 0x0268(0x0008)
	struct FScriptDelegate                             __RenderDelegate__Delegate;                               // 0x0270(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0270(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.HUDActor_TA");
		return ptr;
	}


	class AHUDActor_TA* STATIC_Create(class AHUD* InHUD, const struct FScriptDelegate& InRenderDelegate);
	void Destroyed();
	void Init(class AHUD* InHUD);
	void PostRenderFor(class APlayerController* PC, class UCanvas* Canvas, const struct FVector& CameraPosition, const struct FVector& CameraDir);
	void RenderDelegate(class UCanvas* Canvas);
};


// Class TAGame.IdleAction_TA
// 0x0000 (0x0060 - 0x0060)
class UIdleAction_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IdleAction_TA");
		return ptr;
	}

};


// Class TAGame.IdleSystem_TA
// 0x0000 (0x0060 - 0x0060)
class UIdleSystem_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IdleSystem_TA");
		return ptr;
	}


	float STATIC_GetLastActiveTime(class UNetConnection* Connection);
	void STATIC_UpdateIdle(class UIdleTimer_TA* Timer, class AWorldInfo* WorldInfo, class UIdleFeature_TA* Feature, class UIdlePlayer_TA* IdlePlayer, class UNetConnection* Connection, class APlayerController_TA* PC);
	void STATIC_InitIdleStartTime(class AWorldInfo* WorldInfo, class UActiveGameState_TA* GameState, class UIdlePlayer_TA* IdlePlayer);
	void STATIC_AddIdleConnection(class UIdleFeature_TA* Feature, class UNetConnection* Connection);
	void STATIC_StopIdleTimer(class UIdleFeature_TA* Feature, class UActiveGameState_TA* GameState);
	void STATIC_StartIdleTimer(class UIdleFeature_TA* Feature, class UActiveGameState_TA* GameState, struct FTimerOptions* StructInitializer_329AAAB749FBFBF8DA929C9B4B1E34DC);
};


// Class TAGame.IdlePlayer_TA
// 0x0004 (0x0064 - 0x0060)
class UIdlePlayer_TA : public UObject
{
public:
	float                                              StartTime;                                                // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IdlePlayer_TA");
		return ptr;
	}

};


// Class TAGame.IdleWarning_TA
// 0x0000 (0x0268 - 0x0268)
class AIdleWarning_TA : public AOwnerReplicatedActor_ORS
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IdleWarning_TA");
		return ptr;
	}

};


// Class TAGame.IdleTimer_TA
// 0x0000 (0x0060 - 0x0060)
class UIdleTimer_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IdleTimer_TA");
		return ptr;
	}

};


// Class TAGame.IdleBanSystem_TA
// 0x0000 (0x0060 - 0x0060)
class UIdleBanSystem_TA : public UIdleSystem_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IdleBanSystem_TA");
		return ptr;
	}


	void STATIC_PerformIdleAction(class UIdleBanFeature_TA* Feature, class UIdleAction_TA* Action, class UIdlePlayer_TA* IdlePlayer, class UNetConnection* Connection, class APlayerController_TA* PC);
};


// Class TAGame.IdleKickSystem_TA
// 0x0000 (0x0060 - 0x0060)
class UIdleKickSystem_TA : public UIdleSystem_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.IdleKickSystem_TA");
		return ptr;
	}


	void STATIC_HideIdleWarning(class UGFxData_LocalPlayer_TA* GFxData, class AIdleWarning_TA* Warning);
	void STATIC_ShowIdleWarning(class UGFxData_LocalPlayer_TA* GFxData, class AIdleWarning_TA* Warning);
	void STATIC_PerformIdleAction(class UIdleKickFeature_TA* Feature, class UIdleAction_TA* Action, class UIdlePlayer_TA* IdlePlayer, class UNetConnection* Connection, class APlayerController_TA* PC);
};


// Class TAGame.InMapScoreboard_TA
// 0x0094 (0x02FC - 0x0268)
class AInMapScoreboard_TA : public AActor
{
public:
	class AStaticMeshActor*                            StaticMesh;                                               // 0x0268(0x0008) (Edit)
	class UMaterialInstanceConstant*                   MaterialInstance;                                         // 0x0270(0x0008) (Edit)
	int                                                MaterialIndex;                                            // 0x0278(0x0004) (Edit)
	int                                                TeamIndex;                                                // 0x027C(0x0004) (Edit)
	struct FInterpCurveFloat                           GoalAnimation;                                            // 0x0280(0x0018) (Edit, NeedCtorLink)
	float                                              GoDuration;                                               // 0x0298(0x0004) (Edit)
	struct FName                                       GoSwitch;                                                 // 0x029C(0x0008) (Edit)
	struct FName                                       GoalXPos;                                                 // 0x02A4(0x0008) (Edit)
	struct FName                                       CountdownSwitch;                                          // 0x02AC(0x0008) (Edit)
	struct FName                                       CountdownToggle;                                          // 0x02B4(0x0008) (Edit)
	struct FName                                       ScoreToggle;                                              // 0x02BC(0x0008) (Edit)
	struct FName                                       ScoreParam;                                               // 0x02C4(0x0008) (Edit)
	struct FName                                       CountdownValueParam;                                      // 0x02CC(0x0008) (Edit)
	int                                                LastCountdownTime;                                        // 0x02D4(0x0004) (Transient)
	float                                              ReplayCountdownTime;                                      // 0x02D8(0x0004) (Transient)
	unsigned long                                      bHasReplayCountdownTime : 1;                              // 0x02DC(0x0004) (Transient)
	class AGameEvent_Soccar_TA*                        GameEvent;                                                // 0x02E0(0x0008) (Transient)
	struct FName                                       LastState;                                                // 0x02E8(0x0008) (Transient)
	class UMaterialInstanceConstant*                   MIC;                                                      // 0x02F0(0x0008) (Transient)
	float                                              GoalTime;                                                 // 0x02F8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.InMapScoreboard_TA");
		return ptr;
	}


	void HandleReplayGoalScored(class AGameEvent_Soccar_TA* InEvent, unsigned char ScoredOnTeam);
	void HideGo();
	void ShowGo();
	void HideCountdown();
	void ShowCountdown();
	void HideScore();
	void ShowScore();
	void UpdateScore(bool bNoReplay);
	void DisableAllSwitches();
	void HandleCountdownTimeUpdated(class AGameEvent_TA* InEvent, int Seconds);
	void HandleGameStateChanged(class AGameEvent_TA* InEvent);
	void HandleScoreUpdated(class ATeam_TA* Team);
	void HandleTeams(class AGameEvent_Team_TA* G);
	void SetUpEvents();
	void HandleGameEvent(class AGameEvent_Soccar_TA* SoccarGame);
	void PostBeginPlay();
};


// Class TAGame.LoadoutSave_TA
// 0x0010 (0x0070 - 0x0060)
class ULoadoutSave_TA : public UObject
{
public:
	class ULoadoutCollection_TA*                       Collection;                                               // 0x0060(0x0008)
	class ULoadoutEquipper_TA*                         Equipper;                                                 // 0x0068(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutSave_TA");
		return ptr;
	}


	class ULoadoutSave_TA* SetEquipper(class ULoadoutEquipper_TA* InEquipper);
	class ULoadoutSave_TA* SetCollection(class ULoadoutCollection_TA* InCollection);
};


// Class TAGame.LoadoutEquipper_TA
// 0x0008 (0x0068 - 0x0060)
class ULoadoutEquipper_TA : public UObject
{
public:
	class ULoadoutPair_TA*                             Equipped;                                                 // 0x0060(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutEquipper_TA");
		return ptr;
	}


	void Equip(class ULoadoutPair_TA* Pair);
};


// Class TAGame.LoadoutTeam_TA
// 0x0018 (0x0078 - 0x0060)
class ULoadoutTeam_TA : public UObject
{
public:
	struct FLoadoutTeam                                Data;                                                     // 0x0060(0x0018) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.LoadoutTeam_TA");
		return ptr;
	}


	void SetData(const struct FLoadoutTeam& InData);
};


// Class TAGame.MaxTimeEndGame_TA
// 0x0000 (0x0060 - 0x0060)
class UMaxTimeEndGame_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MaxTimeEndGame_TA");
		return ptr;
	}


	int STATIC___MaxTimeEndGame_TA__GetWinningTeam_71E6DA0B4561B915DFE0ABB90C86BC73(class ATeam_TA* T, int* ReduceLocal_E27FF9B14ECA9EFCBAC105B36FA8F1ED);
	int STATIC___MaxTimeEndGame_TA__GetWinningTeam_D7A8B9524AA50B298286239FF1CB1292(int Sum, class APRI_TA* PRI);
	class ATeam_TA* STATIC_GetWinningTeam(class AGameEvent_Soccar_TA* GameEvent, TEnumAsByte<ETieBreakDecision>* TieBreakDecision, TArray<int>* MapLocal_0969BC9042576E96840C3191CE6B3B51);
};


// Class TAGame.MaxTimeSystem_TA
// 0x0000 (0x0060 - 0x0060)
class UMaxTimeSystem_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MaxTimeSystem_TA");
		return ptr;
	}


	void STATIC_RemovedMaxTimeWarningData(class UGFxData_TourEvent_TA* GFxData_TourEvent, class AMaxTimeWarningData_TA* _);
	void STATIC_UpdateMaxTimeWarningData(class UGFxData_TourEvent_TA* GFxData_TourEvent, class AMaxTimeWarningData_TA* MaxTimeWarningData);
	void STATIC_HandleWarningMessage(class AGameEvent_Soccar_TA* GameEvent, class UMaxTimeWarning_TA* MaxTimeWarningData);
	void STATIC_ReceivedMaxTimeEndGame(class AGameEvent_Soccar_TA* GameEvent, class UMaxTimeEndGame_TA* MaxTimeEndGame);
	void STATIC_MaxTimerEnded(class UGameEventMatchActive_TA* _, class AGameEvent_Soccar_TA* GameEvent);
	void STATIC_StartMaxTimer(class UMaxTimeComponent_TA* MaxTimeComponent, class UGameEventMatchActive_TA* GameEventMatchActive, class AGameEvent_Soccar_TA* GameEvent);
};


// Class TAGame.MaxTimeWarningData_TA
// 0x0010 (0x0280 - 0x0270)
class AMaxTimeWarningData_TA : public AReplicatedActor_ORS
{
public:
	unsigned char                                      UnknownData00[0x8];                                       // 0x0270(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.MaxTimeWarningData_TA.EndGameEpochTime
	unsigned char                                      UnknownData01[0x8];                                       // 0x0278(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.MaxTimeWarningData_TA.EndGameWarningEpochTime

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MaxTimeWarningData_TA");
		return ptr;
	}

};


// Class TAGame.MaxTimeWarning_TA
// 0x0000 (0x0060 - 0x0060)
class UMaxTimeWarning_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MaxTimeWarning_TA");
		return ptr;
	}

};


// Class TAGame.MenuSequence_PremiumGarage_TA
// 0x0008 (0x00B0 - 0x00A8)
class UMenuSequence_PremiumGarage_TA : public UMenuSequence_TA
{
public:
	float                                              FadeTime;                                                 // 0x00A8(0x0004) (Edit)
	float                                              FadeOutDelay;                                             // 0x00AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MenuSequence_PremiumGarage_TA");
		return ptr;
	}


	class UShowroomMetrics_TA* GetShowroomMetrics();
	void LeaveFadeOut();
	void HandleLeaveComplete();
	void EnterFadeOut();
	void HandleEnterComplete();
	void LeaveSequence(class UMenuSequence_TA* NextSequence);
	void EnterSequence(class UMenuSequence_TA* PrevSequence);
};


// Class TAGame.MenuSequence_PremiumGarageReveal_TA
// 0x0008 (0x00B8 - 0x00B0)
class UMenuSequence_PremiumGarageReveal_TA : public UMenuSequence_PremiumGarage_TA
{
public:
	struct FName                                       FinishCameraState;                                        // 0x00B0(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MenuSequence_PremiumGarageReveal_TA");
		return ptr;
	}


	void FinishReveal();
	void LeaveSequence(class UMenuSequence_TA* NextSequence);
	void EnterSequence(class UMenuSequence_TA* PrevSequence);
};


// Class TAGame.Mutator_Audio_TA
// 0x000C (0x0070 - 0x0064)
class UMutator_Audio_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	struct FName                                       AudioSoundMode;                                           // 0x0068(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Audio_TA");
		return ptr;
	}


	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.Mutator_Bots_TA
// 0x0008 (0x006C - 0x0064)
class UMutator_Bots_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	unsigned long                                      bRandomizedBotLoadouts : 1;                               // 0x0068(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Bots_TA");
		return ptr;
	}


	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.Mutator_GameEvent_TA
// 0x001C (0x0080 - 0x0064)
class UMutator_GameEvent_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	class AStatFactory_TA*                             StatFactoryArchetype;                                     // 0x0068(0x0008) (Edit)
	class AAIController_TA*                            BotArchetype;                                             // 0x0070(0x0008) (Edit)
	class UEndRoundComponent_TA*                       EndRoundComponentArchetype;                               // 0x0078(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_GameEvent_TA");
		return ptr;
	}


	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.Mutator_Loadout_TA
// 0x0014 (0x0078 - 0x0064)
class UMutator_Loadout_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET
	TArray<class UProduct_TA*>                         Products;                                                 // 0x0068(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_Loadout_TA");
		return ptr;
	}


	void __Mutator_Loadout_TA__Init_D73FFAC148A789B6633C7DAD77C8E3AB(class AGameEvent_TA* _, class APRI_TA* PRI);
	void __Mutator_Loadout_TA__Init_E1AD25674855822A2B255C83A4A3ABB4(class AGameEvent_TA* _, class APRI_TA* PRI);
	void HandleLoadoutRequested(struct U_Types_TA_FLoadoutData* OutLoadout, struct FLoadoutAttributesArray* OutAttributes);
	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.PickupTimer_TA
// 0x0004 (0x02C4 - 0x02C0)
class APickupTimer_TA : public ACarComponent_TA
{
public:
	struct FColor                                      TextColor;                                                // 0x02C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PickupTimer_TA");
		return ptr;
	}

};


// Class TAGame.PlayerSpawnConfig_TA
// 0x0004 (0x0064 - 0x0060)
class UPlayerSpawnConfig_TA : public UObject
{
public:
	int                                                RespawnDelaySeconds;                                      // 0x0060(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerSpawnConfig_TA");
		return ptr;
	}

};


// Class TAGame.PlayerSpawnState_TA
// 0x0000 (0x0060 - 0x0060)
class UPlayerSpawnState_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerSpawnState_TA");
		return ptr;
	}

};


// Class TAGame.PlayerSpawnSystem_TA
// 0x0000 (0x0060 - 0x0060)
class UPlayerSpawnSystem_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerSpawnSystem_TA");
		return ptr;
	}


	void STATIC_CreateReplicatedSpawnTicket(class AController* C, float RespawnDelaySeconds);
	void STATIC_CreateSpawnTicket(class AController* C, class APRI_TA* PRI, float RespawnDelaySeconds, class UPlayerSpawnTicket_TA** ObjectInitializer_0BCD53184001B506E04531B7F69301B3);
	void STATIC_TickRespawnDisplay(class UGameTick* Tick, class AReplicatedRespawnTicket_TA* Ticket, class AGFxHUD_TA* HUD);
	void STATIC_HandleCarDemolished(class UPlayerSpawnFeature_TA* Feature, class AController* C, class APRI_TA* PRI, class UDemolishedCar_TA* Car);
	void STATIC_HandlePlayerSpawned(class UPlayerSpawnFeature_TA* Feature, class AController* C, class APawn* P);
	void STATIC_TickSpawn(class UGameTick* Tick, class UPlayerSpawnFeature_TA* Feature, class UPlayerSpawnTicket_TA* Ticket);
	void STATIC_HandleBotReplacementCleared(class AReplicatedRespawnTicket_TA* Ticket, class UBotReplacement_TA* Replacement);
	void STATIC_HandleBotReplacementSet(class UPlayerSpawnFeature_TA* Feature, class UPlayerSpawnTicket_TA* Ticket, class UBotReplacement_TA* Replacement);
	void STATIC_HandlePlayerSpawnStop(class UPlayerSpawnFeature_TA* Feature, class AController* C);
	void STATIC_HandlePlayerSpawnStart(class UPlayerSpawnFeature_TA* Feature, class AController* C, class APRI_TA* PRI);
	void STATIC_HandleSpawnStop(class UPlayerSpawnState_TA* State, class UPlayerSpawnFeature_TA* Feature);
	void STATIC_HandleSpawnStart(class UPlayerSpawnConfig_TA* Config, class UPlayerSpawnState_TA* State, class AGameEvent_TA* GameEvent, class UPlayerSpawnFeature_TA** ObjectInitializer_DE9CDC3A4EB91F29A488E1B10601A66B);
};


// Class TAGame.ReplicatedRespawnTicket_TA
// 0x0008 (0x0270 - 0x0268)
class AReplicatedRespawnTicket_TA : public AOwnerReplicatedActor_ORS
{
public:
	float                                              SecondsRemaining;                                         // 0x0268(0x0004) (Net)
	int                                                DisplaySeconds;                                           // 0x026C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ReplicatedRespawnTicket_TA");
		return ptr;
	}

};


// Class TAGame.PlayerSpawnTicket_TA
// 0x0014 (0x0074 - 0x0060)
class UPlayerSpawnTicket_TA : public UObject
{
public:
	class AController*                                 Controller;                                               // 0x0060(0x0008)
	class APRI_TA*                                     PRI;                                                      // 0x0068(0x0008)
	float                                              SecondsRemaining;                                         // 0x0070(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerSpawnTicket_TA");
		return ptr;
	}

};


// Class TAGame.ProductOverride_DisableSkelControl_TA
// 0x0008 (0x0068 - 0x0060)
class UProductOverride_DisableSkelControl_TA : public UProductOverride_TA
{
public:
	struct FName                                       SkelControlToDisable;                                     // 0x0060(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_DisableSkelControl_TA");
		return ptr;
	}


	void ApplyToObject(class UObject* Target);
};


// Class TAGame.ProductOverride_ParticleSystemComponent_TA
// 0x0008 (0x0068 - 0x0060)
class UProductOverride_ParticleSystemComponent_TA : public UProductOverride_TA
{
public:
	class UParticleSystem*                             ParticleSystem;                                           // 0x0060(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_ParticleSystemComponent_TA");
		return ptr;
	}


	void ApplyToObject(class UObject* Target);
};


// Class TAGame.ProductOverride_ParticleSystemParameterBase_TA
// 0x0000 (0x0060 - 0x0060)
class UProductOverride_ParticleSystemParameterBase_TA : public UProductOverride_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_ParticleSystemParameterBase_TA");
		return ptr;
	}


	void ApplyToParticleSystem(const TScriptInterface<class UISetParameter>& ParameterTarget);
	void ApplyToObject(class UObject* Target);
};


// Class TAGame.ProductOverride_ParticleSystemFloatParameter_TA
// 0x000C (0x006C - 0x0060)
class UProductOverride_ParticleSystemFloatParameter_TA : public UProductOverride_ParticleSystemParameterBase_TA
{
public:
	struct FFloatParamPair                             FloatParameter;                                           // 0x0060(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_ParticleSystemFloatParameter_TA");
		return ptr;
	}


	void ApplyToParticleSystem(const TScriptInterface<class UISetParameter>& ParameterTarget);
};


// Class TAGame.ProductOverride_ParticleSystemNameParameter_TA
// 0x0010 (0x0070 - 0x0060)
class UProductOverride_ParticleSystemNameParameter_TA : public UProductOverride_ParticleSystemParameterBase_TA
{
public:
	struct FNameParamPair                              NameParameter;                                            // 0x0060(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_ParticleSystemNameParameter_TA");
		return ptr;
	}


	void ApplyToParticleSystem(const TScriptInterface<class UISetParameter>& ParameterTarget);
};


// Class TAGame.ProductOverride_ParticleSystemVectorParameter_TA
// 0x0014 (0x0074 - 0x0060)
class UProductOverride_ParticleSystemVectorParameter_TA : public UProductOverride_ParticleSystemParameterBase_TA
{
public:
	struct FVectorParamPair                            VectorParameter;                                          // 0x0060(0x0014) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_ParticleSystemVectorParameter_TA");
		return ptr;
	}


	void ApplyToParticleSystem(const TScriptInterface<class UISetParameter>& ParameterTarget);
};


// Class TAGame.ProductOverride_StopAttachmentBehaviors_TA
// 0x0010 (0x0070 - 0x0060)
class UProductOverride_StopAttachmentBehaviors_TA : public UProductOverride_TA
{
public:
	TArray<class UClass*>                              BehaviorsToZeroOut;                                       // 0x0060(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_StopAttachmentBehaviors_TA");
		return ptr;
	}


	void __ProductOverride_StopAttachmentBehaviors_TA__ApplyToObject_91239037468E55554A3D2699BA332688(class UAttachmentBehavior_TA* A);
	bool CanZeroOutCurrentAttachment(class UAttachmentBehavior_TA* AttachmentToCheck);
	void ApplyToObject(class UObject* Target, TArray<class UAttachmentBehavior_TA*>* FilterLocal_9D094D29400387833EA1D3A64727B891);
};


// Class TAGame.ProductOverride_WheelAttachment_TA
// 0x0010 (0x0070 - 0x0060)
class UProductOverride_WheelAttachment_TA : public UProductOverride_TA
{
public:
	TArray<struct FWheelAttachment>                    AttachmentsToOverride;                                    // 0x0060(0x0010) (Edit, Component, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductOverride_WheelAttachment_TA");
		return ptr;
	}


	class USkeletalMeshComponent* GetSkeletalMeshComponentOfWheel(class UObject* Target);
	void ApplyToObject(class UObject* Target);
};


// Class TAGame.RocketPassErrors_TA
// 0x0030 (0x00B0 - 0x0080)
class URocketPassErrors_TA : public UErrorList
{
public:
	class UErrorType*                                  InvalidRocketPass;                                        // 0x0080(0x0008) (Const)
	class UErrorType*                                  RocketPassNotActive;                                      // 0x0088(0x0008) (Const)
	class UErrorType*                                  InvalidKey;                                               // 0x0090(0x0008) (Const)
	class UErrorType*                                  PlayerAlreadyPremium;                                     // 0x0098(0x0008) (Const)
	class UErrorType*                                  DoesNotOwnPremium;                                        // 0x00A0(0x0008) (Const)
	class UErrorType*                                  PurchasableNotFound;                                      // 0x00A8(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RocketPassErrors_TA");
		return ptr;
	}

};


// Class TAGame.RPC_BanSelf_TA
// 0x0028 (0x0128 - 0x0100)
class URPC_BanSelf_TA : public URPC_X
{
public:
	int                                                DurationSeconds;                                          // 0x0100(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	struct FString                                     ReasonID;                                                 // 0x0108(0x0010) (NeedCtorLink)
	struct FString                                     BanType;                                                  // 0x0118(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_BanSelf_TA");
		return ptr;
	}

};


// Class TAGame.RPC_Challenge_ResetAllProgress_TA
// 0x0038 (0x0138 - 0x0100)
class URPC_Challenge_ResetAllProgress_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_Challenge_ResetAllProgress_TA");
		return ptr;
	}


	class URPC_Challenge_ResetAllProgress_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_Challenge_ResetChallengeProgress_TA
// 0x003C (0x013C - 0x0100)
class URPC_Challenge_ResetChallengeProgress_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	int                                                ChallengeID;                                              // 0x0138(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_Challenge_ResetChallengeProgress_TA");
		return ptr;
	}


	class URPC_Challenge_ResetChallengeProgress_TA* SetChallengeID(int InChallengeID);
	class URPC_Challenge_ResetChallengeProgress_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_Challenge_SetProgress_TA
// 0x0040 (0x0140 - 0x0100)
class URPC_Challenge_SetProgress_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	int                                                ChallengeID;                                              // 0x0138(0x0004)
	int                                                Count;                                                    // 0x013C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_Challenge_SetProgress_TA");
		return ptr;
	}


	class URPC_Challenge_SetProgress_TA* SetCount(int InCount);
	class URPC_Challenge_SetProgress_TA* SetChallengeID(int InChallengeID);
	class URPC_Challenge_SetProgress_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_DebugAddXP_TA
// 0x0060 (0x0160 - 0x0100)
class URPC_DebugAddXP_TA : public URPC_X
{
public:
	int                                                XPToAdd;                                                  // 0x0100(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	struct FUniqueNetId                                PlayerID;                                                 // 0x0108(0x0038)
	struct FXPInfo                                     XPInfoResponse;                                           // 0x0140(0x0020) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_DebugAddXP_TA");
		return ptr;
	}


	class URPC_DebugAddXP_TA* SetXPAmount(int InXPToAdd);
	class URPC_DebugAddXP_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_DebugSetXP_TA
// 0x0060 (0x0160 - 0x0100)
class URPC_DebugSetXP_TA : public URPC_X
{
public:
	int                                                XPToSet;                                                  // 0x0100(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	struct FUniqueNetId                                PlayerID;                                                 // 0x0108(0x0038)
	struct FXPInfo                                     XPInfoResponse;                                           // 0x0140(0x0020) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_DebugSetXP_TA");
		return ptr;
	}


	class URPC_DebugSetXP_TA* SetXPAmount(int InXPToSet);
	class URPC_DebugSetXP_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_FaceItUpdateGame_TA
// 0x0060 (0x0160 - 0x0100)
class URPC_FaceItUpdateGame_TA : public URPC_X
{
public:
	int                                                MatchID;                                                  // 0x0100(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0104(0x0004) MISSED OFFSET
	unsigned char                                      UnknownData01[0x8];                                       // 0x0104(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_FaceItUpdateGame_TA.serverId
	int                                                SeriesRoundNumber;                                        // 0x0110(0x0004)
	struct FTourMatchGame                              GameData;                                                 // 0x0114(0x0014)
	int                                                SeriesWinner;                                             // 0x0128(0x0004)
	unsigned char                                      UnknownData02[0x4];                                       // 0x012C(0x0004) MISSED OFFSET
	TArray<struct FFaceItPlayerStats>                  PlayersStats;                                             // 0x0130(0x0010) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        PlayersNoShow;                                            // 0x0140(0x0010) (NeedCtorLink)
	TArray<struct FUniqueNetId>                        PlayersLeftEarly;                                         // 0x0150(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_FaceItUpdateGame_TA");
		return ptr;
	}

};


// Class TAGame.RPC_GetSpecialEventCurrency_TA
// 0x0058 (0x0158 - 0x0100)
class URPC_GetSpecialEventCurrency_TA : public URPC_SpecialEventBase_TA
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	int                                                EventID;                                                  // 0x0138(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x013C(0x0004) MISSED OFFSET
	struct FEventCurrencyData                          EventCurrency;                                            // 0x0140(0x0018) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetSpecialEventCurrency_TA");
		return ptr;
	}


	class URPC_GetSpecialEventCurrency_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	class URPC_GetSpecialEventCurrency_TA* SetEventID(int InEventID);
};


// Class TAGame.RPC_GetSpecialEvents_TA
// 0x0010 (0x0110 - 0x0100)
class URPC_GetSpecialEvents_TA : public URPC_SpecialEventBase_TA
{
public:
	TArray<struct FSpecialEventData>                   Events;                                                   // 0x0100(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_GetSpecialEvents_TA");
		return ptr;
	}

};


// Class TAGame.RPC_ProductsDebugAddProduct_TA
// 0x0088 (0x0188 - 0x0100)
class URPC_ProductsDebugAddProduct_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	int                                                ProductID;                                                // 0x0138(0x0004)
	int                                                SeriesID;                                                 // 0x013C(0x0004)
	TArray<struct FAddProductAttribute>                Attributes;                                               // 0x0140(0x0010) (NeedCtorLink)
	struct FOnlineProductData                          Product;                                                  // 0x0150(0x0030) (Transient, NeedCtorLink)
	class UOnlineProduct_TA*                           OnlineProduct;                                            // 0x0180(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsDebugAddProduct_TA");
		return ptr;
	}


	void OnSuccess();
	class URPC_ProductsDebugAddProduct_TA* SetBlueprintCost(int Cost, struct FAddProductAttribute* StructInitializer_7E71A010468A4C126B6C6D98F752B5EE);
	class URPC_ProductsDebugAddProduct_TA* SetBlueprint(int BlueprintID, struct FAddProductAttribute* StructInitializer_1CDDC44F4A8C344ACBC045B8E7C9B37B);
	class URPC_ProductsDebugAddProduct_TA* SetPainted(int PaintID, struct FAddProductAttribute* StructInitializer_6548A1C04F2875675E2ECC89C1807E07);
	class URPC_ProductsDebugAddProduct_TA* SetTeamEdition(int TeamEditionId, struct FAddProductAttribute* StructInitializer_D0E78A9E4D81A0932FD27BAE5A10E73F);
	class URPC_ProductsDebugAddProduct_TA* SetCertified(int CertifiedId, struct FAddProductAttribute* StructInitializer_73C5CDF342BD225A37FCC98B7E02232D);
	class URPC_ProductsDebugAddProduct_TA* SetRentalLength(int RentalLengthDays, struct FAddProductAttribute* StructInitializer_A1215513481FAC043DD30AA770319F6A);
	class URPC_ProductsDebugAddProduct_TA* SetExpirationTime(struct FAddProductAttribute* StructInitializer_3B2B4F8C422F5167F319C2ACC97A2837, struct FAddProductAttribute* StructInitializer_1FABC4E14FD1CB6009B00CB673AFA983);
	class URPC_ProductsDebugAddProduct_TA* SetSeriesID(int InSeriesID);
	class URPC_ProductsDebugAddProduct_TA* SetProductID(int InProductID);
	class URPC_ProductsDebugAddProduct_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_ProductsDebugAddRandom_TA
// 0x0060 (0x0160 - 0x0100)
class URPC_ProductsDebugAddRandom_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	int                                                Count;                                                    // 0x0138(0x0004)
	int                                                SeriesID;                                                 // 0x013C(0x0004)
	TArray<struct FOnlineProductData>                  Drops;                                                    // 0x0140(0x0010) (Transient, NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   Products;                                                 // 0x0150(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsDebugAddRandom_TA");
		return ptr;
	}


	void OnSuccess();
	class URPC_ProductsDebugAddRandom_TA* SetSeriesID(int InSeriesID);
	class URPC_ProductsDebugAddRandom_TA* SetCount(int InCount);
	class URPC_ProductsDebugAddRandom_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_ProductsDebugSetCertified_TA
// 0x0098 (0x0198 - 0x0100)
class URPC_ProductsDebugSetCertified_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_ProductsDebugSetCertified_TA.InstanceID
	int                                                CertifiedStatID;                                          // 0x0140(0x0004)
	int                                                CertifiedValue;                                           // 0x0144(0x0004)
	struct FOnlineProductData                          Product;                                                  // 0x0148(0x0030) (Transient, NeedCtorLink)
	class UOnlineProduct_TA*                           OnlineProduct;                                            // 0x0178(0x0008) (Transient)
	struct FScriptDelegate                             __EventCertifiedComplete__Delegate;                       // 0x0180(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0180(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsDebugSetCertified_TA");
		return ptr;
	}


	void OnComplete();
	class URPC_ProductsDebugSetCertified_TA* NotifyCertifiedComplete(const struct FScriptDelegate& Callback);
	class URPC_ProductsDebugSetCertified_TA* SetCertifiedValue(int InCertifiedValue);
	class URPC_ProductsDebugSetCertified_TA* SetCertifiedStatID(int InCertifiedStatID);
	class URPC_ProductsDebugSetCertified_TA* SetInstanceID();
	class URPC_ProductsDebugSetCertified_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	void EventCertifiedComplete(class UOnlineProduct_TA* NewProduct);
};


// Class TAGame.RPC_ProductsDebugSetEdition_TA
// 0x0098 (0x0198 - 0x0100)
class URPC_ProductsDebugSetEdition_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_ProductsDebugSetEdition_TA.InstanceID
	int                                                EditionID;                                                // 0x0140(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	struct FOnlineProductData                          Product;                                                  // 0x0148(0x0030) (Transient, NeedCtorLink)
	class UOnlineProduct_TA*                           OnlineProduct;                                            // 0x0178(0x0008) (Transient)
	struct FScriptDelegate                             __EventEditionComplete__Delegate;                         // 0x0180(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0180(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsDebugSetEdition_TA");
		return ptr;
	}


	void OnComplete();
	class URPC_ProductsDebugSetEdition_TA* NotifyEditionComplete(const struct FScriptDelegate& Callback);
	class URPC_ProductsDebugSetEdition_TA* SetEditionID(int InEditionID);
	class URPC_ProductsDebugSetEdition_TA* SetInstanceID();
	class URPC_ProductsDebugSetEdition_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	void EventEditionComplete(class UOnlineProduct_TA* NewProduct);
};


// Class TAGame.RPC_ProductsDebugSetPainted_TA
// 0x0098 (0x0198 - 0x0100)
class URPC_ProductsDebugSetPainted_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_ProductsDebugSetPainted_TA.InstanceID
	int                                                PaintID;                                                  // 0x0140(0x0004)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	struct FOnlineProductData                          Product;                                                  // 0x0148(0x0030) (Transient, NeedCtorLink)
	class UOnlineProduct_TA*                           OnlineProduct;                                            // 0x0178(0x0008) (Transient)
	struct FScriptDelegate                             __EventPaintedComplete__Delegate;                         // 0x0180(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x8];                                       // 0x0180(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_ProductsDebugSetPainted_TA");
		return ptr;
	}


	void OnComplete();
	class URPC_ProductsDebugSetPainted_TA* NotifyPaintedComplete(const struct FScriptDelegate& Callback);
	class URPC_ProductsDebugSetPainted_TA* SetPaintID(int InPaintID);
	class URPC_ProductsDebugSetPainted_TA* SetInstanceID();
	class URPC_ProductsDebugSetPainted_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
	void EventPaintedComplete(class UOnlineProduct_TA* NewProduct);
};


// Class TAGame.RPC_PsyNetSetVanity_TA
// 0x0010 (0x0110 - 0x0100)
class URPC_PsyNetSetVanity_TA : public URPC_X
{
public:
	TArray<struct FVanityLoadout>                      VanityLoadouts;                                           // 0x0100(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_PsyNetSetVanity_TA");
		return ptr;
	}


	class URPC_PsyNetSetVanity_TA* AddVanityInfo(class UPlayerVanity_TA* Vanity, int InType);
};


// Class TAGame.RPC_SelectIntroCar_TA
// 0x0060 (0x0160 - 0x0100)
class URPC_SelectIntroCar_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	int                                                TemplateIndex;                                            // 0x0138(0x0004)
	unsigned char                                      UnknownData00[0x4];                                       // 0x013C(0x0004) MISSED OFFSET
	TArray<struct FOnlineProductData>                  ProductData;                                              // 0x0140(0x0010) (Transient, NeedCtorLink)
	TArray<class UOnlineProduct_TA*>                   ProcessedProducts;                                        // 0x0150(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_SelectIntroCar_TA");
		return ptr;
	}


	void OnComplete();
	class URPC_SelectIntroCar_TA* SetSelectedIndex(int InTemplateIndex);
	class URPC_SelectIntroCar_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_TourGetRewards_TA
// 0x0050 (0x0150 - 0x0100)
class URPC_TourGetRewards_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0138(0x0008) UNKNOWN PROPERTY: QWordProperty TAGame.RPC_TourGetRewards_TA.TournamentID
	TArray<struct FTourReward>                         Rewards;                                                  // 0x0140(0x0010) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourGetRewards_TA");
		return ptr;
	}


	class URPC_TourGetRewards_TA* SetTournamentID();
	class URPC_TourGetRewards_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.RPC_TourStartMatchmaking_TA
// 0x0038 (0x0138 - 0x0100)
class URPC_TourStartMatchmaking_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourStartMatchmaking_TA");
		return ptr;
	}


	class URPC_TourStartMatchmaking_TA* SetPlayerID(struct FUniqueNetId* InPlayerId);
};


// Class TAGame.RPC_UploadXP_TA
// 0x0040 (0x0140 - 0x0100)
class URPC_UploadXP_TA : public URPC_X
{
public:
	struct FUniqueNetId                                PlayerID;                                                 // 0x0100(0x0038)
	float                                              XPTotal;                                                  // 0x0138(0x0004)
	int                                                XpLevel;                                                  // 0x013C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_UploadXP_TA");
		return ptr;
	}


	class URPC_UploadXP_TA* SetXPLevel(int InXPLevel);
	class URPC_UploadXP_TA* SetXPTotal(float InXPTotal);
	class URPC_UploadXP_TA* SetPlayerID(const struct FUniqueNetId& InPlayerId);
};


// Class TAGame.ScrollComponent_TA
// 0x0074 (0x0118 - 0x00A4)
class UScrollComponent_TA : public UActorComponent_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x00A4(0x0004) MISSED OFFSET
	unsigned long                                      bGrabbed : 1;                                             // 0x00A8(0x0004) (Transient)
	unsigned long                                      bDeterminedSnapStopLocation : 1;                          // 0x00A8(0x0004)
	float                                              Momentum;                                                 // 0x00AC(0x0004)
	int                                                ActiveSnapIndex;                                          // 0x00B0(0x0004)
	float                                              GrabbedMoveSpeed;                                         // 0x00B4(0x0004)
	float                                              MaxMomentum;                                              // 0x00B8(0x0004)
	float                                              LastMomentum;                                             // 0x00BC(0x0004)
	float                                              MinStopMomentum;                                          // 0x00C0(0x0004)
	float                                              FallOffSpeed;                                             // 0x00C4(0x0004) (Const)
	struct FVector                                     ScrollDirection;                                          // 0x00C8(0x000C)
	struct FVector                                     StartPoint;                                               // 0x00D4(0x000C)
	float                                              TotalDistance;                                            // 0x00E0(0x0004)
	float                                              SnapDistance;                                             // 0x00E4(0x0004)
	int                                                TotalSnaps;                                               // 0x00E8(0x0004)
	struct FVector                                     StopSnapLocation;                                         // 0x00EC(0x000C)
	float                                              SnapBlendSpeed;                                           // 0x00F8(0x0004)
	float                                              ShiftSnapBlendSpeed;                                      // 0x00FC(0x0004)
	struct FScriptDelegate                             __EventSnapIndexChanged__Delegate;                        // 0x0100(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x8];                                       // 0x0100(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ScrollComponent_TA");
		return ptr;
	}


	bool MoveInDirection(const struct FVector& MoveDirection);
	void SetSnapLocation(int SnapIndex, float BlendSpeed);
	struct FVector GetSnapIndexLocation(int SnapIndex);
	int CalculateSnapIndex();
	void DetermineSnapStopLocation();
	void SetActiveSnapIndex(int NewIndex);
	int ClampSnapIndex(int Index);
	void MoveToSnapIndex(int Index);
	void ShiftVerticalToSnap(int Direction);
	bool FinishMovement(float DeltaTime);
	void UpdateLocation(float DeltaTime, float Input, bool bGamepad);
	float CalculateMomentumFalloff(float DeltaTime);
	float DetermineMoveSpeed(float DeltaTime, float Input, bool bGamepad);
	void SetGrabbed(bool bGrab);
	void StopMovement();
	void SetScrollPoints(const struct FVector& InStartPoint, float InSnapDistance, int InTotalSnaps, float InTotalDistance);
	void Tick(float DeltaTime);
	void BeginPlay();
	void EventSnapIndexChanged(class UScrollComponent_TA* ScrollComponent, int PreviousSnapIndex);
};


// Class TAGame.SeqAct_AttachAssetToCar_TA
// 0x0020 (0x0180 - 0x0160)
class USeqAct_AttachAssetToCar_TA : public USequenceAction
{
public:
	class UStaticMesh*                                 StaticMeshToAttach;                                       // 0x0160(0x0008) (Edit)
	class USkeletalMesh*                               SkeletalMeshToAttach;                                     // 0x0168(0x0008) (Edit)
	class UParticleSystem*                             ParticleSystemToAttach;                                   // 0x0170(0x0008) (Edit)
	struct FName                                       BoneToAttachTo;                                           // 0x0178(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_AttachAssetToCar_TA");
		return ptr;
	}


	void Activated(TArray<class ACar_TA*>* OfTypeLocal_3F3523B24F6D3F144D5269A8705D3B4D);
};


// Class TAGame.SeqAct_CheckRotationAngle_TA
// 0x0045 (0x01BD - 0x0178)
class USeqAct_CheckRotationAngle_TA : public USeqAct_Latent
{
public:
	class AActor*                                      Actor;                                                    // 0x0178(0x0008)
	class AActor*                                      CheckActor;                                               // 0x0180(0x0008)
	float                                              RotationAngle;                                            // 0x0188(0x0004)
	struct FRotator                                    LastRotation;                                             // 0x018C(0x000C)
	float                                              LastDirection;                                            // 0x0198(0x0004)
	struct FVector                                     CheckAxis;                                                // 0x019C(0x000C)
	struct FVector                                     TurnAxis;                                                 // 0x01A8(0x000C)
	float                                              MaxRotationAngle;                                         // 0x01B4(0x0004) (Edit)
	unsigned long                                      bResetOnDirectionChange : 1;                              // 0x01B8(0x0004) (Edit)
	TEnumAsByte<ECheckAxis>                            AxisDirection;                                            // 0x01BC(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_CheckRotationAngle_TA");
		return ptr;
	}


	struct FVector GetTurnAxis();
	struct FVector GetCheckAxis();
	bool Update(float DeltaTime);
	void Activated();
};


// Class TAGame.SeqAct_CompleteFTECheckpoint_TA
// 0x0010 (0x0170 - 0x0160)
class USeqAct_CompleteFTECheckpoint_TA : public USequenceAction
{
public:
	struct FString                                     CheckpointName;                                           // 0x0160(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_CompleteFTECheckpoint_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_Counter_TA
// 0x0004 (0x0164 - 0x0160)
class USeqAct_Counter_TA : public USequenceAction
{
public:
	int                                                MaxCount;                                                 // 0x0160(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_Counter_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_CreateAttachComponent_TA
// 0x0010 (0x0170 - 0x0160)
class USeqAct_CreateAttachComponent_TA : public USequenceAction
{
public:
	class AActor*                                      AttachTo;                                                 // 0x0160(0x0008)
	class UActorComponent_X*                           AttachingComponent;                                       // 0x0168(0x0008) (Edit, ExportObject, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_CreateAttachComponent_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_DisableForceInFXActor_TA
// 0x0008 (0x0168 - 0x0160)
class USeqAct_DisableForceInFXActor_TA : public USequenceAction
{
public:
	class AFXActor_X*                                  InFXActor;                                                // 0x0160(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_DisableForceInFXActor_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GameURLHasOption_TA
// 0x0010 (0x0170 - 0x0160)
class USeqAct_GameURLHasOption_TA : public USequenceAction
{
public:
	struct FString                                     Option;                                                   // 0x0160(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GameURLHasOption_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetFTEState_TA
// 0x0014 (0x0174 - 0x0160)
class USeqAct_GetFTEState_TA : public USequenceAction
{
public:
	struct FString                                     CheckpointName;                                           // 0x0160(0x0010) (NeedCtorLink)
	unsigned long                                      bIsActive : 1;                                            // 0x0170(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetFTEState_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetGameBall_TA
// 0x0008 (0x0168 - 0x0160)
class USeqAct_GetGameBall_TA : public USequenceAction
{
public:
	class UObject*                                     Ball;                                                     // 0x0160(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetGameBall_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetPlayerCar_TA
// 0x0018 (0x0178 - 0x0160)
class USeqAct_GetPlayerCar_TA : public USequenceAction
{
public:
	struct FString                                     PlayerName;                                               // 0x0160(0x0010) (Edit, NeedCtorLink)
	class AActor*                                      FoundActor;                                               // 0x0170(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetPlayerCar_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetRarityColor_TA
// 0x003C (0x019C - 0x0160)
class USeqAct_GetRarityColor_TA : public USequenceAction
{
public:
	TArray<struct FVector>                             RarityColorsPrime;                                        // 0x0160(0x0010) (NeedCtorLink)
	TArray<struct FVector>                             RarityColorsChina;                                        // 0x0170(0x0010) (NeedCtorLink)
	unsigned long                                      bRandomize : 1;                                           // 0x0180(0x0004) (Edit)
	TEnumAsByte<EProductQuality>                       MinimumRandomQuality;                                     // 0x0184(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0185(0x0003) MISSED OFFSET
	int                                                ColorIdx;                                                 // 0x0188(0x0004)
	struct FVector                                     OutColor;                                                 // 0x018C(0x000C) (Transient)
	int                                                LastRandomIdx;                                            // 0x0198(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetRarityColor_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_GetTeamScore_TA
// 0x0008 (0x0168 - 0x0160)
class USeqAct_GetTeamScore_TA : public USequenceAction
{
public:
	int                                                TeamIndex;                                                // 0x0160(0x0004)
	int                                                TeamScore;                                                // 0x0164(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetTeamScore_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_InstanceMaterial_TA
// 0x0024 (0x0184 - 0x0160)
class USeqAct_InstanceMaterial_TA : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MaterialInstance;                                         // 0x0160(0x0008) (Edit)
	class ASkeletalMeshActor*                          SK;                                                       // 0x0168(0x0008)
	class AStaticMeshActor*                            SM;                                                       // 0x0170(0x0008)
	class UMaterialInstanceConstant*                   InstancedMaterial;                                        // 0x0178(0x0008)
	int                                                MatIndex;                                                 // 0x0180(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_InstanceMaterial_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_IsTargetInPlayerCameraView
// 0x0014 (0x018C - 0x0178)
class USeqAct_IsTargetInPlayerCameraView : public USeqAct_Latent
{
public:
	class AActor*                                      Instigator;                                               // 0x0178(0x0008)
	class AActor*                                      Target;                                                   // 0x0180(0x0008)
	float                                              MaxConeAngle;                                             // 0x0188(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_IsTargetInPlayerCameraView");
		return ptr;
	}


	bool Update(float DeltaTime);
};


// Class TAGame.SeqAct_LoadMap_TA
// 0x0010 (0x0170 - 0x0160)
class USeqAct_LoadMap_TA : public USequenceAction
{
public:
	struct FString                                     Map;                                                      // 0x0160(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_LoadMap_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_LookAtActor_TA
// 0x0018 (0x0190 - 0x0178)
class USeqAct_LookAtActor_TA : public USeqAct_Latent
{
public:
	class AActor*                                      Actor;                                                    // 0x0178(0x0008)
	class AActor*                                      ActorToLookAt;                                            // 0x0180(0x0008)
	float                                              InterpSpeed;                                              // 0x0188(0x0004) (Edit)
	unsigned long                                      bConstantInterpSpeed : 1;                                 // 0x018C(0x0004) (Edit)
	unsigned long                                      bUpdating : 1;                                            // 0x018C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_LookAtActor_TA");
		return ptr;
	}


	void SetActorRotation(const struct FRotator& NewRotation);
	bool Update(float DeltaTime);
	void Activated();
};


// Class TAGame.SeqAct_MatchCountdown_TA
// 0x0004 (0x0164 - 0x0160)
class USeqAct_MatchCountdown_TA : public USequenceAction
{
public:
	int                                                CountdownTime;                                            // 0x0160(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_MatchCountdown_TA");
		return ptr;
	}


	void HandleCountdown();
	void Activated();
};


// Class TAGame.SeqAct_MoveActor_TA
// 0x0018 (0x0190 - 0x0178)
class USeqAct_MoveActor_TA : public USeqAct_Latent
{
public:
	class AActor*                                      Actor;                                                    // 0x0178(0x0008)
	class AActor*                                      MoveTransform;                                            // 0x0180(0x0008)
	float                                              InterpSpeed;                                              // 0x0188(0x0004) (Edit)
	unsigned long                                      bConstantInterpSpeed : 1;                                 // 0x018C(0x0004) (Edit)
	unsigned long                                      bMove : 1;                                                // 0x018C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_MoveActor_TA");
		return ptr;
	}


	bool Update(float DeltaTime);
	void Activated();
};


// Class TAGame.SeqAct_ReinitPhys_TA
// 0x0008 (0x0168 - 0x0160)
class USeqAct_ReinitPhys_TA : public USequenceAction
{
public:
	class AActor*                                      RBObj;                                                    // 0x0160(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_ReinitPhys_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_RotateActor_TA
// 0x001C (0x0194 - 0x0178)
class USeqAct_RotateActor_TA : public USeqAct_Latent
{
public:
	class AActor*                                      Actor;                                                    // 0x0178(0x0008)
	class AActor*                                      RotateTransform;                                          // 0x0180(0x0008)
	float                                              InterpSpeed;                                              // 0x0188(0x0004) (Edit)
	unsigned long                                      bConstantInterpSpeed : 1;                                 // 0x018C(0x0004) (Edit)
	unsigned long                                      bUpdating : 1;                                            // 0x018C(0x0004)
	float                                              RotateTolerance;                                          // 0x0190(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_RotateActor_TA");
		return ptr;
	}


	void SetActorRotation(const struct FRotator& NewRotation);
	bool Update(float DeltaTime);
	void Activated();
};


// Class TAGame.SeqAct_SetBreakoutBallCharge_TA
// 0x0010 (0x0170 - 0x0160)
class USeqAct_SetBreakoutBallCharge_TA : public USequenceAction
{
public:
	class AActor*                                      BallObj;                                                  // 0x0160(0x0008)
	int                                                Charge;                                                   // 0x0168(0x0004)
	int                                                Team;                                                     // 0x016C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetBreakoutBallCharge_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetBreakoutTileDamage_TA
// 0x000C (0x016C - 0x0160)
class USeqAct_SetBreakoutTileDamage_TA : public USequenceAction
{
public:
	class AActor*                                      PlatformObj;                                              // 0x0160(0x0008)
	int                                                Damage;                                                   // 0x0168(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetBreakoutTileDamage_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetGreenScreen_TA
// 0x0010 (0x0170 - 0x0160)
class USeqAct_SetGreenScreen_TA : public USequenceAction
{
public:
	struct FLinearColor                                ColorToUse;                                               // 0x0160(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetGreenScreen_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetMatInstVectorParam_TA
// 0x001C (0x017C - 0x0160)
class USeqAct_SetMatInstVectorParam_TA : public USequenceAction
{
public:
	class UMaterialInstanceConstant*                   MatInst;                                                  // 0x0160(0x0008) (Edit)
	struct FName                                       ParamName;                                                // 0x0168(0x0008) (Edit)
	struct FVector                                     VectorValue;                                              // 0x0170(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetMatInstVectorParam_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetMeshMaterialScalarParameter_TA
// 0x0024 (0x0184 - 0x0160)
class USeqAct_SetMeshMaterialScalarParameter_TA : public USequenceAction
{
public:
	TArray<class UObject*>                             MeshList;                                                 // 0x0160(0x0010) (Edit, NeedCtorLink)
	struct FString                                     ParamName;                                                // 0x0170(0x0010) (Edit, NeedCtorLink)
	float                                              ScalarValue;                                              // 0x0180(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetMeshMaterialScalarParameter_TA");
		return ptr;
	}


	void __SeqAct_SetMeshMaterialScalarParameter_TA__Activated_73DB3E6943F50B6A959069BFA5274788(class UObject* Mesh);
	void Activated();
};


// Class TAGame.SeqAct_SetNameplate_TA
// 0x0018 (0x0178 - 0x0160)
class USeqAct_SetNameplate_TA : public USequenceAction
{
public:
	class AActor*                                      Instigator;                                               // 0x0160(0x0008)
	struct FString                                     LocalizedPlayerName;                                      // 0x0168(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetNameplate_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetPostProcess_TA
// 0x0014 (0x0174 - 0x0160)
class USeqAct_SetPostProcess_TA : public USequenceAction
{
public:
	TArray<class UPostProcessChain*>                   Chains;                                                   // 0x0160(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bReplaceCurrentChain : 1;                                 // 0x0170(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetPostProcess_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetReplayCamera_TA
// 0x002C (0x018C - 0x0160)
class USeqAct_SetReplayCamera_TA : public USequenceAction
{
public:
	struct FString                                     FocusActor;                                               // 0x0160(0x0010) (Edit, NeedCtorLink)
	struct FVector                                     LocationOffset;                                           // 0x0170(0x000C) (Edit)
	struct FRotator                                    Rotation;                                                 // 0x017C(0x000C) (Edit)
	float                                              FOV;                                                      // 0x0188(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetReplayCamera_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetSkelMATLoadout_TA
// 0x0014 (0x0174 - 0x0160)
class USeqAct_SetSkelMATLoadout_TA : public USequenceAction
{
public:
	class ASkeletalMeshActorMAT_Products_TA*           ActorMAT;                                                 // 0x0160(0x0008)
	class UObject*                                     ControllerOrPawn;                                         // 0x0168(0x0008)
	int                                                LoadoutIndex;                                             // 0x0170(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetSkelMATLoadout_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SetTutorialTip_TA
// 0x0020 (0x0180 - 0x0160)
class USeqAct_SetTutorialTip_TA : public USequenceAction
{
public:
	struct FString                                     Tip;                                                      // 0x0160(0x0010) (Edit, Const, Localized, NeedCtorLink)
	TArray<struct FName>                               ActionNames;                                              // 0x0170(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SetTutorialTip_TA");
		return ptr;
	}


	struct FString GetStringWithMergedActions();
	void Activated();
};


// Class TAGame.SeqAct_SpawnActor_TA
// 0x0018 (0x0178 - 0x0160)
class USeqAct_SpawnActor_TA : public USequenceAction
{
public:
	class AActor*                                      ActorArchetype;                                           // 0x0160(0x0008)
	class AActor*                                      Transform;                                                // 0x0168(0x0008)
	class AActor*                                      SpawnedActor;                                             // 0x0170(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SpawnActor_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_SpawnFXActor_TA
// 0x0038 (0x0198 - 0x0160)
class USeqAct_SpawnFXActor_TA : public USequenceAction
{
public:
	class AFXActor_X*                                  FXActor;                                                  // 0x0160(0x0008) (Edit)
	class AActor*                                      Transform;                                                // 0x0168(0x0008)
	struct FVector                                     Location;                                                 // 0x0170(0x000C) (Edit)
	struct FRotator                                    Rotation;                                                 // 0x017C(0x000C) (Edit)
	class AActor*                                      ActorToSpawnOn;                                           // 0x0188(0x0008)
	class AFXActor_X*                                  SpawnedFXActor;                                           // 0x0190(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_SpawnFXActor_TA");
		return ptr;
	}


	void SpawnFXActor(const struct FVector& LocationToSpawnOn, const struct FRotator& RotationToSpawnWith);
	void Activated();
};


// Class TAGame.SeqAct_TermPhys_TA
// 0x0008 (0x0168 - 0x0160)
class USeqAct_TermPhys_TA : public USequenceAction
{
public:
	class AActor*                                      RBObj;                                                    // 0x0160(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_TermPhys_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqCond_CompareString_TA
// 0x0028 (0x0168 - 0x0140)
class USeqCond_CompareString_TA : public USequenceCondition
{
public:
	unsigned long                                      bIgnoreCase : 1;                                          // 0x0140(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0144(0x0004) MISSED OFFSET
	struct FString                                     StringA;                                                  // 0x0148(0x0010) (NeedCtorLink)
	struct FString                                     StringB;                                                  // 0x0158(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqCond_CompareString_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqEvent_CarSpawned_TA
// 0x0014 (0x0190 - 0x017C)
class USeqEvent_CarSpawned_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	struct FString                                     PlayerName;                                               // 0x0180(0x0010) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_CarSpawned_TA");
		return ptr;
	}


	void TriggerFor(class ACar_TA* Car);
	void HandleVehicleSetup(class ACar_TA* Car);
	void HandleCarSet(class APRI_TA* PRI);
	void RegisterEvent();
};


// Class TAGame.SeqEvent_CarTouchBall_TA
// 0x0008 (0x0184 - 0x017C)
class USeqEvent_CarTouchBall_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	unsigned long                                      bOneTouchOnly : 1;                                        // 0x0180(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_CarTouchBall_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_GarageComplexState_TA
// 0x0024 (0x01A0 - 0x017C)
class USeqEvent_GarageComplexState_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	struct FString                                     GarageState;                                              // 0x0180(0x0010) (NeedCtorLink)
	struct FString                                     PreviousGarageState;                                      // 0x0190(0x0010) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_GarageComplexState_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_MainMenuSwitched_TA
// 0x0005 (0x0181 - 0x017C)
class USeqEvent_MainMenuSwitched_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET
	TEnumAsByte<EMainMenuBackground>                   PrevBackground;                                           // 0x0180(0x0001) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_MainMenuSwitched_TA");
		return ptr;
	}


	void __SeqEvent_MainMenuSwitched_TA__RegisterEvent_9E9C31BB400630AB0525668C17193940(class UUIConfig_TA* Config);
	void __SeqEvent_MainMenuSwitched_TA__RegisterEvent_098F1BDD44C304F6D7CF80ABC3975D42(class UUIConfig_TA* Config);
	void HandleMenuBGChange();
	void RegisterEvent();
};


// Class TAGame.ShopErrors_TA
// 0x0020 (0x00A0 - 0x0080)
class UShopErrors_TA : public UErrorList
{
public:
	class UErrorType*                                  ShopItemBadData;                                          // 0x0080(0x0008) (Const)
	class UErrorType*                                  ShopItemDiscountBadData;                                  // 0x0088(0x0008) (Const)
	class UErrorType*                                  ShopSyncedBadData;                                        // 0x0090(0x0008) (Const)
	class UErrorType*                                  ShopNotEnoughCurrency;                                    // 0x0098(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ShopErrors_TA");
		return ptr;
	}

};


// Class TAGame.SkillDecayFeature_TA
// 0x0000 (0x0060 - 0x0060)
class USkillDecayFeature_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkillDecayFeature_TA");
		return ptr;
	}

};


// Class TAGame.SkillDecaySystem_TA
// 0x0000 (0x0060 - 0x0060)
class USkillDecaySystem_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SkillDecaySystem_TA");
		return ptr;
	}


	int STATIC___SkillDecaySystem_TA__CheckForSkillDecay_9224875540C86FC284D923AB8413DB27(class UGameSettingPlaylist_X* P);
	bool STATIC___SkillDecaySystem_TA__CheckForSkillDecay_912928224132E8F75AB377A57588B9D2(class UGameSettingPlaylist_X* P);
	void STATIC_SetPlaylistSkillSaveData(class UPlaylistSkillDataSave_TA* SkillSave, struct FPlaylistSkillData* Data);
	struct FPlaylistSkillData STATIC_GetPlaylistSkillData(class UPlaylistSkillDataSave_TA* SkillSave, int Playlist, struct FPlaylistSkillData* StructInitializer_61B6528445B7460B29E2CB81075507A1);
	void STATIC_CheckForSkillDecay(class ULocalPlayer_TA* LocalPlayer, class UPlaylistSkillDataSave_TA* SkillSave, class USyncedSkillData_X* Skill, class UDownloadedPlaylistsData_X* DownloadedPlaylists, TArray<class UGameSettingPlaylist_X*>* FilterLocal_F95DE0C341C3437746615BA1A129DEF8, TArray<int>* MapLocal_513696454D7D306F204A87B43233BCC3);
	void STATIC_HandlePartyJoined(class USkillDecayFeature_TA* Feature, class ULocalPlayer_TA* LocalPlayer, class UPlaylistSkillDataSave_TA* SkillSave, class USyncedSkillData_X* Skill, class UDownloadedPlaylistsData_X* DownloadedPlaylists, class UPartyJoinedEvent_X* PartyJoinedEvent);
	void STATIC_HandleViewingMatchmaking(class USkillDecayFeature_TA* Feature, class ULocalPlayer_TA* LocalPlayer, class UPlaylistSkillDataSave_TA* SkillSave, class USyncedSkillData_X* Skill, class UDownloadedPlaylistsData_X* DownloadedPlaylists, class UViewingMatchmaking_TA* ViewingMatchmaking);
	void STATIC_InitSkillDecaySystem(class ULocalPlayer_TA* Player);
};


// Class TAGame.SpecialAttachment_TA
// 0x0038 (0x07D0 - 0x0798)
class ASpecialAttachment_TA : public ARBActor_TA
{
public:
	struct FVector                                     Offset;                                                   // 0x0798(0x000C) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x07A4(0x0004) MISSED OFFSET
	class UStaticMeshComponent*                        StaticMesh;                                               // 0x07A8(0x0008) (Edit, ExportObject, Component, EditInline)
	float                                              BallHitMultiplier;                                        // 0x07B0(0x0004) (Edit)
	float                                              CarHitMultiplier;                                         // 0x07B4(0x0004) (Edit)
	float                                              CarHitVerticalMultiplier;                                 // 0x07B8(0x0004) (Edit)
	float                                              CarHitTorque;                                             // 0x07BC(0x0004) (Edit)
	unsigned long                                      bDemolishOnHit : 1;                                       // 0x07C0(0x0004) (Edit)
	unsigned long                                      bDemolishTeam : 1;                                        // 0x07C0(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x07C4(0x0004) MISSED OFFSET
	class ACar_TA*                                     AttachedCar;                                              // 0x07C8(0x0008) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialAttachment_TA");
		return ptr;
	}


	void OnHitCar(class ACar_TA* Car, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnHitBall(class ABall_TA* Ball, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void OnRigidBodyCollision(const struct FAccumulatedRigidBodyCollision& Collision);
	void AttachToCar(class ACar_TA* InCar, TEnumAsByte<EProductAttachmentSocket> InSocket);
	void Destroyed();
};


// Class TAGame.SpecialEventErrors_TA
// 0x0030 (0x00B0 - 0x0080)
class USpecialEventErrors_TA : public UErrorList
{
public:
	class UErrorType*                                  EventNotFound;                                            // 0x0080(0x0008) (Const)
	class UErrorType*                                  EventStoreCurrencyExpired;                                // 0x0088(0x0008) (Const)
	class UErrorType*                                  EventStorePurchaseError;                                  // 0x0090(0x0008) (Const)
	class UErrorType*                                  EventStoreNotEnoughCurrency;                              // 0x0098(0x0008) (Const)
	class UErrorType*                                  EventStoreLimitReached;                                   // 0x00A0(0x0008) (Const)
	class UErrorType*                                  EventStoreDisabled;                                       // 0x00A8(0x0008) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialEventErrors_TA");
		return ptr;
	}

};


// Class TAGame.SpecialPickup_Attachment_TA
// 0x0010 (0x0340 - 0x0330)
class ASpecialPickup_Attachment_TA : public ASpecialPickup_TA
{
public:
	class ASpecialAttachment_TA*                       AttachmentArchetype;                                      // 0x0330(0x0008) (Edit)
	class ASpecialAttachment_TA*                       Attachment;                                               // 0x0338(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Attachment_TA");
		return ptr;
	}


	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_BallCarSpring_TA
// 0x0008 (0x0518 - 0x0510)
class ASpecialPickup_BallCarSpring_TA : public ASpecialPickup_Spring_TA
{
public:
	struct FName                                       SpringMeshDistanceParam;                                  // 0x0510(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BallCarSpring_TA");
		return ptr;
	}


	void ScaleSpringMeshToLocation(const struct FVector& NewLocation, const struct FVector& TargetLocation);
};


// Class TAGame.SpecialPickup_BallVelcro_TA
// 0x00A8 (0x03D8 - 0x0330)
class ASpecialPickup_BallVelcro_TA : public ASpecialPickup_TA
{
public:
	struct FVector                                     BallOffset;                                               // 0x0330(0x000C) (Edit)
	unsigned long                                      bUseRealOffset : 1;                                       // 0x033C(0x0004) (Edit)
	unsigned long                                      bHit : 1;                                                 // 0x033C(0x0004) (Net, Transient)
	unsigned long                                      bBroken : 1;                                              // 0x033C(0x0004) (Net, Transient)
	float                                              AfterHitDuration;                                         // 0x0340(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0344(0x0004) MISSED OFFSET
	class UStaticMesh*                                 Mesh;                                                     // 0x0348(0x0008) (Edit)
	struct FInterpCurveFloat                           MeshScaleCurve;                                           // 0x0350(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           HitMeshScaleCurve;                                        // 0x0368(0x0018) (Edit, NeedCtorLink)
	struct FInterpCurveFloat                           BrokenScaleCurve;                                         // 0x0380(0x0018) (Edit, NeedCtorLink)
	float                                              PostBreakDuration;                                        // 0x0398(0x0004) (Edit)
	unsigned char                                      UnknownData01[0x4];                                       // 0x039C(0x0004) MISSED OFFSET
	class UAkSoundCue*                                 BallHitSFX;                                               // 0x03A0(0x0008) (Edit)
	float                                              MinBreakForce;                                            // 0x03A8(0x0004) (Edit)
	float                                              MinBreakTime;                                             // 0x03AC(0x0004) (Edit)
	float                                              CheckLastTouchRate;                                       // 0x03B0(0x0004) (Edit)
	unsigned char                                      UnknownData02[0x4];                                       // 0x03B4(0x0004) MISSED OFFSET
	class UStaticMeshComponent*                        SMC;                                                      // 0x03B8(0x0008) (ExportObject, Transient, Component, EditInline)
	class ABall_TA*                                    WeldedBall;                                               // 0x03C0(0x0008) (Transient)
	float                                              OldBallMass;                                              // 0x03C8(0x0004) (Transient)
	float                                              AttachTime;                                               // 0x03CC(0x0004) (Net, Transient)
	float                                              LastTouchCheckTime;                                       // 0x03D0(0x0004) (Transient)
	float                                              BreakTime;                                                // 0x03D4(0x0004) (Net, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BallVelcro_TA");
		return ptr;
	}


	void __SpecialPickup_BallVelcro_TA__HandleHitBall_B8D06AD548011F16ECCDEAA8AE7F556A(class ABall_TA* B);
	bool DisableBallImpactForces();
	void DoBreak();
	void HandleCollision(class ARBActor_TA* RBActor, const struct FAccumulatedRigidBodyCollision& Collision);
	void HandleCarTouch(class ABall_TA* InBall, class ACar_TA* InCar, TEnumAsByte<EBallHitType> HitType);
	void PickupEnd();
	void OnBallHit();
	void HandleHitBall(class ACar_TA* InCar, class ABall_TA* InBall, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void PickupTick(float DeltaTime);
	void TickPickupFX(float DeltaTime);
	void RemovePickupFX();
	void InitPickupFX();
	void PickupStart();
	void ReplicatedEvent(const struct FName& EventName);
};


// Class TAGame.SpecialPickup_Batarang_TA
// 0x0008 (0x0520 - 0x0518)
class ASpecialPickup_Batarang_TA : public ASpecialPickup_BallLasso_TA
{
public:
	float                                              SpinSpeed;                                                // 0x0518(0x0004) (Edit)
	float                                              CurRotation;                                              // 0x051C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Batarang_TA");
		return ptr;
	}


	void UpdateVisual(float DeltaTime);
};


// Class TAGame.SpecialPickup_BoostMod_TA
// 0x000C (0x033C - 0x0330)
class ASpecialPickup_BoostMod_TA : public ASpecialPickup_TA
{
public:
	unsigned long                                      bUnlimitedBoost : 1;                                      // 0x0330(0x0004) (Edit)
	float                                              BoostStrength;                                            // 0x0334(0x0004) (Edit)
	float                                              OldBoostStrength;                                         // 0x0338(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BoostMod_TA");
		return ptr;
	}


	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_BoostOverride_TA
// 0x0038 (0x03A0 - 0x0368)
class ASpecialPickup_BoostOverride_TA : public ASpecialPickup_Targeted_TA
{
public:
	class AFXActor_X*                                  OtherCarFXArchetype;                                      // 0x0368(0x0008) (Edit)
	class UAkSoundCue*                                 BoostSFX;                                                 // 0x0370(0x0008) (Edit)
	class UParticleSystem*                             BeamPS;                                                   // 0x0378(0x0008) (Edit)
	float                                              AddVelocityZ;                                             // 0x0380(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0384(0x0004) MISSED OFFSET
	class UParticleSystemComponent*                    BeamPSC;                                                  // 0x0388(0x0008) (ExportObject, Transient, Component, EditInline)
	class AFXActor_X*                                  OtherCarFX;                                               // 0x0390(0x0008) (Transient)
	class ACar_TA*                                     OtherCar;                                                 // 0x0398(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_BoostOverride_TA");
		return ptr;
	}


	void PickupEnd();
	void RemovePickupFX();
	void InitPickupFX();
	void OnTargetChanged();
	void PickupStart();
};


// Class TAGame.SpecialPickup_CarFreeze_TA
// 0x0020 (0x0388 - 0x0368)
class ASpecialPickup_CarFreeze_TA : public ASpecialPickup_Targeted_TA
{
public:
	class AFXActor_X*                                  OtherCarFXArchetype;                                      // 0x0368(0x0008) (Edit)
	float                                              TireFrictionScale;                                        // 0x0370(0x0004) (Edit)
	float                                              AddAngularVelocity;                                       // 0x0374(0x0004) (Edit)
	class AFXActor_X*                                  OtherCarFX;                                               // 0x0378(0x0008)
	class ACar_TA*                                     OtherCar;                                                 // 0x0380(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_CarFreeze_TA");
		return ptr;
	}


	void RemovePickupFX();
	void InitPickupFX();
	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_CarGravity_TA
// 0x0014 (0x0344 - 0x0330)
class ASpecialPickup_CarGravity_TA : public ASpecialPickup_TA
{
public:
	float                                              GravityScale;                                             // 0x0330(0x0004) (Edit)
	struct FVector                                     AddedForce;                                               // 0x0334(0x000C) (Edit)
	float                                              OrigGravityScale;                                         // 0x0340(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_CarGravity_TA");
		return ptr;
	}


	void PickupTick(float DeltaTime);
	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_CarLaunch_TA
// 0x0004 (0x0334 - 0x0330)
class ASpecialPickup_CarLaunch_TA : public ASpecialPickup_TA
{
public:
	float                                              LaunchVelocity;                                           // 0x0330(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_CarLaunch_TA");
		return ptr;
	}


	void PickupStart();
};


// Class TAGame.SpecialPickup_CarSpeed_TA
// 0x0040 (0x0370 - 0x0330)
class ASpecialPickup_CarSpeed_TA : public ASpecialPickup_TA
{
public:
	float                                              SpeedMultiplier;                                          // 0x0330(0x0004) (Edit)
	float                                              MaxLinearSpeedMultiplier;                                 // 0x0334(0x0004) (Edit)
	struct FInterpCurveFloat                           DriveTorqueCurve;                                         // 0x0338(0x0018) (Edit, NeedCtorLink)
	float                                              OriginalTorque;                                           // 0x0350(0x0004) (Transient)
	float                                              OriginalMaxLinearSpeed;                                   // 0x0354(0x0004) (Transient)
	struct FInterpCurveFloat                           OriginalDriveTorqueCurve;                                 // 0x0358(0x0018) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_CarSpeed_TA");
		return ptr;
	}


	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_Demolish_TA
// 0x0004 (0x0334 - 0x0330)
class ASpecialPickup_Demolish_TA : public ASpecialPickup_TA
{
public:
	TEnumAsByte<EDemolishTarget>                       DemolishTarget;                                           // 0x0330(0x0001) (Edit)
	TEnumAsByte<EDemolishSpeed>                        DemolishSpeed;                                            // 0x0331(0x0001) (Edit)
	TEnumAsByte<EDemolishTarget>                       OldTarget;                                                // 0x0332(0x0001) (Transient)
	TEnumAsByte<EDemolishSpeed>                        OldSpeed;                                                 // 0x0333(0x0001) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Demolish_TA");
		return ptr;
	}


	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_HandbrakeOverride_TA
// 0x0008 (0x0370 - 0x0368)
class ASpecialPickup_HandbrakeOverride_TA : public ASpecialPickup_Targeted_TA
{
public:
	class ACar_TA*                                     OtherCar;                                                 // 0x0368(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_HandbrakeOverride_TA");
		return ptr;
	}


	void PickupEnd();
	void PickupStart();
};


// Class TAGame.SpecialPickup_HitForce_TA
// 0x0038 (0x0368 - 0x0330)
class ASpecialPickup_HitForce_TA : public ASpecialPickup_TA
{
public:
	unsigned long                                      bBallForce : 1;                                           // 0x0330(0x0004) (Edit)
	unsigned long                                      bCarForce : 1;                                            // 0x0330(0x0004) (Edit)
	unsigned long                                      bDemolishCars : 1;                                        // 0x0330(0x0004) (Edit)
	float                                              BallHitForce;                                             // 0x0334(0x0004) (Edit)
	float                                              CarHitForce;                                              // 0x0338(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x033C(0x0004) MISSED OFFSET
	class AFXActor_TA*                                 BallHitFXArchetype;                                       // 0x0340(0x0008) (Edit)
	class AFXActor_TA*                                 CarHitFXArchetype;                                        // 0x0348(0x0008) (Edit)
	class UAkSoundCue*                                 HitSFX;                                                   // 0x0350(0x0008) (Edit)
	float                                              MinFXTime;                                                // 0x0358(0x0004) (Edit)
	float                                              OrigBallHitForce;                                         // 0x035C(0x0004) (Transient)
	float                                              OrigCarHitForce;                                          // 0x0360(0x0004) (Transient)
	float                                              LastFXTime;                                               // 0x0364(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_HitForce_TA");
		return ptr;
	}


	void PickupEnd();
	void HandleCollision(class ARBActor_TA* RB, const struct FAccumulatedRigidBodyCollision& Collision);
	void HandleCollisionFX(class ARBActor_TA* RB, const struct FAccumulatedRigidBodyCollision& Collision);
	void PickupStart();
};


// Class TAGame.SpecialPickup_Rugby_TA
// 0x0060 (0x0390 - 0x0330)
class ASpecialPickup_Rugby_TA : public ASpecialPickup_TA
{
public:
	class UStaticMesh*                                 Mesh;                                                     // 0x0330(0x0008) (Edit)
	class UAkSoundCue*                                 BallHitSFX;                                               // 0x0338(0x0008) (Edit)
	class UAkSoundCue*                                 DeactivateSFX;                                            // 0x0340(0x0008) (Edit)
	float                                              AttachTime;                                               // 0x0348(0x0004) (Transient)
	float                                              MinDetachTime;                                            // 0x034C(0x0004) (Edit)
	float                                              MinBreakTime;                                             // 0x0350(0x0004) (Edit)
	float                                              MinBreakForce;                                            // 0x0354(0x0004) (Edit)
	float                                              CheckLastTouchRate;                                       // 0x0358(0x0004) (Edit)
	float                                              KickOffActivationDelay;                                   // 0x035C(0x0004) (Edit)
	class UStaticMeshComponent*                        SMC;                                                      // 0x0360(0x0008) (ExportObject, Transient, Component, EditInline)
	class ABall_TA*                                    WeldedBall;                                               // 0x0368(0x0008) (Transient)
	float                                              LastTouchCheckTime;                                       // 0x0370(0x0004) (Transient)
	unsigned long                                      bBallWelded : 1;                                          // 0x0374(0x0004) (Net, Transient)
	struct FScriptDelegate                             __bBallWelded__ChangeNotify;                              // 0x0378(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0378(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Rugby_TA");
		return ptr;
	}


	void __SpecialPickup_Rugby_TA__HandleBallWeldedChanged_1F597F9D4443B575D1349C8CA1D9F19C(class ACarComponent_Boost_TA* BoostComponent);
	void __bBallWelded__ChangeNotifyFunc();
	bool DisableBallImpactForces();
	void DeactivationFX();
	void HandleBallExploded(class ABall_TA* Ball);
	bool GetShouldHideActivateUI();
	void DoBreak();
	bool GetWasRecentlyAttached();
	void HandleCarTouch(class ABall_TA* InBall, class ACar_TA* InCar, TEnumAsByte<EBallHitType> HitType);
	void HandleHitBall(class ACar_TA* InCar, class ABall_TA* InBall, const struct FVector& HitLocation, const struct FVector& HitNormal);
	void HandleBallWeldedChanged();
	void HandleCollision(class ARBActor_TA* RBActor, const struct FAccumulatedRigidBodyCollision& Collision);
	void PickupTick(float DeltaTime);
	void RemovePickupFX();
	void PickupEnd();
	void InitPickupFX();
	void PickupStart();
	bool GetCanDetach();
	bool TryActivate(class ARBActor_TA* TargetOverride);
};


// Class TAGame.SpecialPickup_Swapper_TA
// 0x0028 (0x0390 - 0x0368)
class ASpecialPickup_Swapper_TA : public ASpecialPickup_Targeted_TA
{
public:
	class AFXActor_TA*                                 OwnCarFX;                                                 // 0x0368(0x0008) (Edit)
	class AFXActor_TA*                                 OtherCarFX;                                               // 0x0370(0x0008) (Edit)
	float                                              AddVelocityZ;                                             // 0x0378(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x037C(0x0004) MISSED OFFSET
	class AFXActor_TA*                                 OtherFX;                                                  // 0x0380(0x0008) (Transient)
	class ACar_TA*                                     OtherCar;                                                 // 0x0388(0x0008) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_Swapper_TA");
		return ptr;
	}


	void PickupEnd();
	void InitPickupFX();
	void OnTargetChanged();
	void PickupStart();
};


// Class TAGame.SpecialPickup_TimeBomb_TA
// 0x0020 (0x0350 - 0x0330)
class ASpecialPickup_TimeBomb_TA : public ASpecialPickup_TA
{
public:
	float                                              Radius;                                                   // 0x0330(0x0004) (Edit)
	float                                              AlmostReadyDuration;                                      // 0x0334(0x0004) (Edit)
	float                                              StartMatSpeed;                                            // 0x0338(0x0004) (Edit)
	float                                              AlmostReadyMatSpeed;                                      // 0x033C(0x0004) (Edit)
	float                                              ImpulseForce;                                             // 0x0340(0x0004) (Edit)
	float                                              CarVerticalForce;                                         // 0x0344(0x0004) (Edit)
	float                                              CarTorque;                                                // 0x0348(0x0004) (Edit)
	unsigned long                                      bDemolish : 1;                                            // 0x034C(0x0004) (Edit)
	unsigned long                                      bImpulse : 1;                                             // 0x034C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SpecialPickup_TimeBomb_TA");
		return ptr;
	}


	void PickupEnd();
	void AlmostReady();
	void PickupStart();
};


// Class TAGame.SplineCameraTrack_TA
// 0x0000 (0x02D8 - 0x02D8)
class ASplineCameraTrack_TA : public ASplineActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SplineCameraTrack_TA");
		return ptr;
	}


	class ASplineActor* GetBestNode(const struct FVector& FromLocation);
	struct FVector GetLocationOnSpline(const struct FVector& FromLocation, float ExtraDistance);
};


// Class TAGame.SplineFocusTarget_TA
// 0x000C (0x0274 - 0x0268)
class ASplineFocusTarget_TA : public ACustomFocusTarget_TA
{
public:
	class ASplineCameraTrack_TA*                       Spline;                                                   // 0x0268(0x0008) (Edit)
	float                                              DistanceAhead;                                            // 0x0270(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SplineFocusTarget_TA");
		return ptr;
	}


	struct FVector GetFocusLocation(class ACar_TA* ForCar);
};


// Class TAGame.StasisExplosionHandler_TA
// 0x0010 (0x0160 - 0x0150)
class UStasisExplosionHandler_TA : public UExplosionHitHandler_TA
{
public:
	struct FVector                                     VelocityToApply;                                          // 0x0150(0x000C) (Edit)
	float                                              SlowDownTime;                                             // 0x015C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StasisExplosionHandler_TA");
		return ptr;
	}


	void ApplyImpulse(class ACar_TA* CarHit, const struct FVector& HitLocation, float DamageScale, struct FContactInformation* ContactInfo);
};


// Class TAGame.StatFactory_Basketball_TA
// 0x000C (0x0464 - 0x0458)
class AStatFactory_Basketball_TA : public AStatFactory_TA
{
public:
	class UStatEvent_TA*                               HoopsSwishGoal;                                           // 0x0458(0x0008) (Edit)
	float                                              RedZoneHeightScale;                                       // 0x0460(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatFactory_Basketball_TA");
		return ptr;
	}


	bool IsSwishGoal(class UGoal_TA* Goal, class ABall_TA* Ball, int ScoreIndex);
	void OnGoalScored(class AGameEvent_Soccar_TA* InGameEvent, class ABall_TA* Ball, class UGoal_TA* Goal, int ScoreIndex, int AssistIndex);
	class UGoal_TA* FindShotGoal(class ABall_TA* Ball);
	bool IsInRedZone(class UGoal_TA* Goal, class ABall_TA* Ball);
};


// Class TAGame.StatFactory_Breakout_TA
// 0x0034 (0x048C - 0x0458)
class AStatFactory_Breakout_TA : public AStatFactory_TA
{
public:
	class UStatEvent_TA*                               BreakoutDamage;                                           // 0x0458(0x0008) (Edit)
	class UStatEvent_TA*                               BreakoutDamageLarge;                                      // 0x0460(0x0008) (Edit)
	int                                                BreakoutSaveDamageThreshold;                              // 0x0468(0x0004) (Edit)
	int                                                BreakoutDamageLargeThreshold;                             // 0x046C(0x0004) (Edit)
	float                                              ShotGoalTimestep;                                         // 0x0470(0x0004) (Edit)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0474(0x0004) MISSED OFFSET
	class AGameEvent_Breakout_TA*                      BreakoutEvent;                                            // 0x0478(0x0008) (Transient)
	struct FVector                                     FieldCenter;                                              // 0x0480(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatFactory_Breakout_TA");
		return ptr;
	}


	float GetHitDistanceToGoal(class ABall_TA* Ball, const struct FBallHitInfo& Hit, class UGoal_TA* Goal);
	class UGoal_TA* CalculateShotGoal(class UGoal_TA* GoalToTest, class ABall_TA* Ball, float ArriveTime);
	class UGoal_TA* FindShotGoal(class ABall_TA* Ball);
	void HandleBallAppliedDamage(class ABall_Breakout_TA* Ball, const struct FAppliedBreakoutDamage& Damage);
	void HandlePlatformDamaged(class ABreakOutActor_Platform_TA* Platform, class APRI_TA* PRI, class ABall_TA* Ball);
	void UnregisterBall(class APawn_X* Ball);
	void RegisterBall(class ABall_TA* Ball);
	void SetGameEvent(class AGameEvent_Soccar_TA* InGameEvent);
	bool IsInRedZone(class UGoal_TA* Goal, class ABall_TA* Ball);
};


// Class TAGame.StatFactory_HauntedBall_TA
// 0x0004 (0x045C - 0x0458)
class AStatFactory_HauntedBall_TA : public AStatFactory_TA
{
public:
	float                                              EpicSaveTime;                                             // 0x0458(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatFactory_HauntedBall_TA");
		return ptr;
	}


	bool IsEpicSave(class ABall_TA* Ball, const struct FBallHitInfo& Hit, class UGoal_TA* Goal);
	bool IsBallBehindGoal(class ABall_TA* Ball, class UGoal_TA* Goal);
	class UGoal_TA* FindShotGoal(class ABall_TA* Ball);
};


// Class TAGame.StaticMeshActor_TA
// 0x0008 (0x0270 - 0x0268)
class AStaticMeshActor_TA : public AActor
{
public:
	class UStaticMeshComponent*                        StaticMeshComponent;                                      // 0x0268(0x0008) (Edit, Const, ExportObject, EditConst, Component, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StaticMeshActor_TA");
		return ptr;
	}

};


// Class TAGame.StaticMeshRBActor_TA
// 0x0044 (0x07DC - 0x0798)
class AStaticMeshRBActor_TA : public ARBActor_TA
{
public:
	class UStaticMeshComponent*                        StaticMesh;                                               // 0x0798(0x0008) (Edit, ExportObject, Component, EditInline)
	TEnumAsByte<EApplyForceTo>                         ApplyCollisionForceFrom;                                  // 0x07A0(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x07A1(0x0003) MISSED OFFSET
	float                                              TouchBounceForce;                                         // 0x07A4(0x0004) (Edit)
	float                                              SpeedBounchForceMultiplier;                               // 0x07A8(0x0004) (Edit)
	struct FVector                                     LinearConstraintsLower;                                   // 0x07AC(0x000C) (Edit)
	struct FVector                                     LinearConstraintsUpper;                                   // 0x07B8(0x000C) (Edit)
	struct FVector                                     AngularConstraintsLower;                                  // 0x07C4(0x000C) (Edit)
	struct FVector                                     AngularConstraintsUpper;                                  // 0x07D0(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StaticMeshRBActor_TA");
		return ptr;
	}


	void OnRigidBodyCollision(const struct FAccumulatedRigidBodyCollision& Collision);
	void Destroyed();
	void PostBeginPlay();
};


// Class TAGame.StatusTrigger_FTEGroupComplete_TA
// 0x0008 (0x0088 - 0x0080)
class UStatusTrigger_FTEGroupComplete_TA : public UStatusTrigger_X
{
public:
	struct FName                                       ConditionalValue;                                         // 0x0080(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.StatusTrigger_FTEGroupComplete_TA");
		return ptr;
	}


	void DebugPrint();
	void HandleChange(const struct FName& CompletedGroup);
};


// Class TAGame.TMetricsShared_TA
// 0x0008 (0x0068 - 0x0060)
class UTMetricsShared_TA : public UObject
{
public:
	float                                              PreLoadMapTime;                                           // 0x0060(0x0004)
	float                                              LevelLoadTime;                                            // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TMetricsShared_TA");
		return ptr;
	}


	struct FString GetGameStateName(class AGameEvent_TA* GameEvent);
	struct FString GetGameMode(class AGameEvent_TA* GameEvent);
	void HandleConnectionTimedOut(class APlayerController* PC);
	void HandleMatchEnded(class AGameEvent_Soccar_TA* GameEvent);
	void HandleMatchStarted(class AGameEvent_TA* GameEvent);
	void HandlePostLoadMap();
	void HandlePreLoadMap(const struct FString& MapName);
	void InitShared();
};


// Class TAGame.TourSeeder_TA
// 0x0000 (0x0060 - 0x0060)
class UTourSeeder_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourSeeder_TA");
		return ptr;
	}


	TArray<int> STATIC_GetSeedingForRound(int Rounds);
	TArray<int> STATIC_Append(TArray<int> A, TArray<int>* B);
	TArray<int> STATIC_PairSeeds(TArray<struct FTeamSeeds> Seeds);
	TArray<int> STATIC_SeedTeams(TArray<int> Teams);
};


// Class TAGame.Tutorial_AirTilt_TA
// 0x0010 (0x0258 - 0x0248)
class UTutorial_AirTilt_TA : public UTutorial_TA
{
public:
	struct FString                                     ToggleAirRollString;                                      // 0x0248(0x0010) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Tutorial_AirTilt_TA");
		return ptr;
	}


	void AddKeyNameFromAction(const struct FName& ActionName, TArray<struct FString>* KeyList);
	struct FString GetMergedAirRollString();
	struct FString GetUIReadableString(const struct FString& Key);
	void HandleCarHitWorld(class ACar_TA* Car, class AActor* HitActor, const struct FVector& HitNormal);
	void HandleCarLanded(class ACar_TA* Car);
	void HandleVehicleSetup(class AGameEvent_Tutorial_TA* InGameEvent, class ACar_TA* Car);
};


// Class TAGame.VehiclePickup_Item_TA
// 0x0010 (0x0300 - 0x02F0)
class AVehiclePickup_Item_TA : public AVehiclePickup_TA
{
public:
	class ASpecialPickup_TA*                           ItemArchetype;                                            // 0x02F0(0x0008) (Edit)
	class AFXActor_X*                                  ReplicatedFXActorArchetype;                               // 0x02F8(0x0008) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.VehiclePickup_Item_TA");
		return ptr;
	}


	void Pickup(class ACar_TA* Car);
	bool CanPickup(class ACar_TA* Car);
	void SetFXActorArchetype(class AFXActor_X* InArchetype);
	void ReplicatedEvent(const struct FName& VarName);
};


// Class TAGame.GameInfo_Items_TA
// 0x0000 (0x0510 - 0x0510)
class AGameInfo_Items_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Items_TA");
		return ptr;
	}

};


// Class TAGame.GameInfo_Hockey_TA
// 0x0000 (0x0510 - 0x0510)
class AGameInfo_Hockey_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Hockey_TA");
		return ptr;
	}

};


// Class TAGame.CinematicsCar_TA
// 0x0000 (0x0AD0 - 0x0AD0)
class ACinematicsCar_TA : public ACar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CinematicsCar_TA");
		return ptr;
	}


	void HandleMatineeAssetLoaded(class UProductLoader_TA* Loader, class UProductAsset_TA* Asset);
	void SetupLoadout(class ASkeletalMeshActorMAT_Products_TA* SkelMeshActor);
};


// Class TAGame.TurnTableActor_GarageComplex_TA
// 0x0000 (0x0358 - 0x0358)
class ATurnTableActor_GarageComplex_TA : public ATurnTableActor_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TurnTableActor_GarageComplex_TA");
		return ptr;
	}

};


// Class TAGame.UnreplicatedRBActor_TA
// 0x0004 (0x07E0 - 0x07DC)
class AUnreplicatedRBActor_TA : public AStaticMeshRBActor_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x07DC(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.UnreplicatedRBActor_TA");
		return ptr;
	}

};


// Class TAGame.TourServerInfo_FaceIt_TA
// 0x0000 (0x0080 - 0x0080)
class UTourServerInfo_FaceIt_TA : public UTourServerInfo_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourServerInfo_FaceIt_TA");
		return ptr;
	}


	bool IsTourSet(const struct FTourServerSettings& TourSettings);
};


// Class TAGame.RPC_TourGetMatchReservations_FaceIt_TA
// 0x0000 (0x01D8 - 0x01D8)
class URPC_TourGetMatchReservations_FaceIt_TA : public URPC_TourGetMatchReservations_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_TourGetMatchReservations_FaceIt_TA");
		return ptr;
	}

};


// Class TAGame.TourGameUpdate_FaceIt_TA
// 0x0000 (0x0080 - 0x0080)
class UTourGameUpdate_FaceIt_TA : public UTourGameUpdate_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourGameUpdate_FaceIt_TA");
		return ptr;
	}


	struct FFaceItPlayerStats __TourGameUpdate_FaceIt_TA__GetPlayersStats_10D9DC124DE0CEAE0B0F33806BC0B8D2(class APRI_TA* PRI, struct FFaceItPlayerStats* StructInitializer_36E23CFA4B780BF8AAEAE9BAE56CC339);
	class APRI_TA* __TourGameUpdate_FaceIt_TA__GetPlayersStats_89CB8ADB404E3965F1A801B2AF55394C(class AController* P);
	class URPC_X* SendUpdateGameRPC(class UTourGameUpdateDispatcher_TA* Dispatcher, int InGameNum, const struct FTourMatchGame& InGameData, int SeriesWinnerID, class URPC_FaceItUpdateGame_TA** ObjectInitializer_C0EBD5AD42AE8CD01BC77997C16450F0);
	TArray<struct FFaceItPlayerStats> GetPlayersStats(TArray<class APRI_TA*>* MapLocal_2F8988924A103E303DE7F3B0E6E541CA, TArray<struct FFaceItPlayerStats>* MapLocal_836BFA0F446102871F69629E5B3FFD9A);
};


// Class TAGame.TourServerInfo_AutoTour_TA
// 0x0000 (0x0080 - 0x0080)
class UTourServerInfo_AutoTour_TA : public UTourServerInfo_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourServerInfo_AutoTour_TA");
		return ptr;
	}

};


// Class TAGame.TourBracketGenerator_TA
// 0x0000 (0x0060 - 0x0060)
class UTourBracketGenerator_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.TourBracketGenerator_TA");
		return ptr;
	}


	void STATIC_PrintBracketTree(TArray<struct FTourMatchNode>* Tree);
	TArray<struct FTourMatch> STATIC_NodesToMatches(TArray<struct FTourMatchNode>* Nodes);
	struct FTourMatchNode STATIC_CreateNode(int MatchID);
	struct FIntPair STATIC_MakeIntPair(int A, int B);
	TArray<int> STATIC_AddByes(TArray<int> Teams);
	TArray<int> STATIC_CreateTeamIDs(int TeamNum);
	TArray<struct FTourMatchNode> STATIC_BuildBracketTree(int NumTeams);
	TArray<struct FTourPlayer> STATIC_CreatePlayers(int TeamSize, int PlayerCount);
	TArray<struct FTourTeam> STATIC_CreateTeams(int TeamCount, int TeamSize);
	struct FTourBracket STATIC_Generate(int TeamsRegistered, int TeamSize);
};


// Class TAGame.Team_Freeplay_TA
// 0x0000 (0x04A0 - 0x04A0)
class ATeam_Freeplay_TA : public ATeam_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Team_Freeplay_TA");
		return ptr;
	}


	void GetColors(struct FLinearColor* OutFontColor, TArray<struct FLinearColor>* OutColors);
};


// Class TAGame.SeqEvent_StartHighlightReel_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_StartHighlightReel_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_StartHighlightReel_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_ShowGarageComplex_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_ShowGarageComplex_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_ShowGarageComplex_TA");
		return ptr;
	}

};


// Class TAGame.SeqEvent_IntroMenu_TA
// 0x0004 (0x0180 - 0x017C)
class USeqEvent_IntroMenu_TA : public USequenceEvent
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x017C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqEvent_IntroMenu_TA");
		return ptr;
	}

};


// Class TAGame.SeqAct_MainMenuSwitch_TA
// 0x0000 (0x0160 - 0x0160)
class USeqAct_MainMenuSwitch_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_MainMenuSwitch_TA");
		return ptr;
	}


	int STATIC_GetObjClassVersion();
	void Activated();
};


// Class TAGame.SeqAct_IsCrateRouletteEnabled_TA
// 0x0000 (0x0160 - 0x0160)
class USeqAct_IsCrateRouletteEnabled_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_IsCrateRouletteEnabled_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_IntroMenuCarsInPosition_TA
// 0x0000 (0x0160 - 0x0160)
class USeqAct_IntroMenuCarsInPosition_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_IntroMenuCarsInPosition_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_HighlightReelFinished_TA
// 0x0018 (0x0178 - 0x0160)
class USeqAct_HighlightReelFinished_TA : public USequenceAction
{
public:
	struct FScriptDelegate                             __EventHighlightReelFinished__Delegate;                   // 0x0160(0x0010) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0160(0x0008) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_HighlightReelFinished_TA");
		return ptr;
	}


	void Activated();
	void EventHighlightReelFinished(class USeqAct_HighlightReelFinished_TA* Act);
};


// Class TAGame.SeqAct_GetEdition_TA
// 0x0000 (0x0160 - 0x0160)
class USeqAct_GetEdition_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_GetEdition_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_ExitToMainMenu_TA
// 0x0000 (0x0160 - 0x0160)
class USeqAct_ExitToMainMenu_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_ExitToMainMenu_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SeqAct_DemoCar_TA
// 0x0000 (0x0160 - 0x0160)
class USeqAct_DemoCar_TA : public USequenceAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SeqAct_DemoCar_TA");
		return ptr;
	}


	void Activated();
};


// Class TAGame.SaveDataMetrics_TA
// 0x0000 (0x0080 - 0x0080)
class USaveDataMetrics_TA : public UMetricsGroup_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.SaveDataMetrics_TA");
		return ptr;
	}


	void ReconcileXP(int OnlineXP, int LocalXP);
	void RecordReconcileXP(int OnlineXP, int LocalXP);
};


// Class TAGame.RPC_PsyNetGetAvatars_TA
// 0x0000 (0x0140 - 0x0140)
class URPC_PsyNetGetAvatars_TA : public URPC_PsyNetGetVanities_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_PsyNetGetAvatars_TA");
		return ptr;
	}

};


// Class TAGame.RPC_DecaySkill_TA
// 0x0000 (0x0100 - 0x0100)
class URPC_DecaySkill_TA : public URPC_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RPC_DecaySkill_TA");
		return ptr;
	}

};


// Class TAGame.RequestPartyUpEvent_TA
// 0x0000 (0x0060 - 0x0060)
class URequestPartyUpEvent_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.RequestPartyUpEvent_TA");
		return ptr;
	}

};


// Class TAGame.ProductEquipProfileSlots_TA
// 0x0000 (0x0060 - 0x0060)
class UProductEquipProfileSlots_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductEquipProfileSlots_TA");
		return ptr;
	}

};


// Class TAGame.ProductAttribute_BonusCrate_TA
// 0x0000 (0x0080 - 0x0080)
class UProductAttribute_BonusCrate_TA : public UProductAttribute_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAttribute_BonusCrate_TA");
		return ptr;
	}

};


// Class TAGame.ProductAsset_Currency_TA
// 0x0000 (0x00E0 - 0x00E0)
class UProductAsset_Currency_TA : public UProductAsset_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ProductAsset_Currency_TA");
		return ptr;
	}

};


// Class TAGame.PlayerInput_GameEditor_TA
// 0x0000 (0x04C8 - 0x04C8)
class UPlayerInput_GameEditor_TA : public UPlayerInput_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_GameEditor_TA");
		return ptr;
	}


	void OnActiveBindingsChanged();
};


// Class TAGame.PlayerInput_Edit_TA
// 0x0000 (0x04C8 - 0x04C8)
class UPlayerInput_Edit_TA : public UPlayerInput_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.PlayerInput_Edit_TA");
		return ptr;
	}


	void OnActiveBindingsChanged();
};


// Class TAGame.OnlinePlayerAuthentication_TA
// 0x0000 (0x01A8 - 0x01A8)
class UOnlinePlayerAuthentication_TA : public UOnlinePlayerAuthentication_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlinePlayerAuthentication_TA");
		return ptr;
	}


	struct FString GetBuildRegion();
};


// Class TAGame.OnlineGameVersion_TA
// 0x0004 (0x0080 - 0x007C)
class UOnlineGameVersion_TA : public UOnlineGameVersion_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.OnlineGameVersion_TA");
		return ptr;
	}


	void __OnlineGameVersion_TA__OnInit_31643CEB4D90FD4D0E99C6B8A13A033B(class UOnlineGameTourMatchmaking_TA* TourMatch);
	void __OnlineGameVersion_TA__OnInit_F4FBC36049DC0598A0FF64831B9FCCF4(class UOnlineGameTourMatchmaking_TA* _, class UError* Error);
	void OnInit();
};


// Class TAGame.NameplateComponentMatinee_TA
// 0x0000 (0x00E0 - 0x00E0)
class UNameplateComponentMatinee_TA : public UNameplateComponent_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.NameplateComponentMatinee_TA");
		return ptr;
	}


	struct FString GetPlayerName();
};


// Class TAGame.Mutator_PhysicsLogPlayback_TA
// 0x0004 (0x0068 - 0x0064)
class UMutator_PhysicsLogPlayback_TA : public UMutator_TA
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0064(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.Mutator_PhysicsLogPlayback_TA");
		return ptr;
	}


	void __Mutator_PhysicsLogPlayback_TA__Init_507FF42940D9E5EDD06F9DB7AC88D2CD(class UGoal_TA* G);
	void Init(class AGameEvent_TA* GameEvent);
};


// Class TAGame.MatchType_PhysicsLogPlayback_TA
// 0x0000 (0x00A0 - 0x00A0)
class UMatchType_PhysicsLogPlayback_TA : public UMatchType_Tutorial_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_PhysicsLogPlayback_TA");
		return ptr;
	}


	bool AutoSpectate(class AController* NewPlayer);
	bool AutoSelectTeam(class AController* NewPlayer);
};


// Class TAGame.MenuSequence_PremiumGarageSnap_TA
// 0x0000 (0x00B0 - 0x00B0)
class UMenuSequence_PremiumGarageSnap_TA : public UMenuSequence_PremiumGarage_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MenuSequence_PremiumGarageSnap_TA");
		return ptr;
	}


	void LeaveSequence(class UMenuSequence_TA* NextSequence);
	void EnterSequence(class UMenuSequence_TA* PrevSequence);
};


// Class TAGame.MaxTimeState_TA
// 0x0000 (0x0060 - 0x0060)
class UMaxTimeState_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MaxTimeState_TA");
		return ptr;
	}

};


// Class TAGame.MatchType_AdHoc_TA
// 0x0000 (0x00A0 - 0x00A0)
class UMatchType_AdHoc_TA : public UMatchType_Private_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.MatchType_AdHoc_TA");
		return ptr;
	}


	struct FName GetMatchTypeName();
};


// Class TAGame.GoalVolume_Hoops_TA
// 0x0000 (0x02B0 - 0x02B0)
class AGoalVolume_Hoops_TA : public AGoalVolume_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GoalVolume_Hoops_TA");
		return ptr;
	}

};


// Class TAGame.GFxModal_Warning_TA
// 0x0000 (0x00C8 - 0x00C8)
class UGFxModal_Warning_TA : public UGFxModal_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxModal_Warning_TA");
		return ptr;
	}

};


// Class TAGame.GFxData_XP_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_XP_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_XP_TA");
		return ptr;
	}


	void HandleSaveDataLoaded(class UClientXPSave_TA* XPSave);
	void OnShellSet();
};


// Class TAGame.GFxData_RocketPassBundleContainer_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_RocketPassBundleContainer_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_RocketPassBundleContainer_TA");
		return ptr;
	}


	void OnShellSet();
};


// Class TAGame.GFxData_RewardDrop_PIP_TA
// 0x0000 (0x00A0 - 0x00A0)
class UGFxData_RewardDrop_PIP_TA : public UGFxData_RewardDrop_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_RewardDrop_PIP_TA");
		return ptr;
	}


	void SetTotalGainedRTPC(float Value);
	void SetBarPercentageRTPC(float Value);
	int GetTotalRewardPips();
};


// Class TAGame.GFxData_RegionRestrictions_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_RegionRestrictions_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_RegionRestrictions_TA");
		return ptr;
	}


	bool IsRestricted(TEnumAsByte<ERegionRestriction> Restriction);
};


// Class TAGame.GFxData_ProductsSave_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_ProductsSave_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ProductsSave_TA");
		return ptr;
	}


	void OnShellSet();
};


// Class TAGame.GFxData_PremiumGarage_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_PremiumGarage_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PremiumGarage_TA");
		return ptr;
	}


	class UProfile_TA* GetProfile();
};


// Class TAGame.GFxData_PlayerReport_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_PlayerReport_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_PlayerReport_TA");
		return ptr;
	}


	void OnShellSet();
};


// Class TAGame.GFxData_Eula_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_Eula_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_Eula_TA");
		return ptr;
	}


	void Accepted();
};


// Class TAGame.GFxData_DateTime_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_DateTime_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_DateTime_TA");
		return ptr;
	}


	struct FDateTimeStruct AddSeconds(const struct FDateTimeStruct& InDateTime, int Amount);
	struct FDateTimeStruct AddMinutes(const struct FDateTimeStruct& InDateTime, int Amount);
	struct FDateTimeStruct AddHours(const struct FDateTimeStruct& InDateTime, int Amount);
	struct FDateTimeStruct AddDays(const struct FDateTimeStruct& InDateTime, int Amount);
	struct FDateTimeStruct AddMonths(const struct FDateTimeStruct& InDateTime, int Amount);
	struct FDateTimeStruct AddYears(const struct FDateTimeStruct& InDateTime, int Amount);
	struct FDateTimeStruct UtcToLocalTime();
	int UtcSecondsUntil();
	struct FDateTimeStruct UtcNow();
	struct FDateTimeStruct Now();
};


// Class TAGame.GFxData_ClubsConfig_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_ClubsConfig_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_ClubsConfig_TA");
		return ptr;
	}


	void HandleClubConfigChanged(class UClubsConfig_TA* Config);
	void OnShellSet();
};


// Class TAGame.GFxData_BanMessage_TA
// 0x0004 (0x0098 - 0x0094)
class UGFxData_BanMessage_TA : public UGFxDataRow_X
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x0094(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_BanMessage_TA");
		return ptr;
	}


	class UBanMessage_X* GetBanMessage();
	bool IsPermanentlyBanned();
	bool IsBanned();
	TArray<struct FString> GetCitations();
	int GetSecondsRemaining();
	void HandleBanEnded(class UBanMessage_X* BanMessage);
	void SetMessage(class UBanMessage_X* BanMessage);
};


// Class TAGame.GFxData_BanManager_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_BanManager_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_BanManager_TA");
		return ptr;
	}


	void OnBanMessagesSynced();
	void HandleSyncedBanStatus(class UBanSync_TA* BanSync);
	void RemoveBanMessages();
	void OnRemoved();
	void OnShellSet();
};


// Class TAGame.GFxData_AdHoc_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_AdHoc_TA : public UGFxDataSingleton_X
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_AdHoc_TA");
		return ptr;
	}


	void HandleDisabledFail(class UError* Error);
	void DisableAdHoc();
	void OnEnabledError();
	void OnEnabled();
	void HandleEnabledFail(class UError* Error);
	void HandleEnabledSuccess();
	void EnableAdHoc();
};


// Class TAGame.GFxData_AchievementDropGroup_TA
// 0x0000 (0x0098 - 0x0098)
class UGFxData_AchievementDropGroup_TA : public UGFxData_ItemDropGroup_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GFxData_AchievementDropGroup_TA");
		return ptr;
	}

};


// Class TAGame.AchievementDropGroup_TA
// 0x0000 (0x00D0 - 0x00D0)
class UAchievementDropGroup_TA : public UCompleteTaskDropGroup_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.AchievementDropGroup_TA");
		return ptr;
	}

};


// Class TAGame.GameInfo_Transition_TA
// 0x0000 (0x04D8 - 0x04D8)
class AGameInfo_Transition_TA : public AGameInfoBase_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_Transition_TA");
		return ptr;
	}

};


// Class TAGame.GameInfo_GameEditor_TA
// 0x0000 (0x0510 - 0x0510)
class AGameInfo_GameEditor_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_GameEditor_TA");
		return ptr;
	}


	void RestartGameEvent();
	void PlayerResetTraining();
	void SetupPlayer(class APlayerController* NewPlayer);
	void PostLogin(class APlayerController* NewPlayer);
	void PostBeginPlay();
};


// Class TAGame.GameInfo_TrainingEditor_TA
// 0x0000 (0x0510 - 0x0510)
class AGameInfo_TrainingEditor_TA : public AGameInfo_GameEditor_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_TrainingEditor_TA");
		return ptr;
	}


	void SetupPlayer(class APlayerController* NewPlayer);
	void OnCreateCurrentGame();
};


// Class TAGame.GameInfo_GodBall_TA
// 0x0000 (0x0510 - 0x0510)
class AGameInfo_GodBall_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_GodBall_TA");
		return ptr;
	}

};


// Class TAGame.GameInfo_FTE_TA
// 0x0000 (0x0510 - 0x0510)
class AGameInfo_FTE_TA : public AGameInfo_Soccar_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.GameInfo_FTE_TA");
		return ptr;
	}


	void PostBeginPlay();
};


// Class TAGame.FXActor_GarageComplexRow_TA
// 0x0000 (0x0360 - 0x0360)
class AFXActor_GarageComplexRow_TA : public AFXActor_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FXActor_GarageComplexRow_TA");
		return ptr;
	}

};


// Class TAGame.FollowersChangedEvent_TA
// 0x0000 (0x0060 - 0x0060)
class UFollowersChangedEvent_TA : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.FollowersChangedEvent_TA");
		return ptr;
	}

};


// Class TAGame.EndRoundComponent_Tutorial_TA
// 0x0000 (0x00B0 - 0x00B0)
class UEndRoundComponent_Tutorial_TA : public UEndRoundComponent_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EndRoundComponent_Tutorial_TA");
		return ptr;
	}


	void EndRound();
};


// Class TAGame.EndRoundComponent_Rugby_TA
// 0x0000 (0x00B0 - 0x00B0)
class UEndRoundComponent_Rugby_TA : public UEndRoundComponent_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EndRoundComponent_Rugby_TA");
		return ptr;
	}


	void HandleBallHitGround(class ABall_TA* Ball, const struct FVector& HitLoc, const struct FVector& HitNorm);
};


// Class TAGame.EndRoundComponent_HauntedBall_TA
// 0x0000 (0x00B0 - 0x00B0)
class UEndRoundComponent_HauntedBall_TA : public UEndRoundComponent_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.EndRoundComponent_HauntedBall_TA");
		return ptr;
	}


	void HandleBallHitGround(class ABall_TA* Ball, const struct FVector& HitLoc, const struct FVector& HitNorm);
};


// Class TAGame.DefaultHitHandler_TA
// 0x0000 (0x0150 - 0x0150)
class UDefaultHitHandler_TA : public UExplosionHitHandler_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.DefaultHitHandler_TA");
		return ptr;
	}


	void ApplyImpulse(class ACar_TA* CarHit, const struct FVector& HitLocation, float DamageScale, struct FContactInformation* ContactInfo);
};


// Class TAGame.CarMeshComponent_GarageComplex_TA
// 0x0000 (0x0948 - 0x0948)
class UCarMeshComponent_GarageComplex_TA : public UCarMeshComponent_TA
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.CarMeshComponent_GarageComplex_TA");
		return ptr;
	}


	void OnAttached();
};


// Class TAGame.BTC_BallWelded
// 0x0004 (0x0090 - 0x008C)
class UBTC_BallWelded : public UBTCondition
{
public:
	unsigned char                                      UnknownData00[0x4];                                       // 0x008C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.BTC_BallWelded");
		return ptr;
	}


	bool GetResult();
};


// Class TAGame.ActorFactorySkeletalMeshactorMat_Products_TA
// 0x0000 (0x00B8 - 0x00B8)
class UActorFactorySkeletalMeshactorMat_Products_TA : public UActorFactorySkeletalMeshMAT
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class TAGame.ActorFactorySkeletalMeshactorMat_Products_TA");
		return ptr;
	}

};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
